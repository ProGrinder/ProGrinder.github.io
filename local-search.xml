<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2023-07-03-组会</title>
    <link href="/2023/07/01/Seminar/20230703-%E7%BB%84%E4%BC%9A/"/>
    <url>/2023/07/01/Seminar/20230703-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5f0254972115f6c1175e8534b2fb084782280811668a544f08e17901e18e10c6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-06-26-组会</title>
    <link href="/2023/06/26/Seminar/20230626-%E7%BB%84%E4%BC%9A/"/>
    <url>/2023/06/26/Seminar/20230626-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3e9cf46e957c90f4ae3f0b242b4b1524fda882709895bedf537ac2c8fbd278c9">af01d0b7d63db801117cb0ef9676516de60ea7379aff00710d9a04271f21054eb0f67f1818b90a7bef3a8aba005323ddeefe973194af07a823b1e4995cca52b5ad8fc8daa6ea2de1341cb25d62e33b2901639c3c228008a3d64abcc7e2cde3a1ff20df4f68d2a53c073abb12890d369bd3494afbcfc49316a3dfbbcb66f7befc7b7a332ebd997fe0ea5273f43c390e17e75bc78b5c329f26e1607abee725c75e55278f966518caa1df087d984e91f40b01b093818f7386dc0a2859c3ebce82d9261c414283226c44ff956e52a9c1894d593d14c25d393c7c6181a08afe02ee1a72a4ac03353d9c6f84fe6bbd1a124efd6dd3d2167b354cac9b35f546d6f98fc1ea2d4a71b7475e5ba3a8e11bb9814b0331060864248237de729477e98e5b64a44b1d91fbdfea3cc3d7226bdcde7fb9ce2414b5e6a93d1f81528843430fd0a749a340a61190b1398d4623e09b8a15ab631e83c72fd938815a1eb83a666e357a52f615f4280f1c57b7a8ed2118f7b2eb8a949e11575460ad8b4c7c4ae4526535db63380d5ee7ba9242f2ce4b5a544597f9bbacb00c5a51ed82dc9e06dd2fa2ff1af6c1037d9bfd671adcb1b7fbb5a95e48e2c1db805282d94408cc8ed6ebafc9406f306e6636938ad3128699307e2a8c08bbeed16e40610fcd018c4b91bc77a9d7df60615822aafe29dc093e88fbc5848d522e05a6f65ca24285bb01a805db6c040ca8f713b9dd8d79a658abb91ea3b228bbffd191596f8aea93c878394caebae9da04ef323e82682f9e772ad70572ee239891644d57f9229ebdc35439bbed12815d216ba79e48c7926a289e732084f2bef1bfa19c32ad1ccf87a472201f4d058493f0ea18ae36946126cc90991f785731ab3aa3875de355a5fc43e865d3d59b4c5f76dc34983560a932811609c49dee7e097e1be46409293488bec83832bfe8ee01518786f45421258b52d86891b0f91af61ca9b86c3b22c668581ca2278ff9cb08646c2210d59de0ea79197ce192308f916e63c60f128af7320b684218eea7cc2e94c9bee807a89e08939d223c6950f403f3cd6b6314da9d3a801515d166ceaec5092406ae112ebe39147871d6aa3a0591e393235d5a4027d863b4ac88ebfb383bcfe27133e298f69935ec7aa7100eed8be7025f74528e060b4c9a87a630c17cc84c4ba7719905bc744906cfc579a74ee217ed229af9ae98a32d21a8d69b03accea794d4dde50995ed74f627ef0c9a46b13e97c63497c32dd44387e5d83b0ffe6f51c051de1e92ae35d5da610ea5815a61d54789f8df295228aa49f7b899fdad054d146332465fe364f8c687a92b7e048f0d66787697b1975e10dd54428f52fde99107be2c81745f51f372741ed7891f53d9727e7dde8f2fbbe05739b6f10ef7fe220d36d9eea10a5c386b93368d5e909dacf3aba0428f35434f450d17fd61487015951f8b86bbe4816a1e0ff2b57a1147c1a24e931f5b064a6e6c2662f818166f053c44355877059ff782c3be0b485b3daad2912686449913934d163a4e8b534c3a996df43837a41779e53d3b44e7a0b2cb44235bb6c81010b965ac079f229b14bcdf385fed87270a16f445328e293a348651f9cf75c5e743c812cf3e7646aefabb43a313c2dd6f987a256e2425fae471e333c8204eba9bcc542974b381e996bfd251897745f30a2b7411b224aaa2b3294fb5d6fd3e8d76ccc7328de81b2e583a6e020c0147dc2dd36c04f142ec8c15fff8562a0d42290725c1e982f1dcf99579ddc56b84d8bebea11cefc22f54e62e82c765bc53657e5e47b9c5b273a6cf8e239f127f42c3c9a65b566e72ffe9ab934b4255d3848fb8b038f5ae0d57e028c55e1f2ac740c0a9b2f1b48b197a3d7b162b9cf110022a38d75a03b9c4252d2ff972419fb120a07811cf7c2786a4322b4d881f35a4c30f17c64e93b4943a5dc70b7108cc1666cc13bc33936e2a3b7a3fe0d606003622ef09101816c67640c7a952190d49411afbc887162c6b9ee4127dd1176d7c385e3b1b5f55d4ee1db7e7c68a4841be53c9c949eb3f2c05454a2cf36c5b527bd0a1df9011f2a186530843977b1092f9362e8f6c35b3b7153e8244b7df2823878e2e7bfedd466ca9ada82df3620bdfe0c63a705a5b30ae3e80f1073f23810a881a8a02783c410b59b090422e4e4a566b4793714adba17ab41e07dea30045a4674dd54bebe366c370eee4aa2b0c40fbec8bd5239bb4d2917389b9f433ce6dc420b783b250f1de73266e5f1d19c4e6c635c2d0262a57e6e6e990df1626ee485919741cb3d967e3ac0e29a3caa261a9b766e240d3d9fab5ed338b50c4ab0636435d9543e5ed9c488794472c5a7f75482c87a66e78f45d21c560a03075f106a185e1542091fe5d9d9997df0ced990746ea9db687dd248abb324a32f703d9bd2a844a81d3240a5fd7b2bae05d45742925c608c879eb8c6b3b1422162d49f6c6dfad2e63a63639e1e352eef9f2a9102d58ad5dbd0963f233fb9330247c27cecedf459c78ee73fd030e10efc46421aa861ca75d4534a6d04eb5e7df0c138adef0f85f5e90cf37512e73c5ff3f3e15fbba345e15781571504ff15d42ae74a543ae59c72eea07494ed316d1120d5d850d426ab0ef6b46c84f771f8f075f899fab5f0b9cc8eff95f3eb451fb1501f07e2f823d14bf603c0a541740f9adf12ab769179c7697b50335035be269b1a6e00da6975e1dafc6ca8ac5e10fbf0816a874c3766257180395b41199e27f786652e00f8f62c3d673570d0f7220e954baf8f0559b5257b534a7e2edd9343e9d641351a4465612f240ccef2b9fa3d581e00c0e8428050d48509f4553ad23846c6e5fcd18ecd9215837a137786b67df9ba6f8dacd77e66f13ebde795ff66a4c939ea8c4f9cbc913a76d145680fc459aaca4bfe75c6e894e990e37b4c5d3d6ec4326bc71cd5d89efa0529c83e4854a1b2f97f67e94fe4030dce40133fbd0672f1f594d9d175910616c4572bca01a250b3aafb9d2cc1c16c77c3e41c6e4fd3e21d33a237200ebc29f8e8dfdf1b4946007e6eba7d289bd4011be710cd43c1401808977499b01a0881d10054aac1284e58674857467a16a5796ed4a649cf751669a012e6c09a318e92c45ea71adc5336e7184772e2cd5feca8c063949c083e946b29f188b5e67735ab0338484244339146277e62c8491f1bb0cb3a3a13ee86f2d901f1042465edd250dfe9b40cc3049e88bb8219de47ffa4f9c7f5ee790fc058fff014e2089ede15cb7f8a224e7734142728d2ee13c78926c4de25a5b69c522b981e336e9fbff1274a35cce253b4241fcd2dc30e81716e7d60de1247c9e8531c2bcb7fad35415d71035f5c784e704433e9b3910a3201e8586afc5dc8fd915cf5972b2d0b33c4397e2307c52b071dd313a4d457ae6a8c07bdd4260b1bae883096087a16db546e1435575e8c76429581ef39c421579ddc5f152890a9893005982d8a23ce2687be421e32d98f2063a1cdaac24ce6288dc5f85cbfea8ba95fd499ff6767fae73929ba71f3b5d293968d5cb40348db846bafc403d827a0c8c73af9d13d36e6e97e01fdfc40db4b5f2ed9760cf9c0e5bb09aab0d254ec6c9b1d3aaa5dd40707ea02ec7599310bfd0ca523b37c27f93b10632fd454410b0c7ebe77da608be2177b9c444be486a5a8248251dd3a2ec3c80460e835cc5c38fa86ebc0b85c023d62decf6f60e361182dcba27e1c1183e14d32ae576446a2f93e2abfa8429a7486e2ec6d37c00873fb8f8fb195c98c77fd74fae94ca53595052fb7b1f2f506e8a5935f8fcb45625efd1ebce53705a1812ec962ecbfe62ac7898a04656f300524c7bbc8dfcb19cc65046561fa455626c11510224e9b03abbc1b7a3b68eed24e724406099d421877adf20ddfcacd4dcf3f78fc17f5618e24bba19e00dd32b130e63e083583b1f0750d7963c91cc457449ec75ed3d6ce3b58d968f63a0faeadaed1847fe0c81068df5914cd7dc0c1393cff2e00c4289772dd64f74211687031ece5ee97f25b67bc1d9e03521d677a864c226aa9abb05102ffad91e493828180316b7b32783ef17ba2213b503fc84999d57adc5bcc35900b55f14f235448327fe80ff2ef1064311bc0a5bdc95aac377a19f673fd93c3ca9479b58ff971749b0b21786256c7bb59fcf786d11fc55c5b9b2743fa1b17b83711f4191dab720928def9db5a8f80411259f379f19b3d3c7a0532e1ab6228c308de2700a5037f7545985b5c34f4c53574e091a8f5d75cc2c16607cae02cb502b70e9e438ffa20eb5f89be085fa1f27739e2c30efc86ed03d3468fd75a27fddbaa0bc8e81d1f5129cb2ef8a2297ac7f12740d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dynamic Coarse-to-Fine Learning for Oriented Tiny Object Detection</title>
    <link href="/2023/06/25/AI-Learning/20230626-DCFL/"/>
    <url>/2023/06/25/AI-Learning/20230626-DCFL/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4493c687338538d773499063116116fcd3a1903c9b7293f67f938f1f23336f10"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-06-19-组会</title>
    <link href="/2023/06/19/Seminar/20230619-%E7%BB%84%E4%BC%9A/"/>
    <url>/2023/06/19/Seminar/20230619-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="310829d836a855c9d9890957cf73d350b29d47a3ce0f39318dbd568f2633ee66"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Knowledge Combination to Learning Rotated Detection Without Rotated Annotation</title>
    <link href="/2023/06/04/AI-Learning/20230605-MixTeacher/"/>
    <url>/2023/06/04/AI-Learning/20230605-MixTeacher/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7e01412c3a24c005d18b3b5033de90d57e5dc2a383abd86965ac1ee1c15e03a9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>知识蒸馏</tag>
      
      <tag>半监督目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Knowledge Combination to Learning Rotated Detection Without Rotated Annotation</title>
    <link href="/2023/05/27/AI-Learning/20230529-Knowledge%20Combination%20to%20Learning%20Rotated%20Detection%20Without%20Rotated%20Annotation/"/>
    <url>/2023/05/27/AI-Learning/20230529-Knowledge%20Combination%20to%20Learning%20Rotated%20Detection%20Without%20Rotated%20Annotation/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="686d55e2b092e759a52e0c525c1e6b507cfb1121b1023e76813f4137f79b48a8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为域名更换SSL证书</title>
    <link href="/2023/05/15/Programing/20230515-%E4%B8%BA%E5%9F%9F%E5%90%8D%E6%9B%B4%E6%8D%A2%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/"/>
    <url>/2023/05/15/Programing/20230515-%E4%B8%BA%E5%9F%9F%E5%90%8D%E6%9B%B4%E6%8D%A2%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<p>域名更换SSL证书到底是怎么回事呢？相信大家都很好奇，那么下面就让小编带大家一起了解吧。</p><hr /><p>首先，有了SSL证书，对应的网站域名才支持<code>https</code>安全访问。<br />SSL证书有免费的和付费的，作为一个白嫖党，我当然选择免费的啦！</p><p><img src="/img/article/2023/05/15/9.png" alt="" title="证书过期" /></p><p><strong>免费的证书有效期只有1年</strong>，1年后要再次申请更换。那么这里我简要记录一下更换流程。</p><h3 id="step1-申领证书"><a class="markdownIt-Anchor" href="#step1-申领证书"></a> Step1 申领证书</h3><p>云服务器平台一般都有<strong>SSL证书管理</strong>板块，这里以阿里云为例：</p><p><img src="/img/article/2023/05/15/2.png" alt="" title="申领免费证书" /></p><p>按上图操作后，啪的一下，很快就拿到20张免费证书了！也就是说我们最能支持20个2级域名的<code>https</code>访问。</p><h3 id="step2-申请证书"><a class="markdownIt-Anchor" href="#step2-申请证书"></a> Step2 申请证书</h3><p>领到证书后，直接创建，然后就是如下的状态：</p><p><img src="/img/article/2023/05/15/3.png" alt="" title="创建证书" /></p><p>然后点击图中的证书申请，填写信息即可（大部分信息都已自动填写）：</p><p><img src="/img/article/2023/05/15/4.png" alt="" title="填写证书信息" /></p><p>申请证书需要验证域名是不是你的，通常是使用<strong>DNS验证</strong>的方式。<br />阿里云提供了自动DNS验证，如果其它云服务器厂商没提供这个功能的话，需要自己手动去域名管理板块，配置CA机构指定的DNS解析：<br /><img src="/img/article/2023/05/15/5.png" alt="" title="配置DNS" /></p><p>然后就申请成功了！</p><p><img src="/img/article/2023/05/15/6.png" alt="" title="申请成功" /></p><h3 id="step3-将证书应用到云服务器上"><a class="markdownIt-Anchor" href="#step3-将证书应用到云服务器上"></a> Step3 将证书应用到云服务器上</h3><p>现在申请成功后，把证书下载下来，我的服务器是宝塔服务器，下载Nginx服务器格式：</p><p><img src="/img/article/2023/05/15/7.png" alt="" title="下载证书" /></p><p>下载解压后得到key和pem文件：</p><p><img src="/img/article/2023/05/15/8.png" alt="" title="证书文件" /></p><p>把它里面的内容复制到站点的SSL配置就行了：</p><p><img src="/img/article/2023/05/15/10.png" alt="" title="证书文件" /></p><p>大功告成！</p><p><img src="/img/article/2023/05/15/11.png" alt="" title="证书文件" /></p><hr /><p>大家可能会很惊讶怎么为域名更换SSL证书会这么简单呢？但事实就是这样，小编也感到非常惊讶。那么这就是关于域名更换SSL证书的事情了，大家有什么想法呢？欢迎在评论区留言告诉小编一起讨论哦！</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站维护</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Adaptive Rotated Convolution</title>
    <link href="/2023/04/23/AI-Learning/20230423-Adaptive%20Rotated%20Convolution/"/>
    <url>/2023/04/23/AI-Learning/20230423-Adaptive%20Rotated%20Convolution/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="011a5ed4fa5846a2a7190f8e20019f0e8d0e0e402b4e8478385d8beaea854e9e">af01d0b7d63db801117cb0ef9676516de60ea7379aff00710d9a04271f21054eb17f84b37199a7150eb27b1c388e2476d8b8c2866587e8c6ef5adb0d97b9a00ec249c7eccb5b31a3039cc61a8de54fed4028749415bce7d2c73600e820eefb75555d3a63f7969bbcf9bc65c4044387325f1bf84f4fa03164edb8ea2c51a31dfe30b62685c9c9d4930e58cad63e059f5f6e9ad64aba118c0bd85d7a2e4b1daa8b981ae15c9d023a4dc789bef5b72766b7d78161db77deda46186d261ce030cf08c53f6424bd64a4cc93be020b73a110126992b0267da38814aa81f09044e456d228fa7ed9c5ec27bf3bf1d5b6b0b498b9672d7260888d430060d8380a93928e4b0bdfc6e75839de756208b971083f8b3eb7d15926f829aa2e461fd0bbdde16e1dd8e53c78f56ced85d84791a81d129f32151814cd95f80b5e7cbc0389255c0982043ddbc9aed7e988379e90245971c9ce4f5c07c89682b0572300bb5e6e2dfc6285c40584e06238a32815b2e693a819ab9d4562f52cc26ff43d8ca414f1c65c291dec1b899a6f96609fcc6a4dfc41372ca3dce56511ab164ec8135b995a8450bd5759daffa1e85d886a1b868c9221c0c7597ee1c9b9e148be6cd42701aa4dc192774e804b897366969df24ea65e9316f31e927e752743f302fe0622cdafe79af47a1333e5cc23cc43f3d08314e9d3b58e2fb4a56c345d3eeb433b33725eaf5ffeedc092d51e851b57cb04e8a29776f9077bf5c499794bb7f922463f712560acda5b727daa2ea9bb2820833683914cda3203dc80e84bb3facc7df1535e8e929464eb0e2e2f305d9986a136220f23f157c68d7492342a20607e15e9ba3d66368d22efc3781ed77acd39ee697004295e3e1c02e9b16f05b694fecaad7734db9c71b7ce166fbbb0711a4c16f6a06eb77f9c16e562fe885f6ce6f1948b56c903999aad992493aa02e36684d9df6b205cc685da37f5da2ce92066e898d49636c0e341aa1b3b49e6046505f414665797d491271d7dc2092bed5a22abb227abd207e93bb937ce148ed57ab052271bc43084a6d250699637379f609e29ff226fe1a1665342738d73069fd898e2ab46ffd181b1bb879233dc607896b40a52f54e6720ba750ba8b062a36d0c402bbf5a268b16d4b30ac6620315eda6a83ca5947b9c049dc144772dbd5a908916902e5f3119f932c33d49d86f93d710ec0ec537658e0806239ceaa6b6647f36e8072c0cf73be61c33a15c421b164f9214cd989339ab12c4323de2d581c4fc23a321015c7d7d06e3ca9dd1c828077045c888aec2deef272d80d9abf8bae3688944b57e84f1e361832276f9204791cf28f3c89e126afafc703cb8cb2c477ccd0745fac95a57318acd37beed642f1ea0e84a71f9afeae6f986a762a2fc619ff9582383260ed27f271313def5ff518277a6452341f7d819aa3de5b72203525d6b8f549c62306bba5c4d769e65a3f9f1c0365b24332940bb0aa80585a47fe23a65793b3abaeb384207c42023f27be5b2e55124b8737b4fb04966efc34a6453fb1c3abaf15ad30b91ef6b7d949efde6716938b74b5c131f50ee95fe585825c06429b6fbbab4827303d3c020e7bf19030635cfd21f4d8adefebaafd01ce2cf2fae8484dfe88c987a8eca54e1d8e172f71582c02653956bc6ab579aa103860ed09e8aabedd34bca2865690f4c5c4687f8a9ec666fdc5bf2a4836555b02bd88ba963fd6f7016c1a82084bc3a73d9815759ecb50f9ae550afc78fca0bca3a90e33f363414dc99e3d2e6ed7789804edc7db8f49bce963a9ebacd52223dae883ec24f0009fcfdf499a7a9c7be11cbba8af9212c82dd34ce2f0585f9fca5df9c814c477a98688db002299f8816bbfc3718bd903b3ce951215f01efd5c68c288861f67a099693117da7a132178a4dcf5e80e9a5d90b392a4afd5f25c928c3027cc8565186f94341d4d9524654f3c6c2a8876cedadef526a8a2ea34294c3111ac30b57f9e361cb7e3cd525769812bfad87a8d7d7307cbe5ca73423c040a1dacfe9a0d6732bf2281c5aa4f8ab6c7087cf6ff8ddb4c9a719f9b5c6fa489873be59bfe1ff259e6184425d159e8564c1bfd28fadb40038cf98fb11c8d7a3c68622f1fd7a3552ccb5a25b96ddfccea9e5c738ca13e892fe888f56fbaf0c66643e2b052414ba5ddb86b2765d371f706023d7bfc8039e3cd6ccd976b4bd7cac5e622e455dc72e3dc0f26d086f28139f69ad661cbc19e1ae82da6b79c7fb600b33db6ed244836513e9a5d85db6f305c4c373f9e11fdf77eae84539c0c87b4f1ac5d3c30052ea489324e3d39114af1f519687763a7289ca708e1424bb12a98005623ecd1c8edfd0959f23bd062d83035d1d960e0d2b3f9c9c117b5e915f84d828fb50d5f15bc6e33747255d2578f83b88d101500b70428bc687a24ba2a4dfc5cfa90641cc2618423f716c1de7e72916cd31e1eaa3e4d5e17d497dbce82ad4afe1e82a44b69c59632014cb592c762f2d9f7603830004919c15a719e760e80df35b76476f708521bfdd8d793d4d3fca4bde41993b331a5318c94c22815f244dadd8dc86b1bb0c014e4e3cd9da05069a063b4e95cf5035ad7ba09f425b50a614a9a2d1cd0c9942f3032a414e8d42404371ef04d648532142b908621c0007530b44414e35e4c9c67f413b1abb57ad3bc5e85a747620574f351e7916d9931605adc37716a9988f68d91ac5e90b205ad6f1a5a498cf399faa21f99e42192cbf5a5effd30d6587049585c58b633284d2746702da029f881042c77936b639cc3045a19872da231513d98ce9f3a825ee60cd23903fb1477ef31a7cd0e1e83889fa29323570f55131c4aa03b3691ebf411b2c28a25a29c3e18dbd5fff151c526b686bc8f61e99a656a3e4af06d446816d51e96536a846015dbd926ea3c705eb14b16a0f0a9dba95494e27a7d5bedda6f436bf35c4435b77426db1eeae5a9bdfe61350987e38fc8d1741484f150c8d0e857acda22c77a723c8bdb3fe9a21698ec95c9693dc05ee0938a4315afdbf780b5dea547b83a6096d92bf8159611196f40bf5d8deeb929206d833f58a81369af2dbf341cb17ebc10153e1a3eb27963f1cc8013b6d8c5077f4fe50e0d2617bb97e34e3e3b2ae8be52a29e03b5e8fba888a08eb53520903b45c514bbaf0d01dc72f8ed49c8a7c38501d82c0cef554a4ec98e5c20c202288e21eada7a1de82a89230df83bf0a6d8d68ee016b51725f2e2bd171522e776ed3091b6375788267b97bd885b730c024584c63e0d0322ad109aa1472a8b83a7498d7aaa12692b07a78b89cc85b8a95f37f6b0b5eb8158bd0bc86522863b6fde5cf07149d6272034939e214b4204b81b22c38542811459784c0ff8eb3acebc826773a0130f0bbaab6869aa8ed663795f33c4a4e196476a0bd556936633ed59887ffb404b16abaf97107d4e24c784532b7e8609ae639fb5adb619f4d861116a5fcf9e236adc4983ab029a9330be07cccf91e1786aa08efa2ce20dffde16f33956af491e29127b8d762f9dba627a3d1038d7001b938e0f69b55cf5cb21a0c5af7e4a72f344752f7f735ec0603bfde68c5bef755b929fa7fcb654450c43ea36aba56540b9c4f9fc5771c17b32ab5bd8e73cab78ba7dc2c8c23cb7436476eedde1caec5fd4949ae2d3c2277f42c1dc0c85f0aa042ec899905e23844b65cf036e5ec4ba9a6847961b2b43b7b5e00a4747ad942e704b94d00f5c6dcf9c88cad564e8a18244cb01e44ecac4df8b912a9219bc6a3275205067456bdb8ed6dfafb808a46ed92ca81bf43eb2f1442970ec5efd91554ac5deace1c3a46d576bb11d22403c3b4822416a13c1a0e4bec9842be0a18cbe343c10c672733632607bc4e14548d1b4a0b532e6e7995bff10bbf7d2ff5eea371d2c229aed30e68683adb9cc2aa8f3749368edfd3e9e8efdd472dd68631ebb5cdee8839e0f040964012a3d5b79148b270e8539c5f0a692793ae76d6ec0b210c60e032b6e005cc63a5cbc6ed4fec103bb73fceaf2ae0752fd6e54938da0dfcd196a34cd20309d34a75f436f50cc34de578cae3d69a494a0ae773bd931e7d3bb906f47e77f3845373b1b9f7d7def02a0a883f15686fac7d76a85248f39378a90d77c7739e8fe635412382164eaeefa01b079e7c74d16898c5e78c3eb05dd08740ed97df9dd7f3e4c0dc024451437c2236f965de9f0aca312daa459f518e9022d817ae93517d48e9cf12e8aa2324ae7314d0e325370ce959c26ae70b433a410610acc596cbaeda43847aa6e3520c43d68d95cb0ad6444895872089c625c6e7d664a744c4565f1e530961ac914e5d9bf460affdf417fb3d4e3205188151748ca47d349b402c63b9350e7ddb5cf0569d5995c607cbcf66dfa329b922e038eee6e56b3ddda589f84d974ba1a95080bbf3fd7a25d305155f79ddc82fde6d84f5f03e566f672400116a4217e501552e6ff13e58bfc4020aafec9944bbd2989f1a7eea2b56af10475c17002a043291a88c366efc0eab4458b930cda4e8dee4d3c1fb04156bbaffa7ca2ec3573b1b8f8958f6c3fa4c21939db4699f4a789388051d0fe195377b2b426cb3039896a17111a592cc5087bf6f7d286979707c0cb3f24488a86eeb8ece05089ed2e2e24868321aba15c0020904a69c34dd35d1890bb2c538516dff4461bb95ad349e727c36cdcdff16185048636b0901502d5dabe9bf528f814deacf98f8e50b0d6bdd44173288a0f6d78de5ecfc747f6fafdd617ec151e8fe1e239bb940685bfdaefb0baba36e93aa80cd1f0ea243c84c6074f5d332c83839e4968be10203d9c1a5a4f5e3fc570568a7d9c45a100dece2b5cb9fcb2105f700c387e469b897845bdc7983e45ce18fd049f460a2579d50e5b4578d9cf627a91f174ba12a59820e805d7a133e74f981f1ca671ae07297ad645cbb020eebd5ca9721a7d763ed6847296738971194e4629c4b8b84a5a41d3d75616329a01b3d13c43073e298b7706cd66c6d88f9a4657d336ccac003a57f67866b9b6047aa990d0229eeb21c2a91b6e9f1b041ef1c5bc45f2e2ccba1b9563a91bf3c07dc50fde02f2344e5a258a9b6cd88566ddfc14398be93dd8588e9b28290aa4c29e6621929cb573af177d006318dc784bdd382354eaee0763c463c5e4f4ea44cb6c5cbdd3f5b8753d2b1d3455bbfae9d5cf3982fc25c4b6251b2f00872f65ca1de6642ec8ececc64821c09f3e248faef0e3a17c0bbdee78ff9534815eb8431fa93db982cac670394949d27aed199f5694ce5171f87d40555cfd3804748bf62fcd2ad1953833cf0dbd4b683b77eacbdc5fe72f4aa7bf3e7cc3143b19896b9ccedf77bd06faa8f0472e27f0d30e0a02ac6ecd967b47233ff288bb35bd54ed41297cff077ac6784769929bb3117fe60ad96988251bcf5e5efce3d4802fbe5bc04afec3d1a3f8d3122da1a674fa64b97b150655730e940d2153f3e5f21d12099a84202676fa965e1813628cd88062e8949364319c7421f883d45dc2eab60257df64aec3361085487720c403b442ea398753be0eceb2304061033673e49ad73055d80329f79b98e51c4e95115323a9485b6b59bd9452fcecccf675e5cd92a4c86c5f9c19c5e5c48c4425341eb889d5067409f0955236a3700af587a8886b8b3d2cc128ec244c48c236ac7fc7774457256b254bbf4299763261c1e2704ee5441792d05d0669c12f44553ea6f5fcb7765018eb2c7fcf26d6204112c9b383b2aabb4558630c7d558d655da395292bf04e59826cd97c9587ae6bbc6860d20f585e7fb199ea289c3095bd5d36dc5af07a3223d142394b01ac58cd2788fa053f7dce556e05ec93d08099bce05f4a743706786c0e72fdfe96bc3b7b36cdd0aece4c3fd85fbf55161e06fd8e9fdc4d0db5e6a45f3a55dca90deba86759f842637d0f3c8cc8d9f4935d0c398d398f0cd6cda6f9fd66ef7c89c227b6896b52517747bc13f4c920bf55e2b97fcb9e2b3c5bb5472b42c4094abdcef189bdfaae3c32da40ed07898aa537dec4bd09c15d00cd37fecd2fee9b82bad6ba073dd8e073b85e97230a02c776d2b4ae48989fc468d75227c2b9ec3b39e77f210d909d8a247f1df3eb8747c0f77eadfa68dc569fb3a31e81f77b008031cad5ee68408a05a78d189a747d4627d02b7c1bfb1b60153c380ee05d958f67c2b0a8c34236e2311213e01dcda6af82aec6b458e6e902280e677105ca2d35e12fa96921930012962cf93a1b6bf5d9a20cccbb054fe50da2373768df7e6105e5ed6e300d40c157413e6d368570818d51eb9d46da1014f72f5156671c438ec8fe524f254ab5511a273c53d9d18dafdb0c8e4153d2a352d8cf2db83035557412b3519e06d474725ad3103dd018c66561c3eadf29bbf7b60845fb37e0bb46e0acf5754e03c68baefe57d78117fb3ec59a133a1e7283eb97a4b0080994b1d9209476c8cfcf8b04e3f95a8b0c0e39e2f69acf71ba6647735905dbc7e002da2053d7768bda8b8d3d701d294083c27b4cffd83d12880f5b7fa69022b9abe038f1f18ae3ab6559150d53d532f53b8fdace5ab0fe339d780ca2141ce70813d6faf274963d9fc9122f017ad9b915ab5a305f690ec23e3ef87ab28942906a779f2cbfe14f41d684d41b2d00a093a5446b784d49f5df6549fa315cc392da4c0c5d56790f6dfca8be3df977b69ecb4b96d1a2ebdcc436a666e8d9934b6c4c66fc02167024f811dcb8aec5428d73e7643afcdf962cbb92c37c2606fa79e3315051ee04675dbb191d02a034bcafc08c94e78b09166b04e747e11c27287174a73fe2d6cbb7f6537c0a39c1cc31a81eeee0589ebf2fc9c00b130dc0c387ada4b80039fd1e7b98d7a423294cbe7542c84a604f51347e5d539759587f143e7dabcccf7827389256b35917a3897dbbccefc113947e6453726ab9e24ae5c287fec9919ed2960155c35faf910303d8fb3c9891fdb3c5195289b225ca6b97d1ec8f855a9f55e33e4d57157ed3d1749d7c44b7e8ba6d39547eb2953cf0b292de9d2cecfc6704a26699201bd02c776a4b306cc1e2043626cc5719a9205f9e1b824b16e69cefea9083b6885ea0f9783e67a4b37a030243fb158920fa21e0e6cba7a5edd64cffa23eec4f2ebe6546f3f2e38ca1979573fcee4d27bf1f289f27d478aba04d212d7444d7c08e19a33027e191dca1107a381896d746384eb640eea801c99e1e374de085d2b6f574d9ed604d54de65244ada5e48fdd24e118a092600ee8d33bceff5874dbd860cb52a51e869aa5c793c1ddb623eaf54f77c1d45cf7ed8217cab17d56229ad62b011073f2a3f0bf3e6f643dfcc765fc5c3008330712bdf82446acdcf8896af9121721e89feaf909a2f9b10a35d2340cf842787ce1b1890e0e79c312c91fc58fb50358efebdc64e94ec3b8169149a48d1293ca271dee4f91d68507856bda85a19ad760b17f3b47382cea7d8974c272b34ef97b7cf6877af9d740d0fa56088e9187f90844c4ca84d1653397f9ab62c0c987a88707b284c87912cda958529ee0255486be8b0936612368a9988d8997683e6e3f61272da7c3c89ff2dd28fb190d4f7a9d20db514c89529cedffc7aa5d2a98b511724d101a2b2b731faf11e1b9f7b05bbc568cb3aa17a555d22b5e380fc8dd4f9b3da202936e1b090ebebc0b7a40f88f059131bfe00eb0421ec53c169440df0cc0591e735e72bf08af6b35091cdcd8cbcedbba8d0464b2e22fbb9aec73d7f2da10ac04e836a0d0d6c5ad99eba398f8ba9008ef860cd1b35a798d94b88b6498861c367243a39b3a87528d7e6abb2e24cbac281ca5e540311ad31246c58bf7ae47707bca0ed519c2d1e8d9be1378e4e0e374c69bfb8ded68767b9382b3e1f4c42d0da5d948c9ad13ac7d42f7f1a66a189c68293f38fd7fae981b2a2454abdfebf3cd250bb4103cc00fc2c8cae83452a66b1c8b10cbfbd3aa9759d46f4f97ad8886144a0c9cc1efd0f31f4858dab62d93bb0972dfab0ce1eded35d912f0e075cb7c6e738c2f8f0035a9c87eeba458aeef0d6e6a3412d24b6347cf4dcfd343968fed45d2ec7fb5d9adde7248192398e68b434599ee477b8ae513228ef909adb26453cf64faf027906754d0fa62b82213946084702537b098946a9529b98db0eacf8a2d21b04e6943e26d644d51b9472a2e1904643463d2148ed1c470a1845f712479efdd6f8ba8d1884c17ec75fa795df2dc1cca478e1bf99b86300941ac7a819df5ef7cb01bfc51433cecf23fb95e1e6638b458d03636cca27eadb9c641cd963e5dff5eb8b7cc067229101d70fb96c5ace0ba638a2ba02aebcb4aef58ab928a7dd47b421437e0d159e3adf95827539ba9c73ec52d11ce6b239b14219a89ab395d494ee06effab028ec67ca136dfa37ee75cc18c844403023abd1b47074c818fa74621862228eb1eaa1bf80a609eebf3c7e131f8af29347d611cfec5d926a7bd2cf622c51df4841c448a594488773332db82f6855ab4e385a8370f4daa46d18a9c00897227e4fd33be9dd750fab3e270404369c42ba87d72b094ee86345455a5fafa830dbfbff7bb1a20f20cc2ef914595b9748eb841cf6fd1d2e6ac26de5708119a15827b0275e0aa34847afb18e21ea96170027b54355c1fa62989a1d7a40dd4353253afa1b7822bb967ec4958ce14bb3a5d5ca11237d9fb915b012a74355ac508cef9721ee179b2eb8579b21b90a245e38812ad1fb74d3253edd44beaddd78ec48c025fc96b4eaacfc913c3b11956e84ccc34104c42e0da963330fead2d07edc32bfa5848dda2d3266f1c58af77261cc2051979a9e95f657a5b4a55eae51b7a571cfbea101ca5d4e6d903b657d49e9227f820361a3232c074199ce3ce996bc2a436073eea9a3deab763415c3bfb0dc2862d160300bdab3eecb162193e5df2e4baf9e3e8a21138ce054e38d8ab869223cb47f65e4b620499c0ad6ccb2f7dce2900af08bc4aa694d821fb2c4ba56de06e9ee50204e926dea4b336021c7e718205b510969142578b0597815a82ea9b74e0a63a9744262332ec3c31709215f338b2c3fa175f93da49f912ab4ac84fd7baa8f8e182fc105beba2d9e7ad4a6b92a5beb35ff010176ef001b693b067c1ad87d1c0d8c4ecc625b8cd53b53b2d1382b9347bb1fb7ccaf656794dab1d11d069aed2d0ee40ff744895cffb0f75a8184ecf7daa50a43ab534bbdeaa01bbcb76025a7041505477e57584f7050d5bcee9a36166d08e23440b16ceaf8d358caf99fc82f75fc8dbb9fcc9f007adf608ae1c02a4f313fc18cea2658ff6d6e3ef2af0398f689dc36b35041ca252b7250d343f960777ca7f17dabe172eeb78fbbcbe5caa655b889b1864b6b9f4edadb2bc08b4ee458d4ca7633d81faec34cf52c3a607467c9c936597c6174820a37e9baeeebcab12a28e10b56d1b369e6af21307bf218b0c5a9fdc6e0ea220ce6f44597ff74d13cf0a0123bff650c0db4426bc7152c95299eee19917c851242e95229a0ff0c32aac6af2519d907dee29408ebde457305656bd0e74509823ba0c8b43b91008d1b63190d9a8fce2bcb0bc00c514953979c09ec56110826a740b2b08767bfa5d4916396cc1baac663ff4828a0e5b357d5381b831407f3d8356ad45ad424a83adaf2d1c586c1c5e1a9e9de319695e5ae9dd98e336121b07fc7f9385730fde7e3e26777ecc83b97480f707dfc2078edfebe1157de1c36b5fb3e4e01c146ca6bcdd27d0107ddcb6f3655a78e35d7375e7300509e970bae093ff02c3b3336973696e773b68db5bdeb7d24b4e19ac703f5563b72ba4bd5f1412dc7a6167c3d88e3bb0498c9182bf220d9e1395227cbefa3849d252fd4d3dd7395de48b338d4e9aeff70c3e6676d03aa5373639655e150cc0dc352c903536f43dbb8e76811a149961aced4bcf076b86d00ba534a2e5aff021d61c6990696d175aeb9c52cbb99e0f672b660a3224717ddfe8527329e331413be914463cce4cab33195135763384b1056c2450f1961f25ccd27ec69632e6eeea1ab9fd6fec896b1c15bbcf056f4f8c09e78995b1093cc33bdf61295edf157941bcaba321ff2d84e1735d666c59ce4713c497f93964858f929c2add50ee63e79a0b14f5585a7d273f98d6d2c68e33147c2505f225f1d1636fa3e46cf680c89a3c72c24e02d3ab88b0e14a4e173a449b8d8e2307657ca2ef10a0b4a2170b5a9adaa3da6afbcec79920d4c0956e7f1ae2975859aa30e20c0924a8307b4a78781ed60e06c95161d5f5ddab52b090613600010f2a8f49a221491a2d36708d241a1ac92e956df60cbf37cde5d96c141f98adedf21aa8873854e8d0c55a716323f079070a6559c05c6f6ba2800f604197dbde3ba714877d4e8b907df7ecefebd03feef7de5dfd7bfab9058733ffc41aa9ae2ead6f54f85c8cb39216485f479114435424aee4d3374ba034e097eab11d65608f3fa5936ad1d0382f61dd567645504f87128b59b8e1cee104d69008b4e3ec6cb8b664070765faa700803dd0dbbdd575623fe4b5589cfc02214197de109d2fca419fb7487801bbd9fc1132254de61389bed4256e4355abcc2de8f0496d43dc84d22fdffcbeefed55a69c4f9c6b2b24a754010bc472b6fb3612534dc0ae7548e23915b792e573d65edd50303bf82a405a25423c6c5f28cf50cfc1175dabcde7f518d2959385249f96727086b3160dac651550cd200b4ebd1158284203cf43dce57f3d557f05af094263328eeb779f60c1822f7c0a6b94efed4d32780001f8eb2fd3cefb24840116ac297cb8a96b74f57a85d6ba17d26c8d7e939323a1992250203a0dcc69bf5f67ada75c549615c661afb15d8ce1957a361afc6c3c580ccd0a480af44f6be569f00ffa6e09e0a8cdacd587b98824fde238179bbe0491df1e81bd2021d0f239a77c0222e04a7586ee2a38aff9118ddcb4437e6f81a92efa386faa329eee0219dd80bb53483852f6dd8f4a9cf59935417d94850a5352a381c3447c73194486ae82d4987bfadf48a5458cd032d19c76da640b80e56dd0dd92b2d6dfc8e372159bec4f6f61de94ea9a1525d6b40a70aa9588021a7c9a0fe3deaa2a16a7923590548a66696a9264e639ce0f3c48fecc2bec083c179802545c893ab8cc0f28603d5f6fc53a03ce1ca7dfc1f77efbdf736ae256b5cd4be632d71b99e8473e1a7ea7ce659c7652e80e84e64c7e09c8fcfd599957e17e743087f7b8c163fa79fd355b7565ae7a3ac5d436006b2b3e41872079557f169ee1d9d70c890a30e0136a17dfa88bde1a92effc1a21709bb4155a3b3846c9c1085819671925acf6341a20809b2fc91118978a777f7569e9bbaab379e6191ea8825365281dfb3fae2e253cca58bcba9a04d94377be51735db0c94d58da2f208e14c0a69a8d8552ff2604dbf067c04e0417e2a097caeed42f4ac130207de6047b72f4ae38bfde604aea0cf5ccb090ba50155a9a51b87fd06df29bed3076f4fa52486d368738eddce52e809f35b32f04c728e97729fa9457b35366fc7d8f57c72679d5089d06a35a40537a2d6c3b296c3a50cdf69e5f1ce0a70d81f41a442cd0ddb734b8402d0b0fbcd9c4a8b8805a3e4960f11599f1c0cdcd61447a78a682eb4d590b017a7a49c97e89a5c87ab5a9524333df2aa3d5ecd9038b1b392095841b98d31e3015581090a879eeac9339cc2311a262bb0ee82e5c059fecb10d1a15e75808e1fd295fd23b00792f21170a79b6e097e8828f1c1359f8479c97a1a16ba21ee619758c345ec1ea6985e67465a7cb2aa7f4f27aa8c98a3f70a24b66c874ef561b4519444ee6295d318e4ccf2f45621d17b6aaacf371f39471f4cd768afbcbebd2a9d950c517369b54d3deff6aa319bf3529cbcddce696adfd8a9f558a999fdc0f41393ce8e6118746ab3a3fef97eee5f15fb81081a5f50aad4968be82f8775945b9395290db7d36f2d14be614264ab2ed7459d1d337a6144e52af29c1c966dffacd56c86940903d8621011ef882cf120265eba8687855b0b559de0f07b7db23131a4d925a64aa0cab218cd24d3d267f9f79b1d09320439bf99c24da012b202331f79047c8ba1f9101d51ed82c32a33fbb6212e41a64cd187b8a4bd77faaa33c749d618d10441ef98ec36fe426327112a148027de189f9966d44825b03b4c289154d58ae4ef692848d28553e882139c84baa4f82208f68d4e13b2e1389d285f1b548f78c793e42654ce862a083af1529de62e0247ab72ad9210b2a5690b443ae0ecb8ecd07ef4583a94ae0aed1156f675f227851bb00305e4823139bbda268f4fc0f6125a4d1ce0028ccb19bfa5d680654875800af0945bc9a0f1aa9f0aaaeed0e00f9950e20e6b23e004cb7b1ea202a228280e119c88e0661e7741e48cd3cde1f06407e5bb3f33a91e22f8b01b50e37cbd6dde7b3da16871d25b0f36b0bbedfc625450759a5315147ca560388af96afa4af2781c8995dc6bbd3227d90d34b915d050084534989858be914c09d5aac16612fbe0e194e3e86efe11a136388c86a3688701a23036dcec206d618b4e8d7b49d034c702f6856e01fd4a0e57ce210533015a950ab7a09b55e01395364b1585faa1b36db4c30ae220e40057ee26327035bfb7d49672eef22198b370fadfd651b55f2b3aeaf3bec09e4161190fe4429f951af23628cf801dd3a85d142e864050d2b1cb1cc94ff2fc37cbc1446429cf82b8688b5ded0f9ef3ad55ed960e8f8fff27100f26df2d8cf8a5aedf69f7eb05ddc766f6620faa84b7c7533984d82f3d4964580356d6ed475eec6ea3fcdef53de3a3fff339e0a4d57ff229832c419b54284a9e94536a70b88e15b6d1f3f3cf3b83bc8d85df41ba473a46e7da9a29040f318831d39ae1fbc5785a793b1ff0e8c08ffe1dc1784abc450c70642c23ceef1e82f50d40621a12f5654d902ffb32600ee50373f202c8729ca7304da16abf67b1fd730d65c25c411f87375929c4c228f077a262c13e62e3561f4cbc300febcf1d4a1ec538a927043273667e82a1d25a0234aea59b1fd8dfaceec90809037d123459bf41f5c8eff2cd55b344031b470867da4ec272d3e6843a9a60d8e8bea75887363ab40c02c1bc0854742e4f0781d72259b58fab5c14a66d396981503d39c0dd63c275fcc5744274f7c7d0e777e3d3619ec84a5963e1ac6ed3a472af33f402be0380bf78d175186a2374add95bff2f9200091fe2f26bdecf2b85883803be1de26b10e11d8e168406f5fe446c86f9a334f8e71b1378bd4dbd078b30ddd696cbb524da35ea85ff09441d3fae5f9175cdf54eecc8430c07abdd9bd837630aa61d62254c8ae89dc1aad87e89d600e3a513c8903de446105fc324c52283ac46da0a055b36905c915ccc3ab220076459946e6a0c443aa540a6fa05b4f39a25e557a50ce5256dc503f2b1fccb3806ff8eead07ee61c8d58072a14de46818f88b6d3772c267164d7d31aef56db32dac0f6d77672209e5d7c7b83713e322c30c65750f2e00ac86b8aae300656fb0643c1e8654095f351aea3bbf81de7969a2275107050d380d009dad483302ce7c37412f43c2d4b39aa2aaa54e23df4c507e88f7df6782b07287c8138ca19aaf7cfec794118af60e1e994f3d874c04132c4438f594af1f49383089ab7c37d39e68b36e4ccb62525760c15962d094db686d3210c4597f416ede6bddeaaf60deb432b2903ae4723d522756f6c6178633e8de787c90b863e6c35af43f97d2e5384d45673d265ceb7f217d826a941bcfdb063d4b2b25444e76d5d93bc59ab9b7db676af0eca0343fec44ed7795a642044b8d62a1b600d7670ed51c4cb50a179ab756ecb6c8ace6fadd60cce06cd32e155899dece8991f27d9699634b199542c7492df83a1e351965b8e21d722adbad654803566e66ba8e73f99344d6e744a5687b1e1184f8574dadba0f4a42ccdde315a8cb1a6ddcf18f4b82e621695ae7d3018ee9db75fc26dadbfc35ee5aaae4f7789622238c0052b20f58600b6b2839056d79a423678e18ca0dc4e69bad9dc903901e1a769feadfbeee3f692888cc68d93e17cf6739141d3ef730c0b8a236d4c7ab54e48795a0b7e1197a852e18a0818af95eb126e53f3990f270e9380127273e019f193f0936fe3571652838cf694b4a33e8903393e6a97728ca92b74972832693ae2d616ef20555e4aa7da2243a8904b4b190c50f6d024589d7c9410b8f913f46f72839dad8b1542e75dd20d31494900afa45a9b52b3011343f95ae6d65f569e901783265c4bfff7a6c2a2779f2ff9a005329abc1b3cbf22bdf23cf1fe341198b48167dcdd73ffed766a4e475af5d76a8ea2c99f46e6fadc0f103c7daacdde10ec9dbb560012e505c23c3f4b48d432bef5af41d6adee342db776a347ca73b8e962429a47a33747da185a5930469654f6bd00a21d8003eb2482e2be8f8d01a499b9572da1605c8b996a095ab53013c6c79a64fcb7d2317217bb1b1c3ec6af880a5ad595d8f07b642259b90d18401e7bd42f8d513073b168faf27fd2c91a7c03b562d6482fc72421d3acaea529b8ef252afd05fe939d1975400e3d1d4ed904a1051eaf2d4d299e37eef5c09d11272f3c0a7b16758768d353fb9462f0c899d59adb0dfcbc83567e2449d1f40cfd6d7cd4488abd8dc4d580dd3e536d50d0fc8af96f49ecbe655ea8fd07af039f44ede03613e693e348790233ed22808a4bd68ff1a9016c44f30e386492f62b31672941d9f95469480529f79bdecdfb44e98e1370058831fab214c8a7369a2a927d5a8e844c9a02c06a312f300085f53a0bafb59350bff0892ff9486f5e154db87eccb20e1ab9b50e10595889ce6b55e45ef31f7ecb6279aa60f2fb6186aa97740df1342fd54c3161b54c471b740521d36f0099cc5bd843fdf5bc177d1db15414711ade2619a5c72d80fdee175cc04e442db170562da6d1f63e216a05fc5b4ef08c44581e1aaf5c00aa7d1c0ecb5e37e545c75104fcda234cc1571aca0f4380970a8643fd615d5cc913ecd8f6f5341564df750e2d3f0f67ea17c9a0e03f0a8e792c8f5b85a54f01ae81765f6dee0d5883220b8ffee48363dc16c0df15e3e3dd0e42df4549a303034077fd493e1c30559de27384cbccf31a0e757b8f8ba169174f1d2df5490f8d45daad58861a568b17e815376bdb24f5af7553ae77e433eed0107294b28c60d3f9db1558f6841eb26313476c1e79cf5349df443745089fb73d310afb1fa4e0553de71970030d53d711558a4a98f0c99372582af3eef1f776760a2a6f0d9614daa6fa23a6c86f469e48cc9909c6fd2ad4f9e04eacc82eff732e79001b2ffce3fc4922270ee9282106fca390fac15c4aafb0546df4620f07104af96fcbbcbfb74f7d0f00c7a4db536db1d5e2ce245c3c03cc542703bae772250b771ef729e4b33dfb921203d87f5db098c4659fca089a50742ed6043a56a45bf682321283b71dd6b59f4488ff2bf33109ca6da8de5c7e1a78c06d223bf3bc68750331edab1de6923862810e8de5ff3402577c98426a2bb2ac29059c62b2419067eb503f94c718213802eb4a0096efec92151ac0cfb33c7efaeea1814796577bb0bd457ed266d60be6081cf0332ae571b8f4a0f4fd258fc15eb20062d92e809ecefc5c7464074297c6e9c4d1c7200c199a0e2f0562649da3c9f33c8b0e3950b7b1a5543f0750084195917b7f40c2b8106fa43bab0302265a5399ff20c1ad37d94ee7ba4a8275f1ad3cd3791ab0a98adf9fdc343e9c61966739825d103a2a0d265dec69d4687f9d782242d4bf8bf22f41ad1c79361ebaf8570a202fc03fa362b3c8f8d37669e23412a577d269d54acd8abc0610187bfe3721a9cfc03793a5cf589cc79e2e33ba99351ca0b6890b91257acb3424db388a27cb5a4b8f1e0b97c7b89f1713d1b4c705078c6b6729b5d1aa1a1b4d9396afd4c4bed0361e14d02b97da6ccf93f046b6fcde148e24aa189b55e75d708c39584038fe51e3e21ef8684faa3263d8331e0892462bce25e51e4e97a2bbb433f89d33c98d184c0042a3e1421a0d73acbb4e4629d3b5c0b9c19c0693df13d27666c9a7aad0801d6a80ebb5c067d8e8d9912cf8c1ed397668d48df1894cc4ace8aaec2c1d3da1e910726f692c8be14a3657bd1d0ae88e871b1edfa73aa9e545a0b67fd8237dca385acea162d2fe5fe08d79c1bbdf589272190eeab0479b22ffc92d84d590aef055d40596f9c9a67676eba31145a61fe71d3ccd8124292b9f1f550a0885a8c765877ecf6c3ddcc003407b4560dab7bda86b2c7746aa28117c1d5b876ed80ecf38b5e69160f31ca42d88d14fd778a3475ce78c8b1b018ad355df554be9c1ee4f4db08800689e1f9748c3889cf7dd3333fb1dd4b6c24870acfd67dd8dcd71fa1bb1cb6eafda0b6d2df5e8c96744215004c64fa40d465cd355a0b6f42ff125b9f90d898107a2a5946e204beab7b10eae6e5a64d12611fa345e0ac9ee0df7f06a96a403245e087a84dd8d31f7f63ccc3ee3328c41bda44d64dc139b05f74903b75395daa6fb72076eec9adae4e88b1ccbd0a17342251a58315e137bbde9adf12b3c11f50a7154c81a3c805fc12db575b52b3a8d4577be33128fc6f82c21add7385e4f31ecce3d01fcfcb4f5b6a67582e671af90d0b0f8a26a3248345171f09f93f3f78565a8c2e4c529648925f9b10183519c2c99c915a2d35557a18c84899d477c1e362b31f02331d8baec74fe44c96ce1aed5bab4aef54742a54bcc0b74fade888dad9a251180383b382687157df178e30099b94c11c25fd00852d17b1d9fbbd28d074454348f3c129103c716f56e39128f81aff6b42624454392f0bcca0114d87a26f5dd3477afec960bc1e2e7811afe1c638b2a44fdf4ee8844ea4adc322b566362a4327d2028d7a9148085894baf110a80f84a391f74b7437b647f7c121f5a14c1ec91c2d56cd1a4a31918e19d20a074fd50ab9d05f8ef42197e2f1ecfec0794995f03e41667a5131cd6fc72577ea2b0d2a1c0f78ec834b3d477aae5ed4ccc7d1e425f0b9d3a912f90c97ac6616f726a996e376616c20f11974e13c7bb3f2f46603f6c5d2fe1712eedfc9e6fa4d493ad6a5d9e1cc4d0443a3d125fc678b1446fe98c239086f50d85ea0942e270543d57d0481146905bb911436c686376f248299e05b414a28d834463ba650c0b3a77c1c2404390b9d99321ccb9e03b0e0efe1993369938ccd3335247378cc4795ad51f033a7acfd6004c2f52513ab98021b1bae5787d7a203daf34394f39046795c3a49820636503282a49947e3f56e185e194396b716f92e8d898818f346e559d30df802906db5d33409e00fa5b29dc926770f3daae157781d424ef4ecbd74006d7f41f08dd3686d8836d42f472b795bcd101d329496668fa242e3383e76ce7484e3c9da064c7b029b6a8ca5d4ec686f330e6cf64f724aeed9e3074f6173954fc0b17c41163b7dd989c8587786ff8a4b8a3bb563d5b56930263375b4ee6e6d587d3f71ce7a8f558d33ec0a11ab4e00c4b43f70826761b26f364830b9a961974a992c9417aa8b5529276bfaad9873e9882413e82db39edfb6b9865fbfa363094929cd588906b11264d5a9145cecd3ed8c4bfbce32936542581d1706f4595a6b004093755a46dfdc0095c38c71a56122ec6742e4a5c5e9dc62737370e9d608c9d57e7288236b52141d1251328a062d4bc80b391ed52ac20fb48a51a8d5cea1cbc94c8637b55bb49520df654d578cc0044565e8e27a1ca70fc95ef6452839840cc84c4a93e229660f89152edb0d7d96b4558efef1cffd50c3bdfaeb3956fdc8d2c79d8f7df75bbaa130289438e78533e5c01326dc75b4c6d096f3a9dea6b9508f5d2ad46fee62aa1217f7d6a1910f2efc8ffa9dc89af985e790bdf82a53fe9fc0e6a17db5a5de7c346b007011310d82dd8c15f7abf9f76be21da9e95f82eeb2f22587f2793ead0dcd08dd0867553aca0bc3e1f71b816f89b900af31317236d0d8824055363508794a0003cf8f64a1edd8ade08f73c6c9d763ec09923cf849f6060734653128f4294ce2040049eb23915acc9410181e23842b200688ed8b6b75ea1a500c0f66b37e77dd9dd2fc1ae2e1972c193e4bdf1b9db015030bd6b8aa9a843bde591bf00f626e4ef962744a7f6b4a6332eb91ffd7647184023cd341168ff002afe203f7f368ddadbf9066101f41d5ed5faae60fc5b75be08eb9d5f0b92c8b82a6206601b03cb80da177ffd09b0efb408ac205b0c7c00e25df916969705eb76450a8a56c920db61568ff77c6d90e628717f02c7d77ecfdab96f76048aa344c91294e2c74172912e40fc761db7d3df318a089668621c0063b5ab1ec3b4a5f9a1b424d1eb64dd6c14b3660213c45c9155077d0c94405aa19271c128b767a21ee763d031dac9118fb0e59a8c6d6b2b7fda8d1e065e5dd4af2084085b918a90363747402370ea96ddc85dceb7ee5bbdd9b6506506d1683b6fe4d8a7f270c5d01de1a1bec1564f90b94c3ba4b8a64ce3e54324f8232e17f93674ac8627e279a7b7c77c3ba3ac61db66d7030ab4c02899a54d3b52cd5a67d993d640a0206fc4b49e4e814ee737ac1b064ad9691041ab918e33f35056c10bd2d00e3d75afc88c0469318e2557e1db46e660e84486679896e02db92506e83b1a0fb777720fc7bd3af31c3a80ec5179989f142559ecf59005aaef62ddd2e0918949eb8ee7112d4c2ec608970ab6f90edcdb9b919cc8261f9bf6ecf0f32f14beed32616fe915191a205871b5e489dbc19b17be8ef047c701bbb1abe71fb5397f9ac47ddb19c72846d9d4ffc4959c534d608eb5f882a5a332b01c12cb5c20e672b1625ee1444066224cd45ff26af8297fc789bd6d5be042b04186e8426203b944789be9c4f7bc90cb5eb99b7f956771d7b03b951514b55080e6dcc46a79f6fab31ed02a81b91dbfe5c72bd98381828b62c27178389c6dcab9fedc309449a7a1c76bcb6d7c2578cd4939cf497dbb69e9fd63ca1d8e33d40859a139415d92184ae996496024e1394c62d153bf846f6f6f010306259074fc045a239e36159dc464cf984820790d7bdace36da0ec038fb49bfd50d246b38583f784992476a2a45dbd37386735cfe029ac273272ca44c517a02976da8f8f3007126f892d7b9b5c0cb48c422a5322a95ecd90ffe1280f9b6737a3e05e948c3ebf2c5274cfb8bbd44c121859d5e0e92d235e0ff677da105d50dfd7e4703ca0fcd9055f00f1b123ac2cea74782162659f7a33bea031eb4dae208641756e5b1cf92c5c4d2528c97e0c9956c6b71c4807b3c1a467e6684f9ed5fa35f2dec292945d6d6edebad1816facfb44dbfcad65b8ad64d3d2e0c0cf8b4905fd2fc435c954aefbe388e3a7eef8239856f58dbd5fe6c2adbf23778d8c7a946044796ad7ccd31cf9699ba1b91981ce6003b24c48a42a7fedd14c83a32fa790ee26baa42cf4acddb60be56c307ca3f1a08cf28dfe761427f6c5269dad1e05a13a5f4908bdf2109d7624f7ccb4a5151b3f3247c03c993af923f191624945d27e10f110f86a4e1bbe8307691f77f9a7f41bf4471875c160da68db8a2cc819fd139703721c1cc817ac5f91601b120fdf0e250ca32bd6a8d2f2d36034d36e08f58df2dbfff1f72a49ac40223ae03646fd85a9ac9af26022dc7c788520781f6c80194dc2dc1bb9f717eb1166f11ec7ba60cc6b21f41c1e83799db42cf292eda7cf98dc4de589ff7fb431001ca80258016d132fc58dd445f28fce2f8b992ee24dbfff444d0c4f2fef693613c2282979b1aa014a8c0b557093a9a062c70ed57a79d854fc615a40e473b1f41ec924b1b34c0d415cd3118dfa9019b0f5f810dc0aaaeefdba28a340fb4655dbdb91f0d6c2c13c038b8d6e00e3150dde2401d850edb5ffdd868fa6a327c2c7ce3410dab1b941b06eae429bfbb944c58e479433f595b1fd857a06b165975711346ac804f4a01ad3a8110276de3d89583e098f6f0bb37f5af49a5c741177615f7f772f1e058b65af5ba5dddf61db902af84e0ac60483d6548aeb697290e9019d49f03c7ee004a078e7e7ca017cd84819cd5807f7794627322c1c564129cf555fe7ff79c5002168a617b0fe9aba83e4f2f6325763cd59c0541fb08f03bf5adbf3ccfabfe56a22f0886a61a85644f142eace386b65da9c21bd4ffbdac81dc2740d88adaea409b0c769872106539955320cc2d5120af83e87e7d388bb816e13ffc6cce055db2c333f9afdddddbbc9b5ab5fcdceb9c5f22fbcf552172ae20fe07afaaa4896c07321b3488a6e8636e946f1c768514093d088ade39bfb72705ff7debda2e2f9703de577ae9e8577ad85c82538c318398573734788697555d75d8bbba69d3426e5893e1b0f5fb45b1ac4c0b008d7e6600ed10da7e7c0a9916fa775fe34ecf40145c0705e1b0383040cb2fdd2973398c752ee54d60d02581842963d59353faa3e6d907f52f72309a3559796d1c66f3977affa7d8d840b70d89542dd017134903640c972272fa4f142d60bde031933c1850f571a6c810f73a50bd1c7f5e1a2d0ab54c2a45f89d04c94e808052322096b480898afa37fb6fde58aa0c3e5d1df2bdc11e72e0b85375fe6682a6ac6d3071f829f3aaafb3360ed34d3e491c24e47adada90114637f368e40a5176e4a27359152f44818b62da93bc54a64400dac09dcca2c0e414726418a1d5eb4c430353e07014f842968bc49cfa54f767a684952d648c26b6e3492f419fa8a62990a52a82a933eb717947fa508f87cc9a26d37023df9dde7d7f950cb258caa3bbd04485078ed083987ecbd07140d6f0a10ddba51cd60d18058f6023a42579bf8607a571d19a862c6e822b5fabe595e813b9a540e93bae314a08ee71bf456e136ee324363c92500902dd81ca53ab703fdec41ce443cb6c089577f0d94e5b3d48f49f4663634f386bef0589bce190346f7b2813782d5b859842937ac8b1f59c47abe869f139c3e8b8e7fb4327d38d466478ca138b006cda3fb0daf1ee76b327e2d61005eb139dff34133b21cf1ce9e19a0691070ce0b915cede3df47dde59da31afe7fd7085f51527f1e53c2c8c811d13b315af13fd7e742ac98a12f042c223e907ab067ac18eaceaf0db6722618ebfa6dd4c4932fb3cd92abcb872bee85158a3a812e76253c97b1f33e1e1aafe3215fe8f5854175ae241d60b966afdc9d0b339e72e3581e91689b5800817693ba0ae74240e0fb3acfec47bd5d1f76a4135c134c5e32a62a121abacca3a11886d56541a1ab46d95172aa540846dc373ec4130ba1db8b868a2ea8111a5838dfba6516f0118c5a6234604cd9a99adcc6a0b52814b27a9a98eb62693dabdc668c3054241a55d30622dc29145c2d17f58f2fcf80b6533bdeef2c37e6072f1774bb1eb49b1820b6bfefb2326a5ba98b42addaa7411b0794ccea2983e6462515fc986005dce0ed5cb0979e5c83c006ecb446327e1aca0eea619cd8366ef8a8e3817bdaa3a7dbd04b5e8d7fecddb05ed375cbfca78bdb86b3e33d850060008e2b89e62af3d378056c2be4fd561c1518146a6026986216ce3bb1ea8d776d05572167345a942360807f295d114e6f3159e2ae54d225df3d326fbbfc4979b98706188146651b98a03c89e47abbd22d62524664d6c976b742aaefbee4d87272abde1d36467d6461fdf8abc908b20f463028987db08da53c00e3beebf752faae20bcc559a526733b0bd33de184532a615765b3698ac17728e4dfb13a2be7f868e91827446c5897a97a171e43478a7efe87f5c2fba6a563ae572e212711395185feb65bd60bc7bfc06c3529069666fe664624b12ef95a2972019b2855ad260595d9af785fe3e41c3cf431b51b6e69171b1955e6d045275620e8d76c1bc02806fc01c639300f1194335ca96a355bc68494ef3c87dacad899b0a42ad550798858f672fe97a2765cc413e76ae6f41cd89e921e8376a385dce581c6c9cbd7db83e91309a258c183186666070da0ad25955826816f7a4bffcd3c46d057fd05ded4541fdfd7e607b0fc1abcdea44a077adcc440f19d67c71371bee7f2d43cd60931977222fca157c7be3ec4ae834cdd6d56e97a324a74d12e2f6167f897b1773fd335937a059c63021e617bf3ae45e739f601249dac1212fa5b9580108b3feb2687217a17877853be7c25dc9cc72f36ecc44eb71cf1c8580e65ba2d669e4f66a3d70c692bc7c36f46689a1944d1750c34994b76a8379c6d4cc05aa83757a12758a583d398f4a6172fb81800ea5c705a8c8f87d9128bf4bf81c31d93276e51b8a001808bb05c17f188d19ff62208332d56928b89d61d9a64229aae32b9eaa0ee3e707308f42a14b0278faf097d57c3b2d7bf6aeb0ec43675f3aea06cd98db0b7dbfefc947a7234fd63465ad7c40a97a1a1b76cfa6679d1086acd255fc5c44ba07bfa025cb28a9de574d1bee58059f0bc0af23b73b9fb60ce4c37f4b3530b2ff34f58f210cf0a2a7fa092562d2cffaf9c626e552efff49e1172a6cbc0c8d4c6fa72b7e9c4bb69728b3a1a8609e0293ff905ec39e9448a09454ea7449aa69f03985c6af4b8ec7cf103f1492709d3757a14b1bce380bce63bab555aa940bec740425698e7c924c1d12558bb3122c27a531d1ccd7e302e0a7fe55d9fa0991adfd7421169ddf8186387abc9283f3077b6fdb4b01994591dd37d675ce9e1a4d0b743d91ef717c43e8226e35b3a5c2dc42eedf42c41d2146987f1c3d2f0aa137a26a0eb7e0013723ef7c6aefa78849d0829cfd8ed72d515144f30d8241a44b0cac84568bad629e1349521a6f72b27202a060665b940dfb8f99af8bd7f2c65c8cc2aa7bbb4b5bcc045201dda3a66ca48f1bf638252c5322d3e851ac9f68d2c6cf0f9b4026638b90dbd5cbf36c37cf167235f4a28a4dded0e4798a56cf3dffe7f0d7b27b9c6227537e76fdeb3d3ffb7624e10254887924e23a765ebebb86fcfb23b178909c23872e9e147667904d8c5ea4874009f7bc8bfc31bb07bf5aab3651b0622c7728c2c6012879c99342c2fd09b91d2c6b00569d1dd0ceab566d2a803fa4b70a3e729a5cb32ba3349bba14279b14d203cf155cb35b51bea51a8f8f3b9970b69029cc5ec8eceff521bc174579911c20ec71b443dfa0a9bb3f44876dc475174d9cda02102dad84b1c714e6a470640a2cc3073b35570991e7acec50daec04f9197cc5e1863df196fd979f7ba59c299d72abfefd86349de1c99a4dd7eeed50faf8283d42afb8e7b9c309a1e89578e4d463589b94c02735d3db814640bb7a571494847c0752ff023482b8a4878ea0e7220ddf1ba615b2ce51669e67274be7c905f8fcdd6e8e2e13f278ca8031e88f3d13a4dafc5c1262698b81856d823dd5ec520f7ce626f1542867b7fb77ca56051699d4ea866305b6f33dcc2314874008f8b5bdb555f83cd6792a9d1c10edf6f50bd452e80f2c792fb3ffcbcdbce36a65aaa4a1c6952986fa5d18b222fcd44e067254b14c392dd4564273d2696099b04ab1009831c269cbdd774b3d983ea5bc949cd779e7793e8743de9597ba9014d8af86e47b7821d08203744a4168f7b258f419b8b7388139c7496a0bb5ea5ce008f63adc8e4509ee0289761b7cc5676c9d41e22d45f062c2862383233e9b12f46cce45104e1ea816b41ecb599c5233d6cd6fcabc4024d0fc5a2619707ec715aa9ef5e3e6d27b4e5b1f261791cee5d8c6b5c38ed1b0946b6b2c16fe1f6705f0a3613db4d997b00a2cace11b74178aff72da3e62add9ca4549571e8894c68a13a297f711d99bde4ccf5e3757bf7ef1d7cf50b57ff336e84a6af5758bee79400e2513a579ad43be5aefb9161d72240de7b948fe9d293a14ccd2d12765488186e6e702b103205a525fb0470671ce9df0c08e33cdd9d294cc21c6e48fe849b559f80bf0f250d4afe738d1361c5d1415ddb42cbc88d42f374bce09cc9547f9e20e7dbbd043cf439b17d28368935cfbdccde643029cb24db5572c2fd7cf3035f7d2275cf9853792d57745ccc82ad15218d66822118586ba6b8d2411be949ccd2ccba123c6e04d2c9c2270db8650baa1bdfbf9615620b629ff0e870fb4790d8016c13276867fee0172cf4bb16f4baeda4dc3f1891e098b280eb243fc8400429ac185021d518821fa8b408e0b22bcb2870d9264cd084507f7496a505a77c1b82fcd71e78d2b4ab4c318c210541b9deaf537f4c58e18a7813a9766fc688fd58cd160d9f685f5c0fd6a1d01c9795e61a34c50e8482876e17df4769112936a080e142b90aebf731790df26e2ac0049d2fdfc2b0f7a40e920072d6cfa58531c1352284c6fbad8a251b1544dc210bb74d359ea7b9392d594c7c18af01744398ffc3165a1fa2be36d8da1ce5439ca9d8c52c572102a31dd526bd0a8110cd96a90db2a60b205902a58975a18e365e329fc0f389acf862c81fb1fcebfd4b7ab8d1c3a0b69db93796a9236668a7863b285bdd8511239d5d50c66d9735f6cbe9e56bb09b663e2ac04df8b698788271ceb75f9e248329bb4385498957187ad60ec85f20ff328805131c4e0eae7143871c5222b1ec49a3e579f26de7e58808072c01a1d45584fb4e3cd89108ea836420ae813fbfa4ca3cf69bbb828d82658317f1ab7d2bcf732e0e90075826a36530b5089777547ab4245d1745878c3e338636d37cce688cb064240ea4714f322380a52cc2bb14539094e1d8780100ac2328540ace7f5cc97a2986044bd8790b397e12fc575b87753dc72ca9e5f022ed03bffa34f8dc5ebb9d2352852b4f48665ba9c7c42f03973658f0f66b48f2678cfb8e29e7067d4709218a67071a2dce60a1b9b1ff0a382cd4fe2f51dcf95d94ebd0bd9843dc0d36ef5a3785239d9578a9ae095185795c63e2c8826f31a69cc0949c8e8869ed7020d3e9d09c7b72aec33c8b291ccbb4af267772f3344567fc546e63a1a6074c339479039404561c5bb2b482ee20ad8179eb5e5e7b19b234ebd036d18259e8a45449ae56bb8dd3fdd117de78d06022a5259e8e6689d913beb8329e93b53727f3581d4a46f2d250a18ecf6034d221cdf5e4171d2cf866818151e9ba3101fb58d0a7bf7721fad00ac55148350c9bd18e3fde7807bcdc7837ada9f5a8268ffc8c9706ee32842de4d70da9cd29f323446c7c3a0726b3a7432cf1fd59b062ba2fad619b2668732b6e9427ef668e48ae71e9d86c3e66772559d9b37d749a53629ff3e38c765224ba35c9d475d6b9291a59af00c83265fb5d02e180f0fb0ce81b2fb95fb7dafaa3965e42a72bc49599c3afe932dcd8ae6a77e26ea217bc607c650eb1873233620ab139390dac89daffcd1ce80e5a47500cf5fd556c507873123978b62f6ad9341354d27102c4bc40f93dcf9e4fba2162bf8ceb62f743fe9b363bafdd1822e18f58662007a580a18b3c2a59fd54495c98e4dddfa7ca68d2d95132f94760f7d01a45df86aa84f6ab69cd34f5d040d4b28a85d34a59c12b3bd24b6efd325ad5cc80f6b9e1da6682f865a7ec3a55695d7f070fe9ec201f22392f2df4804318dea2e90e66a021a76eb0c54b497a2a3d8c47b07c4b13be76b0edf1f63e98cfdc69ae9eadca2baf0c3c0159eae30b5805b3ca768fbdf4d79aa35e93ce1cd0eb082babb3fdad3a8ab89f2d1a1d5ed7c1de8e15d69ec5c81433024899ef9dfe89ac128827f723d6e2be94c5da29511029e21d8a23bdff47f7d6d8a5906c8f3a13b991e6e8feefc8fb020d95bee2404332138ee91b2496e854ab8f9a58682f77e7720397dff437aa960cd40b01e7a1b6f85ebd11218a1892870430f40edb4ac5363dd0b84e3617d541b2e2e9e5f05cb1553cddffe9152ebd5568263862744deaab0d0b265841ee69422b1c701cfe7d78994575a935562d0be85687037456b361af58b7db4603e75fa0bf0dcbf8f66f1e584c44e7259a3000998ce6c8248bb8b38d1e88589a26ea77999a164d93da27a52e5d7ce62207f437cad1e555578c39d9b8d603c5bd86558ca6a4b4ca2c8c5d425bb22ec3f497bdea78a0ac80e3a5541395b910bc94b60c1ec6d8e15b7026d3c20faa451b450a99e269e26f710b62e5f335e9e3153cc358b47c83c3b232d2aa7ee7eb14b4f9809ee6d04455cefb01023af5f78daa8621f502731ff8cc37c6a9c5c308cbf0c58c91f32152260abd2f58d40201be81506624991351b1809bd2ed8c365412871b43a375ef2b90d556104f72d3917e5526829b5ece4ee9cbba51874f97b917357c5d0e8b05a4403d08e98d6045274646a804f691569f21dfa9f0476c74e0393c11f8e17dac8672b1939fa22867b8c496c60343545965e1f6e95c3157f299e6482681d9381fbef5d9085f85d24703f15540b7b8c05eea08b64da691cdea78a843f40a8380cee1a9a004610923d1ba41e5c123ac4846186e240c64c2b27cdfdd4f0aa8b560de2812710f753b12f28466416c5d6d16b7e94651d3e3be2f533d2cb8f663b0dcfd35df0a83ea3771b3b44f5e9e1ad8f95e68c19e90f560e49c10603a131aa6c73ef63a0bc868af81284accec4ebf8aa56c9e560b3ec5220206a1fa505408c4bff76b9edbf54edd2c94c9d02e31b15862253405ab25131b67eb595edaae4d1e3cf1639772ecd58166d25cd4126630d8a83930eea9e3734c60cd340f0d9b8971a9b27994e7846e19200e87a15a67851cc75987a462dc5eccceebedeebdaa1b08002016cb82af591ba609d97768be5637bb1cab44b158cd7aaae86de1dd45064f8bb74f5897912388f2081ca7017d50de31d0c58e8bcbcfc517d2229cb95a7170782b9a726d849f9d1f5530cca246484762230117cc77073a0003c25badb7c7a8584d0fe11db456a6cf4ae61fda0848db2469d333fc0b73799b5070425be2d998f696c94f7e29a54e7d763d43e353563ffe01fd0ae8ef523382a911e1ff73a81237861c9c6c664e8c179e25d01f8f786e72966610d38fe939b380db2d849c0e86f48e9c74d3a36976e96719252295e24ba19b3a4a27bbb033d760496d2d717a7486eac13a5fdfdb59f97708bb44cec27dbde30995c4349d29f5c18efc2a5046463956dfbf76d64188bffcbb83070a827303240beb75c0353819d6883269b02446bd3bb54b7c8208e48d6a90cf7e60bfcda37ba997625ff734207a55e25185f3beca57b03476b4f8d808abacdd660cddfc6f6973d5a2e0383c037d69c6ed09d2362a3879ff7c7f239133ba2eaf7f0c8a168f039987c014dcbbe26e974bfd4d61594ca6359ec6455441e84eeb3f5135761092de459b809d109ce5dfe9bcbab2044014476be3ab8bf0fb25a42536a9efa8981f1afdef387a5bf8d4ea1021e4a03864422fe3db6e22d2ec5b39ce66ee68ae04eb30a8b9592eec688f4e9d2a8ab9570ab6010d995a620dbc35c3ffe214c85ce81cbe31a22af02e2795310d03a879861756e82112fff1a00d9d3c8753524420cd836f955371255061dd0a9dde85929786e7fa1f6c20cc2988fe5f2711285276fe669f5c4c1a17a2f630218122ce413cfa9a5b143b9dbe6dc8b7ea6878288cd5fa0501d2466fff4e839f51405ff9817ba8c4a670da0306d1769454f7ae2dd574d6878d8723d0f99cb7c1fb5ef70927213ad1db5f19c2bcb9c6f3b7819cc79354b35e7385dda55b5a5c036447cc2fec82836c2a5df03fdaa56970c6a34399a88ea553d4538b59464b575fcd94bb0bbc71d33d10deff316739f086f475e64cae61cd24a996252f71858b2946a83aee1569796f5bf73cc067a7ac192e40b9218b8b7580ac83a1ab68fd0cc94b8fe8502cfd979db287374e1b5ef956f3bead6fface142419fde9a379d22129f4cd96ba3ca2ef2b17ca17a65cbf780ff257c00358a55e87757b071a347af2ca78a18a9600a08244f6dc123a0efae05f2000b5c377129339586e5c17a1b084789789ad14286dc7576ace250c6b693ffb6ddc34c64909c236d9f6affb42db60bd6251f37b08fff0aaabb23dffb883be67efc4d99891d609425d0c500785b1f7a367e34774dd96ac443ec779d11f2defe5c017bfa4484d092ff33a4a36f03eca42a6de975528629b9733c367d513e54eeb9830e3aa69d8b79c16f0ea9604a0c7e3439501f29f3b9502a9e65856e9ccc04649563c5ce0d81ae351c1c2d8108b9713b2daf47ea5c04d5fb2e2debd513a1f485d7c7e71c187806367f2cdedf80ad131651cbdd225439a3b9ee8b9b687de7fddfbe329df6ba3148999089d6399f9f14dd10b0970da13c6875fd031172d480c0b92e9e6174bb517b339d59b6b4bd92b9f730631e593fcbb7778b7526b5b0c047905c73da8867198f7d4a44aa6f6cf1f327d48dea4c7b794c2bf5d1fe477ac8b50a66bfd90e60dd333b34e839755708904733fb765b993592427dc19b9ee6fedfb792401ad0caf7c3774b0598c002a52010edbbbb36ec99f22d5a7bd4133b0b0dfe422afad3ede81605b3be935a07e11134af77dbe7b1986df13220b7dc5dea6d9cab7cd9071f9e8556677c2ed26e0d47bc7415fe3da0c16bc15d1014e8da79e1f9efaa594e98129a387939430f4e20547afc4b23689023385577488f1390d17f01a2e78ae882ba6b08256bc440e1fe7537b749faff4c9a1f94ecbeb8e44fc4b944ffad48207c03fb2cfda8d74fda06e9d3c34c9582cdb4bebf2b69d20a16b3e3c51bd203eb19c047c8de9c7bf0bca98bfea8f0095f138bd125274827153b5622c40cd0c0ce7bfaf39084ae075aaf8700d76ebda5fcb38a51d7fe902ba1c6a7ce99f41f7ccee819b382a827dbd4cc0a2ac5fc5ce2d0048b23d413bc894555034f91d61a9cc11cb437b4ea095ae458b960091e2985ddf075bd73f8ee3ff2b008bf68eaaa2a928e782300bd86172d98b97993818d3655cef81171de9e1dbb17fec2aefdb4c8a2f3a4640727bc7daffc9487b9ec109515429caa448647ecbd6dc6281f80df5ca512ce559f336ed007bf29b7b0f042f5a847d23ade1c4d581f9daf1291c9760e17c65145815617cc4cffca05caefbe561c3e4b0b45d72600fc2b76dbd1f33030477b4f48003d0bd7fa871cd54143d05cd3ac0b0271f5866344b2db0ca5aba2fcf304ceb778eaabc81ee72e02baac0c6966a9d989e14f37d7be8a38c9f15d6e637389f62bf897b2a86842fc8178c61dc8043b385d717c5fd846e8fa370360ec2d49020f54d3021c0bc6f6b58d9741094c029b5d71e214a361be9760dbc5c7860c3a2b547295d40dbb2a34f2976dba47484a5bde8b6a6e0268b793863f878b380f55e89483491f8c07af904dd20865ce0742935ea659bdf8738e7808672d549e71b7b294c4592c200832adcdc12eeb72c67c60b225305e3b530a7f43aad0ec12f78a823b27a96e70d954124106b991af68d65a08e76f4c0969a33e2be6e9b746a983893d9b6e36a6196aee52158709ddc86e89654b36eb8dfaf643bd0908cbe30dc83dfafe2d2f7d1850f5b971858268b368e0c63ca114d73792da3e103bfd11030334be5a34996b3849105c9ec262e83dec00a91989fb71d17b601ff36080e789670b8d96d5a7e36e0c449e5fb5d91a302930d6c0a04e64e658a571c486d249786f8026bca0564ca2c7b209e74790f45372cbcd652323c9ec544cbe08acaf4e795fac4b204c5444e8193bc83efe1fa69f55ab472617e0018b227aa05528df98e10366c27e1908e6c8566910c4a51124833e05a5e1575a875b620df2d0e0b6c31b580abf70f0612efd6183e3367a5bc934cb8d1b1e6da0247f16d567a82bd8958b0670dc5caa4e57a313a094edd7ae3bf0b1ac0c3a1fcda134bce239d2bda4ad18279ac83e64a1f59a02f5d87e04123c5fe86d454d979b30f9ccbbf83ef601afb3463a2f365872fc240ed76c97de6bfd08a8b9b8a483e1f013ab1c4f2c4222d1125b2d9289e4b092b0baa5912e41b76252ffbf84d02efb904eb09d98a7cdea6bd97c06b70cbe3c4293e68cf5144188bec7691633abcd91b72cc79830f97adb5baaf97dc62dcd74b1239f9a6753957f96d989a676495dc0a4b6b889c413131b91e8d493bb490127ed6fe725af2d7cff222fe7fd490f88b2687508174423954fdfbadf0143f5791bffdbfa7ad7cfc93779bcde7672c66679af1a8677275fbc9996e8c9ec4dc8a3c3fb6ed19d1c7c7b8d164443985e0380b480d23ddd01a9389db7f1aa07ed8e534ce2a5b09aaec18106521c1b46219bb0f88d22affb98bcaa7f45d7e398abf49f91c7116ec29502526ae9c08cfb1f8d0409d36d777ea37122c195f04b14f647cafe5d98802eadfa97a6c9e534c34939a829547125882d7af7ec8186d80f1fdd93dd1db3ce4891166cbdd5e4d5e62a17521826cb9d5887e97c3e8ff5af7f4320cf984f6388883140c5cf8932b99988009ee72f027166b1ef693eabfb2375fa6f13c543449b2f78addcbf00fdd7e10878d4236d94dd2bd564ddfaffa2aecc68f27723710a1a5adaba6b34aea71de1304a4f353218b321375f3a1495c9be93e56942c01c86ae4dce68df18839b0eeaa0e4e4f2d78087bb7661e441ecd851e408598cf84f3965d0cecfceaec961b59ed8b086bbced5624755a124b99bfd262bdf95e9dfc208dfd8b2c51d7ee1153433015e28dabbe483e6515e0a8cad3a954358b7405e09ef569144a4afc6e1f4f52d7c6f4e58a17872cd53e3c80923eb203eb8dcc1883233cd8a1330c780d3cf624e9438836baa0934b146a13744878aa177a7d42ae68dd8f6e47b5d5566bbf5778c7c3eb35230bab86be72413e481e425d81f3bdd0f6da56e39787e40ef3800bee892c6c4d64ea8b1d5adc3a7d1f9aaee38f33dfc06de4aad2f54f96928e5d7f5303429654d7c032abadba5894b56a8934e15cb51e87e9883ba6d4cead2793f7f51bad4616aae91063866935e11516fc8f752989893e26488caf793624ac2434e826ce08dc06694b411de2b9d836808a985918efc3c3f2f454414854a7d74fe9d3659249bc456fa355ece2659ad654833ab0f984d8574e35cf6cab88f1d872a0a71abb336597cd30331a59be6facfb6e929b47d63ff504b981790a853be1f6f8904365311c154d3063bd73dfd4d526a9edcd0cf879abc8032f024f1e1beb083757623a418886166a525861bcdaf03bba8589eb8cb9fc592bb3c0277eebf324d7d697fcb8e00dd621bac09cc28c4342109b01f89cc587cd1021297fa58f0af59ec6fd0a557d8ee4d4d51b6cfcd6f507481c87b9f25f27051c51c5ba448d6161bcefde5dde4ec2cfe2aa18d47685d78b3779febd45011378bb16ad80072210d671818c7c696d781305360dde22ccebbd27839fb7574ca800d7df0c84ab227890652b7abdb1575fcaacb6b5b53f59575a5c63b1bf134d14ffd9a57ab2d759d43d39fdaf8003515678156f90aeec8c01831108632011e120f27d97a121da1479ecfb3bfe0c0495b6c21ea7fda1573ba277549c9eb427989d1275eaac0b4ebb6a7d7d134f24139d5a1a621f737a1de62276264bae02fcab79a8a4c03e097146be0c643d9316d305872865ff90ab9b2f6573358f7c6d20fceeac6dec64c779fb29ebf17925937f3d196c3f13a0e09c40f29fdb618ea79ee79d232d5276b2c74c39dda448a294cd794d09c2c95e4a4b5b554b1b2a8b07f3b5900f8c0e56a82770a8eecb07284801527a6a54e1c5e2ed2300c63dd2e3f95427e535f5ac38dc7ff295962342147b5b29b2efa3bff5613a818b88e456b4a0dee8998f73ecea21ffb93531a0f7180ebb3cbc9c3c5c39c1c898123887a1d7abfa10db6839fbed737493639292c3cd1c1e8cea35ab7fa03843490b5f8b19b6109ec34444c2bb5749197ba530309b816f280299f91a46c6ed73efb2b0cf9cd544f354eb7ef5277c3d6f1dd839e74959dfa7edc31ffa14a7dd81d038b49b034d90f0ad66e6fc2e54e1370ee10ec9f0112e5bdaac81c40c62a94bcad76694c1e155bd593427c4eaffc20772d690072e3bb4dfc3bb1ebc198caa7af9ce633bfbeca05a2c15e1767dc59f70561edf28cb6ab1d89dcabdff8059cd86fe49161e6c30bc30d83eb644a1e235a3fd7e93fefbf5414f2d3b01c58fbe77d6956677fc28b2ac08e433925946d3874ff2791eb2303e8422c1a7b44f6510d0056f91442beff4aa281307649e43e65c1e83d19c2b806b97c82507d578934aa358d945b2713e40a2fd1aec18bbf00809f4a4e70c30fcd0cb387af7eceaff6343bc00c1e101ed84d8fbc3061f481f57719607d070132c6a6ea7ea7ff490a0f7f07134d28e24ee00367bbc43e3af7ead562e7a7c627c088759372e2baa335dc00fb8fbc32ebc92030fcdfc68ef9a6e406daeaa1661e49afa1ce881fc32939dd01c4280b39df276b78bf9ea9d22c171ef0e178f0983f3a2c34929e98d86964ba8217a6385b1b4d853c4ba2768fe13c9efa15144007a9c7f0b695a72c0d023bc9b61670fa2e08b6ceac6aac950dba2451314f2e27c039d64d54d741d32cdad5316b3e85c2c6b6ad0b91ac0b066a26dbff8014e38df4cfe8bed5bde47d25243c3a439335b16eef1411c29e43e7ced8d4bb116203b55980b2d27cb05c6ab9fe9b44089fecef7a7db755a07b4abfa0767ad77b1a545b079050dd54902cb55402425401add7c481d819ecd464820e0e34a6e90ed6627905de59e38bc91188e83d697951ea48a2f0c85d59c2629c1b1bfa61830785e33a48b5374313e659645502d2d40ee6b1a85bf9ee78270fb226898f1a2b7ba4cddd55cebd622750380b8fd8bff0f44cc9272e8d24de27a37ad21d0d8c20d2215840b413fad0c7e78977365745c2f26222edca3ba160531d85088e07f101fae1393187e97475648a58ce72eb4319b28833e4802ee5d60e86dc28ac8472839e8a679230be6633b2d96236a4edfe924d372d895cbcb2af8e2f3f288ce9b0af66e6cdb09d3585c6b3ae2fb901f525a63b33840e67beb694016221863a4b9cc406dba1eb342293861becde8f6db01337ba9ab1287c541fe364c2e509626b568133eceb62599ccd01ed86d41ba46fb63a029e7a469ea993ed5a7e21bd0a4083bcc9cf6009c71bd4f302bfc2a6886e98d048d167935aa6b345479b5b3fb87e843f4764ead1999845c0b65fbddf5d5babc8e27dc9f6ff7ae81134cb07110f71109d91d016cb71b4c0ec495ada421873136705f0404af92fe4984cdd80552c80ca9553bed2b314c77718b92e94e2b4f26fe01619b96b7e912adc76c76ea69dd031472ab5d2a12156dbb1016e97251b3a4d085f0b9b0bce15ea98d3243afb5bbd60e0e784812baf93b64c7a85791a24818a448ca77d4b07ea4bebb9020e73a94a038bfe380d962ebca8ddf79b26add3fddcb7025b8f149c45fdfd550c8543c55144ccbe0ce42f3b9c14288dd6ba5d565ae018791edaca82fd3b91d9da343bcfe45dff4b06b615ef3467022eb6baaba182f7ca5cc1165373d3b71d17cff804ddc96a038c3b29a95df3da46b02c1442b987d10699c33ec79525f7ea8671956b8b9d190d4a6063f8842fe3a122bf6e4c65a025e23f6292dbf5757475fc3bec1c0d3fee9f1b1d23983bfe071fba7821e834f3b767ec25856a5eef8adfa9aa22961295e0773237fd3b1533240ed5e07403cc6b603ba34b046798a8336ab526fcdc8cea8777da054a74f2e23ad591915fba718bb73811194f51bfb301712419eec13fb943fb62ebb22e97b7b728e96c80b1e0fd51ec232860fba0e03860195248019ae3e757a8ed25cf721e2929bc40f0aa134643e340a6109a3c963022c2e4cf97dabc09e2b3d6425d6b24527801b453dc86d174a1b9e2632497962aa3f4ae69bc86bbcb8a335448aeaa13ab769745c4987f693c996ed4b1b65d67b0d30874ccf6de72351754ff501c3bf2780b4f5952be536b232ec885ac493c969e84d1482de5f8d51f300382d7d7edb4f4f58e488f4af2bb1ad48253799324b5de47805bbdf2ec12ac39c0f0290f98be75a1467e2769fb4d26ccb597301b345bd4422a80f76b25be219d8ba0d763dc5b2d79924ed6e41adc95283b4ba6ebe7b9a6c7f7af9e28f618748f3f3be066e6878a5d3f38cc3381fcfb6e0cf6ee0f00f95b491aec7b3c05f673d870017a22e08e71551d5879b4c929957d752aab43810d0cc654691b9ead9a0ce0a348de7ca4a49858e4fd7db3e359a79e8879d2c02099d9db89fc742fbf6ad1d0f92e4cd4aaaa664e0dfb935104c3e5c0ce55e9b1dc52f655b237bba43891bbba7d0c7550202424985c8809a432118c0cd7619770d2257d5532a9cf1c8b0a69b8301eb74ddc2dbdfe0b21c9d1719112daef3ea9f0219f3cd6e484b8036d84915629e1597b3d9d1edf47d32c4a2764d703d38697184ab3d74f48c03a63fa8b9b406871068e0702231344aa56ca1e801822aa845f6ddf5adae63d5c785171e57574b047153be443401306a9aacc3b0aab254035dd579dc60590e639e06cca3969d5f0297fc9de83909132a30575f370039c21b3374ec5db32a20b17227d0ce5b975f80842e4fd40cc7619ba0e1256158439e52cd5474d89780b087f5f114ecbd2ae566164a45cd99563444c2f47f800ec9c416af7c4c0e80e1a9884e6251bae7411c181311a5b7242b2eb8b5055a8bdcd83106511a7a1db14283b6b4b8ab07d26ca9728780ca03cf090c4ba5615311d1b9c4b1b618d82f02d9318cc7d0ee54df58d4682bffc691f974b6be42996c8dc98226e69c7daf571dc3aa4b721970221c2740bfd46770439ecf42cc36ccb2dd5a95ac43ce8efc1de85efab94b8399dc9a4f2e482c73833704af715e4d6984857ca887c08ef937f3881468d3413d5b41778b3c7bd7dd7bff99dd9d875e9acc568335a870857cabf909414d7aeaa6a608867eb5ad285da58d9c7c7a697187efd897429a7832bad83e13b866e7a7733e01094b61e2b12478eb1f69c2e9cfed2a398d798013b085041dbc5506de1c45ab79a3e5914fa01fabdb72dc4a2f41f7a774421c78e02d5223b634bd287ee28512c0f327d1813284f5935520a8317efb67e5ce5fa95153a93e75f9076d27d392b84643aafb2968368de7f64dd34b2e54b83b6cf657c73a49e6dd1958b86168f2e9bb538a8d9739f25ac73b0eb0e174657a55a4dd239f360542d7189a5c031fdd6470ae5430ed8ca1a2db47c4aa9a1e44d93863c65dd199ecf90bb9eb69c2a77d13a49c2ddb58fc28d323478fec9d8ddabc25bc5aaf58c9603560c026d0c882a0b40a58e484e767452af6a2a451cb0fdec3a32d8764e4905e92ef8215db3dc5dc90bed84055c155252cd3847ac11fbe915e2fc585ba8ddf7ef8e10e5f77fcb392edbf7c6c00590311229f21de287cd855e4b72e87289649e3fb27b7d23642fcec0ee67f997e0b1c9512cf25c90d98a5be4bedf9344eb5a59eb88a518a8640a894026a0f903479d0e49b6711bfe4de8bfa670614348681c77f3cc656f31e8bcdcfd6a2a7f1404391589995be14335ea74bb571d1b1ed9ddc7c6109d3002396c1cebfc5d4322fb359eecdb87e4340391b1f43408eb3873000fd0d6548653badc691a3e612391dd251c870c73edff7dee1cced08b7e4006be59b276fa7d35c43e0d8809328eccfa3da7df818d5d34f1f64974021bfff5e47204686363f965aa1fa14618999ee352e6f0254e8cb06f3017a15fcdda61aebb437804123052239d0a2299d9f22a5455e33ecfffce688ead2ddcb17e2c07fbbe7495999c3aaa2873534f021e4f60a3018470a973ab45bae7d049635459885a8a6fc9e3e5ebfb7e824242e98cacf69e33201470ee4393a3dbaa64d85c1fa1761d3ee07255691d8d0a36546c5b3c683369c33599b16d34e60dd31384950bd0fe9cf596e384be9232a6d183cb94febb4906bbed79583bfe8a0f822c962ac7fb8bd673aeaacea9e27f31582a0a67d001a4ec22b59431a9aed3f2f0e0c5e2b86c6e04d78a3f102cee3241b78abe0d6007cd3411583e7b9080b03fe50a2525a4fb812d9150662f2668dbf8f95a3d30eeb28b5d7a188de7b35c2d136301a121de1ea42bacb276a295128728307836fb70374ef346ecc67d6167b41a3d503355fdaee1823cbcc020e77596909360ba162d666488adbc2c9da8afde89d2b8853433b11af725513ec09b80d14a867b0dd4b77bd2d4ae3103579d199c99820db4977661a11cba0dc1d74c2f0abbc714ba67f1788b37a7799f6ff608a58e214b612f2c46220846f19b49d4217e389d67ea163879effc2d701f1933438a3041336f5fcec6ec62e650e22997aa09d1a3ce1d16ca755bf783b69130f8ce9fb2ace777bc03a113e11b503358650759f80a34e29a661010086d039705ac96124ffc4bc71a10884e83cb1e46c1bb53ba6619fd4f1fa795ce4d20858ea68708543edaf0a7994b32e2a1356f031a35b8273b5a3335a3e0131b03aa0928e60391b7d31f33a1559674c34281fd6b650f88fb6ee5290c6399e514b02c382e8dde4b36bc42969a39400cc381654c7cec60d956c965f362070c666c5cdd52e417e1284a8ba915baf66bf9638f9ba0c5e3ace9c8345fd748cf9c37d35bc1edb5069b666482e1a800ef70b29dfb1cd75fea2bb4eb953ce72a176db474ae48234af7d29855d0ba7fe36d4d6b73c100c3e1df5280e47e838ee8b12cd3abb9004490e6871df66f5be8a0b3a7ef5ac98a83a3ef00c034a04a9d88ac337502964517137db632ae92e57c7f9433381ac5e521559d8cccf255f07ded91d488fb8551bf90ffeaf75d86ba56fcc88f81a9bfbfa4f7b769c828785e0396bf4ca78570b3abcc24314aca20dd671c187e6017749ccf4fd1bf12c8b2e33f6fe1a4dcb30a251cf1951bfeec7aee1b51529a1cb55d5d6a9543e7ec68e982d8c9bcbc271ce4b87ca90fac894d759554447c3919618a3e84f5670ff1d2b396267e8125d17c185b766b87405e55da5a28704b0faca31583dff1d8004b2a89ab9216bc350ba3be0bf189d34bd25b32d2b3bcf52b7f0f4f19885709bb0229bffb193e46544bc099566e35afb17739cc45d35fbd9fb334ea46f283b9b6d936fa9de842689447ec7ea114b8d2a809aa4f62d0a237a655d2ba538fb88b77faf2c3a7a027a20620e16e4f509c27374ec7cb5bd8abbabb50c7917fd54d4b921dea9bb7fe23930e0d6428692d54b9bccbe9ce3f412da1b3c83baa9eaece51254e008d44c9b1507fec8ec7f15dc96faf640d33234fae0c7d1001fac3264fb123c7c2549a501d517dfda6ee0c23a6e46509c763c01c9750c03325fe495c5bc99b8a9a7e85731f1b546c5a41ac3493d10b721d94c89c80ef231eae499db860ef07e1dcca2f018bb141404d5f3b822700c01294cfba6e661fe1871f4713df9a290cce32c461b2747108e33bd2699f71e904d3ea4621e5b2426182b8f02c96acbf5ee6a7b49def7916b4caea5c12a888f81a28d0e79d2976834b1acc5ad839ecf7de60fbbd3fa28269d7bc8d1ebb29d791a8125b71e1e74c96807755a185b217206c86b7414eb51f51bdfda4cca2b9e84b455336ee78c68c788d3e361637b694520d8fcd581e7a0b58660b6eaa6f07d9e8700f08ba5de631785b5ca7eb98178df8dcbe3f2579374766ee907b8d647b491e3b1eea5212b2327a01531d7a8b0809a598550c75a8e51b5ca84154f8b4cc051ea0117c83adddd9bc34b572daf1824b7ca1fe9e55f53361045fa84f05f9bd6064cf291eb13b141bc95141e3c7d0a5068374330bd464cecf249c656eca54f2bb6aed49fa9a14b17a0a9865ddfe68cd5ba74d878f90fb1ed02bd55bd4e4df6eec756cb0cdf1bebe0596b1eb8c7635bcd906b73ded3e7d236ef92161687087a5d2947d8365ff162f703f07c1050688ce3ca75d8b087482c05b5a1a2e3dceeb05424484c64cfc63bffe5603ee2aa24a6a136b5cac905b63abc5c16048c38a5602dfe8b5314a7743db36934c2996446637a3be90af453e659f5eb007accddccf7f0d5332ac7bf2e1710ecda1c11d681d3afb9e3f3742a0ebbf3afdf029cf601e12e42f737b07ca9ce81e14b40b6345261e900d1a8a12657f31f1764a1ab832bbfd7c97548d1d168d0020eb2bc59c421453a7494172f1513c100f05b3b9f2a1ee4ef5190765704bb17db83295f56dcbbd88760d1f6721ecca144209b0d70f9533a2e0249091e222a7bfc8770a76f9954c727385728e415ca5bbeeb65f1cd59c04dfb897234424a3ebb336f5c1d0479b34a90f8e2eed6e80d55b3477015dfcb692799a11d11ac6fd63e5351b9c727dbb03ec211aa654dd9f20f015617c80c9e933f38a050227812586e30ca20d8740552928eac7e87fb4de55312b303c898e523b8dac2442bceb30b0269f85749e114ffaa20bb9843a6eaf7b9777f587726592585dad6db8835a63168c18acff49053318f1b79f828cde27b7f6805a9794db17f82e00acbb8bd2f666ed5ae742c4db1c852238bb7c4b08320f3b217843ff6480e5dda39db7789e751fe4ce40223a1b8862a4078f62a60d1d18500d2898a456314a6f559c334a78c813beb27f0e705c7f216936b6845c1850236f58ff385558e771ec3e240233b2203f3dea3ef647556d01d7b6ccee2d49ec089365a2d2bce986b3b8b3f4057e84aac316e655344b0a642ff35fc7b18c6aece87622c6afd8dcf6e2b70d0ac0ddb9cb6e688e5ae4b65b082c798f8424c2201a857b1dd1e1937623a973adc806c6de616ec5a536242f062206eb68657d7d406da9afa965d7e682c4df664b4970be81b639d72be51a8b41183a262781c6dd084196398266cd0db84a7826f6db5312d754f02cf3fdd521fe1d5573d4f352b4fc1f4fd5da6db09077dc9df25b808bcbfb815a963e84991b82f7c8c0834d6a13c2f61d6c50ab86cc97f896b45eebf42dcf6a92cc11c4127d988eb64ee404432b51486ae557767d4597270ea3a8ba4976c7d35dba1e2dd0294a557e77407703b51b967278388d4651db77ca906ae4b34fc658e72ad6395b2a9646170512adab73e6136ba2fe4c92af98565f8995864032d492cf5f7dff2b126bd9c70bb7bc4c67f3bc234aa98a399d3a2f053b2f055318d4c698928f0761ea55818aaeed93af8868d0c8a229fb53e34afc30ec829c804324a5155cb64e20ef473dafe542319d5818afe77a26850645f02a6942c2bfe30128ac6574a195a80084351970e84f1842d878b31dfd68e077e715600e8cfca0834dc198549bbe789c70e085fc5d6414a9805467fec4e247aaef907457b5757b9b09c14450e69fe0845bd486dec61afb514bd7b57f639b7f69c563599e5791d881a9f119838c6db16582e4e5f45d49818931c48606727c557d7c36deaf18566900add95a409cf459d86031cefa0a4336b35623629812e529c9a3ca5c3b40d8b9d8ca937a69ecc61d4a1992ea627e74ca4e5f68fa0b0d58963178ecaeb3bc5af7d188393b17eaa2b86110a9cbce8c8bea95bc88b51084c047c477f1244e54998dd96fdee8015a63846a9f9b028039b9b6e8e8503dbfb7883fb562b84ca068edb3269084577a7f85ae744dd052dadcedb380b6f3ce842ace8c5020de0fc6442d05a5c08a41982303623fc7656c9ba89b8020860e7d9134aa8dcd341cc15e2182266590df241dd49ec90383243c5e337298717a79551ea59033142a6fc07cce892ce38cbb6a981808b5fd4f7b17d3b37eca3f5dfa37e07da9ef08f29fef1a48a058c8ae47274c997883e241262ce4778996ef992cf46cbe0b9afdfb9dc04f24d76258e094bc76275bbd51b2307233d2ae5d4ca045ff0fdc8ff5d183f04cbeb3c319b622421ca1576f688e2b8e71cef39c474a9cc596b0d4afe74a55cdad7972cd26457ea0416f23415f58ec239c918d948f744afe90277bae1012d3fe267f56393ce92f7cf5fc22a8a4014d153a24a033d92b84e9ca19e5d1eea53a4299d65db12edb6902afad720d8afee0fb3007f273bc1fbd708852a7aa70fb2677cf848cbdd2b644c34bfde71bc7f8e68983c0bcdad88887f88af01baa71ab78715c0d637755c85f9d60d6ad89c24ec7eb81f45c74593df9606b53e38c9cf3a331a4ce796009821d5c7ee5fc3dff5d39adfddd3f2c5f30df63f98f2ee44a266a8134ddbed17b36491fdc199d79d7c7b679f52ce7a95f311d8f509b43ca5783338ac891542ecd4c48af305737d8ce99e9740547fd8efe5277eabea3b37575d98bd9b90968624ef9a9eb8adf40d7627cf408dad9d0dcf19c6ea628607115d76f918e055d86e57d4d6cae742356dd12273fe2d848a720bcf3e6107b113bbdd4284de08c9860181ded35aaa47a8ce8257ff3425fdb02a695bff76be1314ee473d70e4697ff55c52891a9ff39d99e108ab688953ab2ace88018b4ad8b35e037a09bf925dd37dac091345aabb515d7f14ec365b9c26a60d958b9e73e3e2a85dacdef943223bc34e9301339e888d7baa7e8215b5d3d801338ef4b2687b6d24d8ab505ca01f5f8b41ab64ce79d563022bb03eea6f9d33fedd1d9ff27dcf91649b76571e514d809d30cc343501c5ec389e41dd2d7271acae87a55726bc92d6c64256912bd49e14caca37041d771e52eb09e39b463bee6ccf8e783d4ede50a4fd3e6dc2b36a451f49ee64f7fff952995fa18a80e91f810c9de000581169584bb80e12f05ca90660e0a1af75b6ad3d3c12ee15c927d09038951d514670e920205147ba8ab3b7c5e6366803a2d524c662f0ea9830cf77adc85129b828b8a3ba6c5bc5d1e892826c8ba82ca8bfe165c2a98e8366ad41253ad13723c631f2d06bc5a3b99b1ae49e35ca7a4d2c2fd2af92c6d8d2ea5309052e7a4d05e8f5323cc44eb60a7f7d24d1ee8e4f4129d15e6aef142850fd98d8a253d1f94aa1bffa517d97ad4630f775672cb434f8c030b0662201587d991f8887d80427fb234c045d371b1c1b05c5fca6a0c1650f608838322c24009bda051bef0f8afd004eb08bc24c946280e66dd4092a7c86d5e50737102833422f941333c9154aba12f66c789d85b6cf323f1ceb2d159ca27f6228b8a93c5878329996161b90328c42fbac26b50fd7dc3c4bd5c727e9c8d9b83907746b4a26cfe3ac949b66364b8b360fb5478d62c8f9a16f267eb82b81329b27c2f6920a1ee4b98c78cb36c66cad66fd2e255a15070a198292a55d62765593357531d7df71578714fb3e4f57822390e08fd27ca8bb231d790819145d8579e74aa9cadce9bce35d9186f69ed3448cf31f242d207a8aa751678bae55473485d1a14cc2755aa21d5270591d875924ef2c2638a10955617e7309d59311685089db94f9ee2ddcad4c1950a9150533beb294290226c0ae5b452fb7f55168df6c73c5b5155cc6e55fb2d882c3f044402db04078d72080eeddcacd017f72d91baafa73525246583c8a20ffd3baf3aeb78b6547fb1d37dbaa5efb7249a08453d2f4b823585f82cd60c06fb028e253352a744751ceb3cddab120c8b05979eef8d400960231fdea8cad4942e72df0f244a090af6cfc6f02b619ce333b95561289bb7e4cf8db4bc0cba994dc5a21185c0087128f71d8c5105388fa48df8328171114dc3de9a9a2bddc000caa194aeaf4a9b4d36ea75e171c1f25a4967c20ee6f5c46d61ac92d851752a48a8f76c7d566c4691712a569bdeb6e86978aa0022d1763e86c18a0851a428f7e9031cb5ff043bc08fa8f066cd716c666bb64ad0e66bf2c98b6fac8fe5647e88a86e331eb4b136df2077b61f86e706dbce24afedfe111de5e8b6d0e06e5f6a9c30b34a66b0767d0c34cc84f9ef6f4e44a308b624c6253c7ae0ece7c3a47d0e29b999c6f367041a1e3bb6709a387aff39d1ff777d833d54d37937aae276929f3aeadd5587bb38d264af7f34337439da9b1f884695b0db1c67a4ea6e1c7009996350394bc27d128cd7dfefd0d23ca8c3f1f2b577cac8d0bbca88891904059e44b383ddded28d3442b27111f99d114c97f63909b3bceeb074e7fc12f75cc24c4b08e2fb046788ba7a0e9c9458a9c34c4f7659972f3e3dfefb6a34706d2c04562deff8f8440205d8e372f68dce04babc2932dc1a494906006507909df7ee1a003e5a3df36e16339bf63fcf1549cbb096b6ba69b2cbee9f4a3eb039793c0c26deaea85007a5f44f73cf09e82fa8dcf2f032f06bd333022e1b9f7e2ae1a5bc6dc3004b120a4ce205781544fd1507d86ac1c76e8ebc617ad2538d07145fdca7026fba324ca4d9a5bd2187992c8c8e4f240585bf88b0c822281b10b96380473c885f8ab738c6e1c52750be4724ff6dcb31161793c6ba144fba70036a18d1ca96e73966fcc0e8da8d19bea3c020be60c80bfa3c87055b73cf4307243d8f9094809164e9216e4f01dc539c6c038b24ea55507c46c1416bb9af9ecfe128b7135e7c1feebeb9e9f93760d5b06385f106d2579a578eb4b83a5c8eb32efdf44007754ffc7685a14ec281865b174e279d03d208153f5327839967190f4c54dbe411ba5a8cb2c4d05e5370bf8ebc442708cb1caf077f2f1aaeca4c71494b269b6b2a295d7e41c91f655d50794af5abdf56c1bc0c6fdba870d32be04727350a81796fb0ad6790d02afbf624692fa6654118743cb10ce2722197968aee0ba3aa6729732fedab1cab02af19114fe258c7a962786dbfcc761fe9630d485ec166d4293e893ffec6ec300cd57049a5a477dbc56da2fe6d564f31be8721dc2a8b513d62e8e7993e171107d2057dfdd3df0c5e9bf13c374f93c0028262b4fdbbaf5ed24c770703ee1983a993a849119f95cf58dd2164ce7d47e5975f75e7ffee61737464ab56da968df6040444b50cd75c8c08959fd90c00417826783063ebe699aaf8236e55759234a7a734040eb65d4cbd0135cfe8546a82fb5a038385416018556bf5661cef7935b364fde062509dc97a9303cac35719011efe26cd15200c344310cd70046bc24cc7d1d5d7b4d633287b797c94713e60c7823dbb37d6308781e62e05ecd4dd023feec45ad60024aa1669d0309984616176c6b21945fe8b2df424b95e6bcae1fa452a7d4530debecc55652c4f601265426262b71b93210c3bfc80c98060688fb2da28ef800bb573c7ab43e338ff5f73f29134a5e5784149cd48217d539b392150c9fb3957d34dd7df7af5bb51a94acc2f028dc4e412ccd72a00a79dfa9c304d74776b517d27a103e1570d6e075fc62b641b3a0e7ba2892aba691ea50aa3f7e9c7c3a30d53c334e13dd11155bd7c8c72d2b7ba65c73fd4a3b229c6fc319d0fa537843129dd987727deefb373b570eb7e5982d0f2e30eb5ec8b3a32cb6a11a92d96d0f8ba201fe53f297a2e6d0fa7a27b27b12aeee6e64cb857acaf95976603f58a15027aafdd4bfc4e548f7c74ba17d3dd15596fe8914fe2e92e9080b714075005ad18564fbfc8099f87ca77e30f48ab58775718ecc9e7fead944c497481e458e9f92d1ee14e7be59d28f0ac26dc553d56aba292ab287278093ff5da4386d995a86b624c47a3624c7a4b7fdcd1eb668d6c3317bc355d9d1402f3dc683c3c000ecd59791e80402662407b3257a1ad10a593799e660eb46779b5280786e15a3e1f24f60829393ae9fd186f14de93c71a2916a304472033a1104cba5c35889edac081a894da0734ad8395613075be6376d4d9271007d006f10e222451368c224e17383af4c15706845fcf80c957d9b2cc77f47b2d6d1549c61960a809376ba55b0119b2658bbc1a28eb3eb66e4175665b792b0a38b766410884615fcb3a9eec832ca2b946920a1e5372e028cad7faf8ae3f603fda3a78168e9836c4f59cc8ddb39b1dd9457f1e81acaa71f5fc7ff90ea4c3edf48de7899c207257d52016aa01422f90a451771377f4b0b265b3a5885a3efdc1ba190ef75db1d443143ca7baa0ed93ac14995299356cd288436f6ec07830125c4978b297af83416d202c0c7b0e394a89b216c864a22e17aca67a99a2a6199f6aa9ac929fc2c27b974e646368bf1368043701711e8670d5ec78f5e5f47a4eaa84824bd9401398e2373cc1a2cbf5d172e7ad827ae8a60ef346851900f19cb2308126ff31e1fd413d192b5055dc3258704d6974760c74f702ec91de0a98398e3130083a0dafc0588f956ad0433b0fd07a344945f3cefb9ef109c6b196ecef48a277ac54bdae78ee39e51910b5a1dea5932bffe1833f113c272bfd7a0811c2ccd39f1018b66dbdcede23664e8b2ba71e89eef020f3deea90dac172b96b436eb00672b2fc960f5d2c40f792d146c81768487a51db411206b4dee8ab4bb5db264dc8fbd35661dfd7a020dc979df6fd57bd06f87d6d053f63bb872222d643c2d72998e05654aca30035a862b5af0e4f02cb5b8bd56edd49b66cdb2144bb90d6da3c171bf47b6eaf87b81f688e6ea9dd00acb0ad5711f9979b62a09e2da72509479b237dbc01467257a62277042aa1e90e0dbec189e5da571bcdf625ef90cbc645c6d7ad83264f9a5cc18fbd7f276cf04fc7a73df2a06cfb91a5cf74c4f25946edaa15dcc9fdc0f8f4acbfeef1aa43c44fc5f64856a7c363624d0b8431ecf19fe1ba5538197cc1cf384293a2f61087fdd7f76e969ececde9efa6594be0ed83d62bfe086d0c9f927137922c6d671a75649c835b2d37957c923fd8ac6ccd0fb38e2b6957a83e85778e0d960119f156dbc8a0df532d90679e9f1ffae9fad4474d11cf85386cfe171bea9990a64838f5c886b7bcc905167e0e0fe0ceed853c0078c44f790c17b0d2a617f03f1bf84f6e075755c013e85bba7c172a7126f28315339e7eaf7746f4de9af21706dc3af2d1e7f029b50b0f9da41d55fef9b47cfca47f689c63839c9088ef0c40823ac660db236a7d0f0772c1494970325b9a664de8afce58a003afaca182abf870326183e62fcb8b5f56b534f96cbc20b072176bb7ad3dbf410b80c6990628d20681f7a0101039b671d17dbbf88cd0195eabfc146b1caea06133ea8b40d811202e9dfb8dc24fd37f947b553c061e184f0d39e8eca53a52cd9b983b946ba6ff948d8e87012209fe56ee47bcdca71062325c3cba42eb5acbea93eb197374dbc8f63b35cd710521ece117f9d5d29cb285b3b67ae93f0ff67e639f22c8e72b46990f629722df83de916daba7ac472a81815b5c11d443111a567ee4f6a4b07c1a1ddb4329171ff810974b4e95bf7174fa9f6b1a01d060f07aefcd81e59bfa172d2669e0a178a2f7d06b4479a5f1a4087a9f447b48326505383ee4b058cdb0cea7e97b13566e5f571e5e2eb34360cd29d3e5f5ace02a1578bf554e35a6225d40657debd72dc0d2a87a9a3e46c8693ec10e790b1ee0767a1ac5345b1ef98659e915b6b408e4a42e1108037599300283e1748c2c2f47e5a77aa50e0d5b67687cdd8e8edb6ed639235b95331ad463024d786cd12f119ead05b82dd7d9bef8ecae598d315d407c45640cf46a9ecbe6ad2d38d0923945e3d19cf33236c8de103704dbe21d8a6016e421f4437aa37f72d4274cbe1d95999de4f06b6aa2ad7d753ea338edf91b9ddec812a1dda63f24b56e9621699666f51b0fb518dbacbeb80381fc38fcb7fee4432ed2ae99ef81cf1c0ffbb773ca1f482d7b0fdadd8734c610bb7b5e31494c73ca370b3cc9a0c728db01b32e254d4e14e0495ad08a8d9e7dd0a5d93146d8d5a197d1b85ebc516dfa8faa390a61b2af4122d58ca2df347a443b074b1e1fc388d9f0f03a0ff1442c29dcbe89abfb7901f2806b5a52ce8f9c6ae1db88c43594d5a358b6262d35e93f2e8cddb771ef0bd459681a73795b0502165016a4cc80faffc868103e8156838515da263b3486b99fda3899b2a14f0b9240fabce67627df6a69969c7b8a8cdf2858afbde2f338cebb88a273861106890d99bdf46e9604fe821ec9851d2b317717c1444b4ee3a9de4b3a2bf2af4a29f5cc08210ee698a50d56b49fb25a92819f342dfd784ea4bc1a68bc312a63b3233cfd4033f018e72a3bab636e328ba3ee1ef0d254ca1b86053999a7a59d370fda70c7c88cf98a05d01adaa95fd8fc556bd913af9ee37c8fed353e1948a5d66df3012b97e1ed6143be3f683f58a8e00fbfbe0800c436bb15ee23cd6541a94e0a09a1ccc3d25bc35ee5f33d2e68af44cc47406d3076560bb3981ba318676a89a6fbd91c4c93d3bae48af7c59ad1a151f6beff7aadf81f2f6d6a62ba2e0c9cb67e3358f4db3757029d556e0de856e5e29dd244a10be15d1046505cfb29ba2beb0a7662a981ead9a91f533a14eb015fa2ffe895202534115fdcf9e4e186488d9a4e3c8b2edac644436320c7beee72185bac2ab5de49449fcf679234e5e6cc8a81cc0b263bf6a8f9670cd7b0ae11573465af4081cf23ed58a841a73546fdf3fb25a77242a04e0e7ca5e1e7cf91dc76c089aa6ace228f697b4104c465b7a1a1f54d84ba8bcd8b5eb0591d31999cabb1da039e90cf13ac99298f65793794cacf15d3baa810af76294f7ead0edc9e1d0bbc0a24a500bcdc8833cdf7f5fc2892f105a8f52a8169c98f325d69ede700cee9309d1c5e8cd39ed35df35ab80c434b2ae4634b6c71cec3e20892136453ab77758bee8221e145a29f0a312b18079080d97ed824a21d9cfffffd8410cd51a187d673fa1191e0996138c384e7d3d03a7dfccd09ec4d0ef5166c420b383a2c2c75b7493cd11b18dfb6abb431ba9458ccb1ea20638c92344525328cd7ab8e1cf3f42fbb68b38b067bbd909222d47b4d961ca0553874ed409e67aede0863f59926212e3086cb02f9173885d37761c3ca54677146be4841c72996bbd8287049c58ab8fc587013730384a71e829ff1182998bd3bb9f77a201647d6f30ff98997f35e114e0c41738d14e535dac8ca04cd8489a1e0a4932ced0888caf59ddb84b4d99aa697b9ed36537e6657d5ed82a53561d326ba22fcd11fd2f4f32ba8ec0af5b85dd80e8e06a89cdfa64b31b9fc840a64697ad1a19c4bac1a1def9ae06f7f90ffc50747c23750260b93f8a9fb160ed7d9622c6b3d4fba6d1efc303c6bb6d8dc4e88a3ff21c4049a446e3fe584b676274fa905dd92cb2a885df98623e68f28000852bae8e13cee5bc011be5857015a22351cae3f2f000f9db42b44eb6e2ae4c28fdf659e1868b222cef7b8063125133e0fd4561cbc9dfc02f8df089da996bfb32ca8e153c4ed79c81789d1e924528ae2e66bb283011abcd9c55d610987ab2c9d1ac58fc2081b67bc4a133e72ef962a01724b6b0cb6c6fdaf3f97aafac902a46b32772f15e7bdc1018b3c0949601be2cf41fe1af2dec4b1f2ef2782bcb4b6bb6b093565ac033c5d4d60f5c30c2ecc82b05ddb9f065a2e7ee4543f667eba1f578fe2508cf371b6c30e75a6f4487e7ca5f3a607ba11b4706cb793caee45f6bc5c917fcd0556ec4b21105fdae01457b74a0ce4a931a776abd11493f47252ef906cc38a29f8cbfa0cd3eeb689d0440c4112e5eec28040e43c333911ac62d469493b3ce0189573bd79a0417c6c0477d9ad31d7ba194e2eb31b6353cd50416e497d58e9d4838d691c67ef075a3883543f767659ff9bbf422ab73d77321604cdecc030f6f286eede1152e45bd82930c3d7743668e49eb3b18a594486c4a0ad917d44354eed719dd73ddaa34f6e537395c9b7a1cbee873dccfc790424e34f6939e53159afdc16351adcba2d8e9b3b3dda6b9f628397a8f9553347ec10952f4f04b9d7db461aae263cbec034f2011f4a7c33312893818a84118a7356ac8a8c72c44776a30b6a5709e492f70432b17c31cffcea3f576d50c8fe55f6ac1de636dbe13b64f205110c6b7e72121268f3c7315f47fb6170aeba45b974133679d5a151e1d88227e782eeaabdd0c7c5daa4759302521791abee787dee68adc280367fb57c55c82bcbe3cb2e169bf1a08c93d96fbbb269258a59d371d46607741c5b3e9edd24fc3407c2404ce1dcb5cb8d95f11aa5537b94f6cf3586cd2be59f675a52970cfa833c54878c347aff378884f8b4f4451e7a144dc200c0c76ea9c65e1dfd84872c3c3fc10c7689b07bc82d9a6085432805ce3a02358a29ef74d7590f2232798a1f39f6f9cd7492f1f59ecd1e11dad3187585117a88f36373898b00695e8eb45b9ff935e609dd770c9d6600f891c1e5d13d3af1a8ad8f854b49b4c713eefa534597241202f0cb6db8a3b92e2d44836230f1a0453ebfcc431e94f491a6db030ff32cf3c954fe6043443b55336806f4f263c57329f8e432a7a86f504405f3c06806f85593bf9f9fe5bedc8d0c574472077a6f1cb8083378b9b4f9a36a54a9aa05bc36935442eb64546e221ef35fbc7fef9719ea4c988481954d3be216d4e914c40378fdc2162bf0117a156fe21591f4f0e67a541f7eb7a53fab1df21bec07465bd840eb3086b16b2d1b6ae763d6a9499e684db0292f9be64c7d960408c25c2878eb5ff6e615b7d832ff0e186c7e2346805d77c0b82a8b8be30a2f23c7f82d100c92bbf4d5b2be1a3418879fe7eec3abd53f2e48f89786c8af99dd24c2b2be845780ecce40c5dd23c863adaeb6d4e0e8d6575b8bf1f7a8976cc449fc1cc92147ed1964bd86eafe45f6f3d0b2039e636d60ea3248667dd542f58641187b1fe3c77b10f676057443e084a8b8e9a44bf1f5570c36af5c6a2be6f0a6da39dac626242806ced058c8419eadf58cb91b0282f0cfcf8bbc40f45b8e6db739c6661bc0e3441985913826913673f24e9c930589ec2c0c7580b58dd52eec3f50ece56800bda6462f47ab89496892b9265d699088f270c0c69f4104484e8052572847131cfbbada13bbd176e2b53528effb2638adcc5bb776f1f573e1eb51d898bbdfe0bfb31c22ae6b63c3252f73cca5b9ebcf3207d04539108293ad0d586e74a0a77fe7e8e2c8f8e0597ab2abac1e554076840bcaf178aed8c5aa39ddd581f498ee83a1635967374f6924e983e804359ca7f59deb02a32739d5d5c9f451af5fa62e82811b950b924649d554489676b683aab7e3affef44793b8eb44395735be389b81e6f5331094d808d01b255b57cf878c50fced16b5a3f63865ea3c61e525b453e7a93c1d955ce824b96f1ba30ee27bebebb1e72169befba918708799e9d9dca129f4779a8ca1bd82bbb9941e25c81184e1b49588102984bec6f4c90dfb84848dcd6c6895a414a147682f485cf236a8876d5650350b2c8c55a4b620bb83ca66c4b83ecc4275f6512bc50cabbc0e106d1e2cd4c73b2ceb6ce08f701814987ed872b0bf74d81bebd47ae2056dec901f652cabed8706a26b76c29b825cf24996f7cc36ce8b662a2038584272300ee415ff386986558ca73e5163f160fc401ebaf7c8dd83c89355af1c28b7a1feaa543118701a51a61388a2ace988957655e06fab029bc51cfaf448fae796b7cd34da60e44ac84651fa8e69c94f52dcad0b94c4c2117bee2957de213a12a60633b2e6468bcc8c5d032b9d4d34574a83b95da5573ccbe1af17ef3c962164d8ae7a3f6245f348b558eb1555ed1feabbc622e89a0b559e291d3e592f0325a8a3a3e2851367f134c1182455dddc4e879d8dd2b1c8c40d67793cd4b77537b09c4fd7f03e64cfddcd5ea8cecc4e15693fb2cb79572e05d9f8c3e466b11acbba31eba6381f538164d2f7171350ecb5033ef0b12fb7b65d24a356126a3b81eddc992b3705c6af140a6798a2d627f2f231691836509ab36a334c82fdb4a486480d2e8ca83b8db5c480d19dff8672f7f624cd3988d419d383b38cbcbf0244c5ece8c936bf8e0cf544a9ce5a6923e53615cc49c076fee942441dde529f5b420c5dd3ff1de5e4cd9de05420b48ac56745ad77ec34818f8b8d84be7cb89a7fe6d1239fc11a67de559db8087786e9ffc41d0486e14c6221ba88e69a74ab376e29eadde090e40e00d8ef34f342e9b9bbed14931f06f8c689ff644ef9e12f30891538e9d999279f7a91a1029fefa674df11591adb02a34b5ee6a9d9145d156da4ca3405c99ae8731e0322e1e2926495172310a983e391e6621219f3e9f8fc25c639e3a3e20d378df4ca58752092f692c870acee8777bdb50ce179b393296eb1975f382e495d8fa19e5fb1705270242388c9d1e01b96865578550286fb2f882b5e4983726e5f8706f83d2cf30c50272e096b2975d4690ac1cd8bb88f472fe5dbd2344f938607de48bdc80cd96e0a2f37339d0a958238a7bc54ef00cffaf3d12c92f3d1c13f6d7dd848b0a7d089a52f65e0858c670679e9456586180bcecb5c8ec73508c9795b42d50fd29bf51a0c4ca54c1995a4413aa04c937780ba03cb127a56176bac347355d9ccc756af33bfe19a42b0af9500fda0d3658ea73e8a87367383e419a054c02734bf67f38dc463c2da4fc94efd2428455cb2eacc2b44ebc4fc14812e96f6d58a6c9848aef7797708ea3e2d4228a3d50857e81430547c2f342482fe3d2ced460a1f4e0ad511fc3493fecc71cd0ef49c17d8ca13d5ead503180e07d06f7cc074a4c3a7f738995e990d5424f3fa530d639a9e8b5e3e1ae573d0190b65452e4247837c5024256ff6ad3a28f0e618eca7b0a18491536692355a881fce4e5644ae19b33d5efd529a02266d06a1c50556cf5f9c1f678d41490a86a66e79cda238ffb43c49bbd0b391df8ac1cece5cadb031329ccdba73577c66a4ea5046850646d2480e4f554e6814669244686f6c660003e5ea67d0194b41426153de185786cf5c221c37b6ae56ff95bf7ead2bf1ae2dc6e1d068261be53c709ed26c6742baae9c4728c6be60a7237d40615fed0afb0d30c5387731b37716d0babe71eb74971bfe15b117e48c9aa70e5f39d386d1cdd844ec713219f4e34588b65c619e507a162143bb4acc6477f9a1add8ae9a619620ca66c99557529970f917329566312622f3cadfe245aaeb6e3fe2a3ffb32a7d13f8be99a36ac68a96fd1a685652a55687ab318138bc3b1b19846a66cb0647becde29945d75ade1a4d62c077f6a6291e14c499a021cf41e0d959b5487714df060846c2b7cf22d9ed87fd9f03518c1a93f1e4f085c1dc7339a96e9981f3cbe08821e6e79f39464077c11c53d60e9c5ee0a86513c21c61a951ec506c83e78ae5cb5e00639c40863f37e9a7b65db90184ce669867d17a7889110fa25dcb5627ce7202277e44962e59a19cbf5f70e065296a8233aac8464b16c04d3136295040b5fe786536fa96a3c44aacc6c2362c5b9271ad47ef43fad82755542c12fbaac891ee6c40d28e120e6dca0cc9cfa511dff6158114468f385637cf2b6f952770fe5586674c5a5ccd86f82b3c12ef7d9cb31d3f29645520a0b0f921ba9aad06ebb6368b2b35d93934e47583ab0877704c841144453d2c221d76cd7a3bfd827a9b90c0a5099d7c649666c71f8407bfe259f146187b95eef65086bf15ae4202e8b0a9b9bfd0f8778ded40b607f40702b1b2a03e70230262d1c381e0f3961e8984f2689a6b5f6d7329c88b6ee0c8a107a44aa116486507a44b2a00607f9eb6d0e22efbdb3a6cced9296808f59c7d064220fcf3d2845a757e134abb1c26997782cc79fa190ac16c59d2515c8fdc2ca1fb043df422188d610ff534b2c6c2c3a389e914446e8d7b9d5edd181560a3d2ba765d07ce3ef7174dcefd4805e599987525255353e79f75c2c88d5460fe626ce799a59babe85a7aaed0328288bc3385564b9e1668fab098b63764c9574421464ff7b2911a7faf508802ecd6423820472dfe1194582028967cba93baddee260361b7e6c291f1c2f12de81cd2b2a307a1ce275491a62226633739a98a88a6aec99090a644ba4c7f0696bbac5e139760ff67bb2756c22741f3aaf7b05ff4c559ed109c5177419b200072a7b3909985f381a8af51cf15a2a156e14a5ef19801808fe3336d61856bef2770ba9fb5bc4c928e5c846f0f676e94349a11aa30b44ac7775ef3e86e1e74e24ee74446ba1ad85832596a9809a22f69ef16ef1eeff26fc4756a8e50b029cad47e8959cd755c874a74fb366e8c73d31a39b6135695af25d5c5ef6908599d52bb1e9db43b87bc95ae3e1f271ab3288eeb33a8229c6c30fd18168cf356d3a3a88daf469c4dbdee4bdb2d11af33ae644c5dc9df3c2d33e8154b146227f1caa23dbde154bbaa9d4f8b447bd418bf2a66576f12ac65c1923fbd062c207cb184974c1acb33fd1122d6979bbf138c75008c600a003d3a6f55590b389ea7fd7c63ebe21e44c88d1c0b54000e2d3dcb453e157f4c99d127e8536e9250326ecd2c18c0532acf62e3a1399ad12a9e27154b4abf02131f2fc15cac6b012e05096984c7824d802856c739d34fc69287772213b8626d2fa1634aad27725fa132cff10826b73ab90b64e67f43991ef0e86dbe1b73ec050a3a47ed6df44de58e6e9ddbc4acfa368dcd690a20b21483f03b1814951d7110069073e835d435e5fc9b74f069d257945596cd6cd86767bf5d0b26311985fa69387783f31b383857fd29c1d147c8ad69b1a084456cf9932da75e16cf9110b1fe908996173410a18d95faae7e6575e2794acf7a4530479b6d9b5339d825c6aec3997a6b74c25e81c2107cbc7fce51cc110628daaf8b605b044abc8b97363740e9a9e24675b16b18ea69150c0336355f69711255887f188ad56af179dd732b3c4dc8f7a173e971dd8dd04c64109e62a7ff582a667f2fefd760d63cb5ce44e472653c75fdf44b32a6ee42e95db20fa614a3b7a4f6d7ee7c9a7c9ff293b0a6229c46f3f7c54c822a482e3ab75581eb810e8f541891b6cd7c0ce418dcb0acbfb91a107ca1c492bc5718825ec79687cd462575ad298740c9075df312bf1b258e94332411e7403b88e42a6daad3cc95a47cdf8e9023c0a1abcc4b0209b037030cd11b38ce38b1f2b3dc4dff6d5ac230232dcff4485ecac98b9dc10816cbf53e258ec4a6e3291226b7aa1a41d880e32c565d9c4c2379d1387743fdbf8b26eefc510f5d9fa76d78b39c05c9a756f17fea0d4b22ac7de50f93c079dcd92996daee4f4f14dca78e9239c3fbf4f910e1c2980012e35729abc3ec58085da876bdb1a5dc94af5d49c14ed6de4912b518415734edc0e02e7239ccd8e3561da47cc9105a9d299b7dc873127e7de45d9a95a7ec42611142aa946cfe05a9cf9901514889413c505fceb833ab70003dada8d2f30f7feabc77bc058fe6c5eae214b7a09df4425d77afd62df94adc6651c171d013a084af1f06a0cc854d4a5ead707c3436adc4f8a316e7fa1399c93c91adefbab862ce4451561c454bbb255d1513f94f7a02e45e210101abf81ec963d607ec987b4ad8ad7f42c35f1a3ebb8c967573f3b88fcd5f6480e3b34a6de828f4a803fcd329518736b02e1889040079d5e036f8fdf4e10490dee1bdf5704a67fd6102a26aa8fc92903635eb00fcd61b80dd083c48675a8be7367dabaf9fe720c048464e31a56f36cde8a9e00eb99ec7fd540a7787940d29e60f2a1b388a704f8ee735addace8dc4010b17b67a3fa3f386f8a62e0f492e3062fb58182f31c20e25814ccd368e7cf93ab9bb3efe26fc8164c74932fd7315cbb5aaddc1dfabf108edf4bcf4f24a5bc5a947d6a6dd17d7db1033a8809ca6a232d960e0b7b4494b1a9f3439ee8d4e1370b77382f4b91b995f4240111448d6cb04dc5f65209f432f2d30529a6388e2bc7510148b56ec0e8e4467c96eb8d15f22b8b4080863902265e3a3a3501cf13e8d590011686c0f5ed563e1f6564ca77414d2ea097555b2f28d6919988d6ce855d3aa790b185f67b485e1160f97b3146ebd2bc1dd848b01417affe7889920c6cda46306e40780eb7115af9d76a3c768f20417ef7a321defe4ae71518f200613a4e4ee429b2bc457febd640bcd5a6126069e0a3f25d9360edc0b10029acf8b804f268b4e2625168ec1b530a25119e2d67065df60364e3400a79040fa5c2b0faa39b3c18cef614521ce0b0c6923010005b65d3aa227b11644e35b2fba1d60f53f04ef07ce8d6de0de500bfbaec82668093786b92b4a2e7fe9d82f4da36ef91c91af3b8dddb7e1c91801cbb48efc3f8e3942108e18f9d62be2be8c1ca2520aea4a915e49677099ee86dadaec8978e2716aee08892381a5635d8a6ec70e82786c0b863ec3f242ab4b69629f177ab1f38388f866a58526f0d9f52cba73dd3862d5a96a4301d0f48370e6097aec685e69409d935fedc9b4eccffbcde7a3fcc6f0b743878d4f740c3b7e7f4e616acacf4fdbe6c119e9b3064a6f8aa408604223d3f139909012b34fc7f9bccb50805b50cfdc1d8c5a9e1a4bf742d29f88bdce682d3fd99dc27f57b6d81bcd6392ce8baf9cb4ff49071b9ea39f49a51a1686e9037b0fff6bc6537f15cfa82c0bb894d19da9f20fad1f48d28a5e8a40dc0531af6ba8cceb326872583f0f18c6485038186207a123c0b882ac9226d6e4c586c46790dc7c29d7c9f79afaf4a5e67439975830340e4e7edb75f9e43e0f4274be426e00271e2716d7cfae2fa8af54371055c823f948dfbb5f0d1273736364bedad1bfe7bd323be9a86891daeb089701d9a86c900de30a7bbe54563504214f110b24a160bc18686263412ab256990d224921992e070dffb3a52ad2d5bbba4801d49c1ccaa13b6f7ea8fef5b7b52bab4897d2a88cb9ed52b79ccc6b0e7308cbcb0a9271cd10b0dcfaf2117edfffefabbe9466483ed35ae05e8d769b4fc81a47d5bab171683bfd0e9d25c93c5a4feaee5e3deff7aba9bb7c0cf59584ce46712a4763156a731870d2fb7e4ae67f1295b46ebc21a11bfecc9ce063d45d9b55564e2215b9006805128ff847a8fe91e963ce00473c5dfc79e1f42f3c40034f2a8af8f64a3163f2322f30a560f98892b99af99659a546688fd53034a019357d38401d0290d7d829d4c0901185b8c984f36a1e817ac48255a5e5fc42db8f74e4f9bfb12b26d91ce48c5cb43865df5234a22d9c28d07e1ec5f78ea4730ca44c2f339283305cbaa181b703fb1d959c70f01cd1a63c6a3600b9c2c036626daa7cf211860d6812a62c7f547536cac3ffdbcce6982a41794956f4134d272901d35613a9524accf29dcdfa4830d4cdf1e378db0ff1d75008869c1179fde37b1011c00d952b6830275567fc5f3b515c8ac0fc38f92aee663187533a850aa6adb15bb2bbcc98ca8d47cbe9e8b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闭包浅谈--从函数式编程的角度</title>
    <link href="/2023/04/14/Programing/20230414-Y-combinator%E4%B8%8ELambda%E9%80%92%E5%BD%92/"/>
    <url>/2023/04/14/Programing/20230414-Y-combinator%E4%B8%8ELambda%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h2 id="闭包的概念"><a class="markdownIt-Anchor" href="#闭包的概念"></a> 闭包的概念</h2><h3 id="抽象代数中的闭包"><a class="markdownIt-Anchor" href="#抽象代数中的闭包"></a> 抽象代数中的闭包</h3><h3 id="函数式编程中的闭包"><a class="markdownIt-Anchor" href="#函数式编程中的闭包"></a> 函数式编程中的闭包</h3><h3 id="y-combinator与lambda递归"><a class="markdownIt-Anchor" href="#y-combinator与lambda递归"></a> Y-combinator与Lambda递归</h3>]]></content>
    
    
    <categories>
      
      <category>programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Phase-Shifting Coder</title>
    <link href="/2023/04/09/AI-Learning/20230409-PSC/"/>
    <url>/2023/04/09/AI-Learning/20230409-PSC/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d83fd9379b58c829c6f3a6db5cbb581761c148fbc46221ae468b8d0466aaf8c2">af01d0b7d63db801117cb0ef9676516de60ea7379aff00710d9a04271f21054e52bad8a399076abf23ed67507686c71b960477ef41f5ce8101ccbf641435e42464adf33717686bcc6eb771a236def88d8661ef2919664aa541d781bfc5b91fa013b21610dc0a474192c9d0a7ea02b9ae0daae153f91ae87f3d3194575d5e69413c86376e3bb239c7987aa104bf28bf5fd4fc92df181b5fe1147314d18dd6ad4c1124b66581130621004daa6be39f41f8562b88d547e54d585f9a1ea7c3d93b03d0285e91bd0c642cb412d4e34f61c3995810e46df12467b66346030e283280007873a737ac2ad76e4f0a174d0c481d534cabd28b34660ab19b24b15afdfed2bc30bb733d94b9a27fa2755d8aede6f4845248873cefb7eca0c280aab8c349d22d7f3040b96d2da2935a3c1653b1db60f71456d0a5609705c88ba78594191a02bd9065b8167a5ee6ea7d70559b384dccfaf2486a57f02d058c6c14b37fa5b47e079cabba190b4efa3e2234e06008a0a0b842f89f5a2edcc92fd68eb2ce68b22c44b74052d05af5d90acc092f5876310686f35d2a111fad404ace72ad4d97c07963507477d30fb5da20951a432f3215afa6a0c9193b1ec23e2b7e45fcd9d5c9815f7ab022fdae1e9d3ab399662c43e4f0130f0a291a4c585868aac06dbcc54431fe9765c74673e0f745802b8bc51c1f99be8ead9d5e2cf5e8de393c5ec155c4187fc41b570c99975497cae04a103fa6b0456c1979635b908e0b883ba111fb0039bb24854f62b15ffbd8d53ae49496e9e0404b0e4f64ed31d7a5032d5f33b24b8c5d523743293bdf24a165328639ff6a91c52652b05fce00fc025672a944004e6b72070db435b524f449a567a93ae67a4dc9769cf60d202a50695f1213abc5c57ca7a6919e40cb1aede1dfd5995c4dcdcdad233744d2e0251704ca1d9fc68e183ec17bae316e8f546bbba01b0da574e0f69e9c9bcb080b1797a36cd0ccdf2fabc65fe213e554c6173d829ba9e5391085eb3b0b17255daa609b110cbee66507a750e78c3c2ae6030146f15fd5aaf67407cde7131f6b838821a3b12ded6d5e80d3c4185b354e8c94f4ce9aaad0b507d350cf9e65e64b1f7236d961996c0c857109583200a00a800fc764838a26dfa979c59f28942547451fa6127e365b166d9692776b3b47efb692558051dbd9e5f755ef60273b92c50cd1624d952d1f7d5c18650b646537eea68a279830c0ef4a737a04189a7a9cdc7b168196e94ae24dc9d5b60fc18973eaf9dbd22a695bc771d33809238dc2c777694cc6a584cdf31194e3cec7342090c11248f734c561fcfb6be6f21e22e8677a413c057bbfaea15b23e4c77c1292634d4575cb1d87c81ba187d84fcb58edbc325fc68f76fbef4a7ce987f17598d629a7f90f3d9a6fe2ffa25b21600f2f08f4056c3b6e1223915e9103a8ca6ffbb0a94108577ee312a76d6427c03b524be4ce5a5c1e264b9b4b603d83f9c1b3bc31704fe41b2c216e03627414d178c9186688a15de6ae08be152822461e3a5f7db00f1325559c4a5395ebcc3e82e5a5a3b40e941c1b40e6a3bd2cf14791269268da2289a863fe1d9ee178f473d22f7b2fa047141592b27632e78a302f82f51cf6d2cf3aaea4ae85ede0e3b664af5c910671b87c078e6bf9fad2abac8d7043ac01c031937b769546df2801be63c30ae7f1f1d651908276d400f0c5c27cf184b6c4512f5f779fbaa8cbe2ecfd1c24eed6fa95081e4a71a94f0b91cf108b9156cdedbd6debe9fad3e60006e7a2469cfc0c08df6b7a6e890f92c26fca9af3dec4e961153cea4663d658d12a4d1a7af34d0086d4278b4458c006e4be52051ef6bef80055e49953e2dbb283ecaf2ac27516a3ebab4836647c3f721ac0d7e47345ede985d312017c14644040fe336b14b5ac83cb1054f048192986a5e9fffa2a75b6f50ac990a6a29e923bec6de485db1209f9fd07a9f0e0ed2d39192e5db3fe05146ccc5598b8a5a4f4dbbe07e5589b2968af38b9ac7f23eb0797e95a628c8653a76b2ea4f88459694f31907f397b1058ebb93471a617a408a2bfde0fe264c36463c0b2489522d69cd834f8935fc57d6f9e07842cf93964995f4a2f33c0b430b46cb6b119f252e9c68c524db8f83da43836d23f4b2b15025897bc21e6306a24cf6c7de1844ee186ada8fcc936bc0cb63b8e65da350d8d438d55e957f1e3530998395162654c0f7bce96ba23204717388c33890cdc9a5076226348c2dc1d2d9b518e53660ab9a72634f4dddac2ae6982e78382ba1f495ff704aba71489efa1d7b73827aa1e9be9163715c5e8781f2f0a67055b80a942aeffd35ec1e74c3b3dcf41e68826ca922234abc867b6877bf22500ac2a78b517de645e2848bf03feb6ff1cd71032d81a195e564fa67563e09712ec09fed3394284da130e40fc43285ddea2aed7fb8485af4d8b3c3ee9d81352054c39350fef10301c5912a2611e6f0e96a75db1f052a6248d0f87c95b34fdc2d7464d9bce938f6cf6d37445f06ee751ae7fc018d445743b7d8b0b2e1aacca5a5d94d15bc99aeddd91b4dea9f76a9cae8c5f67a917d252f1cf531ce9ded15240bb5b2cb3db54b24379e74f1da777b0ac1d2bf0ee6110dd935c6ae550a48da77dcec611fcd97e5ae4f3b772c4544cb46fda1e5bfb3059fb1973cd684f76ef0b84c9535258ddcebe678ead2193785d267329927c649fa58932362bf9702161c3f537c9a154b093024a58b5eb7be62cf1006ff8cdc7c6cfb606e8769c16d707d4c60a76ade724a275e4b903067442629db6145a05ce718122f5f890c1d91ad12c65344bda2aa45bb8305abf5613f7deebea03e6f2fc27929a16fe8beb5308d914696fd4f73ee0e1657c84cfa81922c2ecdd98b4c272541d7612be617d02206e6cec2cdb0eb013d0e58838931ee94c354bf31fc372f2777af486bbce8142a086d9688694a0311e2d5cfbd17c4222c07a204e6a2e6cc996fe117d3e949b89ce53d265c64bd5de1f775a94242168ee944565e89ada7f984b0fe9881dbe5acfb891945cd348b18647644d563a35223f0852cb69103569ebf48517be698191f1f48356bd8865ecd21ffbdb2159e0ee8f21773da75d4cf34be966878feca703c4b4dade29a2f180c35595dd5016f53d85fe3c3427405253b1b7f148a352420543f3e529221e80fef55a752f054eaddc96cff965f42fbaec40bebfaadd9195ba283aad6fd5a1a4bb51900463e94d4fa7c8c2a7b6606ad4eafe6967bd4b1305e6339fd02db58a0498a0cb3dda49b937eeb53472eb605c545f8c45eef316e895a713379194c815537ba2114610da7c880b05c1eb9545ace6f5c46de02b6202cce21faea8f05b59e06d67f562801e2b8f5c93bd0909bdc18ef1844429d761227294dba11a3ed224e84b206ec919983178d88f277486be808269607fa9bf6c1681d3c15d7f71c4ea58d4d66d8ed488de9e462433111344b7c877a039daa6bdddd3b7222e3ce75d854bb391ef694b5afd8ec522cb128c100ef2352fa484787784679200c28f30f9864f45525e156856ff54806a7ab118fae2d8ae6b069149d9ea61044e8a942964a9880dc0d57827bfc85a64eee28c1e123bd3c12be30ab30217ea7bb0c1c7adc3a28104a484e915e38ca44539232c32259055fd9a6852f8344aa7a7fc65124cc7ecf1a15c5264f87a44d634404e5734b0cb65b4d92747abde12a4a523948ddfe505afdc8c8e46396b60e4115b28ad95a7130b13ec0924ed9801099f8caf894b84fbc97bbc95d0bb45d54ef5906e9a03d99e42e177325ff28896f6d6d1ad9d68f741f137dfc6f2a2409e207c1c4180b859cfd8d6f81db7c1eb8757e66c67c0acdfc27ab72f365644233acb1bc9739be46df7d7746acf70ab219b9fcd8cc63682fbd002f0e9438f01369c37ad16ea3caeb58d0959475da5213c54328eb0f97c836972b40c8ea3b562bb314523e6b52714943b6f8d83a9855285b1e8639891080c68dde5e1772a6711d936d9f5c0d69890aea4eb0e1c3a6cd033f7f638a6778095b2de2c321d0b6731d9ae1a8f46ba424a90cbf61f8a0db24315c51574279a646beaea7941e0adf5d0a3aa72fd90e8019f24068f571e9f5c8103b997d5c0ab5918a52d640c02bee5dc2e65383c233c8cc47ce633614b9be4c7b15c97a70b52fbd7cf887d3abf4a4386912ac7eebfefcbf626e98b5b0c3750dbe74d07eccc5d36856591ee6d7946ef10657e9bc8ce478e7876ab3e2132d04245c222329ef59f900ea3e1b2db596b8edb691e3779a960e9faad6d6b51785b5b5c6cb5f480a84671fd3f6369e8f8686f359782ead577e39a98dfe66e44276564ae080d79aba81586c3a7132ca0894dc4b83ff0d606fa41137b98b09995f40098fe043511abd5c6808806eaf1f56c1e6c8420a144a3ca27aede01f71dac7094dcd92ba0f39ab3faf9eb9952540db9a1d72174ae441cee37125b2d1630d4e1fbd8167dd3369cee2624b23b3d936ed5bbd7cb61c0ca4cbb412faf3ff5d772803a3368d98743c372a6c8245eb860fac6917ad4917b9ff6fdce15f36e0f115b3a7e41d9d466a419f0c8a04df232fdab80375caf5186f45af7c94e741b725ddedc96637907cb3cbb3f1b3348902387b491b1f5f2d2c0902016a86f91500471f196babbb4c46ba7d41f06d0bde07c6fc6e9ad234a3948f8518cdc7a34809573a83631d499ed9217e98215d1f5c94fc55ab9577d494aefe55aace3eafdb3e849487495fbc08902e858d6f88217b0d32458c9e56f315d8a706d86c0a349605467b133701529a0fea08d768fdfc9a5abd204ab8246f047e8d969d45e30540723c25cfc8f371f366a6516b8cc71c3bf2bdebf797d934deb63efc416c19c4085c8173e85f972675d8a3b2e25aa031d930e99d3d966d1fe5c0aa7af2e1527b612df8f78e5b10305f9fa4233904b41c92b35f0b46cf88e7638653fe3f7b2250dadad82d5338ddd99349cd07bb004bbea0e82f14cf0ed063bfdca67cfe0a65c1f8862b1e1daf69b00954fe8c10f3b390b38a70f817408b4723b7e0daa790d1558f221747424e729befca6542f2cad9c72397e955c634154cb5b5db1f5e35e2ac6e6e646758ca52b537b0bd685367a137155dea67fbec430ef13d5769476ccc1c73e3ed3b893a226cbc4f97dc3bd8693e7146ab4c8b408d1e799d4e420ca8f8e61abc16e04df0959c9c83f97770f65b5ecf7d5ecec49cb690e3bd99af5676fb5804e7a07e6d6b8d441c86cdc71bb757d702aff73415ab9038101f8271f20d6b6e379118dae399580b76c9ac051b719559242a1f23c88cee69ebf21524c9311426ac1893f9ed0610f96e1251adc111b491c0492771560e38d684426c030c8c69f7497cce477d3db3b45066dc09821174a0a0bae1fd6fddcb2cf3fcaf0141196adb92b7910af95e059baa52ea81b6cc142b2b874abfff3a4d6b01fdbd8234e72df18806e71ae8e3154bd528d769b1645faf4327c5ddd2bbe3e4291d9f8b7ba902ca4d153d7e78e708def47b33d0b6e38c6c60654c08fe70090ac027f2c9d051d2cacfae7ed85b846d2c97af782c108ec1224ca7b2d013e6ab58a0c57312a5a30ebcb82736301f2b08a409befe1abc2c33122e30896c13b0ad08cc3a427bc9d38621debe826ebc5a7ca03313f9ffb76cb8e73309410dc04bed1c471d34133b9a94d9c802951dae2fbe72ae36e1663452f57b96a6ac33f9bd91c9f584a29b98721f864b935114e35562cf843f27376e2d26b9819f239267046cf447b5c1ca0066b0cc6d848bd5d504bde9d88fd36eacd916dd6c1295e6d6f2a0b9ca533d74068bc95903b5b0f8a52d7854b78e4ad3caad97f3bc0f4c1eae301869c6a05246cc1a9af7f261fcb8de18aab74c164b5e4e4bd64dd097cb1194d1865768d8b0f9328d8fb5f9ecdc5886564e05afa6315b55a07584127196541a55ac55fa719994c73b68a7a305f7e04b7ef76fb00896c9810c7536cd52510661bccaf2ecf9b2cf3c41e15b8817c4a7d936a9b976cff761a4618bf1d691d535bf9bf6c441773d654d30a69b241e058ab187e84f6715ae659e19899b3a1e9658f031b5963a614d5a614e7ac57f84dc5cca4e738c390955b493b35cbd745090086a4f86948ff2121f44cfcce5bfac40989cf50e8b6a760f9a7bbbab70313c652138bcec299ffd0147e99c5bb681e95089bb63489c6225520f1766da0656e2e4331d90b0ee22bb9e4195cec49de5f4deff446e61685d0bd47efb8b203664dfc8da06c184eb6fe99f075e3508e45de54448a73b98990f1c5be2b2f5f7001f708a94a1e1c1475cf418be505a672ac3f230424d6ac2bd811d41400f5d2c9db0ae7fb29a6f19137f6944085cca7d852f0f548626a71a578ba7207aace8ae48b546ef733995988e2c6e70ba604f7d478ece65fda7f4f97265aae3392c5f795b2b587dacff4ca50a948180fa16cc2adf87b228fdac4bcad991e626611710221a140593bfc90254cdd0de632e822a396bf466edd89c895833dc4bf2bf861a556564ffe04a5c5630330485cdb6dae3bc0e53a6e59f617d264f221a7efd61a7225f9643816d6053e9018b13583d3612776999657552e1abc7c58ce858a0e9d2e2ee1238b35217503db4dd4deb9399b7cb36426ab0fa3ac99f8c967104a0ee7b33d372c6cd5dc0bb8a4e69182c5512665bb79150035ad1f7d3f11fd160df6780c5b6ce17a4edd08c880d0bed68cea06f8d692f3c800db6ee36e85412843b5134c69b86683a43e570e0092264edfc845143444d8e20faea3d4fa524ba0425b904c15f127d5b28396319d2b21399e699fa1269d55344026543cf048a059144516e7298970b6e7652bf2be39ff13f648cf1b866ed323835c5d862651c3f6985dba25aeb9e5cf543cbbd68da47fe0966ae2aeaada93cf6c787f62739a2eeb3c34cddb2655c8603d49220d775e43ff9d87751a73896efce210c2f61aa7d767f5011510594328d837f9b389fd8cd7f61ac5b44036805ac94ffe6d0bc7e518f8facf76cb5c6fa1707b54c88754508b2ea18a88719bf80db22fbce75c960e15799f30bfa62862fdd71f15df2fcc05954797e827e467f33ab9f08f43e3ae7e4c34d5a4c817769bee4ff5241ac930ff58e5983d05c4c55e219cb1e501c373a4000cf923972e75d8ee5603ab4300d30c670ce8e80b577b7025bf6fdac2c8caad9a4e8eff0b0663519e2c3ae5460ed4f6c561d7f7cd94a61d35d14d3d565e51bdc8593d76e021715fb29d1b64d0a6880baa82663570803124f2585c8b133ee552655b7e5fba306c9e9db68d1e9bc80576012364d4abcf3ef7c24f210be0f0fb93943f6e2e6653390cdfbc826c345aa70870ee14776eb946f2f0dd6541136ec98e8581281356e2473bc88c657d3790f7c50531b472f96f7d99b2306b27a3c9d2e87461f1339c53c474880329a77b90e9e7b9b8728fabbe30a01756b49608b14c2f9b4b6b540dbd2b050f4812d68522bf500dff90efc047b4ff958572c45836f7e9c4a81c08790f3bc116db7ab085d209a89aa63a4bcff16e0d55705298f0a2f503054d9ec9707b1ce1764fde53939dbd698c283b963e6db3370c381a9df4589cf04497f070087ee3adee55232ebf8faa734d1e1fafad0a68c9c3976d2ea0512e059f07b0a70c5194e10466537ba3ce55b855d48e9938444d2622893fb2a444a0355691674c340538624c8e3e29f3ea8676d744810513ecc35397ecd96172f9ecbb94dab1d8e57ec2678ce9074602735b42539d46b90f161684469d6f419939709561b3f63791130e38aff4b70c0f622af4f4ec5323cd656d940d47d14dd2991047d5101b1b3ce81117c162408edea1376300be32cef0a7be9013f160658372fa3453611434f1f90b6660488d490d158943c15dd10655004e0c3e85bdbbd3c1f8c7dfeec6efb2e9e823d5bb2e67dfe598898bc17a143768f6f73abfc189ea7b23cabaf66752ec2a55c32e1da6a36f7def6a841fecdd1ca42629dafde03c4a44e6544b1c4af7769907ff0742625ff88683fcd0457e922fa7b8dc173a7f01e8b9b53028e8ee1bfb847df406b8b690ec756f0a1a84601444ec626ad72f2536f1aed13dd44d487c8fb9ad9ae69753d41c96aed393d63277677880244207876a9699f328776180635eb5d6754b0cb36231295428d0c73d82ecdfdb5e123b35f29cba3c34e5a9b4fc31d7560b3ecf93a1639d420611576fac08ebc43726a278714cf2f560cefbe127adc7eb6d25573f8d7ec356065a50adbf8b9eee317c81ac013e40e722e67d51b125bfa75e3df157bb066685e52f542f641d3f5c2df4e34a33210399ec2a6fa0230a4db22248f190df82cdcbaac645090406d6f4600dbbab1eae7a7575d62b5391bf7a604cca8a9f7ab5194473b25704fb66e5344706f825a9136961b89bd450d562b456dafe4c72d1e9a2dab6ed603edad7ae323399d51e88a0d4354649aae6c87c84e6d9a90a7e946c1108a55dad8205b1e7edf3b062822aa24061a128499d9d4cd9631b1897febce03ea9bd986d0c78c337b8d676c0464dcd46f27458cb9d1256a278f02037d3764b94602ac9c7c85326920b425428f162733c787d388c50f51a037c9c0ad23a1559d14d0d56dbcf873348b0a6b37e8b3a6038356cf4a18c0963d60ccc6156937bb0cf9aa580b2a5bf935cec3fe96af9d313b9e3a2461214b7616e9dd690b0fd90e94b34e0057285ff466347083b351e119e66a29895d62216f025ff015d8fbb84c9cff11ba0316b375b3ad12d4b092496c4cf89ba598e173863a544002ee185bdaa01f0ccfaf4277f4fb033a60116f3522421f0d4e76da69fb67c87d059bfa1ce5a319cc36c0679eb50a4c8ee517b97d56e11a55f1cfbee0a2f64235844c0e35528f2eab88254c00d4dcaa23301a37a52fdcbf97f6c4b251e4afb9f4f8cac33a0b9ade5e21a4bf96053cb87fbc2a64e963262931a8e3e99fa26ae00bdf0aaa7c6405e3c94e06fbe2cc41dba41821e9d0d712b85697f3f016c2dbbff07e8060eb8ec4606ad8d7233e59a94f6b14f45a1ca60c0c5c715d95b40f84c7257c5286c73f4517ed50e498ac327f81d75f617520cde5309c37a690cf69974c905ab50f2191b55d1b05ac20b408faf40111973ba8f3325438082c42a48e8cf655f49e3392aa7ea20ee1ec661264c273d298956b2bfd0404bd2fd985f54421e544289936380fb66678e4fd20eb0c333c7555eb590f2a2f5b190be2da23ef5a09d4c903be4168a881404647e7ddf04d5db074eaf7af3435b3df88cf81dd6a1d604d223364dec7da3e2f0502e4a4de5670d896b71de1d7ced8438edf913eb2f94b37b57f5b1304da6061442d7d5d10fc1cfefb53235bcf104907aaaee3b1d26bf1c12366e81d9de68db90037fcefe108a8852f3ffaa443509962a11ea786507cf22f981ad1fa94dee91777d08d3114806d5d2acfa9a30fb7fc221a2184248c18b305801d0568374a7d383b333928895ad334bc9f235bdf37a08903759e68c4ee10407f7bf66e655a9394b7328ffa071158b8faecbf86c8a0646389ab28613b0fda70a10b2d891f675b856141c9b90fa0bebf67f6478bf600534be8cc4c30822fc282119c2bd078f2c94603e4aec8846f4723f1be4a335ac9ae78889690f420b486944ef6cb528772045823d8746f0394f73e404792da60f420e75fb8e3243b5e3606e0ba8db1aa145f066ddf930cd7905b498546455ee58db4794a6ba2d2645f61409dec96aa035ca1bb50aae3a0bd764a9462fe5a43b7980d441a573dc2a77473110dd5bae912bfce35a1404b53806f6ac85f5db6fc4550679697512edd9190afa6a25328d50e8e30fdf1c8d212d5e7a845dc096e1a934a418b86c7b67d6436155133ac3aa971e714c92157a4347fc73f1b50608c9d50e32691220e2ce331242d8156cc5de51347800c2bfa1b9b64e5b23c8c5114750499cfad1e51a2126c4fc8fcb91d6b93f147a887a01a47f4fa9975ebb7c1e16cb968cb9fa8b856335123bdf02999e1de1f2c0b3091bfd54abca2361148b3db53f18d18540a8bb1f36c4d4aba3768ad767241d4cbf63f4e1b08b9401f3332691c2d355a2e92f630ffc43687084cfe3152c9dc7acfd6624e6552d7c6d0ae32baad4063cac79295be5302d5fba87aabe73ba931a7341c50281c2ecc65ce71bf20615aec05f931433304aa5a9f91b4534664d5f579e1085c17d12e47799c16a661bb98c381bf14be8972a6fa950a0be34c45042d7e15ec52b2c1e3d780e32d74e7d7ff98ac06d09e9b5322481a787c622d87d2e0e6d1b7d63cb3e13c26df41333223730b220d43ac5ef83ade3075b967b46c9bed5a578819a3f8ed4fc5b2bc39fed12f74a34edfb1897ee8187265d378a3dedca4973f881f93f010fbaae6b5546fddc438a69f3c4c2400953eaf0d5503a7963a78e9d202797c7b6b4b8e9a974074cd8119e9c5e46fb3942e611acc20fa8581f07740509b683ad1a3e045ffaba29a4e803f9378fb2b8ff1c8a73ad9d8feaf5021dde489ff64f1475fd36254b37257df423f194b2872e7eed06b1c843fd042a3f35c12983d7a4cd28eb105bc461f4851963e66a64cd2d5bd68b2e4aef50bfd36f1940ec1a8008caaab7475bc3ec2675581ba4d736c410789411bc329eb52e535e75a2a1d68313722e8b7458d09f0aca51d42064e155bb604d3e6556960f34b54a5ffe392a5454dd172149247ebe08581f1ee015b0f4c6a341914ce8f79e20e08b9a0ba68431005cb8fb1092235f8216532a74e4d0c92f2ddbd94178d3ee5e9e11e81b6ef31864dae8a9b9a38c6dba579008e22885e912e520a09239bcd3a2310ad038354a7962e8cf51e15c2ea0702c112dc816ba42c340d6599feb30ff1975f9d49a9c33459714ee4e0ef7fc0ffb8c58f1be585b527038305ec10529e17b8009d780221ec79746241562ee1fbc240cd06aba0e691ecd924181fa3191416592da3a2b1c2b2a648e85a32bd76b60bc1124cd3e04ffb339a7859cd777a07cebf8e33fb46f4f2bb23add7704801176226096de3e435076901ef4169577ffe6dcab900c736375c7a8de3dd232bf07647bb52792763bd649172f7c8556a2357db50b660b773bd41ae8ab0d6004cb544403e156a4a1c08904814ae73e45fe1ea95bf7ba1afa2846c5ba20557c729c2e13a220f22adab4ffcd20d0fdde89c76deb970dbab7078100f258a687a4e5dc84cce60b28876d0d8025768637b775848258548e9942fe92d7f321f02fa0c4b315f37316c1fa9b188eece1c14e5d340e0def5c6425118ce92a15446b178da4b4dfbd851f509cbb160b52c1fedaef8a95bf4f9cf6003d6fc1ffbbbd064aa53e5d45e49f19a3662cef0d26140c5aeded3945b6048961ffb278950fd9ebfe47121065769911142fd62646400b4d25451dcf12684667d20736f04d65504b887c66a0a6e8c81ac9f001e6ec5ac01de6ac9b3e49a0a00ab6fb62d8005fb9659093f92a21bb5252bc3ea470001d22afc334f3625d9046790de62e558615ced8b8d311ca1d6ac1fa39950e0f0d4db8d3d3297550157775bac80bec3445905e09aff9ce1c09f84f9ee7bdadc3427b307a8649954f1382ac44f32565e1cd49465264f60cceaee571288cc8dc1cf32780d9c812cfe2254db6f32e48cba48d3128edd5f874eb93d561b60b0273dbc62736861871756569a67a2b95043e5772af4915afe2e14c3d4a73a953bd6dc9406e5382f1aafa26590c45840c8a919ece9fedca758bff97c2659a12dab172a3a5fd7df5a9bef0009e608cf0544e092cb4e77ac06de86b00eca858f133b5a8d89cab67ad8916d0d7c6eb648558eb102578a0cd049e532ad84e9c7002c5af57d593b45fe60021640a78d64951dd450a33e8a0972960d371d201827b5b8986e7feee61507b923fc3ad9409b27a315502a573ea2bf8ecbd3b3162c933fd0e2c9fbb9591fade5ec99c781e65121d5dd3be701db2f7609b4c16759f0d9d600892c59d36e9d5cbdc8e74449e61842d22b18ee4c3f7c728686ce1948b8551c0fc841cb90ffe067a1cad49e5a729741e496de0ab46ff5ff3db48c56ee9e0b2f7c45b553235a6f9d759fbb44c856a371f76f5e446604723eb120664195482cd59afa740fb83c25c42b92d2f761034aaf42c858f55e1725655fe9128e0de9fc4eb92c4fae34acc4479dcad4422bff4d54bf0405aa864fb4acccf62f2b2523b9f73683f0ed6524f380391568355340259f86827676459795473bbd229e1a5aa958a64b4944ef99251a45316507435e920cbb9efda0b98217ccb58dabf09ec6dd6f7d39bc1b36394fa7181eb9889fadd25c69aa4662667577485af1da1e93bea8af64a043811e2b56ffb60f6bac25694d1f617cb64f77afe28e02a2fe3cafe20a3dd72edd4e46ebd1904876f98cd2d566c7932288a8501b2b28cd3f159337cf200c19005a78689dc5582c2f0f33cae283a8336251daf4c38937bfdc4fdf4cfb3fd9cbbfc204677ec6d2d15ce39ab3f22ce3594aec39be75fa6b64162bd3f76259eed398c904406f73f0be02f2dfbc55164a3bfd93efcc78e52f543b943e550927ca3d95dfd4d864310fb4ca13bcfea2ce43e038fc5d11b67ed4de55e6bfa96ceb9d17e76fffe57e1d9cc003affc51169cb1f5e25e95b62c7e80a8913200b4dacc116a0ddf3b66b3f6226888490f8f65f4d52f265516f9268a440680ce82e973ab3d81f16a8a44e731ca79b527c3d73244f282c895ccd4be0f6ba6d5f79da4c485f9b0449c4f1286df3d1aa4d080d421c5ac5b09a9ad073e291943f6961049f27cadfff7a21fbe427ba4d03a6424bdb705fef59e22d89e2ba8fd22594fe036233c403d4508ed1936288d475d8332297d16914294621230f19820f77dc51e49fb3d8c903a6ce0d669319034496cf243dc003acd5b4db2b4ea02f5107c4a500cf0be427af83d4fdc2429715aa3a8369ea91e96dab9b7ab03a56f5294752020efe2b43205634a01de5fa027fc9cd4d05f64cc04999e128c7f5099fc011bda774732df3f5d8d51eecf3337287ca64a6b5624199783d808ca8c219e9cfafec6f56c5eaf4ae2e2aad1f8245535da0813c9ecb383ff6a9c3c4c41845e7f8424ca54e836341843a1b83da7923d928b95f5078f85542382106ee47a79e16a25489b9cb09b81c920315c8b7cb9337d472eccc637d8ef74b6a9b1800df9159fe9a3a7d8b45216b6ab88ce58964aade1bea966a09c36b6ef7177f1a2189900b1938ddbed48b6e8720bec05facaba05811997f0e9a7da7e3be3c60e118607d5046ae252d4dd662cbb3a520fa9a57433cb81098d9918590e10e267ca393b8c85afe2d1f165c3ab40cc345b5bd38cc8b5a1a29f7612f2c8c4ef050394b5a0a922afddb24244dfa75be6a3ce4b76ae262b0663342378b853cbd2464b161dbfc869a9f620e6dd4ff3a4be9511502e2ff2ed793a024629b07aaf23d76e2eee70bbb2f1524275a4d0fa5cb642d0883b8b0e893eceee2093cd4baa15f7c6950d307f110b4db4f63ef2fd6816719bcf57d34ad67f29e1da79911b61e8fd11527e9e87bae7d1e66310ece60b58424b5472eab7f8ad6dca04e2e453f4329bfcb38695fda5cf5895e4a1d79998f4aa5a4900b2456dbd2fe66818aaed9361b44e667cbed2cadb84cd68b53d252741daf8c37dbf3710bf0ca4a36daf41869b4cc53024fdcf7062b2f497d7e73b1e9b0f242d96add972c98dd98345386acb7590724729cb3f3d3a8005cead5597ee9e48016574e0cce37aba8366ca174045a1a1f0fb15c027d98b5b5841186519d9a3fc3ef703b523286ef5e9ccdb4616b3222ceba7f249e68b780533bbc97acad2b6ade6624d3626a732dc188b46a3a2712b4e9055109f7758969fbf5e1dd5c799ed63b918b21e1566662795cb1e9291ae2dbb175eb47b1df54bd4a527bff537240a2d401bd2ec1181434920fa9966cbe8591dcb1c640f8931eb4a2b1bb1df58219d53cebca303a872c8d0f1c02fab0cb1d2baa0fb95b67d555200315a69994a8e013b28138d8b4caae6a86a2ddcb184e3ebd3d68d6256e32a36f574ddbe94a3e0b32f76ea3e98e14a912869fad576caabdc3194aba1c81de940a73baee1c3a227e519f26aa1811370c01e10292e1a4c71d1c6b739beb09f3219dc5f0874b57958c4643752d0387065a44d03908f9e3217cc8952fcbf732e2ba22dca50ea00284992c3336ad878beaffeac80fd942b4ef686f5fc4274e1014024b995d7452188d26a6b72bd864e864c35903c0ff52e6f4b3041184bb329be0f9b43f5c8db36670b3c3368f38c074a2ef41cce5f1e84f8a39b89659f8067b6cf0234b12fa8691a39cda558537c6c8e7b5053eb131bde79cb55454f8cda034763bc91966de25cdf6ba31d4aaf3cebcab67d35c218fab5ed44fbbc63822a51949e23c3ec83eec9b437b02c010f6e41c1c1311607ecba99bca10a245acdca7117ed37557150d77e71c95061f4f70275f8845fd6c251b2683471d512bfc2a3a908b066c6766329bb622c92d416bae413ad1e882830c4065a2677bd865b724d3e66747a2597e9e2dbf0c4ec22a71c459299762c6e6d7b2e9d0503393b73f06c49b96673fc82665244657d34aba441845cf219f92b60fd5b572dfbdebb28f4415b028d7bc64314af799a26103b33ca24a3f02b17e44da0ac6c8c5d7263240bff4e3991e6f0bbdc354d51b0cfa87ece6318bbdebd27b7682dff4c69ff51a80cf6d0bf06b367065f8e8cc325d5a59ba188da024ba3cccb041fa34451f25916d1e9c1f95f78e217f9157495f3db7db70c3cce3490b74ffdb46313eb861f1b93b7d3040bd6a75a2793feed26e3a38d0f35ef40eb26b90da16e5db042927ec6c5fb40dd3972d2f75a48c289f8d0762a118cfc329b292fb1cc7974b804e654e70f6643a211a7ab7ff658b16f294ca6b091d161425591f9cf3a6746281a08c1bb33ca996bdda5c65316397b3146a483557f46c364d19e314e949cce37054235136991ca3a31dd76f9b4236cb69cdd04240932c28f86a33671a7c25983f0a47fc737cc74f0c1bea4cdd4445d8a9015ed21b98450ba6c70f6dce53c000d918934bfa57eb964dbc01fa5ca4978536a8aaedb34cbe73cab398bd3e396440e27b4e34d223071167c7629ccfabf971b8afb5da0f4c1b9c52fab85262168b3cb16a18406ae6c614f12be53b859f6e35848c3946f3d09a5b3df708c5ad2f7856dcb1b6b95f93b8e289a4b4385a2e1e2240a1eee63108116dcf09d523e12beb422fdee531077d6882d13d3f74c058fc87b91b100fe2f12ca520eae448bcfdd55cdc8f20166d628a7150264eb52abb029d458207bc35cb3604af8a67657a5e3e2d344f1611c6ecf3f61f960c3166d229f5ba9af4ffeb3eed9eb95cc248d3c47269c67dd4df10ee055be6ec785f38344c5e77ce64156b8cd16b94223be2ee15002c06be9c495f5f12c8e9bed12752ad7ad0af459c2eb66f5acdda2821721898141112ef6566b56faa4d6a7ad2a1d493e815e18cb5a0baecfdd1e17eeff26df96fddf0d1bb9dc307b548d182e4036232bd850b9f258c68c4c6b1f870c12316306159a3320a8008f92474594acc59bc347434314b88c819eef63437df2412fc07b0f02f82c2b06e6bdf3796c32850de0311c13cba8cd4efac01e8f1bc23061701315939d22cb3d389e076e70352ecc3d3afc567880789c8003591c025871e4b95873b292c26797fce606ac0c26326ac6c04980229cd17ed94dffee25f69fb734d521e13c07f1a279e939f9a5939a6eb442262296733b8c3cf1b1f6ef8f381904f0d7965b2b440d4a01006de6b12070bbdf39a75753cb9d5b8b59185ebbd6af23adecc6e9a741d734787a8fab965682a302df2d25a680fafe2e6eebcb6e268b80bdc3f3ce54071e3e476c590c81c037579bc0ef9bfc2a578d8e3d05d2574ee259ad182d28d9e8fb9257c5cc911600d927068ef74a5f9dd4061ca2730504184b664879ba9a4c19aff966d3f3ed538a424b287fa25230ed327c01a37b8dd5ad042ab13b49f35a10954892ba2f54decd03124459948f1cb6b96ecd1b268046f3df4796589089b04f69070f0d5458ee0b537ce06301d17a504a89a850c6484447adb1b13a6ed1e919aff8cb49521dde5a4a7580c8ee37ffbd5afbcfcb2180311f5eaece724659ece8790ea35e1b183f1fadbb23de200206fa2b433877395e5ef712b94f3c3f45f80541eac30aa68df0441fe34a3f486ddd6d37e29e85ed5e461f8e4e9a82a1e2f5193a268bdd9de1aa5561bcca927133effbd9687032afb8ba10f41079733e1e48e0f372bc1b6e92623e67ba27d2c2a7f4a5e444f506873a1e2bdc4acc494675f8d2855d4416f9fd9cc801ac0e06e251c758ce26cdac12397b002a4f31efa50f221f0632d078707c43f73881d92d0224e7a64c795fd594bb7ff443e9321e9ca8fe33975fbd3a8bcfbaecc1bafd1f2f5d507bdec37f85c2a2ecb1fff0eeb600c42be6f4a07dd295971af11251ab6f1a9e7656582e4ac2c39cd53265eff9ccbef74edad42f84809dc815fc9ccd3e0b63932012f5e1669a84b778855b4a788a815aef88f998234dc2598da22c49b2d4db0b4a1038a4038140218c40dcadb61e0a356f7f9585dc4fb756473abc2110f249f57dbb336b5efc5f21aaea98c6e71c0017bdc3d1c4e565e64ade4037b666905dbd987b363fbe34ff34334d919ea13932ab6b05431a58ecacfcae6a51829d0c3c30aad77a8bbd9f8e2e77fa0e11f21e98a04b92c4d9e0ce531f29cc3674a5e84bdf3488660ce91f41039ce1209591b185d8f2352175da5c333d1eba5d6159fb660038f40e9aaa0ec9daf1d5c1a0273c0cf3dc363d3aaa69b0784ecef0a369e4a661f02c5ba13ff646a302cf314f6575f3bfb79f793abc8dfc222308911e826cc4ebdb29e1d32699c51eb0bbcb5a80b536b677dc3025af4e4e6a4407f638447c7dcad67dbef7357bee3ebf053156b6f92faed3e8fe3a8955f8d2768750967132483774c9793f3cb87372d0a709b81ccd098a34b94fccb7bda9a704c94f10bf6ced41d4fed19606294b37037dfb4b3e1667846cf5f89b15d153b0f9ee915e9e12979788f49e1250cffbc03a832dbb6bb96bb6796abe00dee62a4a9210f0b022e5cf49299e605bc406c4a23d6884e57af69537806f233fedad5af0a8154ac388fc3a65febefc410c8db54a9ca0cbdeb59ba5e7536db2625f78b4fa6769e4f608c0a334ef1165fbe681a4ed8e17e1952362e5a3e0ac593d2c42ccc1f85a8e56e9e4603d981f2274e26e55832cd16e703ed07464290c0ee8d5b7520969459f366fac516db74fc3a40c336bf3e078008206d0e29d076b4c22c6f9d9bf72ce3f417f9f7a379134675de98de40ed5f102551bb3d29a3f9fc124b32fee7fd7e81a9cfe238bbaab2fd885c0c21e24779ce8b915f8791d5953ffedc12ae5def46c1a37ada65ea5b0af60a4614be9fed47d07cf819f5bce1c92e7f45c98ff3e00de4fc32a754795d1fde26911ab60da35962142f930d3dbfdaf35883786c6be283cc71a30f08f415945eb5b98f4754a5db9d2fdb8d35889566d43d1b1ada346b887c3553f4f4fd8be6afa3d861c2c097b6800c075c3386485f311c22417d6555c78f8e9c4e31e683d771493e0a7a11da767e86bcb06dca8d4976df2d4c0d149a8d1b3ee0de636989852f0735a916dea995a1cf854d37a6ecdd5928d0413b0e73ca5f38d5c89f7efcc09b9376d9aeb58566b2aa7eec064bb59e12b9ace2a536a67d37b6bac68db8ca19ece1c995c9347ce6c4520f092e052a0f424d2933f7ce320da2c283a4f59fb7004c722fb9ed196b604bfe9db723fa205d141bcbe47133b4636c31e1266da21ed0255e4fb28ba118750e2dc0a7854dbedac756597f0d775f8d48ab6df8d57639060b364ccd63a660a9218ada0789b394d76260cb2ade8f5ff5c8a44d6818325f94cbb51e5fb5c2412a3c8f17001c61b85cbc60b9079414403ac16926de795fe8bf0ad4f52ebd96a995f9c728bacfdf628b9069021c2630d5fe51f3db213566d998d491d540d0e270b27589fd659fbb31f89965ee60165095f344787f44feecb2bc98cc7ab29325684f6059c883f23821c779a0182a5ea818b607f0b39185e381f1f07f547825f20eb62acf4f1d034c715977e0b92d00d4a0d6f3587e94a50f32c3c2a2a9c18f4cd0af909cd00351ff6675c7824261afb98555feeb2fdeaf582c9e6e1a3a3c72386991a5fb734ec58c0c8e90eca9b81e5e2679b90e518295a8c593b3f36449150c8e1894092e1bf42e7f6e9352f0dc00fd2118cbb7175ca2e378dced9c789404a7c50303c641758305e4dcf1b96fe0dfedc4668402dc29e123a83f3c0346ea6370f2e7ec3ef582c88698830195639342abf62fb423b5060bec62617302f35f142ea1221b4797a924bc86042bfee5796b97cef84fb0e4512166647a083492929cedd92def761962ea401bf1f8acb508f1b558589063dcc635d6afadf87b4e5e46ab69179237b8833eaf0d7c66a38e6dad87663f11ec9703592d459590ab6fe07103df350772f93f2fd5d58078c8a74a4f529d1f38125d97c391a682acaa007f43dd2fbb329d8213b5cd02d7a3bac8d1f55d34c2d344a62aa1607a8200058c8cc56d7cf7741967d21a205cb9471b52081607743921379c19344cd089a4e922091304e4d4cddb7dd306bb351c3bfb09afa547127d8e041df0f09935040ce44517eddac43f590b85a92bb41f39ae7f1d169c2eb8316a0f9636d558703079b9d1d7c4f0f70de28e9c863ff77f90472faf2bfd2fc8ab6d6f9da86efda943c5dce5a763b9612b21be924ff660a9a5972fcddc95d0e0f48a7cf666e333569667ca788f21af2d53411d311239d1a76286d6dca46d9ebaf3d41a1153cbbd6a8287d1ff401e39f185f7ce5af2bece550ae8e6139ccbf9812e6e38d426c70488700f7d506b466d3fff659a96e5adef575e9e6b6d1458b990b214e0cf72be40e375720b8f09bc2ae3cf84e959c75db32c6d23cb12d2a930fda47752f245739ecc09ff37a3f0ea6a8dbfcd35a6d7d56552f2a74c156c2a0bb0589a1dd5cd2929a38feb923856a70554ed8bd246a3d54cb9a88aeb300b765a702a237ad3c464c1d08ebf0dc425de3c921129eb2649aacbd47ee48f154c6d6b087d252f100246842e73553463da1d04e8c4b224c7f3490bdffbbc6b9acd8bb5ec4be885b70352e46eb704f53113bc24124586acf36aa47be61e33e59af07c28bfd310b5514879715235d02ae8093ae069a0b35b7e1a5d9fa7e5334c2c81bc1948cf561ed3af347097ef99aea1a6fcd5b15de233d02d84ab4372d3a7d7ba8f6ad4fb9afa34ba4173ad28c0d4a8a7314b32ccbde864b4077b0c8bb0de74befd00ee1181f859fe9aef1d19f057fdbca0972c88e1640197ad692c8d4e94eb4a977c6fa411c61c5d9df0f0de477893648e6294ff268ee401f17d95e1ff117a2680ba6a979038051798f7acfaeb6b4f7a3c56ecdb7493c7c059c8822d9922e72fa4b6f187668098624a8550f0c10eaeb205ae7a530fd13cb0b39a7ccc525849753d8f5051bb0cfec811b9d06fe7e947e49734e4e44b5456ecd94caa7c3dadc157112e8a11be7434bb9701d34da75556c3a464070b2865d11ea6cb0a5511e5db57c19723845471485c1f3234d753ba28c59d6d815afa2d2eb7c2258f0639ffd5881e701d7173c70258beac90411dcc948a96771235d43bf233b0f166c8fad38b212c5a361dd03750ca8f6f1b6f7443b2c9fc1589658628ac759645ed3316724da318faabad23c99709bc5347abfb59fff05e553e263ffc94607bc1927dfcae09346346878f1ed849691eaaf5325e0935cdb4bd241734a85bb322980f280e646ea9530755b71cad02ec15136c31c9810c36c2320beaf914c0e921297a857fa0af9dddd13949e3bbdcd2ba13186c089a2ab9c8d9d4e87024067de1073dafdf54f4b10cbbbba75590b01771c01e2cf14557201f0f546e2a9269e2d17f28faaaa1870d4cf522e403b77843321168f31518f63e57e0783d5f35747ff44b023ee8963faac2de7d7cf6eae45494b6d1a8d47bf5951489e026569681d30f0e597fb511eee282a254481dd2daecd0e8a1c2cb0db4c7ed3c1590cccc10ef588d84fbe6f56c492a7278b642160daf31a99f46e2d9eb6b4d46258bfb89aa569ce852d8a4f43262e87f4773a1fbacb7f49611f0ba3c12c5a0500f401a574a1f8729080ff4a78775207d01230a36f1ebb0b85ea90b8ea28d1e8df0bcfaea3550880667cb6ea16d2c299bef8b875719ebdd6836758e4ef67ec4060d4c618a50e2e45ed3d886606c10ad37bec7c17b4913bdaa9d1d6b2e14e572923fa9c3b3343900a1e8d550bca98b29118c8baf9a3b4fb14dce5ae7795d8c22dc5e8e2ec7738465eccafd5fb686c9ee20068a87969b59be73320481d6fd7c090e4f4d3be511b5f904df38009824b39f4bf4d4e75606965062c7e077bfcab49c52f3aa7f025f02e872985043145b787615902af042904e3c85d12b62ab2345bfdbfb71c2c29e725a235ce025c824fb68f37279f94329027aa75f79cf812c80a07e6842d05646b5487cabd5a56b85e16f26f35ca7d4e7894c7f318f208c1bf722e1fc50f8a4f836924379f5125ddbd5f31dda8abc58c7371597cc97d1555296e3ea7a45b3596ba42a098a957b45ee735f03c97eb17f8f252d1ada7c19dbf4f48e3e8a6f12d28bd405b6f1ac7ffe8c014c584909874fc8c569911b5be4212849e514be9af908d2bcf546d9f093d93b2f8693917de2aec5d78ee40b3c08a15d98fae3614f81d0a69b76cd2a9cf72cc396d0c5c8c85381b670be764e5250870c62cc798060a78fb7f56eb034197410f9a17fe6e6081f6b6c38b12b89ac535b2e14549ad54c3edc91c25a09af8fcc756181e623d622fe8342772edfc031cf287157325d310d913d3b71e3bddff00f6dd27d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ARS-DETR</title>
    <link href="/2023/04/02/AI-Learning/20230402-ARS-DETR/"/>
    <url>/2023/04/02/AI-Learning/20230402-ARS-DETR/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d00f6fd0c904bc231af7ce02598d7f091e7ee3ce54b81f667c9194a8972163db"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-80.数独</title>
    <link href="/2023/03/21/Algorithm/Comp/0x20/20230321-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-080-%E6%95%B0%E7%8B%AC/"/>
    <url>/2023/03/21/Algorithm/Comp/0x20/20230321-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-080-%E6%95%B0%E7%8B%AC/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/168/">算法竞赛进阶指南-80.数独</a></p><p><a href="https://baike.baidu.com/item/%E6%95%B0%E7%8B%AC/74847?fr=aladdin">数独</a> 是一种传统益智游戏，你需要把一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>9</mn><mo>×</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">9 \times 9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span></span></span></span> 的数独补充完整，使得数独中每行、每列、每个 $ 3 \times 3 $ 的九宫格内数字 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∼</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">1 \sim 9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span></span></span></span> 均恰好出现一次。</p><p>请编写一个程序填写数独。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入包含多组测试用例。</p><p>每个测试用例占一行，包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>81</mn></mrow><annotation encoding="application/x-tex">81</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span><span class="mord">1</span></span></span></span> 个字符，代表数独的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>81</mn></mrow><annotation encoding="application/x-tex">81</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span><span class="mord">1</span></span></span></span> 个格内数据（顺序总体由上到下，同行由左到右）。</p><p>每个字符都是一个数字（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">1-9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span></span></span></span>）或一个 <code>.</code>（表示尚未填充）。</p><p>您可以假设输入中的每个谜题都只有一个解决方案。</p><p>文件结尾处为包含单词 <code>end</code> 的单行，表示输入结束。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>每个测试用例，输出一行数据，代表填充完全后的数独。</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-css" data-language="css"><code class="language-css">4.....8.5.3..........7......2.....6.....8.4......1.......6.3.7.5..2.....1.4............52..8.4......3...9...5.1...6..2..7........3.....6...1..........7.4.......3.end</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">417369825632158947958724316825437169791586432346912758289643571573291684164875293416837529982465371735129468571298643293746185864351297647913852359682714128574936</code></pre><h3 id="method-dfs"><a class="markdownIt-Anchor" href="#method-dfs"></a> Method : DFS</h3><p>最初的dfs：</p><p>step1：每次随机选择一个未填数字的格子</p><p>step2：每次根据数独规则，枚举当前数字可以选哪些有效数字，-&gt;dfs()</p><p>这个无优化的dfs会因为搜索空间太大而TLE，需要做优化：</p><p>step1优化：每次优先选择可选数字最少的格子（优化搜索顺序）<br />具体而言：可以用bitset&lt;9&gt; row[i], col[j], cell[i]来用二进制状态压缩，表示当前某行某列某格的可选数字</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;const int N &#x3D; 9;const int M &#x3D; 81 + 7;int one[1 &lt;&lt; N], map[1 &lt;&lt; N];int row[N], col[N], cell[N][N];char str[M];inline int lowbit(int x) &#123;    return x &amp; -x;&#125;void init() &#123;    for (int i &#x3D; 0; i &lt; N; i ++) &#123;        row[i] &#x3D; (1 &lt;&lt; N) - 1;        col[i] &#x3D; (1 &lt;&lt; N) - 1;    &#125;    for (int i &#x3D; 0; i &lt; 3; i ++) &#123;        for (int j &#x3D; 0; j &lt; 3; j ++) &#123;            cell[i][j] &#x3D; (1 &lt;&lt; N) - 1;        &#125;    &#125;&#125;inline int get(int x, int y) &#123;    return row[x] &amp; col[y] &amp; cell[x &#x2F; 3][y &#x2F; 3];&#125;bool dfs(int cnt) &#123;    &#x2F;&#x2F; boundary    if (cnt &#x3D;&#x3D; 0) return true;        &#x2F;&#x2F; 优化搜索顺序：优先选取可选数量最少的点    int one_min &#x3D; 10;    int x, y;    for (int i &#x3D; 0; i &lt; N; i ++) &#123;        for (int j &#x3D; 0; j &lt; N; j ++) &#123;            if (str[i * 9 + j] &#x3D;&#x3D; &#39;.&#39;) &#123;                int t &#x3D; one[get(i, j)];                if (t &lt; one_min) &#123;                    one_min &#x3D; t;                    x &#x3D; i, y &#x3D; j;                &#125;            &#125;        &#125;    &#125;        &#x2F;&#x2F; 枚举可选数字    for (int i &#x3D; get(x, y); i; i -&#x3D; lowbit(i)) &#123;        int t &#x3D; map[lowbit(i)];                row[x] -&#x3D; 1 &lt;&lt; t;        col[y] -&#x3D; 1 &lt;&lt; t;        cell[x &#x2F; 3][y &#x2F; 3] -&#x3D; 1 &lt;&lt; t;        str[x * 9 + y] &#x3D; &#39;1&#39; + t;                if (dfs(cnt - 1)) return true;                &#x2F;&#x2F; recover        row[x] +&#x3D; 1 &lt;&lt; t;        col[y] +&#x3D; 1&lt;&lt; t;        cell[x &#x2F; 3][y &#x2F; 3] +&#x3D; 1 &lt;&lt; t;        str[x * 9 + y] &#x3D; &#39;.&#39;;    &#125;        return false;&#125;int main() &#123;    &#x2F;&#x2F; 对1~9 (0~8)做映射    for (int i &#x3D; 0; i &lt; N; i ++) map[1 &lt;&lt; i] &#x3D; i;    for (int i &#x3D; 0; i &lt; 1 &lt;&lt; N; i ++) &#123;        for (int j &#x3D; i; j; j -&#x3D; lowbit(j)) &#123;            one[i] ++; &#x2F;&#x2F; i的二进制表示中有one[i]个1        &#125;    &#125;        while (cin &gt;&gt; str, strcmp(str, &quot;end&quot;)) &#123;        init();                int cnt &#x3D; 0;        for (int i &#x3D; 0, k &#x3D; 0; i &lt; N; i ++) &#123;            for (int j &#x3D; 0; j &lt; N; j ++, k ++) &#123;                if (str[k] !&#x3D; &#39;.&#39;) &#123;                    int t &#x3D; str[k] - &#39;1&#39;;                    row[i] -&#x3D; 1 &lt;&lt; t;                    col[j] -&#x3D; 1 &lt;&lt; t;                    cell[i &#x2F; 3][j &#x2F; 3] -&#x3D; 1 &lt;&lt; t;                                    &#125;                else &#123;                    cnt ++;                &#125;            &#125;        &#125;                dfs(cnt);                cout &lt;&lt; str &lt;&lt; endl;        &#x2F;&#x2F; for (int i &#x3D; 0; i &lt; 81; i ++) &#123;        &#x2F;&#x2F;     printf(&quot;%c&quot;, str[i]);        &#x2F;&#x2F; &#125;        &#x2F;&#x2F; puts(&quot;&quot;);    &#125;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>c</mi><mi>n</mi><mi>t</mi><mo>∗</mo><msup><mi>N</mi><mn>2</mn></msup><mo>∗</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(cnt * N^2 * N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span>。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(N^2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>。</p></li></ul><h3 id="methoddancing-link-dlx"><a class="markdownIt-Anchor" href="#methoddancing-link-dlx"></a> Method：Dancing Link (DLX)</h3><p>数独这种精确覆盖问题，可以用DLX，等我学会了再补~.</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>DFS</tag>
      
      <tag>剪枝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-79.小猫爬山</title>
    <link href="/2023/03/20/Algorithm/Comp/0x20/20230320-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-079-%E5%B0%8F%E7%8C%AB%E7%88%AC%E5%B1%B1/"/>
    <url>/2023/03/20/Algorithm/Comp/0x20/20230320-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-079-%E5%B0%8F%E7%8C%AB%E7%88%AC%E5%B1%B1/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/167/">算法竞赛进阶指南-79.小猫爬山</a></p><p>翰翰和达达饲养了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 只小猫，这天，小猫们要去爬山。</p><p>经历了千辛万苦，小猫们终于爬上了山顶，但是疲倦的它们再也不想徒步走下山了（呜咕&gt;_&lt;）。</p><p>翰翰和达达只好花钱让它们坐索道下山。</p><p>索道上的缆车最大承重量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span>，而 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 只小猫的重量分别是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub><mi mathvariant="normal">、</mi><msub><mi>C</mi><mn>2</mn></msub><mo>…</mo><mo>…</mo><msub><mi>C</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">C_1、C_2……C_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>当然，每辆缆车上的小猫的重量之和不能超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span>。</p><p>每租用一辆缆车，翰翰和达达就要付 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 美元，所以他们想知道，最少需要付多少美元才能把这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 只小猫都运送下山？</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 行：包含两个用空格隔开的整数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span>。</p><p>第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2..</mn><mi>N</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2..N+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 行：每行一个整数，其中第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 行的整数表示第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 只小猫的重量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出一个整数，表示最少需要多少美元，也就是最少需要多少辆缆车。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>18</mn></mrow><annotation encoding="application/x-tex">1 \le N \le 18</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">8</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>C</mi><mi>i</mi></msub><mo>≤</mo><mi>W</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">1 \le C_i \le W \le 10^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">5 19961219941229</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">2</code></pre><h3 id="method-dfs"><a class="markdownIt-Anchor" href="#method-dfs"></a> Method : DFS</h3><p>非常典型的一道dfs题目，直接dfs会超时，需要剪枝优化：</p><p>dfs(int u, int k)</p><ul><li>优化搜索顺序：将小猫重量从小到大逆序排序，先搜索重量较大的小猫，这样上层搜索分支就会减少，有利于减少整体分支数量</li><li>最优性剪枝：设定全局最小值，当搜索的任何时刻发现 k 已经&gt;=当前res，则当前分支直接回溯</li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;const int N &#x3D; 18 + 7;int n, w;int cat[N], sum[N];int res &#x3D; N;void dfs(int u, int k) &#123;    &#x2F;&#x2F; boundary    if (u &#x3D;&#x3D; n) &#123;        res &#x3D; min(res, k);        return;    &#125;    &#x2F;&#x2F; prune    if (k &gt;&#x3D; res) return;        for (int i &#x3D; 0; i &lt; k; i ++) &#123;        if (sum[i] + cat[u] &lt;&#x3D; w) &#123;            sum[i] +&#x3D; cat[u];            dfs(u + 1, k);            &#x2F;&#x2F; recover            sum[i] -&#x3D; cat[u];        &#125;     &#125;    sum[k] +&#x3D; cat[u];    dfs(u + 1, k + 1);    &#x2F;&#x2F; recover    sum[k] &#x3D; 0;&#125;int main() &#123;    memset(sum, 0 ,sizeof sum);        cin &gt;&gt; n &gt;&gt; w;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;cat[i]);    &#125;        &#x2F;&#x2F; 优先考虑决策少的元素    sort(cat, cat + n, [](const int a, const int b) &#123;        return a &gt; b;    &#125;);        dfs(0, 1);        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：最坏情况下<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n^2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>， 每次最多多出k条路径，k最大为n，但由于剪枝，实际会远小于该复杂度。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul><h3 id="other"><a class="markdownIt-Anchor" href="#other"></a> Other</h3><p>一开始写了一个基于<code>set</code>的贪心方法，每次找当前尽可能能满足的最大重量的🐱，但是这并不是最优解。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;set&gt;#include &lt;iostream&gt;using namespace std;const int N &#x3D; 18 + 7;set&lt;int&gt; c;int n, w;int main() &#123;    cin &gt;&gt; n &gt;&gt; w;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        int x;        scanf(&quot;%d&quot;, &amp;x);        c.insert(x);    &#125;        int res &#x3D; 0;    while (!c.empty()) &#123;        int remain &#x3D; w;        while (remain) &#123;            auto it_upper &#x3D; c.upper_bound(remain);            if (it_upper !&#x3D; c.begin())&#123;                auto upper &#x3D; prev(it_upper);                remain -&#x3D; *upper;                c.erase(upper);            &#125;            else &#123;                break;            &#125;        &#125;        res ++;    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>DFS</tag>
      
      <tag>剪枝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Large Selective Kernel Network</title>
    <link href="/2023/03/19/AI-Learning/20230319-Large%20Selective%20Kernel%20Network/"/>
    <url>/2023/03/19/AI-Learning/20230319-Large%20Selective%20Kernel%20Network/</url>
    
    <content type="html"><![CDATA[<h1 id="large-selective-kernel-network"><a class="markdownIt-Anchor" href="#large-selective-kernel-network"></a> Large Selective Kernel Network</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>论文题目</strong> ：Large Selective Kernel Network for Remote Sensing Object Detection</p><p><strong>论文地址</strong> ：<a href="https://arxiv.org/abs/2303.0903v1">https://arxiv.org/abs/2303.0903v1</a></p><p><strong>论文出处</strong> ：arxiv 2023.03</p><p><strong>代码实现</strong> ：<a href="https://github.com/zcablii/Large-Selective-Kernel-Network">https://github.com/zcablii/Large-Selective-Kernel-Network</a></p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p>最近，遥感目标检测的研究主要集中在改进BoundingBox的表示上，但忽略了遥感场景中存在的独特先验知识。<br />这种先验知识可能是非常有用的，因为对于微小的遥感物体来说，如果没有充分参考长程上下文的情况下，很容易发生误检。比如下面这种情况：</p><p><img src="/img/article/2023/03/19/2.png" alt="" /></p><p>图a上方，十字路口&amp;T型路口；图a下方，转角(树)&amp;十字路口。<br />图b上方，船or车？船，因为周边是水；图b下方，船or车？车，因为周边也停放了车。</p><p>另外一点，不同的对象类型所需的上下文信息是不同的：</p><p><img src="/img/article/2023/03/19/3.png" alt="" /></p><p>足球场所需要的上下文信息较少，环形交叉路口的需求要更大一些，十字路口通常需要大范围的上下文信息。</p><p>本文中，作者考虑了这些上下文先验，并提出了大型选择性内核网络LSKNet。</p><h2 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h2><p><img src="/img/article/2023/03/19/4.png" alt="" /></p><p>SKNet引入了具有不同卷积核的多个分支。不同的卷积核的多个分支，并有选择地沿通道维度组合它们。<br />沿着通道维度进行组合。ResNeSt扩展了SKNet的想法。延伸了SKNet的思想，将输入特征图划分为几组。<br />与SKNet类似，SCNet使用分支注意力来捕捉更丰富的信息和空间注意力来提高定位能力。</p><p>首先，作者提出的选择机制明确的依赖于通过分解的大核的序列；<br />其次，作者的方法是是自适应地将信息聚集到跨越空间维度的大核，而不是像SKNet所使用的通道维度。</p><h3 id="large-kernel-convolution"><a class="markdownIt-Anchor" href="#large-kernel-convolution"></a> Large Kernel Convolution</h3><p>不同的对象类型所需的上下文信息是不同的，因此要对多个不同大小的长程上下文建模，看成一系列感受野RF：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi>k</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>≤</mo><msub><mi>k</mi><mi>i</mi></msub><mo separator="true">;</mo><msub><mi>d</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>d</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>&lt;</mo><msub><mi>d</mi><mi>i</mi></msub><mo>≤</mo><mi>R</mi><msub><mi>F</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>R</mi><msub><mi>F</mi><mn>1</mn></msub><mo>=</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><mi>R</mi><msub><mi>F</mi><mi>i</mi></msub><mo>=</mo><msub><mi>d</mi><mi>i</mi></msub><mrow><mo fence="true">(</mo><msub><mi>k</mi><mi>i</mi></msub><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow><mo>+</mo><mi>R</mi><msub><mi>F</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}&amp; k_{i-1} \leq k_i ; d_1=1, d_{i-1}&lt;d_i \leq R F_{i-1} \\&amp; R F_1=k_1, R F_i=d_i\left(k_i-1\right)+R F_{i-1}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中kernel大小为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>；引入了一个膨胀率<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span>，确保感受野扩张的足够快</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><msub><mi>F</mi><mi>i</mi></msub><mo>=</mo><msub><mi>d</mi><mi>i</mi></msub><mrow><mo fence="true">(</mo><msub><mi>k</mi><mi>i</mi></msub><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow><mo>+</mo><msub><mi>d</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">(</mo><msub><mi>k</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo>…</mo><mo>+</mo><msub><mi>d</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msub><mi>k</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">RF_i=d_i\left(k_i-1\right)+d_{i-1}(k_{i-1} - 1) + \ldots + d_{2}(k_{2} -1) + k_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><img src="/img/article/2023/03/19/6.png" alt="" /></p><p>23 = 3 * (7 - 1) + 5 = 18 + 5</p><p>29 = 3 * (7 - 1) + 2 * (5  - 1) + 3 = 18 + 8 + 3</p><ol><li>它明确地产生了具有各种大的特征的多个感受野，这使得后来的内核选择更加容易</li><li>顺序分解比简单地应用一个较大的核更有效，相同的理论感受野下，作者的分解方法大大减少了参数量</li></ol><p>假设存在N个分解的核，每一个都通过<strong>1×1的卷积</strong>进行<strong>进一步处理</strong>，使得特征图的宽高相同，从而允许Channel Concat。</p><h3 id="spatial-kernel-selection"><a class="markdownIt-Anchor" href="#spatial-kernel-selection"></a> Spatial Kernel Selection</h3><p><img src="/img/article/2023/03/19/5.png" alt="" /></p><p>这一步就是从这些感受野中选出一个网络最关注的上下文区域。</p><p>首先是把经过不同核得到的卷积特征连接起来，</p><p>然后在channel再做一次卷积，转换为N个空间注意力图spatial attention maps，</p><p>最后做一个sigmoid掩码加权，然后把这些特征图相加融合起来，得到空间特征注意力。</p><h2 id="result"><a class="markdownIt-Anchor" href="#result"></a> Result</h2><p><img src="/img/article/2023/03/19/7.png" alt="" /></p><p><img src="/img/article/2023/03/19/8.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-78.可达性统计</title>
    <link href="/2023/03/19/Algorithm/Comp/0x20/20230319-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-078-%E5%8F%AF%E8%BE%BE%E6%80%A7%E7%BB%9F%E8%AE%A1/"/>
    <url>/2023/03/19/Algorithm/Comp/0x20/20230319-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-078-%E5%8F%AF%E8%BE%BE%E6%80%A7%E7%BB%9F%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/166/">算法竞赛进阶指南-78.可达性统计</a></p><p>给定一张 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 条边的有向无环图，分别统计从每个点出发能够到达的点的数量。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo separator="true">,</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">N,M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>，接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 行每行两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x,y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>，表示从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 的一条有向边。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出共 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 行，表示每个点能够到达的点的数量。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo separator="true">,</mo><mi>M</mi><mo>≤</mo><mn>30000</mn></mrow><annotation encoding="application/x-tex">1 \le N,M \le 30000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>≤</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">1 \le x,y \le N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">10 103 82 32 55 95 92 33 94 82 104 9</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">1633211111</code></pre><h3 id="method-位运算-拓扑排序"><a class="markdownIt-Anchor" href="#method-位运算-拓扑排序"></a> Method : 位运算 + 拓扑排序</h3><p>设从点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 出发能到达的点构成的集合为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>, 则有显然有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo><mo>∪</mo><mrow><mo fence="true">(</mo><munder><mo>⋃</mo><mrow><mi mathvariant="normal">∃</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">f(x)=\{x\} \cup\left(\bigcup_{\exists(x, y)} f(y)\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">x</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.808995em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∃</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">⋃</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.516005em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>也就是说从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 出发能够到达的节点, 是<strong>从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的所有后继节点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 出发能够到达的点的并集</strong>，再加上点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 自身 。<br />所以在计算所有后继节点的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 值之后, 就可以计算出该点的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 值，(因此可以倒序计算)。<br />这启发我们用拓扑排序算法求出一个拓扑序, 然后按照拓扑序的逆序进行计算（因为在拓扑序中, 对任意一条边 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 都排在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 之前)。</p><p>关于状态存储, 由于至多有 30000 个点要存储，因此最坏情况下会产生<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>3000</mn><msup><mn>0</mn><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(30000^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>个集合，直接存储会<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>L</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">MLE</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span>。<br />此时我们可以考虑使用位运算状态压缩，用一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>位二进制数存储每个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>，其中第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>位是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>可达<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>，第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>位是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>不可达<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>。这样一来，对若干个集合求并集，就相当于对若干个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>位二进制数<strong>按位或</strong>运算，最后统计结果中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的个数就是从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>出发能达到的节点数量。<br />而一个 <code>unsigned int</code> 有 32 位，因此一个点的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>位二进制数状态需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>N</mi><mn>32</mn></mfrac><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\frac{N}{32}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个 <code>unsigned int</code>来存储, 即设计数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mrow><mtext> </mtext><mi mathvariant="normal">N</mi></mrow><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi mathvariant="normal">N</mi><mi mathvariant="normal">/</mi><mn>32</mn><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[\mathrm{~N}][\mathrm{N} / 32-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord"><span class="mspace nobreak"> </span><span class="mord mathrm">N</span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord mathrm">N</span></span><span class="mord">/</span><span class="mord">3</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 来存储状态 为了方便统计, 考虑用 STL 的 <code>bitset</code>来实现这 30000 个二进制位的存储。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;queue&gt;#include &lt;bitset&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;const int N &#x3D; 3e4 + 7;const int M &#x3D; N;struct Edge &#123;  int to;  int w;  int nxt;&#125; edge[M];int head[N], idx &#x3D; 1;int deg[N], seq[N];bitset&lt;N&gt; f[N];void add(int from, int to, int w) &#123;    edge[idx].to &#x3D; to, edge[idx].w &#x3D; w, edge[idx].nxt &#x3D; head[from];    head[from] &#x3D; idx ++;    deg[to] ++;&#125;int n, m;bool top_sort() &#123;    queue&lt;int&gt; q;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        if (deg[i] &#x3D;&#x3D; 0) &#123;            q.push(i);        &#125;    &#125;        int cnt &#x3D; 0;    while (!q.empty()) &#123;        int t &#x3D; q.front(); q.pop();                seq[++ cnt] &#x3D; t;        for (int i  &#x3D; head[t]; ~i; i &#x3D; edge[i].nxt) &#123;            int j &#x3D; edge[i].to;            deg[j] --;            if (deg[j] &#x3D;&#x3D; 0) &#123;                q.push(j);            &#125;        &#125;    &#125;        return cnt &#x3D;&#x3D; n;&#125;int main() &#123;    memset(head, -1, sizeof head);        cin &gt;&gt; n &gt;&gt; m;    while (m --) &#123;        int u, v, w;        scanf(&quot;%d %d&quot;, &amp;u, &amp;v);        add(u, v, 1);    &#125;        top_sort();        for (int i &#x3D; n; i &gt;&#x3D; 1; i --) &#123;        int j &#x3D; seq[i];        f[j][j] &#x3D; 1;  &#x2F;&#x2F; j是自身可达的，因此初始N位bitset都置为1        for (int p &#x3D; head[j]; ~p; p &#x3D; edge[p].nxt) &#123;            f[j] |&#x3D; f[edge[p].to];        &#125;    &#125;        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        printf(&quot;%d\n&quot;, f[i]. count());     &#125;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mi>M</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>32</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(N(N + M)/ 32)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">3</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>为对n进行二进制拆分的时间复杂度。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><mn>8</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(N^2 / 8)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord">8</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul><h3 id="other"><a class="markdownIt-Anchor" href="#other"></a> Other</h3><p>一开始笨笨地写了一个时间复杂度最坏能达到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的一个bfs：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;queue&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;const int N &#x3D; 3e4 + 7;const int M &#x3D; N;struct Edge &#123;  int to;  int w;  int nxt;&#125; edge[M];int head[N], idx &#x3D; 1;void add(int from, int to, int w) &#123;    edge[idx].to &#x3D; to;    edge[idx].w &#x3D; w;    edge[idx].nxt &#x3D; head[from];    head[from] &#x3D; idx ++; &#125;int n, m;void bfs() &#123;    for (int u &#x3D; 1; u &lt;&#x3D; n; u ++) &#123;        int cnt &#x3D; 0;        bool visited[N];        memset(visited, 0, sizeof visited);        queue&lt;int&gt; q;        q.push(u);        while (!q.empty()) &#123;            int t &#x3D; q.front(); q.pop();            if (visited[t]) continue;            &#x2F;&#x2F; 没visited过的结点            visited[t] &#x3D; 1;            cnt ++;            for (int i &#x3D; head[t]; ~i; i &#x3D; edge[i].nxt) &#123;                int j &#x3D; edge[i].to;                if (!visited[j]) &#123;                    q.push(j);                &#125;            &#125;        &#125;        printf(&quot;%d\n&quot;, cnt);    &#125;&#125;int main() &#123;    memset(head, -1, sizeof head);        cin &gt;&gt; n &gt;&gt; m;    while (m --) &#123;        int u, v, w;        scanf(&quot;%d %d&quot;, &amp;u, &amp;v);        add(u, v, 1);    &#125;        bfs();        return 0;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>位运算</tag>
      
      <tag>拓扑排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-03-13-组会</title>
    <link href="/2023/03/13/Seminar/20230313-%E7%BB%84%E4%BC%9A/"/>
    <url>/2023/03/13/Seminar/20230313-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a4a5cc409355c1fe16fdef7c31e191366f328a0aba236d9c69e1be54c0be6a2a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-03-06-组会</title>
    <link href="/2023/03/05/Seminar/20230306-%E7%BB%84%E4%BC%9A/"/>
    <url>/2023/03/05/Seminar/20230306-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="其它方式的缺点"><a class="markdownIt-Anchor" href="#其它方式的缺点"></a> 其它方式的缺点</h2><h3 id="oriented-r-cnn"><a class="markdownIt-Anchor" href="#oriented-r-cnn"></a> Oriented R-CNN</h3><div class="group-image-container"><div class="group-image-row">        <div class="group-image-wrap">            <img src="/img/article/2023/03/05/2.png" style="height:200px" lazyload />        </div>        <div class="group-image-wrap">            <img src="/img/article/2023/03/05/3.png" style="height:200px" lazyload />        </div></div></div><p>最主要的缺点就是第一阶段生成的是平行四边形，而不是矩形：</p><ul><li><p>RRoI Align只能提取倾斜矩形框的特征，并不能提取倾斜平行四边形特征，<br />因此需要后处理(延长较短对角线)来转换成旋转矩形</p></li><li><p>第一阶段RPN阶段的bbox是六参数的表达方式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>w</mi><mo separator="true">,</mo><mi>h</mi><mo separator="true">,</mo><mi mathvariant="normal">Δ</mi><mi>α</mi><mo separator="true">,</mo><mi mathvariant="normal">Δ</mi><mi>β</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y, w, h, \Delta\alpha, \Delta\beta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span></span></span></span><br />第二阶段RCNN阶段的bbox参数表达回归到了五参数的表达方式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>w</mi><mo separator="true">,</mo><mi>h</mi><mo separator="true">,</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y, w, h, \theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>，<br />这种不一致性会使检测器混淆学习过程中两个阶段之间的不同bbox回归方式。</p></li><li><p>RPN阶段形成的proposal  bbox  和 RCNN阶段形成的predict  bbox，其角度是不一致的</p><blockquote><p>RPN阶段会计算loss， RCNN阶段也会计算loss<br />那么计算loss时，角度不一致的导致loss收敛始终会有瓶颈：<br />比如假设第二阶段pridect bbox的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span>与GT的完全相同，那么第一阶段proposal就会有这个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span></span></span></span>的偏差</p></blockquote><p>当然第二阶段也会有bbox regression，对角度有进行一个微调，可能会使得最终二者<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span></span></span></span>很小</p></li></ul><h3 id="qpdet"><a class="markdownIt-Anchor" href="#qpdet"></a> QPDet</h3><ul><li>弧度制<br />计算loss的时候需要把GT<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>w</mi><mo separator="true">,</mo><mi>h</mi><mo separator="true">,</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y, w, h, \theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>先转化到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>r</mi><mo separator="true">,</mo><mi mathvariant="normal">Δ</mi><mi>α</mi><mo separator="true">,</mo><mi mathvariant="normal">Δ</mi><mi>β</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y, r, \Delta\alpha, \Delta\beta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span></span></span></span><br />那么把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span> 转为弧度制后会有精度损失，而且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>α</mi></mrow><annotation encoding="application/x-tex">\Delta \alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span>偏移量也是在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mfrac><mi>π</mi><mn>2</mn></mfrac><mo separator="true">,</mo><mfrac><mi>π</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(-\frac{\pi}{2},\frac{\pi}{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>，带<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>也会有精度损失</li></ul><p>作者用的是{1:1 , 1 : 2, 1 : 4}的水平anchor，是怎么得到这个圆的，这个还太没搞明白</p><h2 id="我们方式的优点-缺点"><a class="markdownIt-Anchor" href="#我们方式的优点-缺点"></a> 我们方式的优点、缺点</h2><h3 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h3><p>不需要任何的后处理（without any postprocessing），直接生成的就是矩形</p><ul><li>如果也同样是设计这种两阶段的检测器，我们的bbox表达方式在两个阶段都是一致的，第二阶段的回归起点直接就是第一阶段生成的proposal的顶点。</li></ul><h3 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h3><p>0°和90°的边界情况的表示： 0°和90°只能表示成正方形…，可能是一种不足</p><p><img src="/img/article/2023/02/22/9.png" alt="" /></p><p>其实不算什么缺点，因为像其它的表达方式，其边界情况也是一个正方形。</p><ul><li>如果设计成两阶段检测器，这只是第一阶段的proposal而不是最终的predict bbox，到第二阶段bbox regression会再精修一次</li><li>如果设计成一阶段检测器，就再加一个bbox refine模块</li></ul>]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-63.荷马史诗</title>
    <link href="/2023/03/04/Algorithm/Comp/0x10/20230304-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-063-%E8%8D%B7%E9%A9%AC%E5%8F%B2%E8%AF%97/"/>
    <url>/2023/03/04/Algorithm/Comp/0x10/20230304-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-063-%E8%8D%B7%E9%A9%AC%E5%8F%B2%E8%AF%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/151/">算法竞赛进阶指南-63.荷马史诗</a></p><p>追逐影子的人，自己就是影子。 ——荷马</p><p>达达最近迷上了文学。</p><p>她喜欢在一个慵懒的午后，细细地品上一杯卡布奇诺，静静地阅读她爱不释手的《荷马史诗》。</p><p>但是由《奥德赛》和《伊利亚特》组成的鸿篇巨制《荷马史诗》实在是太长了，达达想通过一种编码方式使得它变得短一些。</p><p>一部《荷马史诗》中有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 种不同的单词，从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 进行编号。其中第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 种单词出现的总次数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>达达想要用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 进制串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 来替换第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 种单词，使得其满足如下要求:</p><p>对于任意的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>≤</mo><mi>n</mi><mi mathvariant="normal">，</mi><mi>i</mi><mi mathvariant="normal">≠</mi><mi>j</mi></mrow><annotation encoding="application/x-tex">1≤i,j≤n，i≠j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>，都有：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 不是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">s_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 的前缀。</p><p>现在达达想要知道，如何选择 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，才能使替换以后得到的新的《荷马史诗》长度最小。</p><p>在确保总长度最小的情况下，达达还想知道最长的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的最短长度是多少？</p><p>一个字符串被称为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 进制字符串，当且仅当它的每个字符是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mi mathvariant="normal">−</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">k−1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">−</span><span class="mord">1</span></span></span></span> 之间（包括 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mi mathvariant="normal">−</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">k−1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">−</span><span class="mord">1</span></span></span></span>）的整数。</p><p>字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>t</mi><mi>r</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">Str1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span></span></span></span> 被称为字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>t</mi><mi>r</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">Str2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span></span></span></span> 的前缀，当且仅当：存在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>t</mi><mo>≤</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">1≤t≤m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>，使得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>t</mi><mi>r</mi><mn>1</mn><mo>=</mo><mi>S</mi><mi>t</mi><mi>r</mi><mn>2</mn><mo stretchy="false">[</mo><mn>1..</mn><mi>t</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Str1=Str2[1..t]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">t</span><span class="mclose">]</span></span></span></span>。</p><p>其中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 是字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>t</mi><mi>r</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">Str2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span></span></span></span> 的长度，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>t</mi><mi>r</mi><mn>2</mn><mo stretchy="false">[</mo><mn>1..</mn><mi>t</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Str2[1..t]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mopen">[</span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">t</span><span class="mclose">]</span></span></span></span> 表示 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>t</mi><mi>r</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">Str2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span></span></span></span> 的前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 个字符组成的字符串。</p><p><strong>注意</strong>:请使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>64</mn></mrow><annotation encoding="application/x-tex">64</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">4</span></span></span></span> 位整数进行输入输出、储存和计算。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入文件的第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 行包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 个正整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">n,k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>，中间用单个空格隔开，表示共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 种单词，需要使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 进制字符串进行替换。</p><p>第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∼</mo><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2 \sim n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 行：第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 行包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个非负整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，表示第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 种单词的出现次数。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出文件包括 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 行。</p><p>第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 行输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个整数，为《荷马史诗》经过重新编码以后的最短长度。</p><p>第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 行输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个整数，为保证最短总长度的情况下，最长字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的最短长度。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>100000</mn></mrow><annotation encoding="application/x-tex">2 \le n \le 100000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">2 \le k \le 9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>w</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>12</mn></msup></mrow><annotation encoding="application/x-tex">1 \le w_i \le 10^{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">4 21122</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">122</code></pre><h3 id="method-优先队列-huffman树"><a class="markdownIt-Anchor" href="#method-优先队列-huffman树"></a> Method : 优先队列 + huffman树</h3><p>这道题和上一道题合并果子一样都是huffman树，只不过合并果子是二进制编码，每次从集合中取出最小的两个树合并；而该题是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>进制编码，每次从集合中取出最小的k个数合并成1个新的结点加入到集合中，每这样操作依次，集合中会减少<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>个点新增1个点，即每次操作集合会减少<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个点。</p><p>但是我们并不能保证<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∣</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(k - 1)\mid (n - 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，因此最后一次操作很可能可合并的点数少于k个结点，而越晚合并，一个结点被结算的次数越少，因此可以填入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n - 1) % k - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>个空结点，使得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∣</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(k - 1)\mid(n - 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，这些空结点会在最初就合并掉，而且对结果没有贡献。</p><p>另外，要使得合并后的树的深度最小，就需要优先合并高度较低的结点。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;queue&gt;#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;typedef long long LL;typedef pair&lt;LL, int&gt; PLI;int n, k;priority_queue&lt;PLI, vector&lt;PLI&gt;, greater&lt;PLI&gt;&gt; pq;int main() &#123;    cin &gt;&gt; n &gt;&gt; k;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;        LL x;        scanf(&quot;%lld&quot;, &amp;x);        pq.push(&#123;x, 0&#125;);    &#125;        while ((n - 1) % (k - 1) !&#x3D; 0) &#123;        pq.push(&#123;0LL, 0&#125;);        n ++;    &#125;        LL res &#x3D; 0;    while (pq.size() &gt; 1) &#123;        LL sum &#x3D; 0; int dep &#x3D; 0;        for (int i &#x3D; 0; i &lt; k; i ++) &#123;            auto t &#x3D; pq.top(); pq.pop();            sum +&#x3D; t.first;            dep &#x3D; max(dep, t.second);        &#125;        res +&#x3D; sum;        pq.push(&#123;sum, dep + 1&#125;);    &#125;        cout &lt;&lt; res &lt;&lt; endl;    cout &lt;&lt; pq.top().second &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mrow><mo fence="true">⌊</mo><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo fence="true">⌋</mo></mrow><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O((\left \lfloor  \frac{n - 1}{k - 1}\right \rfloor  + 1)\log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.253331em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mopen">(</span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">⌊</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">⌋</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>为优先队列的插入、弹出时间复杂度。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul><p>如果每轮合并的石子 可以是任意 的两堆 石子, 那么用到的就是经典的 Huffman Tree 的二叉堆模型<br />如果每轮合并的石子 可以是任意 的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 堆石子, 那么用到的就是经典的 Huffman Tree 的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 叉堆模型</p><p>k叉堆中，记得需要填空结点, 使得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>−</mo><mn>1</mn><mo>∣</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k-1 \mid n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><br />二叉堆中, 由于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>−</mo><mn>1</mn><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k-1=1,1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span></span></span></span> 能整除一切正整数, 所以不需要关心这一问题</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>二叉堆</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-62.合并果子</title>
    <link href="/2023/03/03/Algorithm/Comp/0x10/20230303-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-062-%E5%90%88%E5%B9%B6%E6%9E%9C%E5%AD%90/"/>
    <url>/2023/03/03/Algorithm/Comp/0x10/20230303-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-062-%E5%90%88%E5%B9%B6%E6%9E%9C%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/150/">算法竞赛进阶指南-62.合并果子</a></p><p>在一个果园里，达达已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。</p><p>达达决定把所有的果子合成一堆。</p><p>每一次合并，达达可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。</p><p>可以看出，所有的果子经过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 次合并之后，就只剩下一堆了。</p><p>达达在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p><p>因为还要花大力气把这些果子搬回家，所以达达在合并果子时要尽可能地节省体力。</p><p>假定每个果子重量都为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使达达耗费的体力最少，并输出这个最小的体力耗费值。</p><p>例如有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 种果子，数目依次为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">，</mi><mn>2</mn><mi mathvariant="normal">，</mi><mn>9</mn></mrow><annotation encoding="application/x-tex">1，2，9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord cjk_fallback">，</span><span class="mord">2</span><span class="mord cjk_fallback">，</span><span class="mord">9</span></span></span></span>。</p><p>可以先将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">、</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">1、2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord cjk_fallback">、</span><span class="mord">2</span></span></span></span> 堆合并，新堆数目为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，耗费体力为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>。</p><p>接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>12</mn></mrow><annotation encoding="application/x-tex">12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span></span></span></span>，耗费体力为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>12</mn></mrow><annotation encoding="application/x-tex">12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span></span></span></span>。</p><p>所以达达总共耗费体力<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mn>3</mn><mo>+</mo><mn>12</mn><mo>=</mo><mn>15</mn></mrow><annotation encoding="application/x-tex">=3+12=15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">5</span></span></span></span>。</p><p>可以证明 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>15</mn></mrow><annotation encoding="application/x-tex">15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">5</span></span></span></span> 为最小的体力耗费值。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入包括两行，第一行是一个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，表示果子的种类数。</p><p>第二行包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个整数，用空格分隔，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 种果子的数目。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。</p><p>输入数据保证这个值小于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>10000</mn></mrow><annotation encoding="application/x-tex">1 \le n \le 10000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>20000</mn></mrow><annotation encoding="application/x-tex">1 \le a_i \le 20000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">3 1 2 9</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">15</code></pre><h3 id="method-优先队列-huffman树"><a class="markdownIt-Anchor" href="#method-优先队列-huffman树"></a> Method : 优先队列 + huffman树</h3><p>二叉树对应的哈夫曼编码很好理解，相当于二进制编码，<br />每次从n个数的集合中取出最小的两个数合并，将合并结果加入原集合中，递归处理即可。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;queue&gt;#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;typedef long long LL;int n;int main() &#123;    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq;        cin &gt;&gt; n;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        int x;        scanf(&quot;%d&quot;, &amp;x);        pq.push(x);    &#125;        LL res &#x3D; 0;    while (pq.size() !&#x3D; 1) &#123;        int t1 &#x3D; pq.top(); pq.pop();        int t2 &#x3D; pq.top(); pq.pop();        res +&#x3D; (t1 + t2);        pq.push(t1 + t2);    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n \log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>为堆的插入、弹出时间复杂度，共要合并<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>次。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>二叉堆</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-61.数据备份</title>
    <link href="/2023/03/02/Algorithm/Comp/0x10/20230302-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-061-%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/"/>
    <url>/2023/03/02/Algorithm/Comp/0x10/20230302-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-061-%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/149/">算法竞赛进阶指南-61.数据备份</a></p><p>你在一家 IT 公司为大型写字楼或办公楼的计算机数据做备份。</p><p>然而数据备份的工作是枯燥乏味的，因此你想设计一个系统让不同的办公楼彼此之间互相备份，而你则坐在家中尽享计算机游戏的乐趣。</p><p>已知办公楼都位于同一条街上，你决定给这些办公楼配对（两个一组）。</p><p>每一对办公楼可以通过在这两个建筑物之间铺设网络电缆使得它们可以互相备份。</p><p>然而，网络电缆的费用很高。</p><p>当地电信公司仅能为你提供 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 条网络电缆，这意味着你仅能为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 对办公楼（总计 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>K</mi></mrow><annotation encoding="application/x-tex">2K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 个办公楼）安排备份。</p><p>任意一个办公楼都属于唯一的配对组（换句话说，这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>K</mi></mrow><annotation encoding="application/x-tex">2K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 个办公楼一定是相异的）。</p><p>此外，电信公司需按网络电缆的长度（公里数）收费。</p><p>因而，你需要选择这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 对办公楼使得电缆的总长度尽可能短。</p><p>换句话说，你需要选择这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 对办公楼，使得每一对办公楼之间的距离之和（总距离）尽可能小。</p><p>下面给出一个示例，假定你有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span> 个客户，其办公楼都在一条街上，如下图所示。</p><p>这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span> 个办公楼分别位于距离大街起点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi>k</mi><mi>m</mi><mo separator="true">,</mo><mn>3</mn><mi>k</mi><mi>m</mi><mo separator="true">,</mo><mn>4</mn><mi>k</mi><mi>m</mi><mo separator="true">,</mo><mn>6</mn><mi>k</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">1km, 3km, 4km, 6km</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">m</span></span></span></span> 和 $ 12km $ 处。</p><p>电信公司仅为你提供 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">K=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 条电缆。</p><p>上例中最好的配对方案是将第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个和第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 个办公楼相连，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 个和第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span> 个办公楼相连。</p><p>这样可按要求使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">K=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 条电缆。</p><p>第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 条电缆的长度是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mi>k</mi><mi>m</mi><mo>−</mo><mn>1</mn><mi>k</mi><mi>m</mi><mo>=</mo><mn>2</mn><mi>k</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">3km-1km=2km</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">m</span></span></span></span>，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 条电缆的长度是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mi>k</mi><mi>m</mi><mo>−</mo><mn>4</mn><mi>k</mi><mi>m</mi><mo>=</mo><mn>2</mn><mi>k</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">6km-4km=2km</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">m</span></span></span></span>。</p><p>这种配对方案需要总长 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mi>k</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">4km</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">m</span></span></span></span> 的网络电缆，满足距离之和最小的要求。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行输入整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 表示办公楼的数目，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 表示可利用的网络电缆的数目。</p><p>接下来的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 行每行仅包含一个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>，表示每个办公楼到大街起点处的距离。</p><p>这些整数将按照从小到大的顺序依次出现。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出应由一个正整数组成，给出将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>K</mi></mrow><annotation encoding="application/x-tex">2K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 个相异的办公楼连成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 对所需的网络电缆的最小总长度。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>100000</mn></mrow><annotation encoding="application/x-tex">2 \le n \le 100000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>K</mi><mo>≤</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">1 \le K \le n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>s</mi><mo>≤</mo><mn>1000000000</mn></mrow><annotation encoding="application/x-tex">0 \le s \le 1000000000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">5 2 134612</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">4</code></pre><h3 id="method-双向链表-优先队列"><a class="markdownIt-Anchor" href="#method-双向链表-优先队列"></a> Method : 双向链表 + 优先队列</h3><p>题目意思其实也讲得很明白，数轴上给出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>个点，要求选出其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>K</mi></mrow><annotation encoding="application/x-tex">2K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>个点形成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>对，问这<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>对点之间的距离的最小总长度。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;queue&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;typedef pair&lt;LL, int&gt; PLI;const int N &#x3D; 1e5 + 7;const int SIZE &#x3D; N &lt;&lt; 1; &#x2F;&#x2F;149493最低通过struct Node &#123;    LL val;    int l, r;&#125;;Node node[SIZE];int head, tail, idx;void init() &#123;    idx &#x3D; 2;    head &#x3D; 0, tail &#x3D; 1;    node[head].r &#x3D; tail;    node[tail].l &#x3D; head;&#125;int insert(int pos, int val) &#123;    node[idx].val &#x3D; val;    node[idx].r &#x3D; node[pos].r;    node[idx].l &#x3D; pos;    node[node[pos].r].l &#x3D; idx;    node[pos].r &#x3D; idx;        return idx ++;&#125;void remove(int pos) &#123;    node[pos].val &#x3D; -1;    node[node[pos].l].r &#x3D; node[pos].r;    node[node[pos].r].l &#x3D; node[pos].l;&#125;priority_queue&lt;PLI, vector&lt;PLI&gt;, greater&lt;PLI&gt;&gt; pq;LL d[N];int n, k;int main() &#123;    init();    node[head].val &#x3D; node[tail].val &#x3D; 1e10;    scanf(&quot;%d %d&quot;, &amp;n, &amp;k);    for (int i &#x3D; 0; i &lt; n; i ++) scanf(&quot;%lld&quot;, &amp;d[i]);    for (int i &#x3D; n - 1; i &gt; 0; i --) &#123;        d[i] -&#x3D; d[i - 1];        pq.push(&#123;d[i], insert(node[tail].l, d[i])&#125;);    &#125;        LL res &#x3D; 0;    while (k) &#123;        auto t &#x3D; pq.top(); pq.pop();                LL v &#x3D; t.first,  p &#x3D; t.second;        if (v !&#x3D; node[p].val) continue;                res +&#x3D; v;        LL d &#x3D; node[node[p].l].val + node[node[p].r].val - v;        pq.push(&#123;d, insert(node[p].r, d)&#125;);                remove(node[p].l);        remove(node[p].r);        remove(p);        k --;    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n\log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>为维护堆的时间复杂度。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>2</mn><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(2N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>二叉堆</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Effective C++</title>
    <link href="/2023/03/01/Programing/20230301-%E3%80%8AEffective%20C++%E3%80%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/01/Programing/20230301-%E3%80%8AEffective%20C++%E3%80%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="preface"><a class="markdownIt-Anchor" href="#preface"></a> Preface</h2><p>最近在读《Effective C++》，这本著作的作者(Meyers)和译者(侯捷)都是C++大师，书中的55个条款让我受益良多。由此我想记下一些自己的总结，帮助我在未来想要回顾某一条款的内容时，最大限度地节约我的时间。</p><p>以下条款有以下几点需要注意：</p><p>不考虑多线程</p><p>书中没有C++11后的新特性，个人会参考一些资料进行补充</p><p>打⭐️的条款是个人认为比较重要而常用的</p><p>该书建议多读几遍</p><h2 id="一-让自己习惯c"><a class="markdownIt-Anchor" href="#一-让自己习惯c"></a> 一、让自己习惯C++</h2><h3 id="条款01视c-为一个联邦"><a class="markdownIt-Anchor" href="#条款01视c-为一个联邦"></a> 条款01：视C++ 为一个联邦</h3><p>C++ 是一个语言联邦，其由四个主要的次语言构成：</p><ul><li><strong>C</strong>： C++ 仍然以C为基础语法，因此C可以说是C++ 最重要的一部分。</li><li><strong>Object-Oriented C++</strong>： C++ 引入了面向对象的设计理念，C with Class。</li><li><strong>Template C++</strong>：C++ 泛型编程，进一步拔高了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">function</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span></span></span></span>的复用性。</li><li><strong>STL</strong>：C++ 标准模板库，最常用的一套template程序库，包含函数、算法、容器、迭代器。</li></ul><h3 id="条款02尽量以const-enum-inline-替换define"><a class="markdownIt-Anchor" href="#条款02尽量以const-enum-inline-替换define"></a> 条款02：尽量以const, enum, inline 替换#define</h3><ul><li><p>在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span><strong>外</strong>定义一个(静态)常量，使用<code>const</code>/<code>static const</code></p></li><li><p>在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span><strong>内</strong>定义一个(静态)常量，使用<strong>enum hack</strong>，如以下示例：</p><pre class="language-c++" data-language="c++"><code class="language-c++">class GamePlayer &#123;private:enum &#123;NumTurns &#x3D; 5&#125;;             &#x2F;&#x2F; enum hack&#x2F;&#x2F; static const int NumTurns &#x3D; 5;&#x2F;&#x2F; 是声明式而非定义式    int scores[NumTurns]&#125;</code></pre><blockquote><p>取enum的地址是不合法的（不存在指针指向），enum不会导致非必要的内存分配。</p></blockquote></li><li><p>当需要多次调用某个函数时，可以考虑使用<code>inline</code>/<code>static inline</code>，而非#define函数宏</p></li></ul><h3 id="条款03尽可能使用const-️"><a class="markdownIt-Anchor" href="#条款03尽可能使用const-️"></a> 条款03：尽可能使用<code>const</code>  ⭐️</h3><p><code>const</code>关键字的作用其实很简单：使得被修饰的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">object</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">function</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span></span></span></span>变成可读不可写（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi><mtext> </mtext><mi>o</mi><mi>n</mi><mi>l</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">read\ only</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>）。</p><p>那么怎样才叫尽可能使用？ =&gt; <strong>只要 [某个值始终不发生变化] 是一个事实，你就应该使用<code>const</code></strong>。</p><hr /><ul><li><p>const指针用法：</p><p><strong><code>const</code>在星号左边，表示被指<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">object</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span></span></span></span>是常量；<code>const</code>在星号右边，表示指针自身是常量。</strong></p></li><li><p>const迭代器用法：</p>  <pre class="language-c++" data-language="c++"><code class="language-c++">const std::vector&lt;int&gt;::iterator iter;     &#x2F;&#x2F; 相当于T* const，指针自身是常量std::vector&lt;int&gt;::const_iterator iter;     &#x2F;&#x2F; 相当于const T*，被指object是常量</code></pre></li><li><p>const成员函数：</p><p><strong>const成员函数只能被const对象调用</strong>，在const成员函数内只能修改<code>mutable</code>修饰的成员变量。</p>  <pre class="language-c++" data-language="c++"><code class="language-c++">class CTextBlock &#123;private:    char* pText;    mutable std::size_t textLength;        &#x2F;&#x2F; 总是可被更改的变量    mutable bool lengthIsValid;            &#x2F;&#x2F; 即使是在const成员函数内public:    ...std:size_t length() const &#123;        if (!lengthIsValid) &#123;            textLength &#x3D; std:strlen(pText);            lengthIsValid &#x3D; true;        &#125;    &#125;&#125;</code></pre></li></ul><h3 id="条款04确定对象被使用前已先被初始化"><a class="markdownIt-Anchor" href="#条款04确定对象被使用前已先被初始化"></a> 条款04：确定对象被使用前已先被初始化</h3><ul><li><p>C内置类型的变量：使用前需要进行手动初始化，否则其初始值不固定（不一定是0或NULL）</p></li><li><p>类内成员变量：用member initialization list(成员初值列)<strong>按类内声明次序</strong>初始化，如下所示</p><pre class="language-c++" data-language="c++"><code class="language-c++">class ABEntry &#123;private:    std::string name;    std::string address;    std::list&lt;PhoneNumber&gt; phones;    int numTimesConsulted;             &#x2F;&#x2F; int是内置类型，初始化效率无影响public :    ABEntry (const std::string&amp; _name, const std::string&amp; _address,            const std::list&lt;PhoneNumber&gt; _phones)      : name(_name),   &#x2F;&#x2F; member initialization list    address(_address),    phone(_phone),    numTimesConsulted(0)              &#123; &#125;                                &#x2F;&#x2F; 构造函数内不需要做任何动作&#125;</code></pre><blockquote><p>如果在构造函数内对成员变量赋值，成员变量（非内置类型）会先调用default构造函数初始化，再立即调用copy assignment(赋值)操作符对变量进行赋值，因而效率较低。</p><p>而使用member initialization list初始化，成员变量（非内置类型）只会调用一次copy构造函数。</p></blockquote></li><li><p>用reference returning防止 <strong>[文件间]</strong> 的初始化次序问题</p><pre class="language-c++" data-language="c++"><code class="language-c++">  </code></pre></li></ul><hr /><h2 id="二-构造析构赋值运算"><a class="markdownIt-Anchor" href="#二-构造析构赋值运算"></a> 二、构造/析构/赋值运算</h2><h3 id="条款05了解c-默默编写并调用了哪些函数"><a class="markdownIt-Anchor" href="#条款05了解c-默默编写并调用了哪些函数"></a> 条款05：了解C++ 默默编写并调用了哪些函数</h3><p>编译器会自动为class创建copy构造函数、析构函数以及操作符，同时如果你没有声明任何构造函数，编译器也会为你声明一个default构造函数，这些自动创建的函数都是<code>public</code>且<code>inline</code>的。</p><pre class="language-c++" data-language="c++"><code class="language-c++">class Empty &#123;public:    Empty() &#123;&#125;                                   &#x2F;&#x2F; 默认构造函数 default constructor    ~Empty() &#123;&#125;                                  &#x2F;&#x2F; 析构函数            destructor        Empty (const Empty&amp; rhs) &#123;&#125;                  &#x2F;&#x2F; 拷贝构造函数    copy constructor    Empty&amp; operator&#x3D;(const Empty&amp; rhs) &#123;&#125;        &#x2F;&#x2F; 赋值操作符      copy assignment operator        Empty (const Empty&amp;&amp; rhs) &#123;&#125;                 &#x2F;&#x2F; 移动构造函数 C++11, move constructor    Empty&amp; operator&#x3D;(Empty&amp;&amp;) &#123;&#125;                 &#x2F;&#x2F; 移动拷贝函数 C++11, move assignment operator&#125; </code></pre><blockquote><p><strong>注意</strong>：唯有当这些函数需要被调用，才会被编译器创建出来。</p></blockquote><h3 id="条款06若不想使用编译器自动生成函数就该明确拒绝"><a class="markdownIt-Anchor" href="#条款06若不想使用编译器自动生成函数就该明确拒绝"></a> 条款06：若不想使用编译器自动生成函数，就该明确拒绝</h3><p>承接上一个条款，如果你不需要自动创建的函数，你可以把这些函数声明在<code>private</code>内，并且不实现。</p><pre class="language-c++" data-language="c++"><code class="language-c++">class HomeForSale &#123;private:    &#x2F;&#x2F; 在private内只有声明没有定义，并且形参连名字都没有    HomeForSale(const HomeForSale&amp;);    HomeForSale&amp; operator&#x3D;(const HomeForSale&amp;);public:    ...&#125;</code></pre><blockquote><p>在C++ 11中，<strong>禁止编译器默认生成的函数</strong>，建议声明在<code>private</code>内并且同时使用<code>=delete</code></p></blockquote><h3 id="条款07为多态基类声明virtual析构函数"><a class="markdownIt-Anchor" href="#条款07为多态基类声明virtual析构函数"></a> 条款07：为多态基类声明<code>virtual</code>析构函数</h3><ul><li><p><strong>带有多态性质的基类必须将析构函数声明为<code>virtual</code>函数。</strong></p><blockquote><p>防止指向子类的基类指针在被释放时只销毁了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">base\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>而没销毁<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">derived\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>,导致内存泄漏。</p></blockquote></li><li><p>普通的基类，如果设计目的不是为了多态用途(如STL)，则不该声明<code>virtual</code>析构函数。</p><blockquote><p>在C++ 11中，可以在类中声明为<code>final</code>，这样禁止派生可以防止误继承造成上述问题。</p></blockquote></li></ul><h3 id="条款08别让异常逃离析构函数"><a class="markdownIt-Anchor" href="#条款08别让异常逃离析构函数"></a> 条款08：别让异常逃离析构函数</h3><p>析构函数一般情况下不应抛出异常，因为很大可能发生各种未定义的问题，包括但不限于内存泄漏、程序崩溃、所有权锁死等。如果某些操作真的很容易抛出异常(如资源的归还等)，请把这些操作移到析构函数之外，提供一个普通函数做类似的清理工作，在析构函数中只负责记录，我们需要时刻保证析构函数能够执行到底。</p><h3 id="条款09绝不在构造和析构过程中调用virtual函数"><a class="markdownIt-Anchor" href="#条款09绝不在构造和析构过程中调用virtual函数"></a> 条款09：绝不在构造和析构过程中调用<code>virtual</code>函数</h3><p><strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">base\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>构造期间<code>virtual</code>函数不会下降到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">derived\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>阶层，同理适用于析构过程</strong>。</p><p>当一个子类对象在构造过程中，首先调用的是基类的构造函数，在基类构造期间，该对象会一直被视为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">base\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>类型，自然在基类构造函数中调用的虚函数将会是基类的虚函数版本，而不是子类的虚函数。</p><h3 id="条款10令operator-返回一个reference-to-this"><a class="markdownIt-Anchor" href="#条款10令operator-返回一个reference-to-this"></a> 条款10：令operator= 返回一个reference to *this</h3><pre class="language-c++" data-language="c++"><code class="language-c++">Weight&amp; operator&#x3D;(const Weiget&amp; rhs) &#123;     &#x2F;&#x2F; 返回一个reference，指向当前对象...    return *this;                          &#x2F;&#x2F; return reference to *this&#125;&#x2F;&#x2F; 同样适用于 operator +&#x3D;, -&#x3D;, *&#x3D;, \&#x3D;等等。</code></pre><p>在设计接口时一个重要的原则是：<strong>让自己的接口和内置类型相同功能的接口尽可能相似</strong></p><p>令operator= 返回一个reference to *this，这样做可以让你的赋值操作符实现“连等”的效果：</p><pre class="language-c++" data-language="c++"><code class="language-c++">x &#x3D; y &#x3D; z &#x3D; 10;</code></pre><h3 id="条款11在operator-中处理自我赋值"><a class="markdownIt-Anchor" href="#条款11在operator-中处理自我赋值"></a> 条款11：在operator= 中处理“自我赋值”</h3><p>使用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>p</mi><mi>y</mi><mtext> </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext> </mtext><mi>s</mi><mi>w</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">copy\ and\ swap</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span></span></span></span>技术</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; copy and swapWeight&amp; operator&#x3D;(Weight rhs) &#123;            &#x2F;&#x2F; 按值传递，形参产生实参副本    swap(rhs);     &#x2F;&#x2F; 使用swap()将形参数据与*this数据交换    return *this;&#125;</code></pre><h3 id="条款12复制对象时勿忘其每一个成分"><a class="markdownIt-Anchor" href="#条款12复制对象时勿忘其每一个成分"></a> 条款12：复制对象时勿忘其每一个成分</h3><p>如果你为一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>声明了copy构造函数和copy assignment操作符，需要注意：</p><ul><li>每当你新增一个成员变量，你必须同时要修改该<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>的所有<strong>构造函数</strong>以及<strong>任何形式的operator=</strong> 赋值操作符(如+=、-=、*=等)，在这些函数里面加上该新增的成员变量的copy。</li><li>如果是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">derived\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>，确保在拷贝构造函数中调用了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">base\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>的拷贝构造,在operator=赋值操作符调用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">base\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>的operator=赋值操作符。</li></ul><p>除此之外，<strong>拷贝构造函数和拷贝赋值操作符，他们两个中任意一个不要去调用另一个</strong>，这虽然看上去是一个避免代码重复好方法，但是是荒谬的。其根本原因在于拷贝构造函数在构造一个对象——这个对象在调用之前并不存在；而赋值操作符在改变一个对象——这个对象是已经构造好了的。因此前者调用后者是在给一个还未构造好的对象赋值；而后者调用前者就像是在构造一个已经存在了的对象。比较好的代码复用方式如下：</p><pre class="language-c++" data-language="c++"><code class="language-c++">class Weight &#123;private:    void init(const Weight&amp; rhs) &#123;...&#125;    public:    Weight(const Weight&amp; rhs) &#123;        init(rhs);    &#125;    Weight&amp; operator&#x3D; (const Weight&amp; rhs) &#123;        init(rhs);    &#125;&#125;</code></pre><hr /><h2 id="三-资源管理"><a class="markdownIt-Anchor" href="#三-资源管理"></a> 三、资源管理</h2><h3 id="条款13-以对象管理资源-️"><a class="markdownIt-Anchor" href="#条款13-以对象管理资源-️"></a> 条款13： 以对象管理资源 ⭐️</h3><p><strong>资源获取时机便是初始化时机</strong>（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>e</mi><mi>s</mi><mi>o</mi><mi>u</mi><mi>r</mi><mi>c</mi><mi>e</mi><mtext> </mtext><mi>A</mi><mi>c</mi><mi>q</mi><mi>u</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mi>I</mi><mi>s</mi><mtext> </mtext><mi>I</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>a</mi><mi>l</mi><mi>i</mi><mi>z</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo separator="true">,</mo><mi>R</mi><mi>A</mi><mi>I</mi><mi>I</mi></mrow><annotation encoding="application/x-tex">Resource\ Acquisition\ Is\ Initialization,RAII</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">A</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord mathdefault">u</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">s</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span>）</p><p>使用资源管理类(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>A</mi><mi>I</mi><mi>I</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">RAII\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>)，例如智能指针<code>auto_ptr</code>或<code>share_ptr</code>来管理资源(<code>share_ptr</code>往往是较佳选择)，<br />可以避免出现因异常导致丢失对资源的控制权或因忘记释放资源而造成的资源泄漏(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mi>e</mi><mi>a</mi><mi>p</mi><mo>−</mo><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">heap-based</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span></span></span></span>)：</p><pre class="language-c++" data-language="c++"><code class="language-c++">std::auto_ptr&lt;Investment&gt; pInv(createInvestment());std::share_ptr&lt;Investment&gt; pInv(createInvestment());</code></pre><ul><li><p><code>auto_ptr</code>和<code>share_ptr</code>的析构函数都能自动对其所指向的对象调用<code>delete</code>，释放所指对象内存。</p></li><li><p>受<code>auto_ptr</code>管理的资源只能<strong>同时存在1个</strong><code>auto_ptr</code>指向它<br />当<code>auto_ptr</code>发生copy时，右值<code>auto_ptr</code>变成<code>nullptr</code>，左值<code>auto_ptr</code>变成该资源的唯一指向。</p></li><li><p><code>share_ptr</code>，也叫引用计数型智慧指针(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>e</mi><mi>f</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo>−</mo><mi>C</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext> </mtext><mi>S</mi><mi>m</mi><mi>a</mi><mi>r</mi><mi>t</mi><mtext> </mtext><mi>P</mi><mi>o</mi><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo separator="true">,</mo><mi>R</mi><mi>C</mi><mi>S</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">Reference-Counting\ Smart\ Pointer,RCSP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">o</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>)，可以持续追踪有多少对象指向某笔资源，当无人指向它时自动删除该资源，行为类似于垃圾回收。</p></li></ul><h3 id="条款14在资源管理类中小心copying行为"><a class="markdownIt-Anchor" href="#条款14在资源管理类中小心copying行为"></a> 条款14：在资源管理类中小心copying行为</h3><p>智能指针比较适合管理<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mi>e</mi><mi>a</mi><mi>p</mi><mo>−</mo><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">heap-based</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span></span></span></span>资源，当其不满足需要时，可以自定义资源管理类<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>A</mi><mi>I</mi><mi>I</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">RAII\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>，但此时需要考虑<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>A</mi><mi>I</mi><mi>I</mi></mrow><annotation encoding="application/x-tex">RAII</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span>对象的copying行为的实现：</p><ul><li>禁止copying：类似于条款06的做法，把copy函数放在<code>private</code>内，并且不实现。</li><li>复制底部资源：深拷贝</li><li>转移底部资源：类似<code>auto_ptr</code>，copy时做转移，保证只有一个指向</li><li>reference-counting：类似<code>share_ptr</code>，做引用计数</li></ul><p><code>share_ptr</code>支持定制删除器<code>deleter()</code>，这可以防范DLL问题，可以用来自动解除互斥锁(mutex)等等。</p><h3 id="条款15在资源管理类中提供对原始资源的访问"><a class="markdownIt-Anchor" href="#条款15在资源管理类中提供对原始资源的访问"></a> 条款15：在资源管理类中提供对原始资源的访问</h3><ul><li><code>shared_ptr</code> 和<code>auto_ptr</code>：<ul><li>都提供一个<code>get()</code>成员函数，用来执行<strong>显式转换</strong>，也就是它会返回智能指针内部的原始指针的副本</li><li>都重载了<code>operator-&gt;</code>和<code>operator*</code>指针取值操作符，允许智能指针<strong>隐式转换</strong>为原始指针</li></ul></li><li>自定义资源管理类<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>A</mi><mi>I</mi><mi>I</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">RAII\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>：<ul><li>提倡编写 <code>get()</code> 函数，提供显式转换</li><li>谨慎考虑重载<code>operator-&gt;</code>和<code>operator*</code>，隐式转换会增加错误风险（如：产生虚吊指针）。</li></ul></li></ul><h3 id="条款16成对使用new和delete时要采用相同形式"><a class="markdownIt-Anchor" href="#条款16成对使用new和delete时要采用相同形式"></a> 条款16：成对使用<code>new</code>和<code>delete</code>时要采用相同形式</h3><ul><li>对于<strong>单一对象</strong>：请成对使用<code>new</code>和<code>delete</code></li><li>对于<strong>对象数组</strong>：请成对使用<code>new xxx[]</code>和<code>delete[] xxx</code></li></ul><p>不成对使用容易造成Unfined Behavior.</p><h3 id="条款17以独立语句将newd对象置入智能指针"><a class="markdownIt-Anchor" href="#条款17以独立语句将newd对象置入智能指针"></a> 条款17：以独立语句将newd对象置入智能指针</h3><p>因为C++的函数参数核算次序是不固定的（主要跟<strong>编译器</strong>有关），因此如果核算次序如下：</p><ol><li>执行<code>new Widget</code></li><li>调用<code>priority()</code></li><li>调用<code>shared_ptr</code>的构造函数</li></ol><p>如果step2中的<code>priority()</code>函数在执行过程中抛出异常，那么step1中的内存将发生泄漏</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; processWidget(std::tr1::shared_ptr&lt;Widget&gt;(new Widget), priority());std::tr1::shared_ptr&lt;Widget&gt; pw(new Widget); &#x2F;&#x2F; 独立语句将new对象置入智能指针processWidget(pw, priority());               &#x2F;&#x2F; 以保证这个函数不会发生内存泄漏</code></pre><hr /><h2 id="四-设计与声明"><a class="markdownIt-Anchor" href="#四-设计与声明"></a> 四、设计与声明</h2><h3 id="条款18让接口容易被正确使用"><a class="markdownIt-Anchor" href="#条款18让接口容易被正确使用"></a> 条款18：让接口容易被正确使用</h3><p>本条款的核心在于如何<strong>帮助你的客户在使用你的接口时避免他们犯错误</strong>：</p><ul><li><p>提供<strong>行为一致</strong>的接口</p><ul><li>例如每个STL容器都有一个名为size的函数，其功能都是返回容器当前大小</li><li>通用操作接口应表现出与内置类型的一致性，如重载<code>operator *</code>而不是设计<code>mul()</code>函数</li></ul></li><li><p>使用<strong>外覆类型（wrapper）<strong>提醒调用者传参错误检查，将参数的附加条件限制在</strong>类型本身</strong></p></li></ul><h3 id="条款19设计class犹如设计type"><a class="markdownIt-Anchor" href="#条款19设计class犹如设计type"></a> 条款19：设计class犹如设计type</h3><p>如果想要设计出优秀的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>，你应该在设计时思考以下问题：</p><ul><li>对象该如何创建销毁：包括构造函数、析构函数以及new和delete操作符的重构需求。</li><li>对象的构造函数与赋值行为应有何区别：构造函数和赋值操作符的区别，重点在资源管理上。</li><li>对象被拷贝时应考虑的行为：拷贝构造函数的设计。</li><li>对象的合法值是什么？最好在语法层面、至少在编译前应对用户做出监督。</li><li>新的类型是否应该复合某个继承体系，这就包含虚函数的覆盖问题。</li><li>新类型和已有类型之间的隐式转换问题，这意味着类型转换函数和非explicit函数之间的取舍。</li><li>新类型是否需要重载操作符，需要重载哪些操作符？</li><li>什么样的接口应当暴露在外，而什么样的技术应当封装在内?（<code>public</code>和<code>private</code>）</li><li>新类型的效率、资源获取归还、线程安全性和异常安全性如何保证？</li><li>这个类是否具备template的潜质：如果有的话，就应改为模板类。</li></ul><h3 id="条款20宁以pass-by-reference-to-const替换pass-by-type"><a class="markdownIt-Anchor" href="#条款20宁以pass-by-reference-to-const替换pass-by-type"></a> 条款20：宁以pass-by-reference-to-const替换pass-by-type</h3><h3 id="条款21必须返回对象时别妄想返回其reference"><a class="markdownIt-Anchor" href="#条款21必须返回对象时别妄想返回其reference"></a> 条款21：必须返回对象时，别妄想返回其reference</h3><h3 id="条款22将成员变量声明为private"><a class="markdownIt-Anchor" href="#条款22将成员变量声明为private"></a> 条款22：将成员变量声明为private</h3><h3 id="条款23宁以non-member-non-friend替换member函数"><a class="markdownIt-Anchor" href="#条款23宁以non-member-non-friend替换member函数"></a> 条款23：宁以non-member、non-friend替换member函数</h3><h3 id="条款24若所有参数皆需类型转换请为此采用non-member函数"><a class="markdownIt-Anchor" href="#条款24若所有参数皆需类型转换请为此采用non-member函数"></a> 条款24：若所有参数皆需类型转换，请为此采用non-member函数</h3><h3 id="条款25考虑写出一个不抛出异常的swap函数"><a class="markdownIt-Anchor" href="#条款25考虑写出一个不抛出异常的swap函数"></a> 条款25：考虑写出一个不抛出异常的swap函数</h3><hr /><h2 id="五-实现"><a class="markdownIt-Anchor" href="#五-实现"></a> 五、实现</h2><h3 id="条款26尽可能延后变量定义式的出现时间"><a class="markdownIt-Anchor" href="#条款26尽可能延后变量定义式的出现时间"></a> 条款26：尽可能延后变量定义式的出现时间</h3><h3 id="条款27尽量少做转型动作"><a class="markdownIt-Anchor" href="#条款27尽量少做转型动作"></a> 条款27：尽量少做转型动作</h3><h3 id="条款28避免返回hanles指向对象内部成分"><a class="markdownIt-Anchor" href="#条款28避免返回hanles指向对象内部成分"></a> 条款28：避免返回hanles指向对象内部成分</h3><h3 id="条款29为异常安全而努力是值得的"><a class="markdownIt-Anchor" href="#条款29为异常安全而努力是值得的"></a> 条款29：为“异常安全”而努力是值得的</h3><h3 id="条款30透彻了解inlining的里里外外"><a class="markdownIt-Anchor" href="#条款30透彻了解inlining的里里外外"></a> 条款30：透彻了解inlining的里里外外</h3><h3 id="条款31将文件的编译依存关系降至最低"><a class="markdownIt-Anchor" href="#条款31将文件的编译依存关系降至最低"></a> 条款31：将文件的编译依存关系降至最低</h3><hr /><h2 id="六-继承与面向对象设计"><a class="markdownIt-Anchor" href="#六-继承与面向对象设计"></a> 六、继承与面向对象设计</h2><h3 id="条款32确定你的public继承塑膜出is-a关系"><a class="markdownIt-Anchor" href="#条款32确定你的public继承塑膜出is-a关系"></a> 条款32：确定你的<code>public</code>继承塑膜出is-a关系</h3><p><strong>is-a</strong>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">derived\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span> <u>is  a</u> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>a</mi><mi>l</mi><mtext> </mtext><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">special\ base\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace"> </span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>，也就是说<strong>子类<u>是一种</u>特殊的基类</strong>。<br /><code>public</code>继承主张：能够施行于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">base\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>对象上的<strong>任何</strong>事情，都能施行于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">derived\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>对象上。</p><h3 id="条款33避免遮掩继承而来的名称️"><a class="markdownIt-Anchor" href="#条款33避免遮掩继承而来的名称️"></a> 条款33：避免遮掩继承而来的名称⭐️</h3><p>本条款也很好理解—我们知道：<strong>内层作用域的同名变量会遮掩外层作用域的同名变量</strong>。</p><pre class="language-c++" data-language="c++"><code class="language-c++">int x;           &#x2F;&#x2F; global作用域int main() &#123;    double x;                      &#x2F;&#x2F; main函数作用域    x &#x3D; 2.5;           &#x2F;&#x2F; main函数的double x遮掩了global中的int x    std::cout &lt;&lt; x &lt;&lt; std::endl;   &#x2F;&#x2F; 2.5&#125;</code></pre><p>这个名称遮掩规则对于继承来说同样适用，可以认为**<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">derived\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>作用域被嵌入在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">base\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>作用域内**。</p><pre class="language-c++" data-language="c++"><code class="language-c++">namespace Base &#123;    &#x2F;&#x2F; ...namespace Drived &#123;        &#x2F;&#x2F; ...    &#125;&#125;</code></pre><p>因此当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">derived\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">base\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>中的虚函数覆写，override后<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">base\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>中对应的虚函数将被遮掩。</p><blockquote><p>你可以使用using 声明式或转交函数(inline forwarding functions)让被遮掩的名称重见天日。</p></blockquote><h3 id="条款34区分接口继承和实现继承️"><a class="markdownIt-Anchor" href="#条款34区分接口继承和实现继承️"></a> 条款34：区分接口继承和实现继承⭐️</h3><p>在本条款中，我们主要讨论<code>public</code>继承下，不同类型接口—纯虚函数、虚函数和非虚函数<strong>背后隐藏的设计逻辑</strong></p><ul><li><p>在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">base\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>中声明一个<code>prue virtual</code>函数, 是为了让<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">derived\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span><strong>强制继承该函数接口</strong></p><blockquote><p>如果你想要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">derived\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>实例化，必须提供该函数接口的实现</p></blockquote></li><li><p>在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">base\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>中声明一个<code>imprue virtual</code>函数,是为了让<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">derived\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span><strong>强制继承该函数接口和缺省实现</strong></p><blockquote><p>如果你不想使用该缺省实现，可以override该虚函数，实现遮掩覆盖</p></blockquote></li><li><p>在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">base\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>中声明一个<code>non-virtual</code>函数，是为了让<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">derived\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span><strong>强制继承该函数接口以及已经规定好的实现</strong></p><blockquote><p>在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>d</mi><mtext> </mtext><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">derived\ class</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span></span></span></span>中不允许对该函数接口做任何更改(条款36要求我们不得override类的非虚函数)</p></blockquote></li></ul><p>一种特殊用法：在基类中<strong>为纯虚函数提供一份缺省实现</strong>，然后在子类中使用<code>基类名::</code>显示调用，如下所示：</p><pre class="language-c++" data-language="c++"><code class="language-c++">class Airport &#123;...&#125; ;  &#x2F;&#x2F;机场class Airplane &#123;public:    virtual void fly(const Airport&amp; destination) &#x3D; 0;&#125;&#x2F;&#x2F; pure virtual函数实现void Airplane::fly(const Airport&amp; destination) &#123;    &#x2F;&#x2F; ...缺省实现&#125;class AirPlaneA: public Airplane &#123;    virtual void fly(const Airport&amp; destination) &#123;        Airplane::fly(destination);  &#x2F;&#x2F; 显示调用pure virtual函数实现    &#125;&#125;class AirPlaneB: public Airplane &#123;    virtual void fly(const Airport&amp; destination) &#123;        Airplane::fly(destination);  &#x2F;&#x2F; 显示调用pure virtual函数实现    &#125;&#125;class AirPlaneC: public Airplane &#123;    virtual void fly(const Airport&amp; destination);&#125;&#x2F;&#x2F; 覆写fly函数接口void AirplaneC::fly(const Airport&amp; destination) &#123;    &#x2F;&#x2F; ...C飞机飞往目的地的方式&#125;</code></pre><p>这样显示调用缺省实现可以提醒用户，以防用户设计子类时忘记实现该接口。</p><p>从这里我们可以看出，将纯虚函数、虚函数区分开的并不是在父类有没有实现——纯虚函数也可以有实现，其二者本质区别在于父类对子类的要求不同，前者在于<strong>从编译层面提醒子类主动实现接口</strong>，后者则侧重于<strong>给予子类自由度对接口做个性化适配</strong>。非虚函数则没有给予子类任何自由度，而是要求子类坚定的遵循父类的意志，<strong>保证其所有子类都继承基类接口的实现</strong>。</p><h3 id="条款35考虑virtual函数以外的其它选择"><a class="markdownIt-Anchor" href="#条款35考虑virtual函数以外的其它选择"></a> 条款35：考虑<code>virtual</code>函数以外的其它选择</h3><p>本条款想要忠告的是：当你想override<code>virtual</code>函数时，不妨往Strategy设计模式的方向考虑</p><ul><li>或者将<code>virtual</code>函数作为一个属性抽离出来，然后转移到另一个继承体系的<code>virual</code>函数</li></ul><h3 id="条款36绝不重新定义继承而来的non-virtual函数️"><a class="markdownIt-Anchor" href="#条款36绝不重新定义继承而来的non-virtual函数️"></a> 条款36：绝不重新定义继承而来的<code>non-virtual</code>函数⭐️</h3><p>本条款解释了为什么不能在子类中override<code>non-virtual</code>函数：</p><h3 id="条款37绝不重新定义继承而来的缺省参数值️"><a class="markdownIt-Anchor" href="#条款37绝不重新定义继承而来的缺省参数值️"></a> 条款37：绝不重新定义继承而来的缺省参数值⭐️</h3><p>本条款解释了为什么不能在子类中override<code>virtual</code>函数的缺省参数值：</p><h3 id="条款38通过复合塑膜出has-a或is-implemented-in-term-of"><a class="markdownIt-Anchor" href="#条款38通过复合塑膜出has-a或is-implemented-in-term-of"></a> 条款38：通过复合塑膜出has-a或is-implemented-in-term-of</h3><h3 id="条款39明智而审慎地使用private继承"><a class="markdownIt-Anchor" href="#条款39明智而审慎地使用private继承"></a> 条款39：明智而审慎地使用<code>private</code>继承</h3><h3 id="条款40明智而审慎地使用多重继承"><a class="markdownIt-Anchor" href="#条款40明智而审慎地使用多重继承"></a> 条款40：明智而审慎地使用多重继承</h3><h2 id="七-模板与泛型编程"><a class="markdownIt-Anchor" href="#七-模板与泛型编程"></a> 七、模板与泛型编程</h2><h3 id="条款41了解隐式接口和编译期多态"><a class="markdownIt-Anchor" href="#条款41了解隐式接口和编译期多态"></a> 条款41：了解隐式接口和编译期多态</h3><h3 id="条款42了解typename的双重意义"><a class="markdownIt-Anchor" href="#条款42了解typename的双重意义"></a> 条款42：了解typename的双重意义</h3><h3 id="条款43学习处理模板化基类内的名称"><a class="markdownIt-Anchor" href="#条款43学习处理模板化基类内的名称"></a> 条款43：学习处理模板化基类内的名称</h3><h3 id="条款44将与参数无关的代码抽离"><a class="markdownIt-Anchor" href="#条款44将与参数无关的代码抽离"></a> 条款44：将与参数无关的代码抽离</h3><h3 id="条款45运用成员函数模板接受所有兼容类型"><a class="markdownIt-Anchor" href="#条款45运用成员函数模板接受所有兼容类型"></a> 条款45：运用成员函数模板接受所有兼容类型</h3><h3 id="条款46需要类型转换时请为模板定义非成员函数"><a class="markdownIt-Anchor" href="#条款46需要类型转换时请为模板定义非成员函数"></a> 条款46：需要类型转换时请为模板定义非成员函数</h3><h3 id="条款47请使用traits-classes表现类型信息"><a class="markdownIt-Anchor" href="#条款47请使用traits-classes表现类型信息"></a> 条款47：请使用traits classes表现类型信息</h3><h3 id="条款48认识template元编程"><a class="markdownIt-Anchor" href="#条款48认识template元编程"></a> 条款48：认识template元编程</h3><hr /><h2 id="八-定制new和delete"><a class="markdownIt-Anchor" href="#八-定制new和delete"></a> 八、定制<code>new</code>和<code>delete</code></h2><h3 id="条款49了解new-handler的行为"><a class="markdownIt-Anchor" href="#条款49了解new-handler的行为"></a> 条款49：了解new-handler的行为</h3><h3 id="条款50了解new和delete的合理替换时机"><a class="markdownIt-Anchor" href="#条款50了解new和delete的合理替换时机"></a> 条款50：了解<code>new</code>和<code>delete</code>的合理替换时机</h3><h3 id="条款51编写new和delete时需固守常规"><a class="markdownIt-Anchor" href="#条款51编写new和delete时需固守常规"></a> 条款51：编写<code>new</code>和<code>delete</code>时需固守常规</h3><h3 id="条款52写了placement-new也要写placement-delete"><a class="markdownIt-Anchor" href="#条款52写了placement-new也要写placement-delete"></a> 条款52：写了placement <code>new</code>也要写placement <code>delete</code></h3><h2 id="九-杂项讨论"><a class="markdownIt-Anchor" href="#九-杂项讨论"></a> 九、杂项讨论</h2><h3 id="条款53不要轻忽编译器的警告"><a class="markdownIt-Anchor" href="#条款53不要轻忽编译器的警告"></a> 条款53：不要轻忽编译器的警告</h3><h3 id="条款54让自己熟悉包括tr1在内的标准程序库"><a class="markdownIt-Anchor" href="#条款54让自己熟悉包括tr1在内的标准程序库"></a> 条款54：让自己熟悉包括TR1在内的标准程序库</h3><h3 id="条款55让自己熟悉boost"><a class="markdownIt-Anchor" href="#条款55让自己熟悉boost"></a> 条款55：让自己熟悉Boost</h3><h2 id="一些查阅"><a class="markdownIt-Anchor" href="#一些查阅"></a> 一些查阅</h2><p>记录一些读书时散发的问题思考：</p><ul><li><p>关键字<code>static</code>  的作用:</p><ol><li>修饰局部变量，修饰为<strong>静态变量</strong>–其生命周期发生变化：</li></ol><blockquote><p>普通的的局部变量，存放在Stack段；<br />用malloc、new等函数声明的局部变量，由用户手动控制，存放在Heap段，用free、delete释放；<br />未初始化的全局变量和静态变量存放在BSS段，初始化后的全局变量和静态变量存放在Data段。</p></blockquote></li><li><p>重载<code>operator()</code>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>a</mi><mi>m</mi><mi>b</mi><mi>d</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span></span></span></span>表达式的作用与区别：</p><p>功能上都是创建一个函数对象（仿函数，Functor），但是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>a</mi><mi>m</mi><mi>b</mi><mi>d</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span></span></span></span>是<strong>匿名</strong>函数对象；因此还是有区别的：</p><ul><li>对象性质不同：重载 <code>operator()</code> 的函数对象是一个具有状态的对象，可以在其成员变量中保存一些信息，而lambda 匿名函数不具有状态，只是一个纯粹的函数，不能在其内部保存任何信息。</li><li>作用域不同：重载 <code>operator()</code> 的函数对象可以在多个函数或者方法之间共享，也可以作为成员变量或者全局变量使用。而 lambda 匿名函数通常只能在定义它的函数或者方法内部使用。</li></ul><p>参考自：<a href="https://zhuanlan.zhihu.com/p/75353199">重载operator()的意义</a></p></li><li><p>为什么C++不提倡使用<code>vector&lt;bool&gt;</code>？</p><p>因为<code>vector&lt;bool&gt;</code>实际上是<code>vector&lt;bit&gt;</code>，我们知道，为了C++ 数据类型都必须是可寻址的（单个字节才可以寻址），因此在C++中普通的<code>bool</code>都是占1个字节(8bits)的。而在<code>vector&lt;bool&gt;</code>中的每个<code>bool</code>只占1个bits，<strong>这意味着无法将其地址分配给 <code>bool*</code>，因此<code>bool *pb =&amp;v[0];</code> 不是有效代码</strong>。</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; CLASS vector&lt;bool&gt;template&lt;class _Alloc&gt;class vector&lt;bool, _Alloc&gt;: public _Vb_val&lt;_Alloc&gt;&#123;&#x2F;&#x2F; varying size array of bits...&#125;</code></pre><p>参考自：<a href="https://stackoverflow.com/questions/17794569/why-isnt-vectorbool-a-stl-container">https://stackoverflow.com/questions/17794569/why-isnt-vectorbool-a-stl-container</a></p><p>比较好的代替写法，就是<code>vector&lt;uint8_t&gt;</code>, <code>vector&lt;unsigned char&gt;</code>,还有<code>std::basic_string&lt;bool&gt;</code></p></li><li><p>关键字<code>explicit</code>的作用：</p><p><code>explicit</code>用于修饰类构造函数，当一个类构造函数被声明为 <code>explicit</code> 时，它将不再被用于隐式转换</p><pre class="language-c++" data-language="c++"><code class="language-c++">class Example &#123;public:    explicit Example(int value) : m_value(value) &#123;&#125;private:    int m_value;&#125;;void foo(Example ex) &#123;    &#x2F;&#x2F; Do something with ex&#125;int main() &#123;    &#x2F;&#x2F; This will not compile because the constructor is explicit    &#x2F;&#x2F; foo(5);        &#x2F;&#x2F; This will compile because we explicitly call the constructor    foo(Example(5));&#125;</code></pre></li></ul><h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h2><p><a href="https://normaluhr.github.io/2020/12/31/Effective-C++/">https://normaluhr.github.io/2020/12/31/Effective-C++/</a></p>]]></content>
    
    
    <categories>
      
      <category>书屋</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-60.序列</title>
    <link href="/2023/03/01/Algorithm/Comp/0x10/20230301-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-060-%E5%BA%8F%E5%88%97/"/>
    <url>/2023/03/01/Algorithm/Comp/0x10/20230301-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-060-%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/148/">算法竞赛进阶指南-60.序列</a></p><p>给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 个序列，每个包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个非负整数。</p><p>现在我们可以从每个序列中选择一个数字以形成具有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 个整数的序列。</p><p>很明显，我们一共可以得到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">n^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span> 个这种序列，然后我们可以计算每个序列中的数字之和，并得到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">n^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span> 个值。</p><p>现在请你求出这些序列和之中最小的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个值。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行输入一个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>，代表输入中包含测试用例的数量。</p><p>接下来输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span> 组测试用例。</p><p>对于每组测试用例，第一行输入两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>。</p><p>接下在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 行输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 个整数序列，数列中的整数均不超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10000</mn></mrow><annotation encoding="application/x-tex">10000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>对于每组测试用例，均以递增顺序输出最小的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个序列和，数值之间用空格隔开。</p><p>每组输出占一行。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>m</mi><mo>≤</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">0 &lt; m \le 1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>n</mi><mo>≤</mo><mn>2000</mn></mrow><annotation encoding="application/x-tex">0 &lt; n \le 2000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">12 31 2 32 2 3</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">3 3 4</code></pre><h3 id="method-优先队列"><a class="markdownIt-Anchor" href="#method-优先队列"></a> Method : 优先队列</h3><p>首先只考虑两个序列：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A = [a_1, a_2, a_3, ... a_n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>3</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>b</mi><mi>n</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">B = [b_1, b_2, b_3, ... b_n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span><br />把数组A进行排序，得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>A</mi><mo mathvariant="normal">′</mo></msup><mo>=</mo><mo stretchy="false">[</mo><msubsup><mi>a</mi><mn>1</mn><mo mathvariant="normal">′</mo></msubsup><mo separator="true">,</mo><msubsup><mi>a</mi><mn>2</mn><mo mathvariant="normal">′</mo></msubsup><mo separator="true">,</mo><msubsup><mi>a</mi><mn>3</mn><mo mathvariant="normal">′</mo></msubsup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msubsup><mi>a</mi><mi>n</mi><mo mathvariant="normal">′</mo></msubsup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A&#x27; = [a&#x27;_1, a&#x27;_2, a&#x27;_3, ... a&#x27;_n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>，</p><p><strong>分组</strong>：那么可以得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>个和，写成如下<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>组长度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>的序列，那么<strong>每个序列内部都是有序的</strong>（从小到大）<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>b</mi><mn>1</mn></msub><mo>+</mo><msubsup><mi>a</mi><mn>1</mn><mo mathvariant="normal">′</mo></msubsup><mo separator="true">,</mo><msub><mi>b</mi><mn>1</mn></msub><mo>+</mo><msubsup><mi>a</mi><mn>2</mn><mo mathvariant="normal">′</mo></msubsup><mo separator="true">,</mo><msub><mi>b</mi><mn>1</mn></msub><mo>+</mo><msubsup><mi>a</mi><mn>3</mn><mo mathvariant="normal">′</mo></msubsup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>b</mi><mn>1</mn></msub><mo>+</mo><msubsup><mi>a</mi><mi>n</mi><mo mathvariant="normal">′</mo></msubsup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[b_1 + a&#x27;_1, b_1 + a&#x27;_2, b_1 + a&#x27;_3, ... b_1 + a&#x27;_n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>b</mi><mn>2</mn></msub><mo>+</mo><msubsup><mi>a</mi><mn>1</mn><mo mathvariant="normal">′</mo></msubsup><mo separator="true">,</mo><msub><mi>b</mi><mn>2</mn></msub><mo>+</mo><msubsup><mi>a</mi><mn>2</mn><mo mathvariant="normal">′</mo></msubsup><mo separator="true">,</mo><msub><mi>b</mi><mn>2</mn></msub><mo>+</mo><msubsup><mi>a</mi><mn>3</mn><mo mathvariant="normal">′</mo></msubsup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>b</mi><mn>2</mn></msub><mo>+</mo><msubsup><mi>a</mi><mi>n</mi><mo mathvariant="normal">′</mo></msubsup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[b_2 + a&#x27;_1, b_2 + a&#x27;_2, b_2 + a&#x27;_3, ... b_2 + a&#x27;_n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>b</mi><mn>3</mn></msub><mo>+</mo><msubsup><mi>a</mi><mn>1</mn><mo mathvariant="normal">′</mo></msubsup><mo separator="true">,</mo><msub><mi>b</mi><mn>3</mn></msub><mo>+</mo><msubsup><mi>a</mi><mn>2</mn><mo mathvariant="normal">′</mo></msubsup><mo separator="true">,</mo><msub><mi>b</mi><mn>3</mn></msub><mo>+</mo><msubsup><mi>a</mi><mn>3</mn><mo mathvariant="normal">′</mo></msubsup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>b</mi><mn>3</mn></msub><mo>+</mo><msubsup><mi>a</mi><mi>n</mi><mo mathvariant="normal">′</mo></msubsup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[b_3 + a&#x27;_1, b_3 + a&#x27;_2, b_3 + a&#x27;_3, ... b_3 + a&#x27;_n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>b</mi><mi>n</mi></msub><mo>+</mo><msubsup><mi>a</mi><mn>1</mn><mo mathvariant="normal">′</mo></msubsup><mo separator="true">,</mo><msub><mi>b</mi><mi>n</mi></msub><mo>+</mo><msubsup><mi>a</mi><mn>2</mn><mo mathvariant="normal">′</mo></msubsup><mo separator="true">,</mo><msub><mi>b</mi><mi>n</mi></msub><mo>+</mo><msubsup><mi>a</mi><mn>3</mn><mo mathvariant="normal">′</mo></msubsup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>b</mi><mi>n</mi></msub><mo>+</mo><msubsup><mi>a</mi><mi>n</mi><mo mathvariant="normal">′</mo></msubsup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[b_n + a&#x27;_1, b_n + a&#x27;_2, b_n + a&#x27;_3, ... b_n + a&#x27;_n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span><br />那么首先从这n组序列中选出最小的数，就是比较第一列的数，不妨假设最小的数是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mn>2</mn></msub><mo>+</mo><msubsup><mi>a</mi><mn>1</mn><mo mathvariant="normal">′</mo></msubsup></mrow><annotation encoding="application/x-tex">b_2 + a&#x27;_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>，那么第二组的指针就向后移动，把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mn>2</mn></msub><mo>+</mo><msubsup><mi>a</mi><mn>2</mn><mo mathvariant="normal">′</mo></msubsup></mrow><annotation encoding="application/x-tex">b_2 + a&#x27;_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>加进来继续比较，选出第二小的数…依次类推，可以得到两个序列的前n小和。<br />可以用一个堆来维护，时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><p>对于m个序列，我们仍然可以先只考虑两个序列，筛选出这两个序列的前n小和后，将其作为一个新的序列，继续与下一个序列求前n小和，一共需要求m - 1次，因此总时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mn \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;queue&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;typedef pair&lt;int, int&gt; PII; &#x2F;&#x2F; &#123;当前的数, 当前数所在序列的下标&#125;const int N &#x3D; 2000 + 7;int T;int m, n;int a[N], b[N], tmp[N];void merge() &#123;    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; pq;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        pq.push(&#123;a[0] + b[i], 0&#125;);    &#125;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;        auto t &#x3D; pq.top(); pq.pop();        tmp[i] &#x3D; t.first;        pq.push(&#123;t.first + a[t.second + 1] - a[t.second], t.second + 1&#125;);    &#125;        &#x2F;&#x2F; copy    memcpy(a, tmp, sizeof tmp);&#125;int main() &#123;    cin &gt;&gt; T;    while (T --) &#123;        scanf(&quot;%d %d&quot;, &amp;m, &amp;n);        for (int j &#x3D; 0; j &lt; n; j ++) scanf(&quot;%d&quot;, &amp;a[j]);        sort(a, a + n);        for (int i &#x3D; 1; i &lt; m ; i ++) &#123;            for (int j &#x3D; 0; j &lt; n; j ++) scanf(&quot;%d&quot;, &amp;b[j]);            merge();        &#125;        for (int i &#x3D; 0; i &lt; n; i ++) printf(&quot;%d &quot;, a[i]);        puts(&quot;&quot;);    &#125;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(mn\log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>次堆的push() &amp; pop()，需要进行<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">m - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>次求前n小和操作。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>二叉堆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-59.超市</title>
    <link href="/2023/02/28/Algorithm/Comp/0x10/20230228-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-059-%E8%B6%85%E5%B8%82/"/>
    <url>/2023/02/28/Algorithm/Comp/0x10/20230228-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-059-%E8%B6%85%E5%B8%82/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/147/">算法竞赛进阶指南-59.超市</a></p><p>超市里有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 件商品，每件商品都有利润 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和过期时间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，每天只能卖一件商品，过期商品不能再卖。</p><p>求合理安排每天卖的商品的情况下，可以得到的最大收益是多少。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入包含多组测试用例。</p><p>每组测试用例，以输入整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 开始，接下来输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，分别代表第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 件商品的利润和过期时间。</p><p>在输入中，数据之间可以自由穿插任意个空格或空行，输入至文件结尾时终止输入，保证数据正确。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>对于每组产品，输出一个该组的最大收益值。</p><p>每个结果占一行。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>10000</mn></mrow><annotation encoding="application/x-tex">0 \le N \le 10000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>p</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>d</mi><mi>i</mi></msub><mo>≤</mo><mn>10000</mn></mrow><annotation encoding="application/x-tex">1 \le p_i,d_i \le 10000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span><br />最多有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>14</mn></mrow><annotation encoding="application/x-tex">14</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">4</span></span></span></span> 组测试样例</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">4  50 2  10 1   20 2   30 17  20 1   2 1   10 3  100 2   8 2   5 20  50 10</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">80185</code></pre><h3 id="method-贪心-优先队列"><a class="markdownIt-Anchor" href="#method-贪心-优先队列"></a> Method : 贪心 + 优先队列</h3><blockquote><p>贪心策略：对于每个时间t，我们希望对于当前所有未过期的商品，在t天内尽可能选取利润前t大的商品</p></blockquote><p>具体做法就是，首先按照过期时间来排序，然后按该次序从前往后遍历商品，并以商品价值建立一个小根堆：</p><p>把当前商品插入到堆中，如果当前商品的过期时间&gt;堆中的商品数，因为之前所有的商品的过期时间都&lt;=该商品的过期时间，所以如果以当前堆中的商品数为售卖天数t，必然不能把这些商品都卖光，因此需要弹出价值最小的商品(堆顶)。</p><p>这道题虽然思维难度不高，但是让我懂得了结构体的优先队列该怎么写最优美(重载<code>operator &gt;</code>)。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;queue&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 1e4 + 7;struct Good &#123;    int value;    int time;    bool operator &gt;(const Good&amp; rhs) const&#123;        return value &gt; rhs.value;    &#125;&#125;;Good g[N];int main() &#123;    int n;    while (cin &gt;&gt; n) &#123;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;            scanf(&quot;%d %d&quot;, &amp;g[i].value, &amp;g[i].time);        &#125;        sort(g, g + n, [](const Good&amp; a, const Good&amp; b) &#123;            if (a.time &#x3D;&#x3D; b.time) return a.value &lt; b.value;            return a.time &lt; b.time;        &#125;);                priority_queue&lt;Good, vector&lt;Good&gt;, greater&lt;Good&gt;&gt; pq;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;            pq.push(g[i]);            if (pq.size() &gt; g[i].time) pq.pop();        &#125;                int res &#x3D; 0;        while (!pq.empty()) &#123;            res +&#x3D; pq.top().value; pq.pop();        &#125;        printf(&quot;%d\n&quot;, res);    &#125;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>2</mn><mo>∗</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(2*n\log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，sort是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的，n次循环*pq的push() or pop也是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>贪心</tag>
      
      <tag>优先队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-58.最长异或值路径</title>
    <link href="/2023/02/27/Algorithm/Comp/0x10/20230227-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-058-%E6%9C%80%E9%95%BF%E5%BC%82%E6%88%96%E5%80%BC%E8%B7%AF%E5%BE%84/"/>
    <url>/2023/02/27/Algorithm/Comp/0x10/20230227-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-058-%E6%9C%80%E9%95%BF%E5%BC%82%E6%88%96%E5%80%BC%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/146/">算法竞赛进阶指南-58.最长异或值路径</a></p><p>给定一个树，树上的边都具有权值。</p><p>树中一条路径的异或长度被定义为路径上所有边的权值的异或和：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow></mrow><mrow><mi>x</mi><mi>o</mi><mi>r</mi></mrow></msub><mi>l</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>h</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo>⊕</mo><mrow><mi>e</mi><mo>∈</mo><mi>p</mi></mrow></msub><mi>w</mi><mo stretchy="false">(</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">_{xor}lenth(p) = ⊕_{e\in p}w(e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mbin">⊕</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22737000000000002em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⊕</mo></mrow><annotation encoding="application/x-tex">⊕</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">⊕</span></span></span></span> 为异或符号。</p><p>给定上述的具有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个节点的树，你能找到异或长度最大的路径吗？</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行包含整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，表示树的节点数目。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 行，每行包括三个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mi mathvariant="normal">，</mi><mi>v</mi><mi mathvariant="normal">，</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">u，v，w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>，表示节点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span> 和节点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span> 之间有一条边权重为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出一个整数，表示异或长度最大的路径的最大异或和。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>100000</mn></mrow><annotation encoding="application/x-tex">1 \le n \le 100000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">0 \le u,v &lt; n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>w</mi><mo>&lt;</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">0 \le w &lt;2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">40 1 31 2 41 3 6</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">7</code></pre><h4 id="样例解释"><a class="markdownIt-Anchor" href="#样例解释"></a> 样例解释</h4><p>样例中最长异或值路径应为 <code>0-&gt;1-&gt;2</code>，值为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn><mo stretchy="false">(</mo><mo>=</mo><mn>3</mn><mo>⊕</mo><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">7 (=3 ⊕ 4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">7</span><span class="mopen">(</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mclose">)</span></span></span></span></p><h3 id="method-位运算-二进制拆分"><a class="markdownIt-Anchor" href="#method-位运算-二进制拆分"></a> Method : 位运算-二进制拆分</h3><p>注意到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy="false">)</mo><mo>⊕</mo><mi>f</mi><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(a, b) = f(a, root) \oplus  f(b, root)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>，因此<br />求出树上每个点到根结点的异或路径<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(dfs)，然后存入Trie，就能转化成上一题 <a href="https://www.acwing.com/problem/content/145/">算法竞赛进阶指南-57.最大异或对</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 1e5 + 7;const int M &#x3D; N * 31;const int ALPHABETS_SIZE &#x3D; 2;struct Edge&#123;    int to;    int w;  &#x2F;&#x2F; 无权图，可以没有w或者w置为1    int nxt;&#125;;struct Trie &#123;private:    int son[M][ALPHABETS_SIZE], idx &#x3D; 0;public:    void insert(int x) &#123;        int p &#x3D; 0;        for (int i &#x3D; 30; i &gt;&#x3D; 0; i --) &#123;            int t &#x3D; x &gt;&gt; i &amp; 1;            if (!son[p][t]) &#123;                son[p][t] &#x3D; ++idx;            &#125;            p &#x3D; son[p][t];        &#125;    &#125;        int query(int x) &#123;        int res &#x3D; 0;        int p &#x3D; 0;        for (int i &#x3D; 30; i &gt;&#x3D; 0; i --) &#123;            int t &#x3D; x &gt;&gt; i &amp; 1;            if (son[p][!t]) &#123;                p &#x3D; son[p][!t];                res &#x3D; (res &lt;&lt; 1) + !t;            &#125;            else &#123;                p &#x3D; son[p][t];                res &#x3D; (res &lt;&lt; 1) + t;            &#125;        &#125;        return res;    &#125;&#125;;int a[N];Trie trie;&#x2F;&#x2F; 链式前向星int head[N], idx &#x3D; 0;Edge edge[2 * N];void add(int from, int to , int w) &#123;    edge[idx].to &#x3D; to;    edge[idx].w &#x3D; w;    edge[idx].nxt &#x3D; head[from];    head[from] &#x3D; idx ++;&#125;void dfs(int u, int father, int sum) &#123;    a[u] &#x3D; sum;    for (int i &#x3D; head[u]; i !&#x3D; -1; i &#x3D; edge[i].nxt) &#123;        int j &#x3D; edge[i].to;        if (j !&#x3D; father) dfs(j, u, sum ^ edge[i].w);    &#125;&#125;int main() &#123;    int n;    cin &gt;&gt; n;    memset(head, -1, sizeof head);    for (int i &#x3D; 0; i &lt; n - 1; i ++) &#123;        int u, v, w;        scanf(&quot;%d %d %d&quot;, &amp;u, &amp;v, &amp;w);        add(u, v, w);        add(v, u, w);    &#125;        dfs(0, -1, 0);        int res &#x3D; 0;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        trie.insert(a[i]);        int t &#x3D; trie.query(a[i]);        res &#x3D; max(res, a[i] ^ t);    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>31</mn><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(31 * n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">3</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中31是二进制位枚举，n是枚举a[i]。</li><li>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>M</mi><mo>∗</mo><mi>A</mi><mi>L</mi><mi>P</mi><mi>H</mi><mi>A</mi><mi>B</mi><mi>E</mi><mi>T</mi><mi mathvariant="normal">_</mi><mi>S</mi><mi>I</mi><mi>Z</mi><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(M * ALPHABET\_SIZE)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span></span>，M是字符串个数 * 单个字符串的最大长度。</li></ul><p>本题同样卡vector&lt;Trie*&gt;，链表new动态分配内存导致MLE</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>Trie</tag>
      
      <tag>贪心</tag>
      
      <tag>树上差分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-57.最大异或对</title>
    <link href="/2023/02/26/Algorithm/Comp/0x10/20230226-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-057-%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%92%8C/"/>
    <url>/2023/02/26/Algorithm/Comp/0x10/20230226-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-057-%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/145/">算法竞赛进阶指南-57.最大异或对</a></p><p>在给定的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mi mathvariant="normal">，</mi><msub><mi>A</mi><mn>2</mn></msub><mo>…</mo><mo>…</mo><msub><mi>A</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">A_1，A_2……A_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 中选出两个进行 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mi>o</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">xor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>（异或）运算，得到的结果最大是多少？</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行输入一个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>。</p><p>第二行输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">A_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>～<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">A_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出一个整数表示答案。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1 \le N \le 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>A</mi><mi>i</mi></msub><mo>&lt;</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">0 \le A_i &lt; 2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">31 2 3</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">3</code></pre><h3 id="method-trie"><a class="markdownIt-Anchor" href="#method-trie"></a> Method : Trie</h3><p>考虑暴力做法<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><pre class="language-c++" data-language="c++"><code class="language-c++">int res &#x3D; 0;for (int i &#x3D; 0; i &lt; n; i ++) &#123;for (int j &#x3D; 0; j &lt; i; j ++) &#123;res &#x3D; max(res, a[i] ^ a[j]);&#125;&#125;</code></pre><p>因为异或是位运算，所以以2进制的角度考虑，将所有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>以2进制位拆解，从高位到低位存入(因为要选最大值，优先从高位考虑)01字典树。</p><p>在01字典树中，每次优先选择使当前高位为1的数（对于异或运算就是选与当前相反的数字)。就能把暴力做法的内层循环从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>优化到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>31</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(31)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">3</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;const int N &#x3D; 1e5 + 7, M &#x3D; N * 31;const int ALPHABETS_SIZE &#x3D; 2;struct Trie &#123;private:    int son[M][ALPHABETS_SIZE], idx;public:    &#x2F;&#x2F; Trie() : son(ALPHABETS_SIZE, nullptr) &#123;&#125;    &#x2F;&#x2F; ~Trie() &#123;    &#x2F;&#x2F;     for (auto&amp; s : son) delete(s);    &#x2F;&#x2F; &#125;        void insert(int x) &#123;        int p &#x3D; 0;        for (int i &#x3D; 30; i &gt;&#x3D; 0; i --) &#123;            int t &#x3D; x &gt;&gt; i &amp; 1;            if (!son[p][t]) &#123;                son[p][t] &#x3D; ++idx;            &#125;            p &#x3D; son[p][t];        &#125;    &#125;        int query(int x) &#123;        int res &#x3D; 0;        int p &#x3D; 0;        for (int i &#x3D; 30; i &gt;&#x3D; 0; i --) &#123;            int t &#x3D; x &gt;&gt; i &amp; 1;            if (son[p][!t]) &#123;                p &#x3D; son[p][!t];                res &#x3D; (res &lt;&lt; 1) + !t;            &#125;            else &#123;                p &#x3D; son[p][t];                res &#x3D; (res &lt;&lt; 1) + t;            &#125;        &#125;        return res;    &#125;&#125;;int a[N];Trie trie;int main() &#123;    int n;    cin &gt;&gt; n;    for (int i &#x3D; 0 ; i &lt; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;a[i]);    &#125;        int res &#x3D; 0;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;        trie.insert(a[i]);        int t &#x3D; trie.query(a[i]);        res &#x3D; max(res, a[i] ^ t);    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>31</mn><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(31 * n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">3</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中31是二进制位枚举，n是枚举a[i]。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>M</mi><mo>∗</mo><mi>A</mi><mi>L</mi><mi>P</mi><mi>H</mi><mi>A</mi><mi>B</mi><mi>E</mi><mi>T</mi><mi mathvariant="normal">_</mi><mi>S</mi><mi>I</mi><mi>Z</mi><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(M * ALPHABET\_SIZE)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span></span>，M是字符串个数 * 单个字符串的最大长度。</p></li></ul><p>附一个使用vector，new动态分配内存被卡MLE的。Memory Limit Exceeded</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;const int N &#x3D; 1e5 + 7;const int ALPHABETS_SIZE &#x3D; 2;struct Trie &#123;private:    int cnt;    vector&lt;Trie*&gt; son;public:    Trie() : cnt(0), son(ALPHABETS_SIZE, nullptr) &#123;&#125;    ~Trie() &#123;        for (auto&amp; s : son) delete(s);    &#125;        void insert(int x) &#123;        Trie* p &#x3D; this;        for (int i &#x3D; 30; i &gt;&#x3D; 0; i --) &#123;            int t &#x3D; x &gt;&gt; i &amp; 1;            if (!p-&gt;son[t]) &#123;                p-&gt;son[t] &#x3D; new Trie();            &#125;            p &#x3D; p-&gt;son[t];        &#125;        p-&gt;cnt++;    &#125;        int query(int x) &#123;        int res &#x3D; 0;        Trie*p &#x3D; this;        for (int i &#x3D; 30; i &gt;&#x3D; 0; i --) &#123;            int t &#x3D; x &gt;&gt; i &amp; 1;            if (p-&gt;son[!t]) &#123;                p &#x3D; p-&gt;son[!t];                res &#x3D; (res &lt;&lt; 1) + !t;            &#125;            else &#123;                p &#x3D; p-&gt;son[t];                res &#x3D; (res &lt;&lt; 1) + t;            &#125;        &#125;        return res;    &#125;&#125;;vector&lt;int&gt; a(N);Trie trie;int main() &#123;    int n;    cin &gt;&gt; n;    for (int i &#x3D; 0 ; i &lt; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;a[i]);    &#125;        int res &#x3D; 0;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;        trie.insert(a[i]);        int t &#x3D; trie.query(a[i]);        res &#x3D; max(res, a[i] ^ t);    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>Trie</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-56.前缀统计</title>
    <link href="/2023/02/25/Algorithm/Comp/0x10/20230225-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-056-%E5%89%8D%E7%BC%80%E7%BB%9F%E8%AE%A1/"/>
    <url>/2023/02/25/Algorithm/Comp/0x10/20230225-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-056-%E5%89%8D%E7%BC%80%E7%BB%9F%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/144/">算法竞赛进阶指南-56.前缀统计</a></p><p>给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>S</mi><mn>2</mn></msub><mo>…</mo><msub><mi>S</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">S_1,S_2…S_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，接下来进行 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 次询问，每次询问给定一个字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>，求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub><mo>∼</mo><msub><mi>S</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">S_1 \sim S_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 中有多少个字符串是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span> 的前缀。</p><p>输入字符串的总长度不超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>，仅包含小写字母。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行输入两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi mathvariant="normal">，</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">N，M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 行每行输入一个字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 行每行一个字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span> 用以询问。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>对于每个询问，输出一个整数表示答案。</p><p>每个答案占一行。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo separator="true">,</mo><mi>M</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1 \le N,M \le 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">3 2abbcabcabcefg</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">20</code></pre><h3 id="method-trie"><a class="markdownIt-Anchor" href="#method-trie"></a> Method : Trie</h3><p>Trie模板题</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;string&gt;#include &lt;unordered_map&gt;#include &lt;iostream&gt;using namespace std;struct Trie &#123;private:    int cnt;    unordered_map&lt;char, Trie*&gt; son;public:    Trie() : cnt(0) &#123;&#125;    ~Trie() &#123;        for (auto &amp;s : son) &#123;            delete(s.second);        &#125;    &#125;        void insert(const string&amp; s) &#123;        Trie* p &#x3D; this;        for (char c : s) &#123;            if (!p-&gt;son[c]) &#123;                p-&gt;son[c] &#x3D; new Trie();            &#125;            p &#x3D; p-&gt;son[c];        &#125;        p-&gt;cnt ++;    &#125;        int query(const string&amp; s) &#123;        Trie*p &#x3D; this;        for (char c : s) &#123;            if (!p-&gt;son[c]) &#123;                return 0;            &#125;            p &#x3D; p-&gt;son[c];        &#125;        return p-&gt;cnt;    &#125;        int start_with(const string&amp; s) &#123;        int res &#x3D; 0;                Trie* p &#x3D; this;        for (char c : s) &#123;            if (!p-&gt;son[c])&#123;                break;            &#125;            p &#x3D; p-&gt;son[c];            res +&#x3D; p-&gt;cnt;        &#125;                return res;    &#125;&#125;;int main() &#123;    Trie trie;        int n, m;    cin &gt;&gt; n &gt;&gt; m;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;        string s;        cin &gt;&gt; s;        trie.insert(s);    &#125;        for (int i &#x3D; 0; i &lt; m; i ++) &#123;        string s;        cin &gt;&gt; s;        printf(&quot;%d\n&quot;, trie.start_with(s));    &#125;            return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>L</mi><mo>+</mo><mi>m</mi><mo>∗</mo><mi>L</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n* L + m * L)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">L</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>为Trie中字符串的平均长度。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>L</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n * L)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">L</span><span class="mclose">)</span></span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>为Trie中字符串的平均长度。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>Trie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-55.周期</title>
    <link href="/2023/02/24/Algorithm/Comp/0x10/20230224-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-055-%E5%91%A8%E6%9C%9F/"/>
    <url>/2023/02/24/Algorithm/Comp/0x10/20230224-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-055-%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/143/">算法竞赛进阶指南-55.周期</a></p><p>一个字符串的前缀是从第一个字符开始的连续若干个字符，例如 <code>abaab</code> 共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span> 个前缀，分别是 <code>a</code>，<code>ab</code>，<code>aba</code>，<code>abaa</code>，<code>abaab</code>。</p><p>我们希望知道一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 位字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> 的前缀是否具有循环节。</p><p>换言之，对于每一个从头开始的长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>）的前缀，是否由重复出现的子串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 组成，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>A</mi><mi>A</mi><mo>…</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">AAA…A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">A</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">A</span></span></span></span> （<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 重复出现 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 次,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">K&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>）。</p><p>如果存在，请找出最短的循环节对应的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 值（也就是这个前缀串的所有可能重复节中，最大的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 值）。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入包括多组测试数据，每组测试数据包括两行。</p><p>第一行输入字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> 的长度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>。</p><p>第二行输入字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>。</p><p>输入数据以只包括一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 的行作为结尾。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>对于每组测试数据，第一行输出 <code>Test case #</code> 和测试数据的编号。</p><p>接下来的每一行，输出具有循环节的前缀的长度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 和其对应 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>，中间用一个空格隔开。</p><p>前缀长度需要升序排列。</p><p>在每组测试数据的最后输出一个空行。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>1000000</mn></mrow><annotation encoding="application/x-tex">2 \le N \le 1000000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">3aaa4abcd12aabaabaabaab0</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-bash" data-language="bash"><code class="language-bash">Test case #12 23 3Test case #2Test case #32 26 29 312 4</code></pre><h3 id="method-kmp"><a class="markdownIt-Anchor" href="#method-kmp"></a> Method : KMP</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">nxt[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>的含义：对于字符串的前缀子串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">S[0, i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">nxt[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>是该前缀子串所有相等的前后缀里长度的最大值。</p><p>令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>=</mo><mi>n</mi><mo>−</mo><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">T = n - nxt[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>是最小循环节，并且如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>∤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">T\nmid n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.99253em;vertical-align:-0.25142em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">∤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，则题目无解。</p><p>证明1：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>是一个最小循环节。</p><blockquote><p>反证法：假设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∃</mi><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup><mo>&lt;</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">\exists T&#x27; &lt; T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.790992em;vertical-align:-0.0391em;"></span><span class="mord">∃</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>，<br />那么有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup><mo>&gt;</mo><mi>n</mi><mo>−</mo><mi>T</mi><mo>=</mo><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">n - T&#x27; &gt; n - T = nxt[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.790992em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>，与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">nxt[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>是所有相等的前后缀里长度的最大值这一点矛盾。</p></blockquote><p>证明2：如果字符串中存在更大的循环节<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">T&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">T&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>必然是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>的整数倍，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>∣</mo><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">T \mid T&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>。</p><blockquote><p>反证法：假设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∃</mi><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup><mo>&gt;</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">\exists T&#x27; &gt; T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.790992em;vertical-align:-0.0391em;"></span><span class="mord">∃</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>，且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>∤</mo><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">T \nmid T&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.99253em;vertical-align:-0.25142em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">∤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>,<br />那么设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>T</mi><mo separator="true">,</mo><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d = gcd(T, T&#x27;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，易知<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>∣</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">d \mid T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>，因此<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>&lt;</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">d &lt; T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>。<br />由裴蜀定理，可知<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><mi>x</mi><mi>T</mi><mo>+</mo><mi>y</mi><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">d = xT + yT&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>成立，不妨假设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><mi>y</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x &gt; 0, y &lt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，那么对于原字符串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi><mi>i</mi><mo>∈</mo><mi>n</mi><mo separator="true">,</mo><msub><mi>S</mi><mi>i</mi></msub><mo>=</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mi>T</mi></mrow></msub><mo>=</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mn>2</mn><mi>T</mi></mrow></msub><mo>=</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>S</mi><mi>i</mi></msub><mo>+</mo><mi>x</mi><mi>T</mi><mo>=</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mi>x</mi><mi>T</mi><mo>−</mo><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow></msub><mo>=</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mi>x</mi><mi>T</mi><mo>−</mo><mn>2</mn><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow></msub><mo>=</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mi>x</mi><mi>T</mi><mo>−</mo><mi>y</mi><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow></msub><mo>=</mo><msub><mi>s</mi><mrow><mi>i</mi><mo>+</mo><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\forall i\in n,  S_i = S_{i + T} = S_{i + 2 T} = ... S_i+xT = S_{i + xT -T&#x27;} = S_{i + xT - 2T&#x27;} = S_{i + xT - yT&#x27;} = s_{i + d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mbin mtight">−</span><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><br />得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub><mo>=</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_i = S_{i + d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>，由定义可知<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span>是一个循环节，又因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>&lt;</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">d &lt; T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>，与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>是最小循环节矛盾。</p></blockquote><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;string&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 1e6 + 7;int n;string s;vector&lt;int&gt; get_next(string&amp; p) &#123;    int m &#x3D; p.size();        vector&lt;int&gt; nxt(m);    nxt[0] &#x3D; -1;    for (int i &#x3D; 1, j &#x3D; -1; i &lt; m; i ++) &#123;        while (~j &amp;&amp; p[i] !&#x3D; p[j + 1]) j &#x3D; nxt[j];        if (p[i] &#x3D;&#x3D; p[j + 1]) j ++;        nxt[i] &#x3D; j;    &#125;        return nxt;&#125;int main() &#123;    int T &#x3D; 1;    while (scanf(&quot;%d&quot;, &amp;n), n) &#123;        cin &gt;&gt; s;                vector&lt;int&gt; nxt &#x3D; get_next(s);                printf(&quot;Test case #%d\n&quot;, T ++);        for (int i &#x3D; 1; i &lt; n; i ++) &#123;            int t &#x3D; i - nxt[i];            if (t !&#x3D; 0 &amp;&amp; (i + 1) % t &#x3D;&#x3D; 0 &amp;&amp; (i + 1) &#x2F; t &gt; 1) &#123;                printf(&quot;%d %d\n&quot;, (i + 1) , (i + 1) &#x2F; t);            &#125;         &#125;        puts(&quot;&quot;);    &#125;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span></span></span></span>为函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>e</mi><mi>t</mi><mi mathvariant="normal">_</mi><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">get\_next()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>的时间复杂度。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">nxt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span></span> 数组实际上只用了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的空间。</p></li></ul><p>证明参考：<a href="https://www.acwing.com/video/4635/">https://www.acwing.com/video/4635/</a></p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>KMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-54.后缀数组</title>
    <link href="/2023/02/23/Algorithm/Comp/0x10/20230223-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-054-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    <url>/2023/02/23/Algorithm/Comp/0x10/20230223-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-054-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/142/">算法竞赛进阶指南-54.后缀数组</a></p><p>后缀数组 (SA) 是一种重要的数据结构，通常使用倍增或者 DC3 算法实现，这超出了我们的讨论范围。</p><p>在本题中，我们希望使用快排、Hash 与二分实现一个简单的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlog^2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 的后缀数组求法。</p><p>详细地说，给定一个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>（下标 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>∼</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0 \sim n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>），我们可以用整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>k</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">0 \le k &lt; n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>) 表示字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> 的后缀 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>k</mi><mo>∼</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S(k \sim n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p><p>把字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> 的所有后缀按照字典序排列，排名为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 的后缀记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>A</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">SA[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">A</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>。</p><p>额外地，我们考虑排名为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 的后缀与排名为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的后缀，把二者的最长公共前缀的长度记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Height[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>。</p><p>我们的任务就是求出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">SA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">A</span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">Height</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span></span></span></span> 这两个数组。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入一个字符串，其长度不超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>30</mn></mrow><annotation encoding="application/x-tex">30</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span></span></span></span> 万。</p><p>字符串由小写字母构成。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>第一行为数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">SA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">A</span></span></span></span>，相邻两个整数用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个空格隔开。</p><p>第二行为数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">Height</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span></span></span></span>，相邻两个整数用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个空格隔开，我们规定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">Height[1]=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-nginx" data-language="nginx"><code class="language-nginx">ponoiiipoi</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">9 4 5 6 2 8 3 1 7 00 1 2 1 0 0 2 1 0 2</code></pre><h3 id="method-快排二分字符串前缀哈希"><a class="markdownIt-Anchor" href="#method-快排二分字符串前缀哈希"></a> Method : 快排+二分+字符串前缀哈希</h3><p>首先搞明白题目意思：题目样例中的10个后缀</p><pre class="language-none"><code class="language-none">0 ponoiiipoi1 onoiiipoi2 noiiipoi3 oiiipoi4 iiipoi5 iipoi6 ipoi7 poi8 oi9 i输出：(1) 字典序排序后的下标(2) 排序后，每两个相邻后缀的最长公共前缀长度</code></pre><p>然后依照题意，要以字典序对这些后缀排序：</p><p>快排本身<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，然后如果每次扫描字符串按字典序比较<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，总时间复杂度会达到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p><p>我们可以考虑使用二分+字符串前缀哈希，将字典序比较优化成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>：<br />在快速排序比较后缀p和后缀q时，可以使用<strong>二分法</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，比较<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo stretchy="false">[</mo><mi>p</mi><mo>∼</mo><mi>p</mi><mo>+</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">S[p \sim p + mid - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo stretchy="false">[</mo><mi>q</mi><mo>∼</mo><mi>q</mi><mo>+</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">S[q \sim q + mid - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>的字符串前缀哈希值是否相等，从而求得后缀p和后缀q的<strong>最长公共前缀长度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">len</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span></span></span></span></strong>，然后再比较两个字符串的下一个字符<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>(也就是第一个不相等的位置)<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo stretchy="false">[</mo><mi>p</mi><mo>+</mo><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">S[p + len]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo stretchy="false">[</mo><mi>q</mi><mo>+</mo><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">S[q + len]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>，就能确定这两个字符串的字典序大小了。</p><p>然后就是喜闻乐见的日常cin&gt;&gt;字符串被卡，要开O2优化才能过。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#pragma GCC optimize(2)#include &lt;string&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;limits.h&gt;using namespace std;typedef unsigned long long ULL;const int N &#x3D; 3e5 + 7;const int P &#x3D; 131;string s;            &#x2F;&#x2F; 字符串int n ;              &#x2F;&#x2F; s的长度vector&lt;ULL&gt; h;       &#x2F;&#x2F; hashvector&lt;int&gt; sa(N);   &#x2F;&#x2F; 后缀按字典序排序后的下标&#x2F;&#x2F; 字符串hashvector&lt;ULL&gt; p(N);vector&lt;ULL&gt; get_prefix_hash(const string&amp; s) &#123;    int n &#x3D; s.size();    vector&lt;ULL&gt; h(n + 1);    h[0] &#x3D; 0;    p[0] &#x3D; 1;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        h[i] &#x3D; h[i - 1] * P + s[i - 1];        p[i] &#x3D; p[i - 1] * P;    &#125;    return h;&#125;ULL get_substr_hash(const vector&lt;ULL&gt;&amp; h, int l, int r) &#123;    return h[r] - h[l - 1] * p[r - l + 1];&#125;int get_max_common_prefix(int a, int b) &#123;    int l &#x3D; 0, r &#x3D; min(n - a + 1, n - b + 1);    while (l !&#x3D; r + 1) &#123;        int mid &#x3D; l + r &gt;&gt; 1;        if (get_substr_hash(h, a, a + mid - 1) !&#x3D; get_substr_hash(h, b, b + mid - 1)) &#123;            &#x2F;&#x2F; 前缀不等，缩小len            r &#x3D; mid - 1;        &#125;        else &#123;            &#x2F;&#x2F; 前缀相等，扩大len            l &#x3D; mid + 1;        &#125;    &#125;    return r;&#125;bool cmp(int a, int b) &#123;    int len &#x3D; get_max_common_prefix(a, b);    int a_nxt &#x3D; a + len &gt; n ? INT_MIN : s[a + len - 1];    int b_nxt &#x3D; b + len &gt; n ? INT_MIN : s[b + len - 1];    return a_nxt &lt; b_nxt;&#125;void quick_sort(vector&lt;int&gt;&amp; arr, int l, int r) &#123;    if (l &gt;&#x3D; r) return;    int x &#x3D; arr[l + (r - l) &#x2F; 2];    int i &#x3D; l - 1, j &#x3D; r + 1;    while (i &lt; j) &#123;        do i ++; while (cmp(arr[i], x) &#x3D;&#x3D; 1);        do j --; while (cmp(x, arr[j]) &#x3D;&#x3D; 1);        if (i &lt; j) swap(arr[i], arr[j]);    &#125;    quick_sort(arr, l, j);    quick_sort(arr, j + 1, r);&#125;int main() &#123;    cin &gt;&gt; s;    n &#x3D; s.size();    h &#x3D; get_prefix_hash(s);    &#x2F;&#x2F; 初始化sa    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        sa[i] &#x3D; i;    &#125;    quick_sort(sa, 1, n);    &#x2F;&#x2F; sort(sa.begin() + 1, sa.begin() + 1 + n, cmp);    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        printf(&quot;%d &quot;, sa[i] - 1);    &#125;    puts(&quot;&quot;);    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        if (i &#x3D;&#x3D; 1) printf(&quot;0 &quot;);        else printf(&quot;%d &quot;, get_max_common_prefix(sa[i - 1], sa[i]));    &#125;    puts(&quot;&quot;);    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msup><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n\log^2 n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.148448em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984479999999999em;"><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>为快排，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>为字典序比较(二分+字符串hash)。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>hash</tag>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-02-23-组会</title>
    <link href="/2023/02/22/Seminar/20230223-%E7%BB%84%E4%BC%9A/"/>
    <url>/2023/02/22/Seminar/20230223-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8a7e2bceae766c1c1e2f02b8ffe68a460a3ad072775f168528638852bceca6d1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-53.回文子串的最大长度</title>
    <link href="/2023/02/22/Algorithm/Comp/0x10/20230222-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-053-%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/"/>
    <url>/2023/02/22/Algorithm/Comp/0x10/20230222-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-053-%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/141/">算法竞赛进阶指南-53.回文子串的最大长度</a></p><p>如果一个字符串正着读和倒着读是一样的，则称它是回文的。</p><p>给定一个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 的字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>，求他的最长回文子串的长度是多少。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入将包含最多 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>30</mn></mrow><annotation encoding="application/x-tex">30</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span></span></span></span> 个测试用例，每个测试用例占一行，以最多 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1000000</mn></mrow><annotation encoding="application/x-tex">1000000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span> 个小写字符的形式给出。</p><p>输入以一个以字符串 <code>END</code> 开头的行表示输入终止。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>对于输入中的每个测试用例，输出测试用例编号和最大回文子串的长度（参考样例格式）。</p><p>每个输出占一行。</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-nginx" data-language="nginx"><code class="language-nginx">abcbabcbabcbaabacacbaaaabEND</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-php" data-language="php"><code class="language-php">Case 1: 13Case 2: 6</code></pre><h3 id="method1-字符串哈希-二分"><a class="markdownIt-Anchor" href="#method1-字符串哈希-二分"></a> Method1 : 字符串哈希 + 二分</h3><p>递推枚举回文子串的中点，然后用二分法判断两边边界的最大长度</p><p>这道题挺恶心的，如果是cin读取字符串会TLE，必须手动开O2优化才能过。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#pragma GCC optimize(2)#include &lt;string&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef unsigned long long ULL;const int N &#x3D; 1e6 + 7;const int P &#x3D; 131;vector&lt;ULL&gt; p(N * 2);vector&lt;ULL&gt; get_prefix_hash(const string&amp; s) &#123;    int n &#x3D; s.size();    vector&lt;ULL&gt; h(n + 1);    h[0] &#x3D; 0;    p[0] &#x3D; 1;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        h[i] &#x3D; h[i - 1] * P + s[i - 1];        p[i] &#x3D; p[i - 1] * P;    &#125;    return h;&#125;ULL get_substr_hash(const vector&lt;ULL&gt;&amp; h, int l, int r) &#123;    return h[r] - h[l - 1] * p[r - l + 1];&#125;int main() &#123;    string s;    int T &#x3D; 1;    while (cin &gt;&gt; s, s !&#x3D; &quot;END&quot;) &#123;        int n &#x3D; s.size();        s.resize(n * 2);        for (int i &#x3D; n * 2 - 1; i &gt;&#x3D; 0; i -&#x3D; 2) &#123;            s[i] &#x3D; s[i &#x2F; 2];            s[i - 1] &#x3D; &#39;z&#39; + 1;        &#125;        n &#x3D; n * 2;        &#x2F;&#x2F; for (int i &#x3D; 0; i &lt; n; i ++) &#123;        &#x2F;&#x2F;     cout &lt;&lt; s[i] ;        &#x2F;&#x2F; &#125;        &#x2F;&#x2F; cout &lt;&lt; endl;                vector&lt;ULL&gt; hl &#x3D; get_prefix_hash(s);        reverse(s.begin(), s.end());        vector&lt;ULL&gt; hr &#x3D; get_prefix_hash(s);        reverse(s.begin(), s.end()); &#x2F;&#x2F; reverse(回来)                int res &#x3D; 0;        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;            int l &#x3D; 0, r &#x3D; min(i - 1, n - i); &#x2F;&#x2F; 二分最大半径mid            while (l !&#x3D; r + 1) &#123;                int mid &#x3D; l + r &gt;&gt; 1;                if (get_substr_hash(hl, i - mid, i - 1) !&#x3D; get_substr_hash(hr, n - (i + mid) + 1, n - (i + 1) + 1)) &#123;                    r &#x3D; mid - 1;                &#125;                else &#123;                    l &#x3D; mid + 1;                &#125;            &#125;                        if (s[i - r + 1] &lt;&#x3D; &#39;z&#39;) res &#x3D; max(res, r + 1);            else res &#x3D; max(res, r);        &#125;                printf(&quot;Case %d: %d\n&quot;, T ++, res);            &#125;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n + \log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中reverse的时间和预处理前缀的时间都是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>为二分。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>∗</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(N * 2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span>，花<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的空间存储<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>次幂。</p></li></ul><h3 id="method2manacher"><a class="markdownIt-Anchor" href="#method2manacher"></a> Method2：Manacher</h3><p>这题也可以用manacher做，复杂度是O（N）</p><h4 id="复杂度分析-2"><a class="markdownIt-Anchor" href="#复杂度分析-2"></a> 复杂度分析</h4>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>hash</tag>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-52.兔子与兔子</title>
    <link href="/2023/02/21/Algorithm/Comp/0x10/20230221-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-052-%E5%85%94%E5%AD%90%E4%B8%8E%E5%85%94%E5%AD%90/"/>
    <url>/2023/02/21/Algorithm/Comp/0x10/20230221-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-052-%E5%85%94%E5%AD%90%E4%B8%8E%E5%85%94%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/140/">算法竞赛进阶指南-52.兔子与兔子</a></p><p>很久很久以前，森林里住着一群兔子。</p><p>有一天，兔子们想要研究自己的 DNA 序列。</p><p>我们首先选取一个好长好长的 DNA 序列（小兔子是外星生物，DNA 序列可能包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>26</mn></mrow><annotation encoding="application/x-tex">26</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">6</span></span></span></span> 个小写英文字母）。</p><p>然后我们每次选择两个区间，询问如果用两个区间里的 DNA 序列分别生产出来两只兔子，这两个兔子是否一模一样。</p><p>注意两个兔子一模一样只可能是他们的 DNA 序列一模一样。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行输入一个 DNA 字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>。</p><p>第二行一个数字 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>，表示 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 次询问。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 行，每行四个数字 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>r</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>l</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>r</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">l_1, r_1, l_2, r_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，分别表示此次询问的两个区间，注意字符串的位置从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 开始编号。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>对于每次询问，输出一行表示结果。</p><p>如果两只兔子完全相同输出 <code>Yes</code>，否则输出 <code>No</code>（注意大小写）。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>1000000</mn></mrow><annotation encoding="application/x-tex">1 \le length(S),m \le 1000000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-nginx" data-language="nginx"><code class="language-nginx">aabbaabb31 3 5 71 3 6 81 2 1 2</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-nginx" data-language="nginx"><code class="language-nginx">YesNoYes</code></pre><h3 id="method-字符串hash"><a class="markdownIt-Anchor" href="#method-字符串hash"></a> Method : 字符串Hash</h3><p>标准的字符串前缀哈希题目，如果是第一次遇到字符串Hash的题目值得一做。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;string&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;typedef unsigned long long ULL;const int N &#x3D;1e6 + 7;const int P &#x3D; 131;vector&lt;ULL&gt; p(N); &#x2F;&#x2F; P的次幂vector&lt;ULL&gt; get_prefix_hash(const string&amp; s) &#123;    int n &#x3D; s.size();    vector&lt;ULL&gt; h(n + 1);    h[0] &#x3D; 0;    p[0] &#x3D; 1;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        h[i] &#x3D; h[i - 1] * P + s[i - 1] - &#39;a&#39; + 1;        p[i] &#x3D; p[i - 1] * P;    &#125;        return h;&#125;ULL get_substr_hash(const vector&lt;ULL&gt;&amp; h, int l, int r) &#123;    return h[r] - h[l - 1] * p[r - l + 1];&#125;int main() &#123;    string s;    cin &gt;&gt; s;    vector&lt;ULL&gt; h &#x3D; get_prefix_hash(s);        int m;    cin &gt;&gt; m;    while (m --) &#123;        int l1, r1, l2, r2;        scanf(&quot;%d %d %d %d&quot;, &amp;l1, &amp;r1, &amp;l2, &amp;r2);        if (get_substr_hash(h, l1, r1) &#x3D;&#x3D; get_substr_hash(h, l2, r2)) puts(&quot;Yes&quot;);        else puts(&quot;No&quot;);    &#125;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 预处理前缀和需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，查询字串的时间复杂度是常数级<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</li><li>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span>，要花<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的空间存储Hash前缀和，花<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的空间存储<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>次幂。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-51.雪花雪花雪花</title>
    <link href="/2023/02/20/Algorithm/Comp/0x10/20230220-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-051-%E9%9B%AA%E8%8A%B1%E9%9B%AA%E8%8A%B1%E9%9B%AA%E8%8A%B1/"/>
    <url>/2023/02/20/Algorithm/Comp/0x10/20230220-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-051-%E9%9B%AA%E8%8A%B1%E9%9B%AA%E8%8A%B1%E9%9B%AA%E8%8A%B1/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/139/">算法竞赛进阶指南-51.雪花雪花雪花</a></p><p>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 片雪花，每片雪花由六个角组成，每个角都有长度。</p><p>第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 片雪花六个角的长度从某个角开始顺时针依次记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>6</mn></mrow></msub></mrow><annotation encoding="application/x-tex">a_{i,1},a_{i,2},…,a_{i,6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>因为雪花的形状是封闭的环形，所以从任何一个角开始顺时针或逆时针往后记录长度，得到的六元组都代表形状相同的雪花。</p><p>例如 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>6</mn></mrow></msub></mrow><annotation encoding="application/x-tex">a_{i,1},a_{i,2},…,a_{i,6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>3</mn></mrow></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>6</mn></mrow></msub><mi mathvariant="normal">，</mi><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">a_{i,2},a_{i,3},…,a_{i,6}，a_{i,1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 就是形状相同的雪花。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>6</mn></mrow></msub></mrow><annotation encoding="application/x-tex">a_{i,1},a_{i,2},…,a_{i,6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>6</mn></mrow></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>5</mn></mrow></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">a_{i,6},a_{i,5},…,a_{i,1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 也是形状相同的雪花。</p><p>我们称两片雪花形状相同，当且仅当它们各自从某一角开始顺时针或逆时针记录长度，能得到两个相同的六元组。</p><p>求这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 片雪花中是否存在两片形状相同的雪花。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行输入一个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>，代表雪花的数量。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 行，每行描述一片雪花。</p><p>每行包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span> 个整数，分别代表雪花的六个角的长度（这六个数即为从雪花的随机一个角顺时针或逆时针记录长度得到）。</p><p>同行数值之间，用空格隔开。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>如果不存在两片形状相同的雪花，则输出：</p><p><code>No two snowflakes are alike.</code></p><p>如果存在两片形状相同的雪花，则输出：</p><p><code>Twin snowflakes found.</code></p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>100000</mn></mrow><annotation encoding="application/x-tex">1 \le N \le 100000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>&lt;</mo><mn>10000000</mn></mrow><annotation encoding="application/x-tex">0 \le a_{i,j} &lt;10000000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8252079999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">21 2 3 4 5 64 3 2 1 6 5</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-nginx" data-language="nginx"><code class="language-nginx">Twin snowflakes found.</code></pre><h3 id="method-hash"><a class="markdownIt-Anchor" href="#method-hash"></a> Method : Hash</h3><p>不难观察到，对于两片形状相同的雪花，其相邻差值绝对值、总和、乘积是一样的。<br />因此可以计算相邻差值绝对值、总和、乘积，来作为雪花的唯一标识，作为hash表的判重依据。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;typedef long long LL;const int MOD &#x3D; 13331;   &#x2F;&#x2F; 不加MOD也可以struct SnowFlake &#123;    LL dif &#x3D; 0;  &#x2F;&#x2F; 相邻差值绝对值    LL sum &#x3D; 0;  &#x2F;&#x2F; 和    LL prod &#x3D; 1; &#x2F;&#x2F; 积&#125;;struct SnowFlakeHash &#123;    int operator()(const SnowFlake&amp; p) const &#123;        return p.dif ^ (p.sum &lt;&lt; 1) ^ (p.prod &lt;&lt; 2);    &#125; &#125;;struct SnowFlakeEqual &#123;    bool operator()(const SnowFlake&amp; p1, const SnowFlake&amp; p2) const &#123;        return p1.dif &#x3D;&#x3D; p2.dif &amp;&amp; p1.sum &#x3D;&#x3D; p2.sum &amp;&amp; p1.prod &#x3D;&#x3D; p2.prod;    &#125;&#125;;int n;unordered_map&lt;SnowFlake, int, SnowFlakeHash, SnowFlakeEqual&gt; ht;int main() &#123;    cin &gt;&gt; n;    bool flag &#x3D; false;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        SnowFlake sf;         int a[6];        for (int j &#x3D; 0; j &lt; 6; j ++) &#123;            scanf(&quot;%d&quot;, &amp;a[j]);        &#125;        &#x2F;&#x2F; 计算相邻差值绝对值、总和、乘积        for (int j &#x3D; 0; j &lt; 6; j ++) &#123;            sf.dif &#x3D; (sf.dif + abs(a[j % 6] - a[(j - 1 + 6) % 6])) % MOD;            sf.sum &#x3D; (sf.sum + a[j]) % MOD;            sf.prod &#x3D; (sf.prod * a[j]) % MOD;        &#125;                if (ht.count(sf)) &#123;            flag &#x3D; true;            cout &lt;&lt; &quot;Twin snowflakes found.&quot; &lt;&lt; endl;            break;        &#125;        ht[sf] ++;    &#125;        if (flag &#x3D;&#x3D; false) &#123;        cout &lt;&lt; &quot;No two snowflakes are alike.&quot; &lt;&lt; endl;    &#125;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>，理论上是均摊<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul><hr /><p>最初版，只计算<strong>相邻差值</strong>和<strong>总和</strong>不能过最后一个测试点</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;typedef long long LL;struct SnowFlake &#123;    LL dif; &#x2F;&#x2F; 差值绝对值    LL sum; &#x2F;&#x2F; 和&#125;;struct SnowFlakeHash &#123;    int operator()(const SnowFlake&amp; p) const &#123;        return p.dif ^ (p.sum &lt;&lt; 1);    &#125; &#125;;struct SnowFlakeEqual &#123;    bool operator()(const SnowFlake&amp; p1, const SnowFlake&amp; p2) const &#123;        return p1.dif &#x3D;&#x3D; p2.dif &amp;&amp; p1.sum &#x3D;&#x3D; p2.sum;    &#125;&#125;;int n;unordered_map&lt;SnowFlake, int, SnowFlakeHash, SnowFlakeEqual&gt; ht;int main() &#123;    &#x2F;&#x2F; 计算两两之间的差值， 再计算一个sum    cin &gt;&gt; n;    bool flag &#x3D; false;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        SnowFlake sf;         sf.sum &#x3D; 0, sf.dif &#x3D; 0;        int a[6];        for (int j &#x3D; 0; j &lt; 6; j ++) &#123;            scanf(&quot;%d&quot;, &amp;a[j]);        &#125;        for (int j &#x3D; 0; j &lt; 6; j ++) &#123;            sf.dif +&#x3D; abs(a[j % 6] - a[(j - 1 + 6) % 6]);            sf.sum +&#x3D; a[j];        &#125;        &#x2F;&#x2F; cout &lt;&lt; sf.dif &lt;&lt; &quot; &quot; &lt;&lt; sf.sum &lt;&lt; endl;        if (ht.count(sf)) &#123;            flag &#x3D; true;            cout &lt;&lt; &quot;Twin snowflakes found.&quot; &lt;&lt; endl;            break;        &#125;        ht[sf] ++;    &#125;        if (flag &#x3D;&#x3D; false) &#123;        cout &lt;&lt; &quot;No two snowflakes are alike.&quot; &lt;&lt; endl;    &#125;            return 0;&#125;</code></pre><h3 id="method最小表示法"><a class="markdownIt-Anchor" href="#method最小表示法"></a> Method：最小表示法</h3>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-50.邻值查找</title>
    <link href="/2023/02/19/Algorithm/Comp/0x10/20230219-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-050-%E9%82%BB%E5%80%BC%E6%9F%A5%E6%89%BE/"/>
    <url>/2023/02/19/Algorithm/Comp/0x10/20230219-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-050-%E9%82%BB%E5%80%BC%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/138/">算法竞赛进阶指南-50.邻值查找</a></p><p>给定一个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的序列 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 中的数各不相同。</p><p>对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 中的每一个数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，求：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>min</mi><mo>⁡</mo></mo><mrow><mn>1</mn><mo>≤</mo><mi>j</mi><mo>&lt;</mo><mi>i</mi></mrow></msub><mi mathvariant="normal">∣</mi><msub><mi>A</mi><mi>i</mi></msub><mo>−</mo><msub><mi>A</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">\min_{1 \le j &lt;i}|A_i-A_j|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mop"><span class="mop">min</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">&lt;</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span></p><p>以及令上式取到最小值的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>（记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">P_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）。若最小值点不唯一，则选择使 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">A_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 较小的那个。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行输入整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，代表序列长度。</p><p>第二行输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo>…</mo><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">A_1…A_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,代表序列的具体数值，数值之间用空格隔开。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出共 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 行，每行输出两个整数，数值之间用空格隔开。</p><p>分别表示当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 取 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∼</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2 \sim n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 时，对应的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>min</mi><mo>⁡</mo></mo><mrow><mn>1</mn><mo>≤</mo><mi>j</mi><mo>&lt;</mo><mi>i</mi></mrow></msub><mi mathvariant="normal">∣</mi><msub><mi>A</mi><mi>i</mi></msub><mo>−</mo><msub><mi>A</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">\min_{1 \le j &lt;i}|A_i-A_j|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mop"><span class="mop">min</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">&lt;</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span> 和 $ P_i $ 的值。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p>$n \le 10^5 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3em;vertical-align:-0.19444em;"></span><span class="mpunct">,</span></span></span></span> |A_i| \le 10^9$</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">31 5 3</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">4 12 1</code></pre><h3 id="method1-stl-set"><a class="markdownIt-Anchor" href="#method1-stl-set"></a> Method1 : STL-set</h3><p>这题的意思就是在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>前面找一个与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>数值最接近的一个数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">A_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，如果有两个数同时满足，选择<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>j</mi></msub><mo>&lt;</mo><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_j &lt; A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的那个。</p><p>看到题目数据范围<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1*10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>就知道不能用暴力写，要找一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的做法。</p><pre class="language-c++" data-language="c++"><code class="language-c++"></code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n \log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>为对n进行二进制拆分的时间复杂度。</li><li>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</li></ul><h3 id="method2-双向链表"><a class="markdownIt-Anchor" href="#method2-双向链表"></a> Method2 : 双向链表</h3><p>用链表就是离线做法：</p><p>将原数组带着下标一起，按照元素的值从小到大顺排，然后以此顺序建立双向链表，而且要从后往前考虑</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;limits.h&gt;using namespace std;typedef pair&lt;int, int&gt; PII;struct Node &#123;    int value;    int pos;    int nxt, pre;    bool operator&lt; (const Node&amp; rhs) const &#123;        return value &lt; rhs.value;    &#125;&#125;;const int N &#x3D; 1e5 + 7;int n;Node node[N];int head, tail, tot;void init() &#123;    tot &#x3D; 2;    head &#x3D; 1, tail &#x3D; 2;    node[head].nxt &#x3D; tail;    node[tail].pre &#x3D; head;&#125;int insert(int p, int v, int idx) &#123;    int q &#x3D; ++ tot;    node[q].value &#x3D; v;    node[q].pos &#x3D; idx;    node[node[p].nxt].pre &#x3D; q;    node[q].nxt &#x3D; node[p].nxt;    node[p].nxt &#x3D; q; node[q].pre &#x3D; p;    return q;&#125;void remove(int p) &#123;    node[node[p].pre].nxt &#x3D; node[p].nxt;    node[node[p].nxt].pre &#x3D; node[p].pre;&#125;int pos[N];PII res[N], a[N];int main() &#123;    init();    scanf(&quot;%d&quot;, &amp;n);    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;a[i].first);        a[i].second &#x3D; i;    &#125;        sort(a + 1, a + 1 + n);        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        pos[a[i].second] &#x3D; insert(node[tail].pre, a[i].first, a[i].second);    &#125;        for (int i &#x3D; n; i &gt; 1; i --) &#123;        int s &#x3D; INT_MAX, idx &#x3D; -1;        Node&amp; t &#x3D; node[pos[i]];        if (t.pre !&#x3D; head &amp;&amp; s &gt; abs(t.value - node[t.pre].value)) &#123;            s &#x3D; abs(t.value - node[t.pre].value);            idx &#x3D; node[t.pre].pos;        &#125;        if (t.nxt !&#x3D; tail &amp;&amp; s &gt; abs(t.value - node[t.nxt].value)) &#123;            s &#x3D; abs(t.value - node[t.nxt].value);            idx &#x3D; node[t.nxt].pos;        &#125;        res[i] &#x3D; &#123;s, idx&#125;;        remove(pos[i]);    &#125;        for (int i &#x3D; 2; i &lt;&#x3D; n; i ++) &#123;        printf(&quot;%d %d\n&quot;, res[i].first, res[i].second);    &#125;        return 0;&#125;</code></pre><h4 id="复杂度分析-2"><a class="markdownIt-Anchor" href="#复杂度分析-2"></a> 复杂度分析</h4><ul><li>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n \log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>为sort的时间复杂度。</li><li>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</li></ul><p>补一个暴力做法，会<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi>L</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">TLE</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span>。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;limits.h&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int N &#x3D; 1e5 + 7;int n;vector&lt;int&gt; arr(N);int main() &#123;    cin &gt;&gt; n;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;arr[i]);    &#125;        vector&lt;PII&gt; res;    for (int i &#x3D; 2; i &lt;&#x3D; n; i ++) &#123;        PII tmp;        tmp.first &#x3D; INT_MAX;        tmp.second &#x3D; i;        for (int j &#x3D; i - 1; j; j --) &#123;            int dif &#x3D; abs(arr[i] - arr[j]);            if (dif &lt; tmp.first) &#123;                tmp.first &#x3D; dif;                tmp.second &#x3D; j;            &#125;            else if (dif &#x3D;&#x3D; tmp.first) &#123;                if (arr[j] &lt; arr[i]) tmp.second &#x3D; j;            &#125;        &#125;                res.push_back(tmp);    &#125;        for (int i &#x3D; 0; i &lt; res.size(); i ++) &#123;        printf(&quot;%d %d\n&quot;, res[i].first, res[i].second);    &#125;        return 0;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>链表</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-49.最大子序和</title>
    <link href="/2023/02/18/Algorithm/Comp/0x10/20230218-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-049-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/"/>
    <url>/2023/02/18/Algorithm/Comp/0x10/20230218-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-049-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/137/">算法竞赛进阶指南-49.最大子序和</a></p><p>输入一个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的整数序列，从中找出一段长度不超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 的连续子序列，使得子序列中所有数的和最大。</p><p><strong>注意：</strong> 子序列的长度至少是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行输入两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n,m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span>。</p><p>第二行输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个数，代表长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的整数序列。</p><p>同一行数之间用空格隔开。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出一个整数，代表该序列的最大子序和。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>300000</mn></mrow><annotation encoding="application/x-tex">1 \le n,m \le 300000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">6 41 -3 5 1 -2 3</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">7</code></pre><h3 id="method-单调队列优化dp"><a class="markdownIt-Anchor" href="#method-单调队列优化dp"></a> Method : 单调队列优化DP</h3><p><code>i - dque.front() + 1 &gt; m + 1</code>，这里怎么理解？</p><p>因为对于前缀和数组来说：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo>−</mo><mi>s</mi><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[r] - s[l - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>是算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo>∼</mo><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">arr[r] \sim  arr[l]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span></span></span></span>的前缀和，<br />所以<strong>当原数组的滑动窗口长度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>时，前缀和数组的滑动窗口长度应为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">m + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></strong>。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;deque&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;const int N &#x3D; 3e5 + 7;const int INF &#x3D; 0x3f3f3f3f;int n, m;vector&lt;int&gt; arr(N, 0);vector&lt;LL&gt; sum(N, 0);int main() &#123;    cin &gt;&gt; n &gt;&gt; m;        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;arr[i]);    &#125;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        sum[i] &#x3D; sum[i - 1] + arr[i];    &#125;        LL res &#x3D; -INF;    deque&lt;int&gt; Q;    Q.push_back(0); &#x2F;&#x2F; 插入sum[0]    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        while (!Q.empty() &amp;&amp; i - Q.front() + 1 &gt; m + 1) &#123;            Q.pop_front();        &#125;                res &#x3D; max(res, sum[i] - sum[Q.front()]);                while(!Q.empty() &amp;&amp; sum[Q.back()] &gt;&#x3D; sum[i]) &#123;            Q.pop_back();        &#125;        Q.push_back(i);    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 对于数组中的每个元素，其最多只进出队列一次。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>单调队列</tag>
      
      <tag>前缀和</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-48.双端队列</title>
    <link href="/2023/02/17/Algorithm/Comp/0x10/20230217-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-048-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/"/>
    <url>/2023/02/17/Algorithm/Comp/0x10/20230217-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-048-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/136/">算法竞赛进阶指南-48.双端队列</a></p><p>达达现在碰到了一个棘手的问题，有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个整数需要排序。</p><p>达达手头能用的工具就是若干个双端队列。</p><p>她从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 需要依次处理这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个数，对于每个数，达达能做以下两件事：</p><p>1．新建一个双端队列，并将当前数作为这个队列中的唯一的数；</p><p>2．将当前数放入已有的队列的头之前或者尾之后。</p><p>对所有的数处理完成之后，达达将这些队列按一定的顺序连接起来后就可以得到一个非降的序列。</p><p>请你求出最少需要多少个双端序列。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行输入整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>，代表整数的个数。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 行，每行包括一个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">D_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，代表所需处理的整数。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出一个整数，代表最少需要的双端队列数。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>200000</mn></mrow><annotation encoding="application/x-tex">1 \le N \le 200000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">6360963</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">2</code></pre><h3 id="method-贪心"><a class="markdownIt-Anchor" href="#method-贪心"></a> Method : 贪心</h3><p>可以发现该题有两个性质：</p><ol><li>在最优解中，每一个双端队列，必定是有序数组中的一个连续子序列</li><li>每个双端队列的下标是先减少后递增的 “单谷” 形式（因为之后插入的数要么接在队首，要么队尾）</li></ol><p>因此，可以对原数组先排序，然后根据下标找 “单谷” 计算最优解:</p><p>具体做法可以用一个<code>pair&lt;int, int&gt;</code>存储{数值，下标}，对其先排序，使得相同的数放在一起看作一个区间：</p><p>如题给数据：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mo stretchy="false">[</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mo stretchy="false">[</mo><mn>6</mn><mo separator="true">,</mo><mn>6</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mo stretchy="false">[</mo><mn>9</mn><mo stretchy="false">]</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[[0], [3, 3], [6, 6], [9]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord">9</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span>， 对应下标<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mn>6</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[[3], [1, 6], [2, 5], [4]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span></p><p>用一个变量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">dir</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>记录当前是上升趋势还是下降趋势，并用另一个变量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>a</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">last</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span></span></span></span>记录上一个区间的最后一个下标大小</p><p>初始时默认先开辟一个双端队列, 并从无穷大开始下降: <code>res = 1, dir = -1, last = INT_MAX</code></p><ol><li><p>如果当前处于下降趋势</p><ul><li>下标最大值小于最后一个元素的下标，按下标降序接在后面，整体下标呈<code>\</code>形</li><li>下标最大值大于最后一个元素的下标，按下标升序接在后面，整体下标呈 <code>\/</code> 形，变为上升趋势</li></ul></li><li><p>如果当前处于上升趋势</p><ul><li>下标最小值大于最后一个元素的下标，按下标升序接在后面，整体呈<code>/</code>形</li><li>下标最小值小于最后一个元素的下标，按下标降序接在后面，整体呈 <code>/\</code>形，变为下降趋势</li></ul><p>并且注意：当由上升趋势变为下降趋势后，相当于开辟了一个新的单谷，因此<code>res ++</code></p></li></ol><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;limits.h&gt;using namespace std;typedef pair&lt;int, int&gt; PII; &#x2F;&#x2F; &#123;数值, 下标&#125;const int N &#x3D; 2e5 + 7;int n;PII a[N];int main() &#123;    cin &gt;&gt; n;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;a[i].first);        a[i].second &#x3D; i;    &#125;        sort(a + 1, a + 1 + n);        int res &#x3D; 1;    int last &#x3D; INT_MAX, dir &#x3D; -1; &#x2F;&#x2F; -1 下降; 1 上升    for (int i &#x3D; 1; i &lt;&#x3D; n; ) &#123;        int j &#x3D; i + 1;        while (j &lt;&#x3D; n &amp;&amp; a[j].first &#x3D;&#x3D; a[i].first) j ++;                int max_idx &#x3D; a[j - 1].second, min_idx &#x3D; a[i].second;        if (dir &#x3D;&#x3D; -1) &#123;            if (last &gt; max_idx) last &#x3D; min_idx; &#x2F;&#x2F; 延续            else &#123;                dir &#x3D; 1;                last &#x3D; max_idx;            &#125;        &#125;        else &#123;            if (last &lt; min_idx) last &#x3D; max_idx; &#x2F;&#x2F; 延续            else &#123;                dir &#x3D; -1;                last &#x3D; min_idx;                res ++;            &#125;        &#125;        i &#x3D; j;    &#125;        cout &lt;&lt; res &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n\log n + n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>为sort排序的时间复杂度。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-47.蚯蚓</title>
    <link href="/2023/02/16/Algorithm/Comp/0x10/20230216-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-047-%E8%9A%AF%E8%9A%93/"/>
    <url>/2023/02/16/Algorithm/Comp/0x10/20230216-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-047-%E8%9A%AF%E8%9A%93/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/135/">算法竞赛进阶指南-47.蚯蚓</a></p><p>蛐蛐国最近蚯蚓成灾了！</p><p>隔壁跳蚤国的跳蚤也拿蚯蚓们没办法，蛐蛐国王只好去请神刀手来帮他们消灭蚯蚓。</p><p>蛐蛐国里现在共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 只蚯蚓，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 只蚯蚓的长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，所有蚯蚓的长度都是非负整数，即可能存在长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 的蚯蚓。</p><p>每一秒，神刀手会在所有的蚯蚓中，准确地找到最长的那一只，将其切成两段。</p><p>若有多只最长的，则任选一只。</p><p>神刀手切开蚯蚓的位置由有理数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span> 决定。</p><p>一只长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的蚯蚓会被切成两只长度分别为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌊</mo><mi>p</mi><mi>x</mi><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor px \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">p</span><span class="mord mathdefault">x</span><span class="mclose">⌋</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>−</mo><mo stretchy="false">⌊</mo><mi>p</mi><mi>x</mi><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">x - \lfloor px \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">p</span><span class="mord mathdefault">x</span><span class="mclose">⌋</span></span></span></span> 的蚯蚓。</p><p>特殊地，如果这两个数的其中一个等于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，则这个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 的蚯蚓也会被保留。</p><p>此外，除了刚刚产生的两只新蚯蚓，其余蚯蚓的长度都会增加一个非负整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>。</p><p>蛐蛐国王知道这样不是长久之计，因为蚯蚓不仅会越来越多，还会越来越长。</p><p>蛐蛐国王决定求助于一位有着洪荒之力的神秘人物，但是救兵还需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 秒才能到来。</p><p>蛐蛐国王希望知道这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 秒内的战况。</p><p>具体来说，他希望知道：</p><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 秒内，每一秒被切断的蚯蚓被切断前的长度，共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 个数。</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 秒后，所有蚯蚓的长度，共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n+m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 个数。</li></ol><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行包含六个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo separator="true">,</mo><mi>q</mi><mo separator="true">,</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo separator="true">,</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">n,m,q,u,v,t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span></span></span></span>，其中：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo separator="true">,</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">n,m,q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span> 的意义参考题目描述；<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo separator="true">,</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">u,v,t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span></span></span></span> 均为正整数；你需要自己计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>=</mo><mi>u</mi><mi mathvariant="normal">/</mi><mi>v</mi></mrow><annotation encoding="application/x-tex">p=u/v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">u</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>（保证 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>u</mi><mo>&lt;</mo><mi>v</mi></mrow><annotation encoding="application/x-tex">0&lt;u&lt;v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>）；<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 是输出参数，其含义将会在输出格式中解释。</p><p>第二行包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个非负整数，为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_1,a_2,…,a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，即初始时 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 只蚯蚓的长度。</p><p>同一行中相邻的两个数之间，恰好用一个空格隔开。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>第一行输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌊</mo><mi>m</mi><mi mathvariant="normal">/</mi><mi>t</mi><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">⌊m/t⌋</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">m</span><span class="mord">/</span><span class="mord mathdefault">t</span><span class="mclose">⌋</span></span></span></span> 个整数，按时间顺序，依次输出第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 秒，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>t</mi></mrow><annotation encoding="application/x-tex">2t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">t</span></span></span></span> 秒，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mi>t</mi></mrow><annotation encoding="application/x-tex">3t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord mathdefault">t</span></span></span></span> 秒，……被切断蚯蚓（在被切断前）的长度。</p><p>第二行输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌊</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>t</mi><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">⌊(n+m)/t⌋</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathdefault">t</span><span class="mclose">⌋</span></span></span></span> 个整数，输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 秒后蚯蚓的长度；需要按从大到小的顺序，依次输出排名第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>，第 $ 2t $，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mi>t</mi></mrow><annotation encoding="application/x-tex">3t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord mathdefault">t</span></span></span></span>，……的长度。</p><p>同一行中相邻的两个数之间，恰好用一个空格隔开。</p><p>即使某一行没有任何数需要输出，你也应输出一个空行。</p><p>请阅读样例来更好地理解这个格式。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1 \le n \le 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">0 \le a_i \le 10^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>p</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0 &lt; p &lt; 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>q</mi><mo>≤</mo><mn>200</mn></mrow><annotation encoding="application/x-tex">0 \le q \le 200</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>7</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">0 \le m \le 7*10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>u</mi><mo>&lt;</mo><mi>v</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">0 &lt; u &lt; v \le 10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>t</mi><mo>≤</mo><mn>71</mn></mrow><annotation encoding="application/x-tex">1 \le t \le 71</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mord">1</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">3 7 1 1 3 13 3 2</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">3 4 4 4 5 5 66 6 6 5 5 4 4 3 2 2</code></pre><h4 id="样例解释"><a class="markdownIt-Anchor" href="#样例解释"></a> 样例解释</h4><p>样例中，在神刀手到来前：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 只蚯蚓的长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">3,3,2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span></span></span>。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 秒后：一只长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 的蚯蚓被切成了两只长度分别为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 的蚯蚓，其余蚯蚓的长度增加了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。最终 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span> 只蚯蚓的长度分别为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">(1,2),4,3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span></span></span></span>。 括号表示这个位置刚刚有一只蚯蚓被切断。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 秒后：一只长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span> 的蚯蚓被切成了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span> 只蚯蚓的长度分别为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">2,3,(1,3),4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span></span></span></span>。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 秒后：一只长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span> 的蚯蚓被切断。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span> 只蚯蚓的长度分别为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">3,4,2,4,(1,3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span>。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span> 秒后：一只长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span> 的蚯蚓被切断。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn></mrow><annotation encoding="application/x-tex">7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span> 只蚯蚓的长度分别为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">4,(1,3),3,5,2,4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span></span></span></span>。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span> 秒后：一只长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span> 的蚯蚓被切断。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>8</mn></mrow><annotation encoding="application/x-tex">8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span> 只蚯蚓的长度分别为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">5,2,4,4,(1,4),3,5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span></span></span></span>。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span> 秒后：一只长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span> 的蚯蚓被切断。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>9</mn></mrow><annotation encoding="application/x-tex">9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span></span></span></span> 只蚯蚓的长度分别为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">(1,4),3,5,5,2,5,4,6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span></span></span></span>。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn></mrow><annotation encoding="application/x-tex">7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span> 秒后：一只长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span> 的蚯蚓被切断。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span> 只蚯蚓的长度分别为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>6</mn><mo separator="true">,</mo><mn>6</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>6</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2,5,4,6,6,3,6,5,(2,4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span></span></span></span>。</p><p>所以，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn></mrow><annotation encoding="application/x-tex">7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span> 秒内被切断的蚯蚓的长度依次为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">3,4,4,4,5,5,6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span></span></span></span>。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn></mrow><annotation encoding="application/x-tex">7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span> 秒后，所有蚯蚓长度从大到小排序为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mo separator="true">,</mo><mn>6</mn><mo separator="true">,</mo><mn>6</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">6,6,6,5,5,4,4,3,2,2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span></span></span>。</p><h3 id="method1-优先队列-tle"><a class="markdownIt-Anchor" href="#method1-优先队列-tle"></a> Method1 : 优先队列 (TLE)</h3><p>一开始想着，这不就优先队列么，但是：每秒后所有蚯蚓都会+q（除了被切的蚯蚓），<br />这个就很难办:如何维护每秒后的将每只蚯蚓长度+q呢？</p><blockquote><p>或许可以转变思路, 每次只有两只蚯蚓没被加其他的全部被加了, 根据<strong>运动是相互</strong>的, <strong>除了那被切成的两只蚯蚓</strong>其他的都往<strong>正方向</strong>移动了一些, 等价于那两只往<strong>负方向</strong>移动了一些.</p><p>那么每次取出的时候：</p><ul><li>先把蚯蚓长度还原成当前i秒后的长度</li><li>再计算切开的两段长度</li><li>最后把切开的两段还原回0s时的长度，并且再-q(其它蚯蚓+q，相当于这两只蚯蚓-q)</li></ul></blockquote><p>但是这个时间复杂度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的，(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup><mo>∗</mo><mo stretchy="false">[</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo stretchy="false">)</mo><mo>∗</mo><mn>3</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">7 * 10^6 * [log (10^5) * 3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">]</span></span></span></span>，再加上其它常数级有可能超过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>因此会TLE)</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;queue&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N &#x3D; 1e5 + 7;int n, m, q, u, v, t;int main() &#123;    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q &gt;&gt; u &gt;&gt; v &gt;&gt; t;    double p &#x3D; (double)u &#x2F; v;        priority_queue&lt;int&gt; pque;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        int x;        scanf(&quot;%d&quot;, &amp;x);        pque.push(x);    &#125;        &#x2F;&#x2F; 关键在于每秒 + q，怎么处理&#x3D;&gt; 相对处理    for (int i &#x3D; 1; i &lt;&#x3D; m; i ++) &#123;        auto x &#x3D; pque.top(); pque.pop();        x +&#x3D; (i - 1) * q;        if(i % t &#x3D;&#x3D; 0)printf(&quot;%d &quot;, x);&#x2F;&#x2F;要求输出的第一行        int x1 &#x3D; floor(p * (double)x);        int x2 &#x3D; x - x1;        &#x2F;&#x2F; 还原        x1 -&#x3D; (i - 1) * q; x1 -&#x3D; q;        x2 -&#x3D; (i - 1) * q; x2 -&#x3D; q;         pque.push(x1);        pque.push(x2);    &#125;    puts(&quot;&quot;);    for (int i &#x3D; 1; pque.size() &gt; 0; i ++) &#123;        if (i % t &#x3D;&#x3D; 0) &#123;            printf(&quot;%d &quot;, pque.top() + m * q);        &#125;        pque.pop();    &#125;           return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(m\log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>为外层循环次数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>为维护优先队列的top()。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul><h3 id="method2"><a class="markdownIt-Anchor" href="#method2"></a> Method2 :</h3><h4 id="复杂度分析-2"><a class="markdownIt-Anchor" href="#复杂度分析-2"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(m + n\log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>为外层循环次数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>为维护优先队列的top()。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-46.小组队列</title>
    <link href="/2023/02/15/Algorithm/Comp/0x10/20230215-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-046-%E5%B0%8F%E7%BB%84%E9%98%9F%E5%88%97/"/>
    <url>/2023/02/15/Algorithm/Comp/0x10/20230215-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-046-%E5%B0%8F%E7%BB%84%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/134/">算法竞赛进阶指南-46.小组队列</a></p><p>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个小组要排成一个队列，每个小组中有若干人。</p><p>当一个人来到队列时，如果队列中已经有了自己小组的成员，他就直接插队排在自己小组成员的后面，否则就站在队伍的最后面。</p><p>请你编写一个程序，模拟这种小组队列。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式：</h4><p>输入将包含一个或多个测试用例。</p><p>对于每个测试用例，第一行输入小组数量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 行，每行输入一个小组描述，第一个数表示这个小组的人数，接下来的数表示这个小组的人的编号。</p><p>编号是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>999999</mn></mrow><annotation encoding="application/x-tex">999999</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">9</span><span class="mord">9</span><span class="mord">9</span><span class="mord">9</span><span class="mord">9</span></span></span></span> 范围内的整数。</p><p>一个小组最多可包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1000</mn></mrow><annotation encoding="application/x-tex">1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span> 个人。</p><p>最后，命令列表如下。 有三种不同的命令：</p><p>1、<code>ENQUEUE x</code> - 将编号是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的人插入队列；</p><p>2、<code>DEQUEUE</code> - 让整个队列的第一个人出队；</p><p>3、<code>STOP</code> - 测试用例结束</p><p>每个命令占一行。</p><p>当输入用例 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">t=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时，代表停止输入。</p><p>需注意：测试用例最多可包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>200000</mn></mrow><annotation encoding="application/x-tex">200000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>20</mn></mrow><annotation encoding="application/x-tex">20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span></span></span></span> 万）个命令，因此小组队列的实现应该是高效的：</p><p>入队和出队都需要使用常数时间。</p><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例</h4><p>对于每个测试用例，首先输出一行 <code>Scenario #k</code>，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 是测试用例的编号。</p><p>然后，对于每个 <code>DEQUEUE</code> 命令，输出出队的人的编号，每个编号占一行。</p><p>在每个测试用例（包括最后一个测试用例）输出完成后，输出一个空行。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>t</mi><mo>≤</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">1 \le t \le 1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-sql" data-language="sql"><code class="language-sql">23 101 102 1033 201 202 203ENQUEUE 101ENQUEUE 201ENQUEUE 102ENQUEUE 202ENQUEUE 103ENQUEUE 203DEQUEUEDEQUEUEDEQUEUEDEQUEUEDEQUEUEDEQUEUESTOP25 259001 259002 259003 259004 2590056 260001 260002 260003 260004 260005 260006ENQUEUE 259001ENQUEUE 260001ENQUEUE 259002ENQUEUE 259003ENQUEUE 259004ENQUEUE 259005DEQUEUEDEQUEUEENQUEUE 260002ENQUEUE 260003DEQUEUEDEQUEUEDEQUEUEDEQUEUESTOP0</code></pre><p>输出样例：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">Scenario #1101102103201202203Scenario #2259001259002259003259004259005260001</code></pre><h3 id="method-队列"><a class="markdownIt-Anchor" href="#method-队列"></a> Method : 队列</h3><p>关键要理解题目中的这句话:</p><blockquote><p>当一个人来到队列时，如果队列中已经有了自己小组的成员，他就直接插队排在自己小组成员的后面，否则就站在队伍的最后面。</p></blockquote><p>因此可以考虑维护1个组间队列<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>p</mi><mi mathvariant="normal">_</mi><mi>o</mi><mi>n</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">group\_one</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74056em;vertical-align:-0.31em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span></span></span></span>，N个组内队列<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">member</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>来维护题给关系：</p><ul><li>ENQUEUE(push)<ul><li>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">member</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>不为空，说明<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>p</mi><mi mathvariant="normal">_</mi><mi>o</mi><mi>n</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">group\_one</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74056em;vertical-align:-0.31em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span></span></span></span>中已有队友，可以直接push(x)到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">member</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span></li><li>如果组内队列为空，说明<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>p</mi><mi mathvariant="normal">_</mi><mi>o</mi><mi>n</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">group\_one</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74056em;vertical-align:-0.31em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span></span></span></span>中没有队友，此时<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>p</mi><mi mathvariant="normal">_</mi><mi>o</mi><mi>n</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">group\_one</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74056em;vertical-align:-0.31em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span></span></span></span>需要push(gid)该组id</li></ul></li><li>DEQUEUE(pop)<ul><li>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">member</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>不为空，可以直接让<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">member</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>pop()，此时再次判断member是否为空，为空说明<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>p</mi><mi mathvariant="normal">_</mi><mi>o</mi><mi>n</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">group\_one</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74056em;vertical-align:-0.31em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span></span></span></span>中该小组成员已全部弹出，需要pop()该小组id</li><li>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">member</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>为空，什么也不做</li></ul></li></ul><p>由于编号不重复，因此可以用一个数组或hash表来存放每个编号成员的所属小组。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;queue&gt;#include &lt;vector&gt;#include &lt;string&gt;#include &lt;unordered_map&gt;#include &lt;iostream&gt;using namespace std;const int N &#x3D; 1e3 + 7;const int M &#x3D; 1e6 + 7;vector&lt;int&gt; group_id(M); &#x2F;&#x2F; unordered_map&lt;int, int&gt; group_id; 也行，实测运行速度会慢一些，但空间开销小int main() &#123;    int t;    int id &#x3D; 1;    while (scanf(&quot;%d&quot;, &amp;t), t) &#123;        for (int i &#x3D; 0; i &lt; t; i ++) &#123;            int gnum;            scanf(&quot;%d&quot;, &amp;gnum);            for (int j &#x3D; 0; j &lt; gnum; j ++) &#123;                int x;                scanf(&quot;%d&quot;, &amp;x);                group_id[x] &#x3D; i;            &#125;        &#125;                printf(&quot;Scenario #%d\n&quot;, id);                queue&lt;int&gt; group_one;          &#x2F;&#x2F; 组间队列        vector&lt;queue&lt;int&gt;&gt; member(N);  &#x2F;&#x2F; 组内队列        string op;        while (cin &gt;&gt; op, op !&#x3D; &quot;STOP&quot;) &#123;            if (op &#x3D;&#x3D; &quot;ENQUEUE&quot;) &#123;                int x;                scanf(&quot;%d&quot;, &amp;x);                                int gid &#x3D; group_id[x];                if (member[gid].empty()) &#123;                    group_one.push(gid);                    member[gid].push(x);                &#125;                else member[gid].push(x);            &#125;            else if (op &#x3D;&#x3D; &quot;DEQUEUE&quot;)&#123;                int gid &#x3D; group_one.front();                if (member[gid].empty()) continue;                else &#123;                    printf(&quot;%d\n&quot;, member[gid].front());                    member[gid].pop();                    if (member[gid].empty()) group_one.pop();                &#125;            &#125;        &#125;        puts(&quot;&quot;);                id ++;    &#125;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>，如果不考虑输入的话，时间复杂度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的，否则是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>t</mi><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(t * n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(M)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span></span>，数组很稀疏。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-45.直方图中最大的矩形</title>
    <link href="/2023/02/14/Algorithm/Comp/0x10/20230214-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-045-%E7%9B%B4%E6%96%B9%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2/"/>
    <url>/2023/02/14/Algorithm/Comp/0x10/20230214-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-045-%E7%9B%B4%E6%96%B9%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/133/">算法竞赛进阶指南-45.直方图中最大的矩形</a></p><p>直方图是由在公共基线处对齐的一系列矩形组成的多边形。</p><p>矩形具有相等的宽度，但可以具有不同的高度。</p><p>例如，图例左侧显示了由高度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">2,1,4,5,1,3,3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span></span></span></span> 的矩形组成的直方图，矩形的宽度都为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>：</p><p><img src="/img/article/2023/02/14/2.png" alt="" /></p><p>通常，直方图用于表示离散分布，例如，文本中字符的频率。</p><p>现在，请你计算在公共基线处对齐的直方图中最大矩形的面积。</p><p>图例右图显示了所描绘直方图的最大对齐矩形。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入包含几个测试用例。</p><p>每个测试用例占据一行，用以描述一个直方图，并以整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 开始，表示组成直方图的矩形数目。</p><p>然后跟随 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mn>1</mn></msub><mi mathvariant="normal">，</mi><mo>…</mo><mi mathvariant="normal">，</mi><msub><mi>h</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">h_1，…，h_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>这些数字以从左到右的顺序表示直方图的各个矩形的高度。</p><p>每个矩形的宽度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</p><p>同行数字用空格隔开。</p><p>当输入用例为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时，结束输入，且该用例不用考虑。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>对于每一个测试用例，输出一个整数，代表指定直方图中最大矩形的区域面积。</p><p>每个数据占一行。</p><p>请注意，此矩形必须在公共基线处对齐。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>100000</mn></mrow><annotation encoding="application/x-tex">1 \le n \le 100000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>h</mi><mi>i</mi></msub><mo>≤</mo><mn>1000000000</mn></mrow><annotation encoding="application/x-tex">0 \le h_i \le 1000000000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">7 2 1 4 5 1 3 34 1000 1000 1000 10000</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">84000</code></pre><h3 id="method-单调栈"><a class="markdownIt-Anchor" href="#method-单调栈"></a> Method : 单调栈</h3><p>根据题意，需要构造一个单峰<code>/\</code>（中间高两边低）才能计算出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">cur</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>矩形的最大面积，因此可以构造一个<strong>严格单调递增</strong>的单调栈来完成这个操作，并且对于当前的每个谷峰<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">cur</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>，其能形成的最大矩形面积<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>r</mi><mi>e</mi><mi>a</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{area}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>r</mi><mi>e</mi><mi>a</mi></mrow></msub><mo>=</mo><mi>w</mi><mo>∗</mo><mi>h</mi><mo>=</mo><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">[</mo><mi>c</mi><mi>u</mi><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">S_{area} = w * h = (r - l - 1) * height[cur]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span></span></p><p>如果没有形成单峰&quot;<code>/\</code>，其实当前单个上升区间<code>/</code>也能计算矩形面积，那么就有必要把遍历完后留在单调栈中的数全部弹出来算一次，但这样会导致代码冗余（逻辑重复），因此可以添加一个尾部哨兵来统一操作。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;stack&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;vector&lt;int&gt; height;stack&lt;int&gt; S;int main() &#123;    int n;    while (scanf(&quot;%d&quot;, &amp;n), n) &#123;        height.resize(n);                for (int i &#x3D; 0; i &lt; n; i ++) &#123;            scanf(&quot;%d&quot;, &amp;height[i]);        &#125;                height.push_back(0);       &#x2F;&#x2F; 尾部哨兵        n &#x3D; height.size();        LL res &#x3D; 0;        S &#x3D; stack&lt;int&gt;();        for (int i &#x3D; 0; i &lt; n; i ++) &#123;            while (!S.empty() &amp;&amp; height[S.top()] &gt;&#x3D; height[i]) &#123;                int cur &#x3D; S.top();                S.pop();                int r &#x3D; i;                  int l &#x3D; S.empty() ? -1 : S.top();                res &#x3D; max(res, (r - l - 1) * (LL)height[cur]);            &#125;            S.push(i);        &#125;                       cout &lt;&lt; res &lt;&lt; endl;    &#125;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 对于数组中的每个元素，最多只会进出栈一次。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul><p>另一种写法，但是感觉有些麻烦，仅供参考：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;stack&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;const int N &#x3D; 1e5 + 7;vector&lt;int&gt; height(N);vector&lt;int&gt; l(N);vector&lt;int&gt; r(N);stack&lt;int&gt; stk;int main() &#123;    int n;    while (scanf(&quot;%d&quot;, &amp;n), n) &#123;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;            scanf(&quot;%d&quot;, &amp;height[i]);        &#125;                &#x2F;&#x2F; left        stk &#x3D; stack&lt;int&gt;();        for (int i &#x3D; 0 ; i &lt; n; i ++) &#123;            while(!stk.empty() &amp;&amp; height[stk.top()] &gt;&#x3D; height[i]) &#123;                stk.pop();            &#125;            l[i] &#x3D; stk.empty() ? -1 : stk.top();            stk.push(i);        &#125;                &#x2F;&#x2F; right        stk &#x3D; stack&lt;int&gt;();        for (int i &#x3D; n - 1; i &gt;&#x3D; 0; i --) &#123;            while(!stk.empty() &amp;&amp; height[stk.top()] &gt;&#x3D; height[i]) &#123;                stk.pop();            &#125;            r[i] &#x3D; stk.empty() ? n : stk.top();            stk.push(i);        &#125;                LL res &#x3D; 0;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;            LL cur &#x3D; (LL)height[i] * (r[i] - l[i] - 1);            res &#x3D; max(res, cur);        &#125;                cout &lt;&lt; res &lt;&lt; endl;    &#125;            return 0;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>单调栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-44.火车进出栈问题</title>
    <link href="/2023/02/13/Algorithm/Comp/0x10/20230213-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-044-%E7%81%AB%E8%BD%A6%E8%BF%9B%E5%87%BA%E6%A0%88%E9%97%AE%E9%A2%98/"/>
    <url>/2023/02/13/Algorithm/Comp/0x10/20230213-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-044-%E7%81%AB%E8%BD%A6%E8%BF%9B%E5%87%BA%E6%A0%88%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/91/">算法竞赛进阶指南-44.火车进出栈问题</a></p><p>一列火车 $ n $ 节车厢，依次编号为 $ 1,2,3,…,n $。</p><p>每节车厢有两种运动方式，进栈与出栈，问 $ n $ 节车厢出栈的可能排列方式有多少种。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入一个整数 $ n $，代表火车的车厢数。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出一个整数 $ s $ 表示 $ n $ 节车厢出栈的可能排列方式数量。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p>$ 1 \le n \le 60000 $</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">3</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">5</code></pre><h3 id="method-位运算-二进制拆分"><a class="markdownIt-Anchor" href="#method-位运算-二进制拆分"></a> Method : 位运算-二进制拆分</h3><p>基础位运算，本题是快速幂的模板题。</p><p>注意两点:</p><ol><li>有取模运算时不要用自乘<code>*=</code>， 否则会影响计算顺序</li><li>return 时也要取模， 防止极端例子:<code>n = 0</code>且<code>p = 1</code></li></ol><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;LL a, b, p;LL fast_pow(LL x, LL n) &#123;    LL res &#x3D; 1LL;    while (n) &#123;        if (n &amp; 1) &#123;            res &#x3D; res * x % p;        &#125;        x &#x3D; x * x % p;        n &#x3D; n &gt;&gt; 1;    &#125;    return res % p;&#125;int main() &#123;    cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;    cout &lt;&lt; fast_pow(a, b) &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(\log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>为对n进行二进制拆分的时间复杂度。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-43.火车进栈</title>
    <link href="/2023/02/12/Algorithm/Comp/0x10/20230212-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-043-%E7%81%AB%E8%BD%A6%E8%BF%9B%E6%A0%88/"/>
    <url>/2023/02/12/Algorithm/Comp/0x10/20230212-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-043-%E7%81%AB%E8%BD%A6%E8%BF%9B%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/131/">算法竞赛进阶指南-43.火车进栈</a></p><p>这里有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 列火车将要进站再出站，但是，每列火车只有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 节，那就是车头。</p><p>这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 列火车按 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的顺序从东方左转进站，这个车站是南北方向的，它虽然无限长，只可惜是一个死胡同，而且站台只有一条股道，火车只能倒着从西方出去，而且每列火车必须进站，先进后出。</p><p>也就是说这个火车站其实就相当于一个栈，每次可以让右侧头火车进栈，或者让栈顶火车出站。</p><p>车站示意如图：</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby">出站&lt;——    &lt;——进站  |车|      |站|      |__|</code></pre><p>现在请你按《字典序》输出前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>20</mn></mrow><annotation encoding="application/x-tex">20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span></span></span></span> 种可能的出栈方案。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入一个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，代表火车数量。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>按照《字典序》输出前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>20</mn></mrow><annotation encoding="application/x-tex">20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span></span></span></span> 种答案，每行一种，不要空格。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>20</mn></mrow><annotation encoding="application/x-tex">1 \le n \le 20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">3</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">123132213231321</code></pre><h3 id="method-栈-递归"><a class="markdownIt-Anchor" href="#method-栈-递归"></a> Method : 栈 + 递归</h3><p>很显然，对于任一个状态，只有两个选择：</p><ol><li>把下一个数入栈；</li><li>把当前栈顶的数出栈（如果当前栈非空）。</li></ol><p>这就对应了递归的两个分支，因此可以用递归来枚举所有可能的方案。</p><blockquote><p>此外，因为要按字典序输出，所以出栈的分支必须放在入栈的分支前面</p></blockquote><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;stack&gt;#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;int n;int remain &#x3D; 20;vector&lt;int&gt; path;stack&lt;int&gt; stk;void dfs(int u, int n) &#123;    if (!remain) return;    if (u - 1 &gt; n) &#123;        if (path.size() &#x3D;&#x3D; n) &#123;            remain --;            for (int i &#x3D; 0; i &lt; path.size(); i ++) &#123;            printf(&quot;%d&quot;, path[i]);            &#125;            puts(&quot;&quot;);        &#125;        return;    &#125;    if(!stk.empty()) &#123;        path.push_back(stk.top());        stk.pop();        dfs(u, n);        &#x2F;&#x2F; 回溯        stk.push(path.back());        path.pop_back();    &#125;        stk.push(u);    dfs(u + 1, n);    &#x2F;&#x2F; 回溯    stk.pop();&#125;int main() &#123;    cin &gt;&gt; n;        dfs(1, n);        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(2^n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>， 递归每次产生两次分支，一共递归n次，remain作为剪枝。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>栈</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-42.编辑器</title>
    <link href="/2023/02/11/Algorithm/Comp/0x10/20230211-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-042-%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2023/02/11/Algorithm/Comp/0x10/20230211-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-042-%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/130/">算法竞赛进阶指南-42.编辑器</a></p><p>你将要实现一个功能强大的整数序列编辑器。</p><p>在开始时，序列是空的。</p><p>编辑器共有五种指令，如下：</p><p>1、<code>I x</code>，在光标处插入数值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>。<br />2、<code>D</code>，将光标前面的第一个元素删除，如果前面没有元素，则忽略此操作。<br />3、<code>L</code>，将光标向左移动，跳过一个元素，如果左边没有元素，则忽略此操作。<br />4、<code>R</code>，将光标向右移动，跳过一个元素，如果右边没有元素，则忽略此操作。<br />5、<code>Q k</code>，假设此刻光标之前的序列为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_1,a_2,…,a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>a</mi><msub><mi>x</mi><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>k</mi></mrow></msub><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">max_{1 \le i \le k}S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.928509em;vertical-align:-0.24517899999999998em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight">i</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24517899999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mo>+</mo><mo>…</mo><mo>+</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i=a_1+a_2+…+a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行包含一个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">Q</span></span></span></span>，表示指令的总数。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">Q</span></span></span></span> 行，每行一个指令，具体指令格式如题目描述。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>每一个 <code>Q k</code> 指令，输出一个整数作为结果，每个结果占一行。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>Q</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">1 \le Q \le 10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">Q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">|x| \le 10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 \le k \le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">8I 2I -1I 1Q 3LDRQ 2</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">23</code></pre><h3 id="method-对顶栈"><a class="markdownIt-Anchor" href="#method-对顶栈"></a> Method : 对顶栈</h3><p><a href="https://www.luogu.com.cn/problem/P2201">P2201.数列编辑器</a></p><p>维护一个如下图所示的对顶栈，来模拟光标移动：</p><p><img src="/img/article/2023/02/11/2.png" alt="对顶栈" /></p><p>算前缀和的最大值，可以用来动态规划f + idx来写。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;string&gt;#include &lt;vector&gt;#include &lt;stack&gt;#include &lt;iostream&gt;using namespace std;const int N &#x3D; 1e6 + 7;const int INF &#x3D; 0x3f3f3f3f;stack&lt;int&gt; stk_l;stack&lt;int&gt; stk_r;vector&lt;int&gt; sum(N, 0);vector&lt;int&gt; f(N, 0);int idx &#x3D; 0; &#x2F;&#x2F; 光标位置int main() &#123;    f[0] &#x3D; -INF;    int Q;    cin &gt;&gt; Q;    while (Q --) &#123;        string op;        cin &gt;&gt; op;        if (op &#x3D;&#x3D; &quot;I&quot;) &#123;            int x;            scanf(&quot;%d&quot;, &amp;x);            stk_l.push(x);            idx ++;            sum[idx] &#x3D; sum[idx - 1] + stk_l.top();            f[idx] &#x3D; max(f[idx - 1], sum[idx]);        &#125;        else if (op &#x3D;&#x3D; &quot;D&quot;) &#123;            if (!stk_l.empty()) &#123;                stk_l.pop();                idx --;            &#125;        &#125;        else if (op &#x3D;&#x3D; &quot;L&quot;) &#123;            if (!stk_l.empty()) &#123;                int x &#x3D; stk_l.top();                stk_l.pop();                stk_r.push(x);                idx --;            &#125;        &#125;        else if (op &#x3D;&#x3D; &quot;R&quot;) &#123;            if (!stk_r.empty()) &#123;                int x &#x3D;stk_r.top();                stk_r.pop();                stk_l.push(x);                idx ++;                sum[idx] &#x3D; sum [idx - 1] + stk_l.top();                f[idx] &#x3D; max(f[idx - 1], sum[idx]);            &#125;        &#125;        else if (op &#x3D;&#x3D; &quot;Q&quot;) &#123;            int k;            scanf(&quot;%d&quot;, &amp;k);            printf(&quot;%d\n&quot;, f[k]);        &#125;    &#125;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>， 五个操作都是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-41.包含min函数的栈</title>
    <link href="/2023/02/10/Algorithm/Comp/0x10/20230210-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-041-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"/>
    <url>/2023/02/10/Algorithm/Comp/0x10/20230210-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-041-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/90/">算法竞赛进阶指南-41.包含min函数的栈</a></p><p>设计一个支持push，pop，top等操作并且可以在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>时间内检索出最小元素的堆栈。</p><ul><li>push(x)–将元素x插入栈中</li><li>pop()–移除栈顶元素</li><li>top()–得到栈顶元素</li><li>getMin()–得到栈中最小元素</li></ul><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p>操作命令总数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>100</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,100]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">]</span></span></span></span>。</p><h4 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h4><pre class="language-bash" data-language="bash"><code class="language-bash">MinStack minStack &#x3D; new MinStack();minStack.push(-1);minStack.push(3);minStack.push(-4);minStack.getMin();   --&gt; Returns -4.minStack.pop();minStack.top();      --&gt; Returns 3.minStack.getMin();   --&gt; Returns -1.</code></pre><h3 id="method-单调栈"><a class="markdownIt-Anchor" href="#method-单调栈"></a> Method : 单调栈</h3><p>维护一个非严格单调递减栈作为辅助栈，该栈顶为当前栈中的最小值。</p><pre class="language-c++" data-language="c++"><code class="language-c++">class MinStack &#123;public:    stack&lt;int&gt; s_val;    stack&lt;int&gt; s_min;    MinStack() &#123;&#125;        void push(int val) &#123;        s_val.push(val);        if (s_min.empty() || s_min.top() &gt;&#x3D; val) &#123;            s_min.push(val);        &#125;    &#125;        void pop() &#123;        int val &#x3D; s_val.top(); s_val.pop();        if (!s_min.empty() &amp;&amp; s_min.top() &#x3D;&#x3D; val) &#123;            s_min.pop();        &#125;    &#125;        int top() &#123;        return s_val.top();    &#125;        int getMin() &#123;        return s_min.top();    &#125;&#125;;&#x2F;** * Your MinStack object will be instantiated and called as such: * MinStack* obj &#x3D; new MinStack(); * obj-&gt;push(val); * obj-&gt;pop(); * int param_3 &#x3D; obj-&gt;top(); * int param_4 &#x3D; obj-&gt;getMin(); *&#x2F;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>， 四种操作都只有常数次入栈出栈操作，所以时间复杂度都是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，新开了一个单调栈作为辅助，空间开销<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>单调栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-40.任务</title>
    <link href="/2023/02/09/Algorithm/Comp/0x00/20230209-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-040-%E4%BB%BB%E5%8A%A1/"/>
    <url>/2023/02/09/Algorithm/Comp/0x00/20230209-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-040-%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/129/">算法竞赛进阶指南-40.任务</a></p><p>今天某公司有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 个任务需要完成。</p><p>每个任务都有相应的难度级别和完成任务所需时间。</p><p>第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个任务的难度级别为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，完成任务所需时间为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 分钟。</p><p>如果公司完成此任务，他们将获得（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>500</mn><mo>×</mo><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><mn>2</mn><mo>×</mo><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">500 \times x_i + 2 \times y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）美元收入。</p><p>该公司有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 台机器，每台机器都有最长工作时间和级别。</p><p>如果任务所需时间超过机器的最长工作时间，则机器无法完成此任务。</p><p>如果任务难度级别超过机器的级别，则机器无法完成次任务。</p><p>每台机器一天内只能完成一项任务。</p><p>每个任务只能由一台机器完成。</p><p>请为他们设计一个任务分配方案，使得该公司能够最大化他们今天可以完成的任务数量。</p><p>如果有多种解决方案，他们希望选取赚取利润最高的那种。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入包含几个测试用例。</p><p>对于每个测试用例，第一行包含两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>，分别代表机器数量和任务数量。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 行，每行包含两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i,y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，分别代表机器最长工作时间和机器级别。</p><p>再接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 行，每行包含两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i,y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，分别代表完成任务所需时间和任务难度级别。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>对于每个测试用例，输出两个整数，代表公司今天可以完成的最大任务数以及他们将获得的收入。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo separator="true">,</mo><mi>M</mi><mo>≤</mo><mn>100000</mn></mrow><annotation encoding="application/x-tex">1 \le N,M \le 100000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><msub><mi>x</mi><mi>i</mi></msub><mo>&lt;</mo><mn>1440</mn></mrow><annotation encoding="application/x-tex">0 &lt; x_i &lt; 1440</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">4</span><span class="mord">4</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>y</mi><mi>i</mi></msub><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">0 \le y_i \le 100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">1 2100 3100 2100 1</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">1 50004</code></pre><h3 id="method-贪心"><a class="markdownIt-Anchor" href="#method-贪心"></a> Method : 贪心</h3><p>确实难，是二分图的匹配问题，但是本题是完全图，可以用贪心来做, 说实话，这里的set很像</p><p><a href="/2023/01/24/Algorithm/Comp/0x00/20230124-算法竞赛进阶指南-024-防晒/" target="_blank">Acwing-110.防晒</a>中的map，都是有匹配前排序(有序)，匹配后要删除(earse)的需求。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;set&gt;using namespace std;typedef long long LL;struct Task&#123;    int time;    int level;&#125;;struct Mache&#123;    int time;    int level;&#125;;const int N &#x3D; 1e5 + 7;const int M &#x3D; 1e5 + 7;Mache mache[N];Task task[M];int n, m;int main() &#123;    while (cin &gt;&gt; n &gt;&gt; m) &#123;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;            scanf(&quot;%d %d&quot;, &amp;mache[i].time, &amp;mache[i].level);          &#125;        for (int i &#x3D; 0; i &lt; m; i ++) &#123;            scanf(&quot;%d %d&quot;, &amp;task[i].time, &amp;task[i].level);         &#125;                &#x2F;&#x2F; 排序        sort(mache, mache + n, [&amp;](Mache&amp; a, Mache&amp; b) -&gt; bool &#123;            if (a.time &#x3D;&#x3D; b.time) return a.level &lt; b.level;            else return a.time &lt; b.time;            return a.time &lt; b.time;        &#125;);        sort(task, task + m, [&amp;](Task&amp; a, Task&amp; b) -&gt; bool &#123;            if (a.time &#x3D;&#x3D; b.time) return a.level &lt; b.level;            else return a.time &lt; b.time;        &#125;);                int cnt &#x3D; 0;        LL res &#x3D; 0;        multiset&lt;int&gt; st_level; &#x2F;&#x2F; 维护一个有序可重复的集合                                &#x2F;&#x2F; 为什么不直接用数组 + sort？ 因为后续还要删掉其中的一个元素        &#x2F;&#x2F; 以任务为主体        for (int i &#x3D; m - 1, j &#x3D; n - 1; i &gt;&#x3D; 0; i --) &#123;            while (j &gt;&#x3D; 0 &amp;&amp; mache[j].time &gt;&#x3D; task[i].time) &#123;                st_level.insert(mache[j].level);                j --;            &#125;            &#x2F;&#x2F; 存在任务且任务可被执行            auto it &#x3D; st_level.lower_bound(task[i].level);            if (it !&#x3D; st_level.end()) &#123;                res +&#x3D; 500 * task[i].time + 2 * task[i].level;                cnt ++;                st_level.erase(it);            &#125;                    &#125;                cout &lt;&lt; cnt &lt;&lt; &quot; &quot; &lt;&lt; res &lt;&lt; endl;       &#125;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(max(n\log n, m\log n))}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span>， 其中前面的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>是sort的时间复杂度,后面的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>是m次<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">for</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>循环 * 里面<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mi mathvariant="normal">_</mi><mi>b</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">lower\_bound</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00444em;vertical-align:-0.31em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span></span></span></span>的时间复杂度。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>N</mi><mo separator="true">,</mo><mi>M</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(max(N, M)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023-02-09-组会</title>
    <link href="/2023/02/08/Seminar/20230209-%E7%BB%84%E4%BC%9A/"/>
    <url>/2023/02/08/Seminar/20230209-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="论文分享"><a class="markdownIt-Anchor" href="#论文分享"></a> 论文分享</h2><h3 id="qpdet"><a class="markdownIt-Anchor" href="#qpdet"></a> QPDet</h3><p><img src="/img/article/2023/02/08/3.png" alt="" /></p><h4 id="quadrant-point-representation"><a class="markdownIt-Anchor" href="#quadrant-point-representation"></a> Quadrant Point Representation</h4><p>象限点表达方式:</p><p><img src="/img/article/2023/02/08/2.png" alt="" /></p><p><img src="/img/article/2023/02/08/4.png" alt="" /></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>r</mi><mn>2</mn></msup><mo>=</mo><mo stretchy="false">(</mo><mi>w</mi><mi mathvariant="normal">/</mi><mn>2</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi>h</mi><mi mathvariant="normal">/</mi><mn>2</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">r^2 = (w/ 2) ^ 2 + (h / 2) ^ 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord">/</span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mord">/</span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>α</mi></mrow><annotation encoding="application/x-tex">\Delta \alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span> 是相对于最上边的点的偏移量，  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>β</mi></mrow><annotation encoding="application/x-tex">\Delta \beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>是相对于最右边的点的偏移量 ，都是弧度</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(v_1,v_2,v_3,v_4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>r</mi><mo separator="true">,</mo><mi mathvariant="normal">Δ</mi><mi>α</mi><mo separator="true">,</mo><mi mathvariant="normal">Δ</mi><mi>β</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{(x, y, r, \Delta \alpha, \Delta \beta)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span></span></span></span></span>的转换关系：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>v</mi><mn>1</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>r</mi><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>α</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mi>r</mi><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>α</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>v</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>r</mi><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>β</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>y</mi><mo>+</mo><mi>r</mi><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>β</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>v</mi><mn>3</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>r</mi><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>α</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>y</mi><mo>+</mo><mi>r</mi><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>α</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>v</mi><mn>4</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>r</mi><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>β</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mi>r</mi><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>β</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{\begin{array}{l}v_1=(x+r \sin (\Delta \alpha), y-r \cos (\Delta \alpha)) \\ v_2=(x+r \cos (\Delta \beta), y+r \sin (\Delta \beta)) \\ v_3=(x-r \sin (\Delta \alpha), y+r \cos (\Delta \alpha)) \\ v_4=(x-r \cos (\Delta \beta), y-r \sin (\Delta \beta))\end{array}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80004em;vertical-align:-2.15002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65002em;"><span style="top:-1.8999899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.8999899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1999899999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.90002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>encoder-decoder编码转换:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>δ</mi><mi>x</mi></msub><mo>=</mo><mrow><mo fence="true">(</mo><msup><mi>x</mi><mo>∗</mo></msup><mo>−</mo><msub><mi>x</mi><mi>a</mi></msub><mo fence="true">)</mo></mrow><mi mathvariant="normal">/</mi><mn>2</mn><msub><mi>r</mi><mi>a</mi></msub><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>τ</mi><mi>x</mi></msub><mo>=</mo><mrow><mo fence="true">(</mo><msup><mi>x</mi><mo mathvariant="normal">′</mo></msup><mo>−</mo><msub><mi>x</mi><mi>a</mi></msub><mo fence="true">)</mo></mrow><mi mathvariant="normal">/</mi><mn>2</mn><msub><mi>r</mi><mi>a</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>δ</mi><mi>y</mi></msub><mo>=</mo><mrow><mo fence="true">(</mo><msup><mi>y</mi><mo>∗</mo></msup><mo>−</mo><msub><mi>y</mi><mi>a</mi></msub><mo fence="true">)</mo></mrow><mi mathvariant="normal">/</mi><mn>2</mn><msub><mi>r</mi><mi>a</mi></msub><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>τ</mi><mi>y</mi></msub><mo>=</mo><mrow><mo fence="true">(</mo><msup><mi>y</mi><mo mathvariant="normal">′</mo></msup><mo>−</mo><msub><mi>y</mi><mi>a</mi></msub><mo fence="true">)</mo></mrow><mi mathvariant="normal">/</mi><mn>2</mn><msub><mi>r</mi><mi>a</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>δ</mi><mi>r</mi></msub><mo>=</mo><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msup><mi>r</mi><mo>∗</mo></msup><mi mathvariant="normal">/</mi><msub><mi>r</mi><mi>a</mi></msub><mo fence="true">)</mo></mrow><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>τ</mi><mi>r</mi></msub><mo>=</mo><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msup><mi>r</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">/</mi><msub><mi>r</mi><mi>a</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>δ</mi><mi>α</mi></msub><mo>=</mo><mi mathvariant="normal">Δ</mi><msup><mi>α</mi><mo>∗</mo></msup><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>τ</mi><mi>α</mi></msub><mo>=</mo><mi mathvariant="normal">Δ</mi><msup><mi>α</mi><mo mathvariant="normal">′</mo></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>δ</mi><mi>β</mi></msub><mo>=</mo><mi mathvariant="normal">Δ</mi><msup><mi>β</mi><mo>∗</mo></msup><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>τ</mi><mi>β</mi></msub><mo>=</mo><mi mathvariant="normal">Δ</mi><msup><mi>β</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}\delta_x=\left(x^*-x_a\right) / 2 r_a, &amp; \tau_x=\left(x^{\prime}-x_a\right) / 2 r_a \\ \delta_y=\left(y^*-y_a\right) / 2 r_a, &amp; \tau_y=\left(y^{\prime}-y_a\right) / 2 r_a \\ \delta_r=\log \left(r^* / r_a\right), &amp; \tau_r=\log \left(r^{\prime} / r_a\right) \\ \delta_\alpha=\Delta \alpha^*, &amp; \tau_\alpha=\Delta \alpha^{\prime} \\ \delta_\beta=\Delta \beta^*, &amp; \tau_\beta=\Delta \beta^{\prime} .\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.2000399999999996em;vertical-align:-3.3500199999999998em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8500199999999998em;"><span style="top:-0.6999900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-0.6999900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.9999899999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.29999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.59999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.89999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.90001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.200010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.50001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.80001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.100019999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8500000000000005em;"><span style="top:-5.850000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">/</span><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span><span style="top:-4.410000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">/</span><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span><span style="top:-2.9700000000000006em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mpunct">,</span></span></span><span style="top:-0.08999999999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8500000000000005em;"><span style="top:-5.850000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">/</span><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.410000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">/</span><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.9700000000000006em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-0.08999999999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h4 id="result"><a class="markdownIt-Anchor" href="#result"></a> Result</h4><p>多尺度训练的精度(Backbone都是Res50-FPN,) Oriented-RCNN是80.87, QPDet是81.00.</p><p>无多尺度(Res50-FPN)   Oriented-RCNN是75.87 ; QPDet是76.25</p><p><img src="/img/article/2023/02/08/5.png" alt="" /></p><h3 id="free3det"><a class="markdownIt-Anchor" href="#free3det"></a> Free3Det</h3><p><img src="/img/article/2023/02/08/6.png" alt="" /></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>是一个采样点，而不是中心点</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>l</mi><mo separator="true">,</mo><mi>t</mi><mo separator="true">,</mo><mi>r</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(l, t, r ,d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span></span>是到外接矩形的距离，就确定了外接矩形的形状</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>o</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>o</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>o</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>o</mi><mn>4</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(o_1, o_2, o_3, o_4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>就能间接表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>4</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(s_1, s_2, s_3, s_4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，从而确定了旋转矩形框的顶点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(v_1,v_2, v_3, v_4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(v_1,v_2,v_3,v_4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>l</mi><mo separator="true">,</mo><mi>t</mi><mo separator="true">,</mo><mi>r</mi><mo separator="true">,</mo><mi>d</mi><mo separator="true">,</mo><msub><mi>o</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>o</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>o</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>o</mi><mn>4</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{(x, y,l, t, r ,d, o_1, o_2, o_3, o_4)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>的转换关系：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi mathvariant="bold-italic">v</mi><mn mathvariant="bold">1</mn></msub><mo>=</mo><mrow><mo fence="true">(</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>+</mo><msub><mi>o</mi><mn>1</mn></msub><mo>∗</mo><mi>l</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>o</mi><mn>1</mn></msub><mo>&lt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>+</mo><msub><mi>o</mi><mn>1</mn></msub><mo>∗</mo><mi>r</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>o</mi><mn>1</mn></msub><mo>≥</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><mo separator="true">,</mo><mspace width="1em"/><mi>y</mi><mo>−</mo><mi>t</mi><mo fence="true">)</mo></mrow></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi mathvariant="bold-italic">v</mi><mn mathvariant="bold">2</mn></msub><mo>=</mo><mrow><mo fence="true">(</mo><mi>x</mi><mo>+</mo><mi>r</mi><mo separator="true">,</mo><mspace width="1em"/><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>+</mo><msub><mi>o</mi><mn>2</mn></msub><mo>∗</mo><mi>t</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>o</mi><mn>2</mn></msub><mo>&lt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>+</mo><msub><mi>o</mi><mn>2</mn></msub><mo>∗</mo><mi>d</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>o</mi><mn>2</mn></msub><mo>≥</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi mathvariant="bold-italic">v</mi><mn mathvariant="bold">3</mn></msub><mo>=</mo><mrow><mo fence="true">(</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>+</mo><msub><mi>o</mi><mn>3</mn></msub><mo>∗</mo><mi>l</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>o</mi><mn>3</mn></msub><mo>&lt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>+</mo><msub><mi>o</mi><mn>3</mn></msub><mo>∗</mo><mi>r</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>o</mi><mn>3</mn></msub><mo>≥</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><mo separator="true">,</mo><mspace width="1em"/><mi>y</mi><mo>+</mo><mi>d</mi><mo fence="true">)</mo></mrow></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><msub><mi mathvariant="bold-italic">v</mi><mn mathvariant="bold">4</mn></msub><mo>=</mo><mrow><mo fence="true">(</mo><mi>x</mi><mo>−</mo><mi>l</mi><mo separator="true">,</mo><mspace width="1em"/><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>+</mo><msub><mi>o</mi><mn>4</mn></msub><mo>∗</mo><mi>t</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>o</mi><mn>4</mn></msub><mo>&lt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>+</mo><msub><mi>o</mi><mn>4</mn></msub><mo>∗</mo><mi>d</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>o</mi><mn>4</mn></msub><mo>≥</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} &amp; \boldsymbol{v}_{\mathbf{1}}=\left(\left\{\begin{array}{ll}x+o_1 * l, &amp; o_1&lt;0 \\ x+o_1 * r, &amp; o_1 \geq 0\end{array}, \quad y-t\right)\right. \\ &amp; \boldsymbol{v}_{\mathbf{2}}=\left(x+r, \quad\left\{\begin{array}{ll}y+o_2 * t, &amp; o_2&lt;0 \\ y+o_2 * d, &amp; o_2 \geq 0\end{array}\right)\right. \\ &amp; \boldsymbol{v}_{\mathbf{3}}=\left(\left\{\begin{array}{ll}x+o_3 * l, &amp; o_3&lt;0 \\ x+o_3 * r, &amp; o_3 \geq 0\end{array}, \quad y+d\right)\right. \\ &amp; \boldsymbol{v}_{\mathbf{4}}=\left(x-l, \quad\left\{\begin{array}{ll}y+o_4 * t, &amp; o_4&lt;0 \\ y+o_4 * d, &amp; o_4 \geq 0\end{array}\right)\right. \\ &amp; \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:12.30012em;vertical-align:-5.900059999999999em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.40006em;"><span style="top:-8.40006em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span><span style="top:-5.70003em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span><span style="top:-3.0000000000000004em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span><span style="top:-0.2999700000000014em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span><span style="top:1.7900599999999987em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.900059999999999em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.40006em;"><span style="top:-8.40006em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathbf mtight">1</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">t</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-5.70003em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathbf mtight">2</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">t</span><span class="mpunct">,</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.0000000000000004em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathbf mtight">3</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-0.2999700000000014em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathbf mtight">4</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">t</span><span class="mpunct">,</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:1.7900599999999987em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.900059999999999em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="result-2"><a class="markdownIt-Anchor" href="#result-2"></a> Result</h4><p>无多尺度(Res50-FPN)   73.36</p><p><img src="/img/article/2023/02/08/7.png" alt="" /></p><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3>]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-39.最大的和</title>
    <link href="/2023/02/08/Algorithm/Comp/0x00/20230208-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-039-%E6%9C%80%E5%A4%A7%E7%9A%84%E5%92%8C/"/>
    <url>/2023/02/08/Algorithm/Comp/0x00/20230208-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-039-%E6%9C%80%E5%A4%A7%E7%9A%84%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/128/">算法竞赛进阶指南-39.最大的和</a></p><p>给定一个包含整数的二维矩阵，子矩形是位于整个阵列内的任何大小为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1 \times 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 或更大的连续子阵列。</p><p>矩形的总和是该矩形中所有元素的总和。</p><p>在这个问题中，具有最大和的子矩形被称为最大子矩形。</p><p>例如，下列数组：</p><pre class="language-diff" data-language="diff"><code class="language-diff">0 -2 -7 0 9 2 -6 2 -4 1 -4 1 -1 8 0 -2</code></pre><p>其最大子矩形为：</p><pre class="language-diff" data-language="diff"><code class="language-diff">9 2 -4 1 -1 8</code></pre><p>它拥有最大和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>15</mn></mrow><annotation encoding="application/x-tex">15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">5</span></span></span></span>。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入中将包含一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>×</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">N \times N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 的整数数组。</p><p>第一行只输入一个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>，表示方形二维数组的大小。</p><p>从第二行开始，输入由空格和换行符隔开的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 个整数，它们即为二维数组中的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 个元素，输入顺序从二维数组的第一行开始向下逐行输入，同一行数据从左向右逐个输入。</p><p>数组中的数字会保持在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>127</mn><mo separator="true">,</mo><mn>127</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-127,127]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mord">2</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">7</span><span class="mclose">]</span></span></span></span> 的范围内。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出一个整数，代表最大子矩形的总和。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">1 \le N \le 100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-diff" data-language="diff"><code class="language-diff">40 -2 -7 0 9 2 -6 2-4 1 -4  1 -18  0 -2</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">15</code></pre><h3 id="method1-二维前缀和"><a class="markdownIt-Anchor" href="#method1-二维前缀和"></a> Method1 : 二维前缀和</h3><p>二维前缀和模板题</p><p>预处理完二维前缀和后，前两层for循环枚举长方形的宽高，后两层for循环枚举长方形的右下角坐标,求max</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;const int N &#x3D; 100 + 7;const int INF &#x3D; 0x3f3f3f3f;int g[N][N];int main() &#123;    memset(g, 0, sizeof g);        int n;    cin &gt;&gt; n;        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        for (int j &#x3D; 1; j &lt;&#x3D; n; j ++) &#123;            cin &gt;&gt; g[i][j];        &#125;    &#125;        &#x2F;&#x2F; 前缀和    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        for (int j &#x3D; 0; j &lt;&#x3D; n; j ++) &#123;            g[i][j] +&#x3D; g[i - 1][j] + g[i][j - 1] - g[i - 1][j - 1];        &#125;    &#125;        int res &#x3D; -INF;    &#x2F;&#x2F; 枚举宽高    for (int h &#x3D; 1; h &lt;&#x3D; n; h ++) &#123;        for (int w &#x3D; 1; w &lt;&#x3D; n; w ++) &#123;            &#x2F;&#x2F; 枚举长方形的右下坐标            for (int i &#x3D; h; i &lt;&#x3D; n; i ++) &#123;                for (int j &#x3D; w; j &lt;&#x3D; n; j ++) &#123;                    int cur &#x3D; g[i][j] - g[i][j - w] - g[i - h][j] + g[i - h][j - w];                    res &#x3D; max(res, cur);                &#125;            &#125;        &#125;    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>4</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n^4)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">n^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>为四层for循环的时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n^2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>，空间消耗主要在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo stretchy="false">[</mo><mi>N</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>N</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">g[N][N]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">]</span></span></span></span>。</p></li></ul><h3 id="method2-贪心-dp"><a class="markdownIt-Anchor" href="#method2-贪心-dp"></a> Method2: 贪心 + DP</h3><p>先枚举列的上界和下界，然后把当前的该列[上界，下界]之和看作一个数，之后可以借鉴求一维数组的最大子数组之和的DP思路，把时间复杂度优化成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;const int N &#x3D; 100 + 7;const int INF &#x3D; 0x3f3f3f3f3f;int g[N][N];int main() &#123;    int n;    cin &gt;&gt; n;        for (int i &#x3D; 1; i &lt;&#x3D; n ; i ++) &#123;        for (int j &#x3D; 1; j &lt;&#x3D; n; j ++) &#123;            cin &gt;&gt; g[i][j];            g[i][j] +&#x3D; g[i - 1][j];        &#125;    &#125;        int res &#x3D; -INF;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        for (int j &#x3D; i; j &lt;&#x3D; n; j ++) &#123;            int last &#x3D; 0;            for (int k &#x3D; 1; k &lt;&#x3D; n; k ++) &#123;                int cur &#x3D; g[j][k] - g[i - 1][k];                 if (last &lt; 0) last &#x3D; cur;                else last +&#x3D; cur;                res &#x3D; max(res, last);            &#125;                    &#125;    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析-2"><a class="markdownIt-Anchor" href="#复杂度分析-2"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n^3)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">n^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>为三层for循环的时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n^2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>，空间消耗主要在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo stretchy="false">[</mo><mi>N</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>N</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">g[N][N]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">]</span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>递推</tag>
      
      <tag>枚举</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode杂记</title>
    <link href="/2023/02/07/Algorithm/LeetCode/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    <url>/2023/02/07/Algorithm/LeetCode/%E7%AC%94%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="删除最短的子数组使剩余数组有序"><a class="markdownIt-Anchor" href="#删除最短的子数组使剩余数组有序"></a> 删除最短的子数组使剩余数组有序</h4><p>阿里笔试</p><p><a href="https://leetcode.cn/problems/shortest-subarray-to-be-removed-to-make-array-sorted/">https://leetcode.cn/problems/shortest-subarray-to-be-removed-to-make-array-sorted/</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int findLengthOfShortestSubarray(vector&lt;int&gt;&amp; arr) &#123;        int n &#x3D; arr.size();        int left &#x3D; 0 ,right &#x3D; n;        while (left &lt; n - 1 &amp;&amp; arr[left] &lt;&#x3D; arr[left + 1])            left++;        int remain &#x3D; left + 1;        while (left &lt; right - 1 &amp;&amp; (right &#x3D;&#x3D; n || arr[right] &gt;&#x3D; arr[right - 1])) &#123;            right--;            while (left &gt;&#x3D; 0 &amp;&amp; arr[left] &gt; arr[right])                left--;            remain &#x3D; max(left + n - right + 1, remain);        &#125;        return n - remain;    &#125;&#125;;</code></pre><h4 id="将数组拆分成斐波那契序列"><a class="markdownIt-Anchor" href="#将数组拆分成斐波那契序列"></a> 将数组拆分成斐波那契序列</h4><p>这题很坑：<code>0 &lt;= f[i] &lt; 2^31</code></p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    using int64 &#x3D; long long;    vector&lt;int&gt; splitIntoFibonacci(string num) &#123;        vector&lt;int&gt; res;        dfs(res, num, 0, 0, 0);        return res;    &#125;    bool dfs(vector&lt;int&gt;&amp; res, string num, int64 sum, int idx, int pre) &#123;        if (idx &#x3D;&#x3D; num.size()) &#123;            return res.size() &gt;&#x3D; 3;        &#125;        if (num[idx] &#x3D;&#x3D; &#39;0&#39;) &#123;            if (res.size() &gt;&#x3D; 2) &#123;                if (0 !&#x3D; sum) return false;             &#125;            res.emplace_back(0);            if (dfs(res, num, pre + 0, idx + 1, 0)) return true;            res.pop_back();            return false;        &#125;                int64 cur &#x3D; 0;        for (int i &#x3D; idx; i &lt; num.size(); ++i) &#123;            cur &#x3D; cur * 10 + num[i] - &#39;0&#39;;            if (cur &gt; INT_MAX) break;            if(res.size() &gt;&#x3D;2 )&#123;                if(cur &lt; sum) continue;                else if(cur&gt; sum) break;            &#125;            res.emplace_back(cur);            if (dfs(res, num, pre + cur, i + 1, cur)) return true;            res.pop_back();        &#125;        return false;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-38.耍杂技的牛</title>
    <link href="/2023/02/07/Algorithm/Comp/0x00/20230207-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-038-%E8%80%8D%E6%9D%82%E6%8A%80%E7%9A%84%E7%89%9B/"/>
    <url>/2023/02/07/Algorithm/Comp/0x00/20230207-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-038-%E8%80%8D%E6%9D%82%E6%8A%80%E7%9A%84%E7%89%9B/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/127/">算法竞赛进阶指南-38.耍杂技的牛</a></p><p>农民约翰的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 头奶牛（编号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1..</mn><mi>N</mi></mrow><annotation encoding="application/x-tex">1..N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>）计划逃跑并加入马戏团，为此它们决定练习表演杂技。</p><p>奶牛们不是非常有创意，只提出了一个杂技表演：</p><p>叠罗汉，表演时，奶牛们站在彼此的身上，形成一个高高的垂直堆叠。</p><p>奶牛们正在试图找到自己在这个堆叠中应该所处的位置顺序。</p><p>这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 头奶牛中的每一头都有着自己的重量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">W_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 以及自己的强壮程度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>一头牛支撑不住的可能性取决于它头上所有牛的总重量（不包括它自己）减去它的身体强壮程度的值，现在称该数值为风险值，风险值越大，这只牛撑不住的可能性越高。</p><p>您的任务是确定奶牛的排序，使得所有奶牛的风险值中的最大值尽可能的小。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行输入整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>，表示奶牛数量。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 行，每行输入两个整数，表示牛的重量和强壮程度，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 行表示第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 头牛的重量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">W_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 以及它的强壮程度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出一个整数，表示最大风险值的最小可能值。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>50000</mn></mrow><annotation encoding="application/x-tex">1 \le N \le 50000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>W</mi><mi>i</mi></msub><mo>≤</mo><mn>10</mn><mo separator="true">,</mo><mn>000</mn></mrow><annotation encoding="application/x-tex">1 \le W_i \le 10,000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>S</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><mo separator="true">,</mo><mn>000</mn><mo separator="true">,</mo><mn>000</mn><mo separator="true">,</mo><mn>000</mn></mrow><annotation encoding="application/x-tex">1 \le S_i \le 1,000,000,000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">310 32 53 3</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">2</code></pre><h3 id="method-贪心"><a class="markdownIt-Anchor" href="#method-贪心"></a> Method : 贪心</h3><p>本题是贪心问题，这种问题的证明比较难想，但是最佳贪心策略是按牛的重量和强壮程度相加进行排序</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int INF &#x3D; 0x3f3f3f3f;int n;vector&lt;PII&gt; cows;int main() &#123;    cin &gt;&gt; n;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        int w, s;        scanf(&quot;%d %d&quot;, &amp;w, &amp;s);        cows.push_back(&#123;w, s&#125;);    &#125;    sort(cows.begin(),cows.end(), [&amp;](const PII&amp;a,  const PII&amp; b) -&gt; bool&#123;       return a.first + a.second &lt; b.first + b.second;    &#125;);    int res &#x3D; -INF, sum &#x3D; 0;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        res &#x3D; max(res, sum - cows[i].second);        sum +&#x3D; cows[i].first;    &#125;    cout &lt;&lt; res &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n\log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>为sort排序的时间复杂度。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-37.数的进制转换</title>
    <link href="/2023/02/06/Algorithm/Comp/0x00/20230206-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-037-%E6%95%B0%E7%9A%84%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <url>/2023/02/06/Algorithm/Comp/0x00/20230206-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-037-%E6%95%B0%E7%9A%84%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/126/">算法竞赛进阶指南-37.数的进制转换</a></p><p>编写一个程序，可以实现将一个数字由一个进制转换为另一个进制。</p><p>这里有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>62</mn></mrow><annotation encoding="application/x-tex">62</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">2</span></span></span></span> 个不同数位 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><mn>0</mn><mo>−</mo><mn>9</mn><mo separator="true">,</mo><mi>A</mi><mo>−</mo><mi>Z</mi><mo separator="true">,</mo><mi>a</mi><mo>−</mo><mi>z</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{0-9,A-Z,a-z\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">9</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">}</span></span></span></span>。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行输入一个整数，代表接下来的行数。</p><p>接下来每一行都包含三个数字，首先是输入进制（十进制表示），然后是输出进制（十进制表示），最后是用输入进制表示的输入数字，数字之间用空格隔开。</p><p>输入进制和输出进制都在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>62</mn></mrow><annotation encoding="application/x-tex">62</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">2</span></span></span></span> 的范围之内。</p><p>（在十进制下）<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><mn>10</mn><mi mathvariant="normal">，</mi><mi>B</mi><mo>=</mo><mn>11</mn><mi mathvariant="normal">，</mi><mo>…</mo><mi mathvariant="normal">，</mi><mi>Z</mi><mo>=</mo><mn>35</mn><mi mathvariant="normal">，</mi><mi>a</mi><mo>=</mo><mn>36</mn><mi mathvariant="normal">，</mi><mi>b</mi><mo>=</mo><mn>37</mn><mi mathvariant="normal">，</mi><mo>…</mo><mi mathvariant="normal">，</mi><mi>z</mi><mo>=</mo><mn>61</mn></mrow><annotation encoding="application/x-tex">A = 10，B = 11，…，Z = 35，a = 36，b = 37，…，z = 61</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">5</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">6</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">7</span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">1</span></span></span></span> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>−</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">0-9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span></span></span></span> 仍然表示 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>−</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">0-9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span></span></span></span>)。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>对于每一组进制转换，程序的输出都由三行构成。</p><p>第一行包含两个数字，首先是输入进制（十进制表示），然后是用输入进制表示的输入数字。</p><p>第二行包含两个数字，首先是输出进制（十进制表示），然后是用输出进制表示的输入数字。</p><p>第三行为空白行。</p><p>同一行内数字用空格隔开。</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">862 2 abcdefghiz10 16 123456789012345678901234567890123456789016 35 3A0C92075C0DBF3B8ACBC5F96CE3F0AD235 23 333YMHOUE8JPLT7OX6K9FYCQ8A23 49 946B9AA02MI37E3D3MMJ4G7BL2F0549 61 1VbDkSIMJL3JjRgAdlUfcaWj61 5 dl9MDSWqwHjDnToKcsWE1S5 10 42104444441001414401221302402201233340311104212022133030</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">62 abcdefghiz2 1101110000010001011111001001011001111100100110001101001000110 123456789012345678901234567890123456789016 3A0C92075C0DBF3B8ACBC5F96CE3F0AD216 3A0C92075C0DBF3B8ACBC5F96CE3F0AD235 333YMHOUE8JPLT7OX6K9FYCQ8A35 333YMHOUE8JPLT7OX6K9FYCQ8A23 946B9AA02MI37E3D3MMJ4G7BL2F0523 946B9AA02MI37E3D3MMJ4G7BL2F0549 1VbDkSIMJL3JjRgAdlUfcaWj49 1VbDkSIMJL3JjRgAdlUfcaWj61 dl9MDSWqwHjDnToKcsWE1S61 dl9MDSWqwHjDnToKcsWE1S5 421044444410014144012213024022012333403111042120221330305 4210444444100141440122130240220123334031110421202213303010 1234567890123456789012345678901234567890</code></pre><h3 id="method-高精度"><a class="markdownIt-Anchor" href="#method-高精度"></a> Method : 高精度</h3><h4 id="a10b"><a class="markdownIt-Anchor" href="#a10b"></a> A=&gt;10=&gt;B</h4><p>因为int的输出默认就是10进制表示的，因此很好写</p><p>秦九韶算法： A进制 =&gt; 10进制</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>101010</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub><mo>=</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>5</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>4</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mo stretchy="false">(</mo><mn>42</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">(101010)_2=1 * 2^5+0 * 2^4+1 * 2^3+0 * 2^2+1 * 2^1+0 * 2^0=(42)_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">4</span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><pre class="language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; arr;long long res &#x3D; 0; &#x2F;&#x2F; 这里要考虑用64位整形能否存得下for (int i &#x3D; 0; i &lt; arr.size(); i ++) &#123;res &#x3D; res * A + arr[i];&#125;</code></pre><p>短除法 :  10进制 =&gt; B进制</p><p><img src="/img/article/2023/02/06/2.png" alt="" /></p><pre class="language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; res;for (; n; n &#x2F;&#x3D; b) &#123;res.push_back(n % B);&#125;&#x2F;&#x2F; 此时res是倒序存储的reverse(res.begin(), res.end());</code></pre><h4 id="ab"><a class="markdownIt-Anchor" href="#ab"></a> A=&gt;B</h4><p>可以直接 短除法 + 高精度除法模拟，实现从A进制转换到B进制</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;string&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int to_num(char c) &#123;    if (&#39;0&#39; &lt;&#x3D; c &amp;&amp; c &lt;&#x3D; &#39;9&#39;) return c - &#39;0&#39;;    if (&#39;A&#39; &lt;&#x3D; c &amp;&amp; c &lt;&#x3D; &#39;Z&#39;) return c - &#39;A&#39; + 10;    if(&#39;a&#39; &lt;&#x3D; c &amp;&amp; c &lt;&#x3D; &#39;z&#39;) return c - &#39;a&#39; + 36;&#125;char to_char(int n) &#123;    if (0 &lt;&#x3D; n &amp;&amp; n &lt;&#x3D; 9) return n + &#39;0&#39;;    if (10 &lt;&#x3D; n &amp;&amp; n &lt;&#x3D; 35) return n - 10 + &#39;A&#39;;    if(36 &lt;&#x3D; n &amp;&amp; n &lt;&#x3D; 61) return n - 36 + &#39;a&#39;;&#125;string trans(string in_num, int in, int out) &#123;    string out_num;    while (in_num.size()) &#123;        int r &#x3D; 0; &#x2F;&#x2F; 余数        &#x2F;&#x2F; 直接从高位开始处理        for (int i &#x3D; 0; i &lt; in_num.size(); i ++) &#123;             int num_i &#x3D; to_num(in_num[i]);             num_i &#x3D; r * in + num_i;             in_num[i] &#x3D; to_char(num_i &#x2F; out); &#x2F;&#x2F; 商             r &#x3D; num_i % out; &#x2F;&#x2F;余数        &#125;        out_num +&#x3D; to_char(r);        &#x2F;&#x2F; 去掉高位的0        while (in_num.size() &amp;&amp; in_num.front() &#x3D;&#x3D; &#39;0&#39;) in_num.erase(0, 1);    &#125;    reverse(out_num.begin(), out_num.end());    return out_num;&#125;int main() &#123;    int T;    cin &gt;&gt; T;    while (T --) &#123;        int in, out;        string in_num;        cin &gt;&gt; in &gt;&gt; out;        cin &gt;&gt; in_num;        string out_num &#x3D; trans(in_num, in, out);        cout &lt;&lt; in &lt;&lt; &quot; &quot; &lt;&lt; in_num &lt;&lt; endl;        cout &lt;&lt; out &lt;&lt; &quot; &quot; &lt;&lt; out_num &lt;&lt; endl;        puts(&quot;&quot;);    &#125;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>T</mi><mo>∗</mo><mi>C</mi><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(T * C *n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 很难确定，因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">trans</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span></span></span></span>函数的while循环的迭代次数与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">out</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span></span></span></span>进制相关，因此用了一个大常数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span>表示，而且本题也不太需要考虑时间复杂度，只需要保证转换后的正确性即可。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul><p>记录一下思考过程~</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;string&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;&#x2F;&#x2F; vector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r, int base) &#123;&#x2F;&#x2F;     vector&lt;int&gt; C;    &#x2F;&#x2F;     r &#x3D; 0;&#x2F;&#x2F;     &#x2F;&#x2F; 从高位处理&#x2F;&#x2F;     for (int i &#x3D; A.size() - 1; i &gt;&#x3D; 0; i --) &#123;&#x2F;&#x2F;         r &#x3D; r * base + A[i];&#x2F;&#x2F;         C.push_back(r &#x2F; b);&#x2F;&#x2F;         r %&#x3D; b;&#x2F;&#x2F;     &#125;    &#x2F;&#x2F;     reverse(C.begin(), C.end());&#x2F;&#x2F;     while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0) C.pop_back();&#x2F;&#x2F;     return C;&#x2F;&#x2F; &#125;int to_num(char c) &#123;    if (&#39;0&#39; &lt;&#x3D; c &amp;&amp; c &lt;&#x3D; &#39;9&#39;) return c - &#39;0&#39;;    if (&#39;A&#39; &lt;&#x3D; c &amp;&amp; c &lt;&#x3D; &#39;Z&#39;) return c - &#39;A&#39; + 10;    if(&#39;a&#39; &lt;&#x3D; c &amp;&amp; c &lt;&#x3D; &#39;z&#39;) return c - &#39;a&#39; + 36;&#125;char to_char(int n) &#123;    if (0 &lt;&#x3D; n &amp;&amp; n &lt;&#x3D; 9) return n + &#39;0&#39;;    if (10 &lt;&#x3D; n &amp;&amp; n &lt;&#x3D; 35) return n - 10 + &#39;A&#39;;    if(36 &lt;&#x3D; n &amp;&amp; n &lt;&#x3D; 61) return n - 36 + &#39;a&#39;;&#125;string trans(string in_num, int in, int out) &#123;    string out_num;        while (in_num.size()) &#123;        int r &#x3D; 0; &#x2F;&#x2F; 余数        for (int i &#x3D; 0; i &lt; in_num.size(); i ++) &#123;             int num_i &#x3D; to_num(in_num[i]);             num_i &#x3D; r * in + num_i;             in_num[i] &#x3D; to_char(num_i &#x2F; out); &#x2F;&#x2F; 商             r &#x3D; num_i % out; &#x2F;&#x2F;余数            &#x2F;&#x2F;  cout &lt;&lt; num_i &lt;&lt; endl;        &#125;        &#x2F;&#x2F; cout &lt;&lt; &quot;------&quot; &lt;&lt; endl;        out_num +&#x3D; to_char(r);                &#x2F;&#x2F; 去掉高位的0        while (in_num.size() &amp;&amp; in_num.front() &#x3D;&#x3D; &#39;0&#39;) in_num.erase(0, 1);                &#x2F;&#x2F; 去掉高位的0        &#x2F;&#x2F; reverse(in_num.begin(), in_num.end());        &#x2F;&#x2F; while (in_num.size() &amp;&amp; in_num.back() &#x3D;&#x3D; &#39;0&#39;) in_num.pop_back();        &#x2F;&#x2F; reverse(in_num.begin(), in_num.end());    &#125;        &#x2F;&#x2F; cout &lt;&lt; &quot;----&quot; &lt;&lt; endl;    &#x2F;&#x2F; 直接从高位开始处理    &#x2F;&#x2F; for (int i &#x3D; 0 ; i &lt; in_num.size(); i ++) &#123;    &#x2F;&#x2F;     int num_i &#x3D; to_num(in_num[i]);            &#x2F;&#x2F;     &#x2F;&#x2F; cout &lt;&lt; num_i &lt;&lt; endl;    &#x2F;&#x2F;     &#x2F;&#x2F; r &#x3D; r * in + num_i;    &#x2F;&#x2F;     &#x2F;&#x2F; out_num.push_back(to_char(r &#x2F; out));    &#x2F;&#x2F;     &#x2F;&#x2F; r %&#x3D; out;    &#x2F;&#x2F; &#125;        &#x2F;&#x2F; while (out_num.size() &gt; 1 &amp;&amp; out_num.back() &#x3D;&#x3D; 0) out_num.pop_back();    reverse(out_num.begin(), out_num.end());        return out_num;&#125;int main() &#123;    int T;    cin &gt;&gt; T;        while (T --) &#123;        int in, out;        string in_num;        &#x2F;&#x2F; scanf(&quot;%d %d &quot;, &amp;in, &amp;out);        &#x2F;&#x2F; cin &gt;&gt; in_num;        cin &gt;&gt; in &gt;&gt; out;        &#x2F;&#x2F; getchar();        cin &gt;&gt; in_num;                        string out_num &#x3D; trans(in_num, in, out);                &#x2F;&#x2F; cout &lt;&lt; in_num &lt;&lt; endl;        cout &lt;&lt; in &lt;&lt; &quot; &quot; &lt;&lt; in_num &lt;&lt; endl;        cout &lt;&lt; out &lt;&lt; &quot; &quot; &lt;&lt; out_num &lt;&lt; endl;        puts(&quot;&quot;);    &#125;        return 0;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>高精度</tag>
      
      <tag>进位制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-36.士兵</title>
    <link href="/2023/02/05/Algorithm/Comp/0x00/20230205-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-036-%E5%A3%AB%E5%85%B5/"/>
    <url>/2023/02/05/Algorithm/Comp/0x00/20230205-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-036-%E5%A3%AB%E5%85%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/125/">算法竞赛进阶指南-36.士兵</a></p><p>格格兰郡的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 名士兵随机散落在全郡各地。</p><p>格格兰郡中的位置由一对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 整数坐标表示。</p><p>士兵可以进行移动，每次移动，一名士兵可以向上，向下，向左或向右移动一个单位（因此，他的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 坐标也将加 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 或减 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>）。</p><p>现在希望通过移动士兵，使得所有士兵彼此相邻的处于同一条水平线内，即所有士兵的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 坐标相同并且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 坐标相邻。</p><p>请你计算满足要求的情况下，所有士兵的总移动次数最少是多少。</p><p>需注意，两个或多个士兵不能占据同一个位置。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行输入整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>，代表士兵的数量。</p><p>接下来的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 行，每行输入两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>，分别代表一个士兵所在位置的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 坐标和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 坐标，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 行即为第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个士兵的坐标 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x[i],y[i])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出一个整数，代表所有士兵的总移动次数的最小值。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>10000</mn></mrow><annotation encoding="application/x-tex">1 \le N \le 10000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>10000</mn><mo>≤</mo><mi>x</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>≤</mo><mn>10000</mn></mrow><annotation encoding="application/x-tex">-10000 \le x[i],y[i] \le 10000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">51 22 21 33 -23 3</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">8</code></pre><h3 id="method-排序-中位数"><a class="markdownIt-Anchor" href="#method-排序-中位数"></a> Method : 排序 + 中位数</h3><p><a href="https://www.luogu.com.cn/problem/P1889">P1889 士兵站队</a></p><p>首先把二维拆开来看，看成两个一维问题。</p><p>y坐标相同=&gt;货仓选址问题， 选择<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>的中位数;</p><p>x坐标相邻=&gt;货仓选址问题变形，选择<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mi>i</mi><mo>−</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">xi - i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>的中位数。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int N &#x3D; 1e4 + 7;vector&lt;PII&gt; points;int n;int main() &#123;    cin &gt;&gt; n;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        int x, y;        scanf(&quot;%d %d&quot;, &amp;x, &amp;y);        points.push_back(&#123;x, y&#125;);    &#125;        long long cost &#x3D; 0;        &#x2F;&#x2F; 计算y的cost    sort(points.begin(), points.end(), [](const PII&amp; a, const PII&amp; b) &#123;        return a.second &lt; b.second;    &#125;);    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        cost +&#x3D; abs(points[i].second - points[n &#x2F; 2].second);    &#125;        &#x2F;&#x2F; 计算x的cost    sort(points.begin(), points.end(), [](const PII&amp; a, const PII&amp; b) &#123;        return a.first &lt; b.first;    &#125;);    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        points[i].first -&#x3D; i;    &#125;    sort(points.begin(), points.end(), [](const PII&amp; a, const PII&amp; b) &#123;        return a.first &lt; b.first;    &#125;);        for (int i &#x3D; 0; i &lt; n; i ++) &#123;        cost +&#x3D; abs(points[i].first - points[n &#x2F; 2].first);    &#125;        cout &lt;&lt; cost &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n\log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">nlog n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span></span></span></span>为sort排序的时间复杂度。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，空间开销主要在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>o</mi><mi>i</mi><mi>n</mi><mi>t</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">points</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span></span></span></span>数组上。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>排序</tag>
      
      <tag>中位数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-35.糖果传递</title>
    <link href="/2023/02/04/Algorithm/Comp/0x00/20230204-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-035-%E7%B3%96%E6%9E%9C%E4%BC%A0%E9%80%92/"/>
    <url>/2023/02/04/Algorithm/Comp/0x00/20230204-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-035-%E7%B3%96%E6%9E%9C%E4%BC%A0%E9%80%92/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/124/">算法竞赛进阶指南-35.糖果传递</a></p><p>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个小朋友坐成一圈，每人有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 个糖果。</p><p>每人只能给左右两人传递糖果。</p><p>每人每次传递一个糖果代价为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</p><p>求使所有人获得均等糖果的最小代价。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行输入一个正整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，表示小朋友的个数。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 行，每行一个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>，表示第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个小朋友初始得到的糖果的颗数。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出一个整数，表示最小代价。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1000000</mn></mrow><annotation encoding="application/x-tex">1 \le n \le 1000000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">0 \le a[i] \le 2 \times 10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>,<br />数据保证一定有解。</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">41254</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">4</code></pre><h3 id="method-推公式"><a class="markdownIt-Anchor" href="#method-推公式"></a> Method : 推公式</h3><p>本题是非常经典的环形均分纸牌问题：</p><p>一定存在一个最优解方案，使得环上有相邻的两个人之间没有发生交换，<br />那么以这两个人中间作为断点，破环成链，此时环形均分纸牌问题可以看作链式均分纸牌问题。</p><p>那么如何找到该断点？如果要枚举断点位置，每次做一遍链式均分纸牌，时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，显然不可行。</p><p>先来看链式均分纸牌:</p><p>假设一共有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>个人，每个人初始卡牌数量为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，纸牌总数量为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>。</p><p>第 1 个人为了达到平均持有数, 需要向第 2 个人传递 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>−</mo><mi>T</mi><mi mathvariant="normal">/</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">c_1-T / N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 数量的牌 (正数是给, 负数是拿)<br />第 2 个人为了达到平均持有数, 需要向第 3 个人传递 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mn>2</mn></msub><mo>−</mo><mi>T</mi><mi mathvariant="normal">/</mi><mi>N</mi><mo>+</mo><msub><mi>c</mi><mn>1</mn></msub><mo>−</mo><mi>T</mi><mi mathvariant="normal">/</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">c_2-T / N+c_1-T / N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 数量的牌<br />…<br />第n-1个人为了达到平均持有数, 需要向第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个人传递 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>c</mi><mi>i</mi></msub><mo>−</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mi>T</mi><mi mathvariant="normal">/</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{n-1} c_i-(n-1) \times T / N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.253718em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 数量的牌<br />此时前 n-1 人都达到了平均数，则第 n 个人必然也达到了平均数，即<strong>最后一个人传递卡牌数量为0​</strong></p><p>再回到环形均分卡牌:</p><p>设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mrow><mo fence="true">(</mo><msub><mi>c</mi><mi>j</mi></msub><mo>−</mo><mfrac><mi>T</mi><mi>N</mi></mfrac><mo fence="true">)</mo></mrow><mo separator="true">,</mo><msub><mi>S</mi><mi>i</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></msubsup><msub><mi>A</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left(A_i=\sum_{j=1}^n\left(c_j-\frac{T}{N}\right), S_i=\sum_{j=1}^i A_j\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.80002em;vertical-align:-0.65002em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span></p><p>把n个人的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 罗列出来 ：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mi>k</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>k</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mi>n</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{cc}A_1 &amp; S_1 \\ A_2 &amp; S_2 \\ \cdots &amp; \cdots \\ A_k &amp; S_k \\ A_{k+1} &amp; S_{k+1} \\ \cdots &amp; \cdots \\ A_n &amp; S_n\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:8.400000000000002em;vertical-align:-3.95em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.450000000000001em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.210000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.0100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.6100000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:0.5900000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.450000000000001em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.210000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.0100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.6100000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:0.5900000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><p>考虑在第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个人之后断开, 则破环成链有:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>S</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>S</mi><mi>k</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mi>n</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>S</mi><mi>n</mi></msub><mo>−</mo><msub><mi>S</mi><mi>k</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>S</mi><mn>1</mn></msub><mo>+</mo><msub><mi>S</mi><mi>n</mi></msub><mo>−</mo><msub><mi>S</mi><mi>k</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>S</mi><mn>2</mn></msub><mo>+</mo><msub><mi>S</mi><mi>n</mi></msub><mo>−</mo><msub><mi>S</mi><mi>k</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>A</mi><mi>k</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>S</mi><mi>k</mi></msub><mo>+</mo><msub><mi>S</mi><mi>n</mi></msub><mo>−</mo><msub><mi>S</mi><mi>k</mi></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{cc}A_{k+1} &amp; S_{k+1}-S_k \\\cdots &amp; \cdots \\A_n &amp; S_n-S_k \\A_1 &amp; S_1+S_n-S_k \\A_2 &amp; S_2+S_n-S_k \\\cdots &amp; \cdots \\A_k &amp; S_k+S_n-S_k\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:8.400000000000002em;vertical-align:-3.95em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.450000000000001em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-4.210000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.6100000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:0.5900000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.450000000000001em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-4.210000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.6100000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:0.5900000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><p>那么链式均分纸牌，其最优解必是最后一个人不需要传递卡牌，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>k</mi></msub><mo>+</mo><msub><mi>S</mi><mi>n</mi></msub><mo>−</mo><msub><mi>S</mi><mi>k</mi></msub><mo>=</mo><msub><mi>S</mi><mi>n</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">S_k+S_n-S_k = S_n = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p><p>那么即可以转换为求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mrow><mo fence="true">∣</mo><msub><mi>S</mi><mi>i</mi></msub><mo>−</mo><msub><mi>S</mi><mi>k</mi></msub><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">\sum_{i=1}^n\left|S_i-S_k\right|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span></span></span></span>的最小值，即转化为货仓选址问题。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 1e6 + 7;typedef long long LL;int n;int a[N];LL s[N];int main() &#123;    cin &gt;&gt; n;    LL sum &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;a[i]);        sum +&#x3D; a[i];    &#125;        LL avg &#x3D; sum &#x2F; n;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        a[i] -&#x3D; avg;    &#125;        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        s[i] +&#x3D; s[i - 1] + a[i];    &#125;    sort(s + 1, s + n + 1);    LL cost &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; n &#x2F; 2; i ++) &#123;        cost +&#x3D; abs(s[n + 1 - i] - s[i]);    &#125;        cout &lt;&lt; cost &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>前缀和的预处理。</li><li>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，主要是数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>N</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[N]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>N</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[N]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">]</span></span></span></span>。</li></ul><h3 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h3><h4 id="均分纸牌"><a class="markdownIt-Anchor" href="#均分纸牌"></a> 均分纸牌</h4><p><a href="https://www.acwing.com/problem/content/1538/">Acwing-1536.均分纸牌</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;const int N &#x3D; 100 + 7;int n;int a[N];int s[N];int main() &#123;    cin &gt;&gt; n;    int sum &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;a[i]);        sum +&#x3D; a[i];    &#125;        int avg &#x3D; sum &#x2F; n;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        a[i] -&#x3D; avg;    &#125;        int res &#x3D; 0;    int cost &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        s[i] &#x3D; s[i - 1] + a[i];        if (s[i] !&#x3D; 0) res ++;        &#x2F;&#x2F; cost +&#x3D; abs(s[i]);   &#x2F;&#x2F; 计算每次只能移动一个的移动次数    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><p><strong>参考</strong>:</p><p><a href="https://aztl.blog.luogu.org/luo-gu-p2512-haoi2008-tang-guo-zhuan-di-ti-xie">https://aztl.blog.luogu.org/luo-gu-p2512-haoi2008-tang-guo-zhuan-di-ti-xie</a></p><p><a href="https://www.acwing.com/solution/content/41677/">https://www.acwing.com/solution/content/41677/</a></p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>贪心</tag>
      
      <tag>公式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-34.赶牛入圈</title>
    <link href="/2023/02/03/Algorithm/Comp/0x00/20230203-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-034-%E8%B5%B6%E7%89%9B%E5%85%A5%E5%9C%88/"/>
    <url>/2023/02/03/Algorithm/Comp/0x00/20230203-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-034-%E8%B5%B6%E7%89%9B%E5%85%A5%E5%9C%88/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/123/">算法竞赛进阶指南-34.赶牛入圈</a></p><p>农夫约翰希望为他的奶牛们建立一个畜栏。</p><p>这些挑剔的畜生要求畜栏必须是正方形的，而且至少要包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 单位的三叶草，来当做它们的下午茶。</p><p>畜栏的边缘必须与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mi mathvariant="normal">，</mi><mi>Y</mi></mrow><annotation encoding="application/x-tex">X，Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> 轴平行。</p><p>约翰的土地里一共包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 单位的三叶草，每单位三叶草位于一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1 \times 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的土地区域内，区域位置由其左下角坐标表示，并且区域左下角的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo separator="true">,</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X,Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> 坐标都为整数，范围在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10000</mn></mrow><annotation encoding="application/x-tex">10000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span> 以内。</p><p>多个单位的三叶草可能会位于同一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1 \times 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的区域内，因为这个原因，在接下来的输入中，同一个区域坐标可能出现多次。</p><p>只有一个区域完全位于修好的畜栏之中，才认为这个区域内的三叶草在畜栏之中。</p><p>请你帮约翰计算一下，能包含至少 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 单位面积三叶草的情况下，畜栏的最小边长是多少。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>第一行输入两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 行，每行输入两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span>，代表三叶草所在的区域的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo separator="true">,</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X,Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> 坐标。</p><p>同一行数据用空格隔开。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出一个整数，代表畜栏的最小边长。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>C</mi><mo>≤</mo><mn>500</mn></mrow><annotation encoding="application/x-tex">1 \le C \le 500</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>500</mn></mrow><annotation encoding="application/x-tex">C \le N \le 500</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">3 41 22 14 15 2</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">4</code></pre><h3 id="method-离散化-前缀和-二分"><a class="markdownIt-Anchor" href="#method-离散化-前缀和-二分"></a> Method : 离散化 + 前缀和 + 二分</h3><p>首先这道题的意思，就是平面坐标系给你n个点，要求至少包含里面c个点的正方形，其边长最短是多少。(注意点是可以重合的，同一个坐标可以有多个点。)</p><p>这道题很容易看出来是二分答案，但由于是二维的，写起来像是二维版的袭击。</p><p>最关键的就是正方形的选取，是怎么枚举的？</p><blockquote><p>最优的正方形，一定是至少两条对边都有点，否则可以缩小这个正方形的边长，直到这个正方形两条对边上有点。</p></blockquote><p>根据这个特点我们可以枚举一个判断包含的check函数，再在外面套一层二分答案。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int N &#x3D; 500 + 7;const int M &#x3D; N &lt;&lt; 1;vector&lt;PII&gt; points;vector&lt;int&gt; numbers;int sum[M][M];int C, n;int main() &#123;    memset(sum, 0, sizeof sum);        cin &gt;&gt; C &gt;&gt; n;    numbers.push_back(0); &#x2F;&#x2F; 从0开始，方便前缀和计算    int x_max &#x3D; -1, y_max &#x3D; -1;    for (int i &#x3D; 0;i &lt; n; i ++) &#123;        int x, y;        scanf(&quot;%d %d&quot;, &amp;x, &amp;y);        x_max &#x3D; max(x_max, x);        y_max &#x3D; max(y_max, y);                points.push_back(&#123;x, y&#125;);        numbers.push_back(x);        numbers.push_back(y);    &#125;        &#x2F;&#x2F; 离散化    sort(numbers.begin(), numbers.end());    numbers.erase(unique(numbers.begin(), numbers.end()), numbers.end());        for (int i &#x3D; 0; i &lt; n; i ++) &#123;        &#x2F;&#x2F; 二分查找        int x &#x3D; lower_bound(numbers.begin(), numbers.end(), points[i].first) - numbers.begin();        int y &#x3D; lower_bound(numbers.begin(), numbers.end(), points[i].second) - numbers.begin();        sum[x][y] ++;    &#125;        for (int i &#x3D; 1; i &lt; numbers.size(); i ++) &#123;        for (int j &#x3D; 1; j &lt; numbers.size(); j ++) &#123;            sum[i][j] +&#x3D; sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1];        &#125;    &#125;        &#x2F;&#x2F; 二分答案    auto check &#x3D; [&amp;](int len) &#123;        &#x2F;&#x2F; 枚举所有可能的正方形        for (int x1 &#x3D; 1, x2 &#x3D; 1; x2 &lt; numbers.size(); x2 ++)&#123;            &#x2F;&#x2F;  num[x1] + 1, 外面这个+1是实际的边长，因为每个单位是一个1 * 1的小方块            while(x1 &lt; x2 &amp;&amp; numbers[x2] - numbers[x1] + 1 &gt; len) x1 ++;            for (int y1 &#x3D; 1, y2 &#x3D; 1; y2 &lt; numbers.size(); y2 ++)&#123;                while(y1 &lt; y2 &amp;&amp; numbers[y2] - numbers[y1] + 1 &gt; len) y1 ++;                &#x2F;&#x2F; 要包含(x1, y1)这个边界点，因此x1 - 1, y1 - 1                if (sum[x2][y2] - sum[x1 - 1][y2] - sum[x2][y1 - 1] + sum[x1 - 1][y1 - 1] &gt;&#x3D; C) &#123;                    return true; &#x2F;&#x2F; 合法                &#125;             &#125;        &#125;                return false;    &#125;;        int l &#x3D; 1, r &#x3D; max(x_max, y_max);    while (l !&#x3D; r + 1) &#123;        int mid &#x3D; l + r &gt;&gt; 1;        if (check(mid)) &#123;            r &#x3D; mid - 1;        &#125;        else &#123;            l &#x3D; mid + 1;        &#125;    &#125;        cout &lt;&lt; r + 1 &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>+</mo><msup><mi>n</mi><mn>2</mn></msup><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n\log n + n^2\log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 首先前面的离散化排序sort和2n次二分查找都是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的，然后二分答案的check是两重for循环, 里面的while循环几乎只执行1次(相邻)是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，外面套一层二分答案<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>，因此是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O((2n)^ 2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span> 主要是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mi>M</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>M</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">sum[M][M]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">]</span></span></span></span>。</p></li></ul><p><strong>参考</strong>:</p><p><a href="https://www.acwing.com/solution/content/1091/">https://www.acwing.com/solution/content/1091/</a></p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>前缀和</tag>
      
      <tag>二分</tag>
      
      <tag>离散化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-33.防线</title>
    <link href="/2023/02/02/Algorithm/Comp/0x00/20230202-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-033-%E9%98%B2%E7%BA%BF/"/>
    <url>/2023/02/02/Algorithm/Comp/0x00/20230202-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-033-%E9%98%B2%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/122/">算法竞赛进阶指南-33.防线</a></p><p>达达学习数学竞赛的时候受尽了同仁们的鄙视，终于有一天…受尽屈辱的达达黑化成为了黑暗英雄怪兽达达。</p><p>就如同中二漫画的情节一样，怪兽达达打算毁掉这个世界。</p><p>数学竞赛界的精英 lqr 打算阻止怪兽达达的阴谋，于是她集合了一支由数学竞赛选手组成的超级行动队。</p><p>由于队员们个个都智商超群，很快，行动队便来到了怪兽达达的黑暗城堡的下方。</p><p>但是，同样强大的怪兽达达在城堡周围布置了一条“不可越过”的坚固防线。</p><p>防线由很多防具组成，这些防具分成了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 组。</p><p>我们可以认为防线是一维的，那么每一组防具都分布在防线的某一段上，并且同一组防具是等距离排列的。</p><p>也就是说，我们可以用三个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> 来描述一组防具，即这一组防具布置在防线的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi mathvariant="normal">，</mi><mi>S</mi><mo>+</mo><mi>D</mi><mi mathvariant="normal">，</mi><mi>S</mi><mo>+</mo><mn>2</mn><mi>D</mi><mi mathvariant="normal">，</mi><mo>…</mo><mi mathvariant="normal">，</mi><mi>S</mi><mo>+</mo><mi>K</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">S，S + D，S + 2D，…，S + KD</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span>(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>∈</mo><mi>Z</mi><mi mathvariant="normal">，</mi><mi>S</mi><mo>+</mo><mi>K</mi><mi>D</mi><mo>≤</mo><mi>E</mi><mi mathvariant="normal">，</mi><mi>S</mi><mo>+</mo><mo stretchy="false">(</mo><mi>K</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi>D</mi><mo>&gt;</mo><mi>E</mi></mrow><annotation encoding="application/x-tex">K∈ Z，S + KD≤E，S + (K + 1)D&gt;E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span>)位置上。</p><p>黑化的怪兽达达设计的防线极其精良。</p><p>如果防线的某个位置有偶数个防具，那么这个位置就是毫无破绽的(包括这个位置一个防具也没有的情况，因为 $ 0 $ 也是偶数)。</p><p>只有有奇数个防具的位置有破绽，但是整条防线上也最多只有一个位置有奇数个防具。</p><p>作为行动队的队长，lqr 要找到防线的破绽以策划下一步的行动。</p><p>但是，由于防具的数量太多，她实在是不能看出哪里有破绽。</p><p>作为 lqr 可以信任的学弟学妹们，你们要帮助她解决这个问题。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入文件的第一行是一个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>，表示有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span> 组互相独立的测试数据。</p><p>每组数据的第一行是一个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>。</p><p>之后 $ N $ 行，每行三个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub><mi mathvariant="normal">，</mi><msub><mi>E</mi><mi>i</mi></msub><mi mathvariant="normal">，</mi><msub><mi>D</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i，E_i，D_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，代表第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 组防具的三个参数，数据用空格隔开。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>对于每组测试数据，如果防线没有破绽，即所有的位置都有偶数个防具，输出一行 <code>&quot;There's no weakness.&quot;</code>(不包含引号) 。</p><p>否则在一行内输出两个空格分隔的整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span>，表示在位置 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> 有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 个防具。当然 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 应该是一个奇数。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p>防具总数不多于$ 10^8 $,</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub><mo>≤</mo><msub><mi>E</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i \le E_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>T</mi><mo>≤</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">1 \le T \le 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>,</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>≤</mo><mn>200000</mn></mrow><annotation encoding="application/x-tex">N \le 200000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>S</mi><mi>i</mi></msub><mi mathvariant="normal">，</mi><msub><mi>E</mi><mi>i</mi></msub><mi mathvariant="normal">，</mi><msub><mi>D</mi><mi>i</mi></msub><mo>≤</mo><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0 \le S_i，E_i，D_i \le 2^{31}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">321 10 12 10 121 10 1 1 10 1 41 10 1 4 4 1 1 5 1 6 10 1</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">1 1There&#39;s no weakness.4 3</code></pre><h3 id="method-二分答案"><a class="markdownIt-Anchor" href="#method-二分答案"></a> Method : 二分答案</h3><p>原题：<a href="https://www.luogu.com.cn/problem/P4403">[BJWC2008]秦腾与教学评估</a></p><p>首先看到这道题，要求频繁在区间内插值，很容易联想到差分，但很遗憾，差分也难做等差数列的区间插值，因此差分思路走不通。遂看题解= =…， 没想到这居然是一道二分答案的题目。</p><p>这道题它十分神奇，神奇之处就在于有一个很强的性质,就是<strong>序列中最多只有一个位置有奇数个防具(老师)</strong>，所以，如果有解，那么<strong>包含这个位置的点的前缀和必是奇数，不包含这个位置的点的前缀和必是偶数</strong>。因此可以根据这个性质来构造二分答案。</p><p>另外，求前缀和的公式也很巧妙的利用到了等差数列的项数公式，来简化求前缀和的复杂度。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;const int N &#x3D; 2e5 + 7;struct Node &#123;    int S;    int E;    int D;&#125;;Node node[N];int main() &#123;    int T;    cin &gt;&gt; T;        while (T --) &#123;        int n;        scanf(&quot;%d&quot;, &amp;n);                int maxe &#x3D; -1;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;            scanf(&quot;%d %d %d&quot;, &amp;node[i].S, &amp;node[i].E, &amp;node[i].D);            maxe &#x3D; max(maxe, node[i].E);        &#125;                auto get_sum &#x3D; [&amp;](int m) -&gt; int &#123;            &#x2F;&#x2F; 求区间1 ~ m点数的前缀和            LL sum &#x3D; 0;            for (int i &#x3D; 0; i &lt; n; i ++) &#123;                &#x2F;&#x2F; 小于等于的交集                if (node[i].S &lt;&#x3D; m) &#123;                    sum +&#x3D; ((min(node[i].E, m) - node[i].S) &#x2F; node[i].D + 1);                &#125;                &#x2F;&#x2F; 大于则交集为0个            &#125;            return sum;        &#125;;                int l &#x3D; 1, r &#x3D; maxe;        while (l !&#x3D; r + 1)  &#123;            int mid &#x3D; l + (r - l) &#x2F; 2;            if (get_sum(mid) &amp; 1) &#123;                r &#x3D; mid - 1;            &#125;            else &#123;                l &#x3D; mid + 1;            &#125;        &#125;        LL cnt &#x3D; get_sum(l) - get_sum(l - 1);        if (cnt &amp; 1) printf (&quot;%d %lld\n&quot;, l, cnt);        else printf(&quot;There&#39;s no weakness.\n&quot;);    &#125;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n\log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">nlogn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span></span></span></span>为二分查找的时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span>, 主要消耗空间的为数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo stretchy="false">[</mo><mi>N</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">node[N]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">]</span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-32.袭击</title>
    <link href="/2023/02/01/Algorithm/Comp/0x00/20230201-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-032-%E8%A2%AD%E5%87%BB/"/>
    <url>/2023/02/01/Algorithm/Comp/0x00/20230201-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-032-%E8%A2%AD%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/121/">算法竞赛进阶指南-32.袭击</a></p><p>在与联盟的战斗中屡战屡败后，帝国撤退到了最后一个据点。</p><p>依靠其强大的防御系统，帝国击退了联盟的六波猛烈进攻。</p><p>经过几天的苦思冥想，联盟将军亚瑟终于注意到帝国防御系统唯一的弱点就是能源供应。</p><p>该系统由 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个核电站供应能源，其中任何一个被摧毁都会使防御系统失效。</p><p>将军派出了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个特工进入据点之中，打算对能源站展开一次突袭。</p><p>不幸的是，由于受到了帝国空军的袭击，他们未能降落在预期位置。</p><p>作为一名经验丰富的将军，亚瑟很快意识到他需要重新安排突袭计划。</p><p>他现在最想知道的事情就是哪个特工距离其中任意一个发电站的距离最短。</p><p>你能帮他算出来这最短的距离是多少吗？</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入中包含多组测试用例。</p><p>第一行输入整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>，代表测试用例的数量。</p><p>对于每个测试用例，第一行输入整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 行，每行输入两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span>，代表每个核电站的位置的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mi mathvariant="normal">，</mi><mi>Y</mi></mrow><annotation encoding="application/x-tex">X，Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> 坐标。</p><p>在接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 行，每行输入两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span>，代表每名特工的位置的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mi mathvariant="normal">，</mi><mi>Y</mi></mrow><annotation encoding="application/x-tex">X，Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> 坐标。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>每个测试用例，输出一个最短距离值，结果保留三位小数。</p><p>每个输出结果占一行。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>100000</mn></mrow><annotation encoding="application/x-tex">1 \le N \le 100000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo>≤</mo><mn>1000000000</mn></mrow><annotation encoding="application/x-tex">0 \le X,Y \le 1000000000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">240 00 11 01 12 22 33 23 340 00 00 00 00 00 00 00 0</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-css" data-language="css"><code class="language-css">1.4140.000</code></pre><h3 id="method-分治"><a class="markdownIt-Anchor" href="#method-分治"></a> Method : 分治</h3><p>关于计算几何的平面最近点对问题，有如下经典永流传系列：</p><p><a href="https://www.luogu.com.cn/problem/P1257">P1257.平面最近点对</a></p><p><a href="https://www.luogu.com.cn/problem/P1429">P1429 平面最近点对（加强版）</a></p><p><a href="https://www.luogu.com.cn/problem/P7883">P7883 平面最近点对（加强加强版）</a></p><p>本题就是这道题的一个小拓展，把点划分成了两个集合，只允许先从两个集合分别选出一个点，再来计算距离。<br />那么可以在计算前判断两个点的类型，如果同属一个集合，那么把其距离视为无穷大即可。</p><p>另外本题的测试数据很刁钻，需要额外加一个按rand排序，把序列中集合的点的分布打乱，不然会TLE。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;stdlib.h&gt;using namespace std;typedef long long LL;const LL INF &#x3D; 1e18;const int N &#x3D; 1e5 + 7;struct Node &#123;    int x;    int y;    int rd;    int type;    bool operator &lt; (Node&amp; rhs) const &#123;        if (x &#x3D;&#x3D; rhs.x) return rd &lt; rhs.rd;        else return x &lt; rhs.x;    &#125;&#125;;Node p[N * 2];Node tmp[N * 2];double dis(Node&amp; a, Node&amp; b) &#123;    if (a.type &#x3D;&#x3D; b.type) return INF;    LL dx &#x3D; a.x - b.x;    LL dy &#x3D; a.y - b.y;    return sqrt(dx * dx + (LL)dy * dy);&#125;double divide(int l, int r) &#123;    if (l &#x3D;&#x3D; r) return INF;    if (r - l &#x3D;&#x3D; 1) return dis(p[l], p[r]);        int mid &#x3D; l + (r - l) &#x2F; 2;    double dl &#x3D; divide(l, mid), dr &#x3D; divide(mid + 1, r);    double d &#x3D; min(dl, dr);        int k &#x3D; 0;    for (int i &#x3D; l; i &lt;&#x3D; r; i ++) &#123;        if (abs(p[i].x - p[mid].x) &lt; d) &#123;            tmp[k ++] &#x3D; p[i];        &#125;    &#125;    sort(tmp, tmp + k, [](Node&amp; a, Node&amp; b) -&gt; bool&#123;        return a.y &lt; b.y;    &#125;);        for (int i &#x3D; 0; i &lt; k; i ++) &#123;        for (int j &#x3D; i + 1; j &lt; k &amp;&amp; abs(tmp[i].y - tmp[j].y) &lt; d; j ++) &#123;            d &#x3D; min(d, dis(tmp[i], tmp[j]));        &#125;    &#125;        return d;&#125;int main() &#123;    srand(0);    int T;    cin &gt;&gt; T;        while (T --) &#123;        int n;        scanf(&quot;%d&quot;, &amp;n);        for (int i &#x3D; 1; i &lt;&#x3D; n * 2; i ++) &#123;            scanf(&quot;%d %d&quot;, &amp;p[i].x, &amp;p[i].y);            p[i].rd &#x3D; rand()%3000000;            if (i &lt;&#x3D; n) p[i].type &#x3D; 1;            else p[i].type &#x3D; 2;        &#125;        sort(p + 1, p + 1 + n * 2);        printf(&quot;%.3f\n&quot;, divide(1, n * 2));    &#125;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msup><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n\log^2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.148448em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984479999999999em;"><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 。整个代码的瓶颈就在 sort 上了, 时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mo>⋅</mo><mi>T</mi><mrow><mo fence="true">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo fence="true">)</mo></mrow><mo>+</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><msup><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">T(n)=2 \cdot T\left(\frac{n}{2}\right)+O(n \log n)=O\left(n \log ^2 n\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2484579999999998em;vertical-align:-0.35001em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984479999999999em;"><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span>, 当然如果使用归并排序替换 sort 的话, 就可以做到严格的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul><h3 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h3><h4 id="p1429-平面最近点对加强版"><a class="markdownIt-Anchor" href="#p1429-平面最近点对加强版"></a> P1429 平面最近点对（加强版）</h4><p><a href="https://www.luogu.com.cn/problem/P1429">P1429 平面最近点对（加强版）</a></p><p>P1429题解:</p><p>不难发现 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\mathrm{P}_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">P</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 满足这些条件:</p><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\mathrm{P}_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">P</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 与 mid 线的距离小于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span> 。</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\mathrm{P}_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">P</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 的纵坐标比 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">P_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 大 (因为如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\mathrm{P}_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">P</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 的纵坐标比 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">P</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\mathrm{P}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">P</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 小, 则这个状态会在之前考虑有哪些点可能与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\mathrm{P}_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">P</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 形成最近公共点对的时候考虑到, 没必要重复考虑, 虽然真的考虑的话也就只是 2 倍常数）。</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\mathrm{P}_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">P</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">P</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\mathrm{P}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">P</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的纵坐标之差小于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span> 。</li></ol><p>根据这三条, 我们可以画出一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>×</mo><mn>2</mn><mi>d</mi></mrow><annotation encoding="application/x-tex">d \times 2 d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">d</span></span></span></span> 的矩形, 合法的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\mathrm{P}_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">P</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 一定是在这个矩形中的（不含边界）。<br />但是, 我们又知道, 如果两个点同在左侧, 则距离 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">\geq d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span>; 如果两个点同在右侧, 则距离 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">\geq d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span> 。<br />那么, 无论是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">mid</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\operatorname{mid}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop"><span class="mord mathrm">m</span><span class="mord mathrm">i</span><span class="mord mathrm">d</span></span></span></span></span> 左边的正方形还是右边的正方形, 每个里面都至多放 3 个点（包括 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">P</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\mathrm{P}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">P</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ）。<br />图中红色点即代表 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\mathrm{P}_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">P</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>, 展示了一种方案, 其中每条虚线边的长度都 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">\geq d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span> 。<br />所以对于每个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">P</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\mathrm{P}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">P</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 检验至多其他 5 个点即可, 所以求最近点对的部分时间复杂度是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 的!<br />(当然其实与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">P</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\mathrm{P}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">P</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 同侧的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\mathrm{P}_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">P</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 是不可能对更新答案有用的, 如果你愿意的话, 检验至多 3 个点即可)</p><p>注意一点，为什么中间线是<code>p[mid].x</code>而不是<code>(p[l].x + p[r].x )/ 2</code>？</p><blockquote><p>因为递归左右就是按照p的下标来分治的，因此实际划分的左右区间长度本来就不一样，中间分界线就是<code>p[mid].x</code></p></blockquote><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;using namespace std;typedef long long LL;const int N &#x3D; 4e5 + 7;const int INF &#x3D; 0x3f3f3f3f;struct Node &#123;double x;double y;bool operator &lt; (const Node&amp; rhs) const &#123;if (x &#x3D;&#x3D; rhs.x) return y &lt; rhs.y;return x &lt; rhs.x;&#125;&#125;;Node p[N];Node tmp[N];double dis(Node&amp; a, Node&amp; b) &#123;double dx &#x3D; a.x - b.x;double dy &#x3D; a.y - b.y;return sqrt(dx * dx + dy * dy);&#125;double divide(int l, int r) &#123;if (l &#x3D;&#x3D; r) return INF;if (r - l &#x3D;&#x3D; 1) return dis(p[l], p[r]);&#x2F;&#x2F; 分治int mid &#x3D; l + (r - l) &#x2F; 2;double dl &#x3D; divide(l, mid), dr &#x3D; divide(mid + 1, r);&#x2F;&#x2F; 归并double d &#x3D; min(dl, dr);int k &#x3D; 0;for (int i &#x3D; l; i &lt;&#x3D; r; i++) &#123;if (fabs(p[mid].x - p[i].x) &lt; d) &#123;tmp[++k] &#x3D; p[i];&#125;&#125;sort(tmp + 1, tmp + 1 + k, [](Node&amp; a, Node&amp; b) -&gt; bool &#123;return a.y &lt; b.y;&#125;);for (int i &#x3D; 1; i &lt;&#x3D; k; i++) &#123;for (int j &#x3D; i + 1; j &lt;&#x3D; k &amp;&amp; (tmp[j].y - tmp[i].y) &lt; d; j++) &#123;d &#x3D; min(d, dis(tmp[i], tmp[j]));&#125;&#125;return d;&#125;int main() &#123;int n;cin &gt;&gt; n;for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;scanf(&quot;%lf %lf&quot;, &amp;p[i].x, &amp;p[i].y);&#125;sort(p + 1, p + 1 + n);printf(&quot;%.4lf&quot;, divide(1, n));return 0;&#125;</code></pre><h4 id="p7883-平面最近点对加强加强版"><a class="markdownIt-Anchor" href="#p7883-平面最近点对加强加强版"></a> P7883 平面最近点对（加强加强版）</h4><p><a href="https://www.luogu.com.cn/problem/P7883">P7883 平面最近点对（加强加强版）</a></p><p>P7883 题解：</p><p>这题别求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">sqrt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span></span></span></span>，会退化到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlog^2(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>从而TLE.</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;const int N &#x3D; 4e5 + 7;const LL INF &#x3D; 1e18;struct Node &#123;LL x;LL y;bool operator &lt; (const Node&amp; rhs) const &#123;if (x &#x3D;&#x3D; rhs.x) return y &lt; rhs.y;return x &lt; rhs.x;&#125;&#125;;Node p[N];Node tmp[N];LL dis(Node&amp; a, Node&amp; b) &#123;double dx &#x3D; a.x - b.x;double dy &#x3D; a.y - b.y;return dx * dx + dy * dy;&#125;LL divide(int l, int r) &#123;if (l &#x3D;&#x3D; r) return INF;if (r - l &#x3D;&#x3D; 1) return dis(p[l], p[r]);&#x2F;&#x2F; 分治int mid &#x3D; l + (r - l) &#x2F; 2;LL dl &#x3D; divide(l, mid), dr &#x3D; divide(mid + 1, r);&#x2F;&#x2F; 归并LL d &#x3D; min(dl, dr);int k &#x3D; 0;for (int i &#x3D; l; i &lt;&#x3D; r; i++) &#123;if (abs(p[mid].x - p[i].x) * abs(p[mid].x - p[i].x) &lt; d) &#123;tmp[++k] &#x3D; p[i];&#125;&#125;sort(tmp + 1, tmp + 1 + k, [](Node&amp; a, Node&amp; b) -&gt; bool &#123;return a.y &lt; b.y;&#125;);for (int i &#x3D; 1; i &lt;&#x3D; k; i++) &#123;for (int j &#x3D; i + 1; j &lt;&#x3D; k &amp;&amp; (tmp[j].y - tmp[i].y) * (tmp[j].y - tmp[i].y) &lt; d; j++) &#123;d &#x3D; min(d, dis(tmp[i], tmp[j]));&#125;&#125;return d;&#125;int main() &#123;int n;cin &gt;&gt; n;for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;scanf(&quot;%lld %lld&quot;, &amp;p[i].x, &amp;p[i].y);&#125;sort(p + 1, p + 1 + n);LL res &#x3D; divide(1, n);printf(&quot;%lld&quot;, res);return 0;&#125;</code></pre><p><strong>参考</strong>:</p><p><a href="https://www.luogu.com.cn/blog/syksykCCC/solution-p1429">https://www.luogu.com.cn/blog/syksykCCC/solution-p1429</a></p><p><a href="https://www.acwing.com/solution/content/119700/">https://www.acwing.com/solution/content/119700/</a></p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-31.分形</title>
    <link href="/2023/01/31/Algorithm/Comp/0x00/20230131-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-031-%E5%88%86%E5%BD%A2/"/>
    <url>/2023/01/31/Algorithm/Comp/0x00/20230131-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-031-%E5%88%86%E5%BD%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="">算法竞赛进阶指南-31.分形</a></p><p>分形，具有以非整数维形式充填空间的形态特征。</p><p>通常被定义为“一个粗糙或零碎的几何形状，可以分成数个部分，且每一部分都（至少近似地）是整体缩小后的形状”，即具有自相似的性质。</p><p>现在，定义“盒子分形”如下：</p><p>一级盒子分形：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">X</code></pre><p>二级盒子分形：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">X X XX X</code></pre><p>如果用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">B(n - 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 代表第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 级盒子分形，那么第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 级盒子分形即为：</p><pre class="language-none"><code class="language-none">B(n - 1)        B(n - 1)        B(n - 1)B(n - 1)        B(n - 1)</code></pre><p>你的任务是绘制一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 级的盒子分形。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入包含几个测试用例。</p><p>输入的每一行包含一个不大于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn></mrow><annotation encoding="application/x-tex">7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span> 的正整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，代表要输出的盒子分形的等级。</p><p>输入的最后一行为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>，代表输入结束。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>对于每个测试用例，使用 <code>X</code> 符号输出对应等级的盒子分形。</p><p>请注意 <code>X</code> 是一个大写字母。</p><p>每个测试用例后输出一个独立一行的短划线。</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-diff" data-language="diff"><code class="language-diff">1234-1</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例</h4><pre class="language-diff" data-language="diff"><code class="language-diff">X-X X XX X-X X   X X X     XX X   X X   X X    X   X XX X   X X X     XX X   X X-X X   X X         X X   X X X     X           X     XX X   X X         X X   X X   X X               X X    X                 X   X X               X XX X   X X         X X   X X X     X           X     XX X   X X         X X   X X         X X   X X          X     X         X X   X X            X X             X            X X         X X   X X          X     X         X X   X XX X   X X         X X   X X X     X           X     XX X   X X         X X   X X   X X               X X    X                 X   X X               X XX X   X X         X X   X X X     X           X     XX X   X X         X X   X X-</code></pre><hr /><h3 id="method-递归"><a class="markdownIt-Anchor" href="#method-递归"></a> Method : 递归</h3><p>题意很明显的递归嵌套，递归的时候要注意每次<code>offset</code>的变化规律。</p><blockquote><p>不要在dfs内打印：在dfs内直接打印容易出现换行问题。<br />可以先用二维数组存储是否打印(相当于<strong>记忆化</strong>cache)，等dfs完再一起打印。</p></blockquote><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;using namespace std;const int N &#x3D; (int)pow(3, 7) + 7;bool g[N][N];void draw(int n, int x, int y) &#123;    if (n &#x3D;&#x3D; 1) &#123;        g[x][y] &#x3D; true;        return;    &#125;    int offset &#x3D; (int)pow(3, n - 2); &#x2F;&#x2F; (n - 1)级的offset    draw(n - 1, x, y);                          &#x2F;&#x2F; 左上    draw(n - 1, x + 2 * offset, y);             &#x2F;&#x2F; 右上    draw(n - 1, x + offset, y + offset);        &#x2F;&#x2F; 正中    draw(n - 1, x, y + 2 * offset);             &#x2F;&#x2F; 左下    draw(n - 1, x + 2 * offset, y + 2 *offset); &#x2F;&#x2F; 右下&#125;int main() &#123;    memset(g, false, sizeof g);    draw(7, 1, 1);    int n;    while (cin &gt;&gt; n) &#123;        if (n &#x3D;&#x3D; -1) break;        int len &#x3D; (int)pow(3, n - 1);        for (int i &#x3D; 1; i &lt;&#x3D; len; i ++) &#123;            for (int j &#x3D; 1; j &lt;&#x3D; len; j++) &#123;                if (g[i][j]) printf(&quot;X&quot;);                else printf(&quot; &quot;);                           &#125;            puts(&quot;&quot;);        &#125;        puts(&quot;-&quot;);    &#125;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>5</mn><mn>7</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(5^7)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>， 递归5叉树，树的深度是7。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n^2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>，主要用于<code>g[N][N]</code>。</p></li></ul><p><strong>参考</strong>:</p><p><a href="https://www.acwing.com/solution/content/823/">https://www.acwing.com/solution/content/823/</a></p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-30.占卜DIY</title>
    <link href="/2023/01/30/Algorithm/Comp/0x00/20230130-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-030-%E5%8D%A0%E5%8D%9CDIY/"/>
    <url>/2023/01/30/Algorithm/Comp/0x00/20230130-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-030-%E5%8D%A0%E5%8D%9CDIY/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/119/">算法竞赛进阶指南-30.占卜DIY</a></p><p>达达学会了使用扑克 DIY 占卜。</p><p>方法如下：</p><p>一副去掉大小王的扑克共 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>52</mn></mrow><annotation encoding="application/x-tex">52</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">2</span></span></span></span> 张，打乱后均分为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>13</mn></mrow><annotation encoding="application/x-tex">13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span></span></span></span> 堆，编号 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∼</mo><mn>13</mn></mrow><annotation encoding="application/x-tex">1 \sim 13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span></span></span></span>，每堆 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span> 张，其中第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>13</mn></mrow><annotation encoding="application/x-tex">13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span></span></span></span> 堆称作“生命牌”，也就是说你有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span> 条命。</p><p>这里边，$ 4 $ 张 $ K $ 被称作死神。</p><p>初始状态下，所有的牌背面朝上扣下。</p><p>流程如下：</p><p>1.抽取生命牌中的最上面一张(第一张)。</p><p>2.把这张牌翻开，正面朝上，放到牌上的数字所对应编号的堆的最上边。(例如抽到 $ 2 $，正面朝上放到第 $ 2 $ 堆牌最上面，又比如抽到 $ J $，放到第 $ 11 $ 堆牌最上边，注意是正面朝上放)</p><p>3.从刚放了牌的那一堆最底下(最后一张)抽取一张牌，重复第 $ 2 $ 步。（例如你上次抽了 $ 2 $，放到了第二堆顶部，现在抽第二堆最后一张发现是 $ 8 $，又放到第 $ 8 $ 堆顶部…）</p><p>4.在抽牌过程中如果抽到 $ K $，则称死了一条命，就扔掉 $ K $ 再从第 $ 1 $ 步开始。</p><p>5.当发现四条命都死了以后，统计现在每堆牌上边正面朝上的牌的数目，只要同一数字的牌出现 $ 4 $ 张正面朝上的牌(比如 $ 4 $ 个 $ A $)，则称“开了一对”，当然 $ 4 $ 个 $ K $ 是不算的。</p><p>6.统计一共开了多少对，开了 $ 0 $ 对称作”极凶”，$ 1 \sim 2 $ 对为“大凶”，$ 3 $ 对为“凶”，$ 4 \sim 5 $ 对为“小凶”，$ 6 $ 对为“中庸”，$ 7 \sim 8 $ 对“小吉”，$ 9 $ 对为“吉”，$ 10 \sim 11 $ 为“大吉”，$ 12 $ 为“满堂开花，极吉”。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>一共输入 $ 13 $ 行数据，每行四个数字或字母，表示每堆牌的具体牌型(不区分花色只区分数字)，每堆输入的顺序为从上到下。</p><p>为了便于读入，用 $ 0 $ 代表 $ 10 $。</p><p>同行数字用空格隔开。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出一个整数，代表统计得到的开出的总对数。</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">8 5 A AK 5 3 29 6 0 63 4 3 43 4 4 55 6 7 68 7 7 79 9 8 89 0 0 0K J J JQ A Q KJ Q 2 2A K Q 2</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">9</code></pre><hr /><h3 id="method-模拟"><a class="markdownIt-Anchor" href="#method-模拟"></a> Method : 模拟</h3><p>理解了题意就很好做的一道模拟题。</p><p>这里使用的是数组 + 额外的两个idx模拟的抽取卡牌的过程，也可以使用双端队列来模拟抽取卡牌的过程。</p><p><strong>吐槽:</strong> memset是真的难用，有时候会莫名其妙初始化不了</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;const int N &#x3D; 13 + 7;const int M &#x3D; 4 + 7;char poke[N][M];vector&lt;int&gt; idx_top(N, 1); &#x2F;&#x2F; 从上往下抽到第i张牌vector&lt;int&gt; idx_bot(N, 4); &#x2F;&#x2F; 从下往上抽到第i张牌int cnt[N];      &#x2F;&#x2F; 第i堆正面朝上的纸牌数int life &#x3D; 4;int trans(char c) &#123;    switch(c) &#123;        case &#39;0&#39; :            return 10;        case &#39;J&#39; :            return 11;        case &#39;Q&#39; :            return 12;        case &#39;K&#39; :            return 13;        case &#39;A&#39; :            return 1;        default :            return c - &#39;0&#39;;    &#125;&#125;int pick_top(int cur) &#123;    int pick &#x3D; trans(poke[cur][idx_top[cur]]);    idx_top[cur] ++;    cnt[pick] ++;        if (pick &#x3D;&#x3D; 13) life --;    return pick;&#125;int pick_bot(int cur) &#123;    int pick &#x3D; trans(poke[cur][idx_bot[cur]]);    idx_bot[cur] --;    cnt[pick] ++;        if (pick &#x3D;&#x3D; 13) life --;    return pick;&#125;int main() &#123;    memset(poke, &#39;0&#39;, sizeof poke);    memset(cnt, 0, sizeof cnt);        for (int i &#x3D; 1; i &lt;&#x3D; 13; i ++) &#123;        for (int j &#x3D; 1; j &lt;&#x3D; 4; j ++) &#123;            &#x2F;&#x2F; scanf(&quot;%c&quot;, &amp;poke[i][j]);            cin &gt;&gt; poke[i][j];        &#125;    &#125;        int cur &#x3D; 13;    while (life !&#x3D; 0) &#123;        if (cur &#x3D;&#x3D; 13) cur &#x3D; pick_top(cur);        else cur &#x3D; (pick_bot(cur));    &#125;        int res &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; 12; i ++) &#123;        if (cnt[i] &#x3D;&#x3D; 4) &#123;            res ++;        &#125;    &#125;    cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n * m)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>为13，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span></span></span>为4。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n * m)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>为13，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span></span></span>为4。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-29.飞行员兄弟</title>
    <link href="/2023/01/29/Algorithm/Comp/0x00/20230129-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-029-%E9%A3%9E%E8%A1%8C%E5%91%98%E5%85%84%E5%BC%9F/"/>
    <url>/2023/01/29/Algorithm/Comp/0x00/20230129-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-029-%E9%A3%9E%E8%A1%8C%E5%91%98%E5%85%84%E5%BC%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/118/">算法竞赛进阶指南-29.飞行员兄弟</a></p><p>“飞行员兄弟”这个游戏，需要玩家顺利的打开一个拥有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>16</mn></mrow><annotation encoding="application/x-tex">16</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span></span></span></span> 个把手的冰箱。</p><p>已知每个把手可以处于以下两种状态之一：打开或关闭。</p><p>只有当所有把手都打开时，冰箱才会打开。</p><p>把手可以表示为一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">4 \times 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span> 的矩阵，您可以改变任何一个位置 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[i,j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 上把手的状态。</p><p>但是，这也会使得第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 行和第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> 列上的所有把手的状态也随着改变。</p><p>请你求出打开冰箱所需的切换把手的次数最小值是多少。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入一共包含四行，每行包含四个把手的初始状态。</p><p>符号 <code>+</code> 表示把手处于闭合状态，而符号 <code>-</code> 表示把手处于打开状态。</p><p>至少一个手柄的初始状态是关闭的。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>第一行输出一个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>，表示所需的最小切换把手次数。</p><p>接下来 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 行描述切换顺序，每行输出两个整数，代表被切换状态的把手的行号和列号，数字之间用空格隔开。</p><p><strong>注意</strong>：如果存在多种打开冰箱的方式，则按照优先级整体从上到下，同行从左到右打开。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>≤</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">1 \le i,j \le 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-diff" data-language="diff"><code class="language-diff">-+-----------+--</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">61 11 31 44 14 34 4</code></pre><hr /><h3 id="method-位运算枚举"><a class="markdownIt-Anchor" href="#method-位运算枚举"></a> Method : 位运算+枚举</h3><p>这道题比较像第8题费解的开关，而本题的枚举状态更是简单。</p><p>解题要领：</p><ul><li><p>按题目逻辑模拟实现开关函数<code>turn(int x, int y)</code></p></li><li><p>这种开关问题，如果按同一个开关两次，会恢复成原来的状态，因此要想按的次数最少，显然每个开关最多按一次，因此可以把状态进行二进制压缩：用一个int型数存储所有可能的开关方式，其二进制数表示开关的位置，<code>i * n + j</code>位数的1或0，映射到二维坐标<code>[i][j]</code>上，决定开或关</p><ul><li>用<code>state</code>存储答案,<code>(state &gt;&gt; n &amp; 1 == 1)</code>来判断state从低到高的第n位是否为1</li><li>每次枚举前都要memcpy备份，枚举后都要memcpy还原</li></ul></li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;const int n &#x3D; 4;const int INF &#x3D; 0x3f3f3f3f;char graph[n][n];void change(char &amp;c) &#123;    if (c &#x3D;&#x3D; &#39;+&#39;) c &#x3D; &#39;-&#39;;    else c &#x3D; &#39;+&#39;;&#125;void turn(int x, int y) &#123;    change(graph[x][y]);    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        change(graph[i][y]);    &#125;    for (int j &#x3D; 0; j &lt; n; j ++) &#123;        change(graph[x][j]);    &#125;&#125;int main() &#123;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        cin &gt;&gt; graph[i];    &#125;    int res &#x3D; INF;    int state;    &#x2F;&#x2F; 枚举所有开关打开的可能性, 1对应的位置选择turn    for (int op &#x3D; 0; op &lt; (1 &lt;&lt; n * n); op ++) &#123;        char backup[n][n];        memcpy(backup, graph, sizeof graph);        int cnt &#x3D; 0;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;            for (int j &#x3D; 0; j &lt; n; j ++) &#123;                if ((op &gt;&gt; (i * n + j)) &amp; 1) &#123;                    turn(i, j);                    cnt ++;                &#125;            &#125;        &#125;        bool flag &#x3D; true;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;            for (int j &#x3D; 0; j &lt; n; j ++) &#123;                if (graph[i][j] &#x3D;&#x3D; &#39;+&#39;) &#123;                    flag &#x3D; false;                    break;                &#125;            &#125;        &#125;        if (flag &amp;&amp; cnt &lt; res) &#123;            res &#x3D; cnt;            state &#x3D; op;        &#125;        memcpy(graph, backup, sizeof backup);    &#125;    cout &lt;&lt; res &lt;&lt; endl;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        for (int j &#x3D; 0; j &lt; n; j ++) &#123;            if ((state &gt;&gt; (i * n + j)) &amp; 1) &#123;                printf(&quot;%d %d\n&quot;, i + 1, j + 1);            &#125;        &#125;    &#125;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mo>∗</mo><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(2^{(n * n)} * (n * n) * n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">∗</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 第一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{(n * n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">op</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span></span></span></span>状态的枚举，第二个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{(n * n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>是内部双重循环，最后一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span>是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">turn()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>函数。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n * n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，存储输入的图为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{(n * n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-28.给树染色</title>
    <link href="/2023/01/28/Algorithm/Comp/0x00/20230128-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-028-%E7%BB%99%E6%A0%91%E6%9F%93%E8%89%B2/"/>
    <url>/2023/01/28/Algorithm/Comp/0x00/20230128-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-028-%E7%BB%99%E6%A0%91%E6%9F%93%E8%89%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/117/">算法竞赛进阶指南-28.给树染色</a></p><h3 id="method-位运算-二进制拆分"><a class="markdownIt-Anchor" href="#method-位运算-二进制拆分"></a> Method : 位运算-二进制拆分</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;LL a, b, p;LL fast_pow(LL x, LL n) &#123;    LL res &#x3D; 1LL;    while (n) &#123;        if (n &amp; 1) &#123;            res &#x3D; res * x % p;        &#125;        x &#x3D; x * x % p;        n &#x3D; n &gt;&gt; 1;    &#125;    return res % p;&#125;int main() &#123;    cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;    cout &lt;&lt; fast_pow(a, b) &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(log_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span>为对n进行二进制拆分的时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-27.国王游戏</title>
    <link href="/2023/01/27/Algorithm/Comp/0x00/20230127-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-027-%E5%9B%BD%E7%8E%8B%E6%B8%B8%E6%88%8F/"/>
    <url>/2023/01/27/Algorithm/Comp/0x00/20230127-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-027-%E5%9B%BD%E7%8E%8B%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/116/">算法竞赛进阶指南-27.国王游戏</a></p><h3 id="method-位运算-二进制拆分"><a class="markdownIt-Anchor" href="#method-位运算-二进制拆分"></a> Method : 位运算-二进制拆分</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;LL a, b, p;LL fast_pow(LL x, LL n) &#123;    LL res &#x3D; 1LL;    while (n) &#123;        if (n &amp; 1) &#123;            res &#x3D; res * x % p;        &#125;        x &#x3D; x * x % p;        n &#x3D; n &gt;&gt; 1;    &#125;    return res % p;&#125;int main() &#123;    cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;    cout &lt;&lt; fast_pow(a, b) &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(log_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span>为对n进行二进制拆分的时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-26.雷达设备</title>
    <link href="/2023/01/26/Algorithm/Comp/0x00/20230126-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-026-%E9%9B%B7%E8%BE%BE%E8%AE%BE%E5%A4%87/"/>
    <url>/2023/01/26/Algorithm/Comp/0x00/20230126-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-026-%E9%9B%B7%E8%BE%BE%E8%AE%BE%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/115/">算法竞赛进阶指南-26.雷达设备</a></p><h3 id="method-位运算-二进制拆分"><a class="markdownIt-Anchor" href="#method-位运算-二进制拆分"></a> Method : 位运算-二进制拆分</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;LL a, b, p;LL fast_pow(LL x, LL n) &#123;    LL res &#x3D; 1LL;    while (n) &#123;        if (n &amp; 1) &#123;            res &#x3D; res * x % p;        &#125;        x &#x3D; x * x % p;        n &#x3D; n &gt;&gt; 1;    &#125;    return res % p;&#125;int main() &#123;    cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;    cout &lt;&lt; fast_pow(a, b) &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(log_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span>为对n进行二进制拆分的时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-25.畜栏预定</title>
    <link href="/2023/01/25/Algorithm/Comp/0x00/20230125-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-025-%E7%95%9C%E6%A0%8F%E9%A2%84%E5%AE%9A/"/>
    <url>/2023/01/25/Algorithm/Comp/0x00/20230125-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-025-%E7%95%9C%E6%A0%8F%E9%A2%84%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/113/">算法竞赛进阶指南-25.畜栏预定</a></p><p>本题是一道区间问题，区间问题往往具有贪心策略，并与排序相关。</p><h3 id="method-贪心"><a class="markdownIt-Anchor" href="#method-贪心"></a> Method : 贪心</h3><p><strong>区间分组</strong>问题， 分组组数==最大区间厚度</p><p>启发式策略：</p><ol><li><p>区间按左端点升序排序</p></li><li><p>顺序枚举，分类讨论</p><ul><li>如果之前<strong>存在</strong>一个组的区间右端点不与当前区间左端点相交，则将当前区间插入该组，并更新该组的右端点</li><li>如果之前<strong>不存在</strong>一个组的区间右端点不与当前区间左端点相交，则将当前区间插入该组</li></ul><p>区间的组可以用<strong>小根堆</strong>(组的区间右端点)维护，每次取出堆顶与当前区间进行判断。</p></li></ol><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 5e4 + 7;struct Node &#123;    int l;    int r;    int id;    bool operator &lt; (const Node &amp; rhs) const &#123;        if (l &#x3D;&#x3D; rhs.l) return r &lt; rhs.r;        else return l &lt; rhs.l;    &#125;&#125;;vector&lt;Node&gt; cows;vector&lt;int&gt; id;auto cmp &#x3D; [](const Node &amp;a, const Node &amp;b) -&gt; bool&#123;    return a.r &gt; b.r;&#125;;priority_queue&lt;Node, vector&lt;Node&gt;, decltype(cmp)&gt; pq(cmp);int n;int main() &#123;    cin &gt;&gt; n;    id.resize(n);    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        int l, r;        scanf(&quot;%d %d&quot;, &amp;l, &amp;r);        cows.push_back(&#123;l, r, i&#125;);    &#125;    sort(cows.begin(), cows.end());    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        &#x2F;&#x2F; 可以往后拼接        if (!pq.empty() &amp;&amp; pq.top().r &lt; cows[i].l) &#123;            auto t &#x3D; pq.top(); pq.pop();            t.r &#x3D; cows[i]. r;            id[cows[i].id] &#x3D; t.id;            pq.push(t);        &#125;        &#x2F;&#x2F; 新开一个畜栏        else &#123;            id[cows[i].id] &#x3D; pq.size() + 1;            pq.push(&#123;cows[i].l, cows[i].r, pq.size() + 1&#125;);        &#125;    &#125;    cout &lt;&lt; pq.size() &lt;&lt; endl;    for (int i &#x3D; 0; i &lt; n; i ++) printf(&quot;%d\n&quot;, id[i]);    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(nlogn)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">nlogn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span></span></span></span>为调整优先队列的时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-24.防晒</title>
    <link href="/2023/01/24/Algorithm/Comp/0x00/20230124-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-024-%E9%98%B2%E6%99%92/"/>
    <url>/2023/01/24/Algorithm/Comp/0x00/20230124-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-024-%E9%98%B2%E6%99%92/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/112/">算法竞赛进阶指南-24.防晒</a></p><p>本题是一道区间问题，区间问题往往具有贪心策略，并与排序相关。</p><h3 id="method-贪心"><a class="markdownIt-Anchor" href="#method-贪心"></a> Method : 贪心</h3><blockquote><p>难点在于这个问题：为什么不能将奶牛的单位强度按照minSPF从小到大排序,然后防晒霜也按照从小到大排序,将最小的先和最小的进行匹配呢？</p></blockquote><p>[1, 5]和[2, 3]和spfs[1] = 1, spfs[2] = 1. 这个包含关系在排序后始终要优先考虑区间[2,  3]</p><p>不管是按左端点排序还是按右端点排序，始终要注意一点:</p><p><strong>先考虑的区间不能完全包含后考虑的区间</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;map&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int C &#x3D; 2500 + 7;const int L &#x3D; 2500 + 7;int c, l;vector&lt;PII&gt; cows;map&lt;int, int&gt; spfs;int main() &#123;    cin &gt;&gt; c &gt;&gt; l;    for (int i &#x3D; 0; i &lt; c; i ++) &#123;        int min_spf, max_spf;        scanf(&quot;%d %d&quot;, &amp;min_spf, &amp;max_spf);        cows.push_back(&#123;min_spf, max_spf&#125;);    &#125;    for (int i &#x3D; 0; i &lt; l; i ++) &#123;        int spf,  cover;        scanf(&quot;%d %d&quot;, &amp;spf, &amp;cover);        spfs[spf] +&#x3D; cover;    &#125;        int res &#x3D; 0;    sort(cows.begin(), cows.end());    for (int i &#x3D; cows.size() - 1; i &gt;&#x3D; 0; i --) &#123;        auto spf &#x3D; spfs.upper_bound(cows[i].second);        if (spf &#x3D;&#x3D; spfs.begin()) continue; &#x2F;&#x2F; 对upper_bound()函数检查边界        else spf &#x3D; prev(spf);        if (spf-&gt;first &gt;&#x3D; cows[i].first) &#123;            res ++;            spf-&gt;second --;            if (spf-&gt;second &#x3D;&#x3D; 0) &#123;                spfs.erase(spf);            &#125;        &#125;    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(nlogn)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 第一步快速排序sort的时间复杂度 是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，第二步<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>次循环中每次二分<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，合计<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(nlogn)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，spfs的map和cows数组长度均为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-23.天才ACM</title>
    <link href="/2023/01/23/Algorithm/Comp/0x00/20230123-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-023-%E5%A4%A9%E6%89%8DACM/"/>
    <url>/2023/01/23/Algorithm/Comp/0x00/20230123-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-023-%E5%A4%A9%E6%89%8DACM/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/111/">算法竞赛进阶指南-23.天才ACM</a></p><h3 id="method-位运算-二进制拆分"><a class="markdownIt-Anchor" href="#method-位运算-二进制拆分"></a> Method : 位运算-二进制拆分</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;LL a, b, p;LL fast_pow(LL x, LL n) &#123;    LL res &#x3D; 1LL;    while (n) &#123;        if (n &amp; 1) &#123;            res &#x3D; res * x % p;        &#125;        x &#x3D; x * x % p;        n &#x3D; n &gt;&gt; 1;    &#125;    return res % p;&#125;int main() &#123;    cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;    cout &lt;&lt; fast_pow(a, b) &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(log_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span>为对n进行二进制拆分的时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-22.奇数码问题</title>
    <link href="/2023/01/22/Algorithm/Comp/0x00/20230122-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-022-%E5%A5%87%E6%95%B0%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <url>/2023/01/22/Algorithm/Comp/0x00/20230122-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-022-%E5%A5%87%E6%95%B0%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/110/">算法竞赛进阶指南-22.奇数码问题</a></p><h3 id="method-归并排序"><a class="markdownIt-Anchor" href="#method-归并排序"></a> Method : 归并排序</h3><p>空格左(右)移动时，逆序对数量显然不发生变化；空格上(下)移动时，相当于某个数与它前(后)n - 1个数交换了位置，因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">{n -1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span></span>是偶数，所以逆序对数的变化也只能是偶数。</p><p>把除了空格(也就是0)以外的数据放在n * n的一维数组中，然后统计逆序对的个数，判断逆序对个数的奇偶性是否相同。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;LL a, b, p;LL fast_pow(LL x, LL n) &#123;    LL res &#x3D; 1LL;    while (n) &#123;        if (n &amp; 1) &#123;            res &#x3D; res * x % p;        &#125;        x &#x3D; x * x % p;        n &#x3D; n &gt;&gt; 1;    &#125;    return res % p;&#125;int main() &#123;    cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;    cout &lt;&lt; fast_pow(a, b) &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(log_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span>为对n进行二进制拆分的时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul><p>上面的结论还可以扩展到n * m个数码的问题，此时需要对列数m分奇偶讨论:</p><ul><li>当m为奇数，需要判断&quot;<strong>两个局面的逆序对数</strong>&quot;的奇偶性是否相同</li><li>当m为偶数，需要判断&quot;<strong>两个局面的逆序对数之差</strong>&quot;和“<strong>两个局面下空格所在行数之差</strong>”的奇偶性是否相同</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>逆序对</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-21.超快速排序</title>
    <link href="/2023/01/21/Algorithm/Comp/0x00/20230121-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-021-%E8%B6%85%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/2023/01/21/Algorithm/Comp/0x00/20230121-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-021-%E8%B6%85%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/109/">算法竞赛进阶指南-21.超快速排序</a></p><p>题目要求只能过比较相邻两个数值的排序方法，实际上就是冒泡排序。在排序过程中找到一对大小颠倒的相邻数值，把它们交换，就会使得整个序列的逆序对数量-1。而对于一个有序序列，显然其逆序对的数量为0，因此该题就可以转换为求一个序列逆序对的数量，即为题目所求的交换次数。</p><h3 id="method-归并排序"><a class="markdownIt-Anchor" href="#method-归并排序"></a> Method : 归并排序</h3><p>使用归并排序可以在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(nlog_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，求一个长度为n的序列的逆序对的个数。</p><p>递归对左右两半排序时，可以把左右两半各自内部的逆序对数作为子问题，在合并时只需要考虑“左边一半里一个较大的数”与“右边一半里一个较小的数”构成逆序对的情形。</p><p>合并两个有序子序列<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>l</mi><mo>∼</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">{arr[l \sim mid]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mclose">]</span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1</mn><mo>∼</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">{arr[mid + 1 \sim r]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span></span>，采用两个指针<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi mathvariant="normal">，</mi><mi>j</mi></mrow><annotation encoding="application/x-tex">i，j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>分别扫描，当出现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">arr[i] &gt; arr[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>时，说明<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>i</mi><mo>∼</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">{arr[i \sim mid]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mclose">]</span></span></span></span></span>中所有元素都与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">arr[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>满足逆序对，数量为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">mid - i + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;typedef long long LL;const int N &#x3D; 5e5 + 7;int n;vector&lt;int&gt; tmp;LL merge_sort(vector&lt;int&gt; &amp;arr, int l, int r) &#123;    if (l &gt;&#x3D; r) return 0;        int mid &#x3D; l + (r - l) &#x2F; 2;    LL res &#x3D; merge_sort(arr, l, mid) + merge_sort(arr, mid + 1, r);        int k &#x3D; 0;    int i &#x3D; l, j &#x3D; mid + 1;    while (i &lt;&#x3D; mid &amp;&amp; j &lt;&#x3D; r) &#123;        if (arr[i] &lt;&#x3D; arr[j]) tmp[k ++] &#x3D; arr[i ++];        else &#123;            tmp[k ++] &#x3D; arr[j ++];            res +&#x3D; mid - i + 1; &#x2F;&#x2F; 从i到mid全是满足的逆序对        &#125;    &#125;        while (i &lt;&#x3D; mid) tmp[k ++] &#x3D; arr[i ++];    while (j &lt;&#x3D; r) tmp[k ++] &#x3D; arr[j ++];        for (int i &#x3D; l, j &#x3D; 0; j &lt; k; i ++, j ++) arr[i] &#x3D; tmp[j];    return res;&#125;int main () &#123;    while (true) &#123;        int n;        scanf(&quot;%d&quot;, &amp;n);                if (n !&#x3D; 0) &#123;            vector&lt;int&gt; arr;            for (int i &#x3D; 0; i &lt; n; i ++) &#123;                int x;                scanf(&quot;%d&quot;, &amp;x);                arr.emplace_back(x);            &#125;            tmp.resize(arr.size());            LL res &#x3D; merge_sort(arr, 0, arr.size() - 1);            cout &lt;&lt; res &lt;&lt; endl;        &#125;        else &#123;            break;        &#125;    &#125;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(nlog_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 就是归并排序的时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>  要开辟数组arr和tmp，长度均为n。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>逆序对</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-20.动态中位数</title>
    <link href="/2023/01/20/Algorithm/Comp/0x00/20230120-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-020-%E5%8A%A8%E6%80%81%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <url>/2023/01/20/Algorithm/Comp/0x00/20230120-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-020-%E5%8A%A8%E6%80%81%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/108/">算法竞赛进阶指南-20.动态中位数</a></p><h3 id="method-对顶堆"><a class="markdownIt-Anchor" href="#method-对顶堆"></a> Method : 对顶堆</h3><p>具体思路大致是，维护两个堆：一个大根堆，一个小根堆。然后小于中位数的都放在大根堆，大于中位数的都放在小根堆，这样的两个堆就构成了一个<strong>对顶堆</strong>。</p><p><strong>当序列的个数为奇数时，中位数恰好为主导堆的堆顶；当序列的个数为偶数时，中位数为两个堆顶的平均数。</strong></p><blockquote><p>如何维护这个对顶堆？</p><ol><li>当小根堆的最小值&lt;大根堆的最大值时，交换堆顶。</li></ol><p><code>min_heap.top() &lt; max_heap.top()</code></p><ol start="2"><li>如果某个堆的个数大于了当前序列的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">{\frac{1}{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>，那么就将多余的堆顶移到另一个堆，直到两个堆数量相等或只相差1。</li></ol><p><code>abs(max_heap.size() - min_heap.size()) &gt; 1</code></p></blockquote><p><strong>[代码1]:</strong>  以大根堆为主导</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int M &#x3D; 1e6 + 7;int p;int main() &#123;    cin &gt;&gt; p;        while (p --) &#123;        int id, m;        scanf(&quot;%d %d&quot;, &amp;id, &amp;m);        printf(&quot;%d %d\n&quot;, id, (m + 1) &#x2F; 2);                priority_queue&lt;int&gt; max_heap;        priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; min_heap;         int cnt &#x3D; 0;        for (int i &#x3D; 1; i &lt;&#x3D; m; i ++) &#123;            int t;            scanf(&quot;%d&quot;, &amp;t);            max_heap.push(t);            &#x2F;&#x2F; 维护对顶堆            if (min_heap.size() &amp;&amp; min_heap.top() &lt; max_heap.top()) &#123;                auto a &#x3D; min_heap.top(); auto b &#x3D; max_heap.top();                min_heap.pop(); max_heap.pop();                min_heap.push(b); max_heap.push(a);            &#125;                        if (max_heap.size() - min_heap.size() &gt; 1) &#123;                min_heap.push(max_heap.top());                max_heap.pop();            &#125;                        &#x2F;&#x2F; 奇数输出            if (i &amp; 1) &#123;                cnt ++;                printf(&quot;%d &quot;, max_heap.top());                if (cnt % 10 &#x3D;&#x3D; 0) puts(&quot;&quot;);            &#125;        &#125;        if (cnt % 10) puts(&quot;&quot;); &#x2F;&#x2F; 最后一行不满足10个也要换行    &#125;        return 0;&#125;</code></pre><p><strong>[代码2]:</strong>  以小根堆为主导</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int M &#x3D; 1e6 + 7;int p;int main() &#123;    cin &gt;&gt; p;        while (p --) &#123;        int id, m;        scanf(&quot;%d %d&quot;, &amp;id, &amp;m);        printf(&quot;%d %d\n&quot;, id, (m + 1) &#x2F; 2);                priority_queue&lt;int&gt; max_heap;        priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; min_heap;         int cnt &#x3D; 0;        for (int i &#x3D; 1; i &lt;&#x3D; m; i ++) &#123;            int t;            scanf(&quot;%d&quot;, &amp;t);            min_heap.push(t);            &#x2F;&#x2F; 维护对顶堆            if (max_heap.size() &amp;&amp; min_heap.top() &lt; max_heap.top()) &#123;                auto a &#x3D; min_heap.top(); auto b &#x3D; max_heap.top();                min_heap.pop(); max_heap.pop();                min_heap.push(b); max_heap.push(a);            &#125;                        if (min_heap.size() - max_heap.size() &gt; 1) &#123;                max_heap.push(min_heap.top());                min_heap.pop();            &#125;                        &#x2F;&#x2F; 奇数输出            if (i &amp; 1) &#123;                cnt ++;                printf(&quot;%d &quot;, min_heap.top());                if (cnt % 10 &#x3D;&#x3D; 0) puts(&quot;&quot;);            &#125;        &#125;        if (cnt % 10) puts(&quot;&quot;); &#x2F;&#x2F; 最后一行不满足10个也要换行    &#125;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(nlog_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">nlog_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span>是调整堆的时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中n是建堆所需要的空间。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>堆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-19.七夕祭</title>
    <link href="/2023/01/19/Algorithm/Comp/0x00/20230119-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-019-%E4%B8%83%E5%A4%95%E7%A5%AD/"/>
    <url>/2023/01/19/Algorithm/Comp/0x00/20230119-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-019-%E4%B8%83%E5%A4%95%E7%A5%AD/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/91/">算法竞赛进阶指南-19.七夕祭</a></p><h3 id="method-排序"><a class="markdownIt-Anchor" href="#method-排序"></a> Method : 排序</h3><p>先看一下本题的前置题目，<a href="https://www.acwing.com/problem/content/submission/1538/">均分纸牌</a> 和 环形均分纸牌</p><p>b[N] = a[N] - avg;</p><p>s[i] = s[i - 1] + b[i];  // 求b[i]的前缀和，然后对前缀和求abs之和算cost</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;const int N &#x3D; 100 + 7;int n;int a[N];int s[N];int main() &#123;    &#x2F;&#x2F; 可以得到target平均数，难办的是移动次数    cin &gt;&gt; n;    int sum &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;a[i]);        sum +&#x3D; a[i];    &#125;        int avg &#x3D; sum &#x2F; n;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        a[i] -&#x3D; avg;    &#125;        int res &#x3D; 0;    int cost &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        s[i] &#x3D; s[i - 1] + a[i];        if (s[i] !&#x3D; 0) res ++;        &#x2F;&#x2F; cost +&#x3D; abs(s[i]);   &#x2F;&#x2F; 计算每次只能移动一个的移动次数    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><p>基础位运算，本题是快速幂的模板题。</p><p>注意两点:</p><ol><li>有取模运算时不要用自乘<code>*=</code>， 否则会影响计算顺序</li><li>return 时也要取模， 防止极端例子:<code>n = 0</code>且<code>p = 1</code></li></ol><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;LL a, b, p;LL fast_pow(LL x, LL n) &#123;    LL res &#x3D; 1LL;    while (n) &#123;        if (n &amp; 1) &#123;            res &#x3D; res * x % p;        &#125;        x &#x3D; x * x % p;        n &#x3D; n &gt;&gt; 1;    &#125;    return res % p;&#125;int main() &#123;    cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;    cout &lt;&lt; fast_pow(a, b) &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(log_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span>为对n进行二进制拆分的时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-18.货仓选址</title>
    <link href="/2023/01/18/Algorithm/Comp/0x00/20230118-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-018-%E8%B4%A7%E4%BB%93%E9%80%89%E5%9D%80/"/>
    <url>/2023/01/18/Algorithm/Comp/0x00/20230118-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-018-%E8%B4%A7%E4%BB%93%E9%80%89%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/106/">算法竞赛进阶指南-18.货仓选址</a></p><h3 id="method-排序"><a class="markdownIt-Anchor" href="#method-排序"></a> Method : 排序</h3><p>思路很明确的一道题，就是要排序后依次计算a[]首尾的元素之间的距离。</p><p>使用<code>i &lt; n/2</code>就不需要分奇偶讨论了</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;int n;vector&lt;int&gt; a;int main() &#123;    cin &gt;&gt; n;    a.resize(n);    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;a[i]);    &#125;    sort(a.begin(), a.end());    LL res &#x3D; 0;    for (int i &#x3D; 0; i &lt; n &#x2F; 2; i ++)  &#123;        res +&#x3D; (a[n - i - 1] - a[i]);    &#125;    cout &lt;&lt; res &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(nlog_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 使用<code>&lt;algorithm&gt;</code>中的sort排序和快排的时间复杂度是相同的 。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，数组a的长度为n。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-12.激光炸弹</title>
    <link href="/2023/01/12/Algorithm/Comp/0x00/20230112-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-012-%E6%BF%80%E5%85%89%E7%82%B8%E5%BC%B9/"/>
    <url>/2023/01/12/Algorithm/Comp/0x00/20230112-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-012-%E6%BF%80%E5%85%89%E7%82%B8%E5%BC%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/101/">算法竞赛进阶指南-12.激光炸弹</a></p><p>cin &gt;&gt; n &gt;&gt; r;</p><p>题目意思就是有n个目标，炸弹范围是r * r</p><p>接下来输入n行目标的坐标x, y 和其价值w，</p><p>要求输出一个炸弹范围最多能包含多少总价值的目标。</p><h3 id="method-前缀和"><a class="markdownIt-Anchor" href="#method-前缀和"></a> Method : 前缀和</h3><p>显然是二维的前缀和问题。</p><p>这道题比较难的点:</p><ol><li>坐标的偏移处理, <code>s[++ x][++ y] += w</code></li><li>内存限制很严格, 必须在原数组上做前缀和覆盖，不能另外申请数组</li><li>数据点严格, 不加这两句过不了最后两个点，<code>r = min(r, N - 1); x_max = y_max = r;</code></li></ol><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;const int N &#x3D; 5e3 + 7;int n, r;int x_max, y_max;&#x2F;&#x2F;  int w[N][N];int s[N][N];int main() &#123;    cin &gt;&gt; n &gt;&gt; r;    r &#x3D; min(r, N - 1);    x_max &#x3D; y_max &#x3D; r;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        int x, y, curw;        scanf(&quot;%d %d %d&quot;, &amp;x, &amp;y, &amp;curw);        s[++ x][++ y] +&#x3D; curw;        x_max &#x3D; max(x_max, x);        y_max &#x3D; max(y_max, y);    &#125;    &#x2F;&#x2F; 预处理前缀和    for (int i &#x3D; 1; i &lt;&#x3D; x_max; i ++) &#123;        for (int j &#x3D; 1; j &lt;&#x3D; y_max; j ++) &#123;            s[i][j] &#x3D; s[i][j - 1] + s[i - 1][j] - s[i - 1][j - 1] + s[i][j];        &#125;    &#125;    int res &#x3D; 0;    &#x2F;&#x2F; 以右下坐标为原点统计    &#x2F;&#x2F; 右下点(x2, y2) : (i, j)   左上点(x1, y1) : (i - r + 1, j - r + 1)    for (int i &#x3D; r; i &lt;&#x3D; x_max; i ++) &#123;        for (int j &#x3D; r; j &lt;&#x3D; y_max; j ++) &#123;            int tar &#x3D; s[i][j] - s[i][j - r] - s[i - r][j] + s[i - r][j - r];            res &#x3D; max(res, tar);        &#125;    &#125;    &#x2F;&#x2F; 以左上坐标为原点统计    &#x2F;&#x2F; for (int i &#x3D; 1; i &lt;&#x3D; x_max - r + 1; i ++) &#123;    &#x2F;&#x2F;     for (int j &#x3D; 1; j &lt;&#x3D; y_max - r + 1; j ++) &#123;    &#x2F;&#x2F;         int tar &#x3D; s[i + r - 1][j + r - 1] - s[i + r - 1][j - 1] - s[i - 1][j + r - 1] + s[i - 1][j - 1];    &#x2F;&#x2F;         res &#x3D; max(res, tar);    &#x2F;&#x2F;     &#125;    &#x2F;&#x2F; &#125;    cout &lt;&lt; res &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>∗</mo><msub><mi>y</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(x_{max} * y_{max})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span> 。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>∗</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(N * N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>前缀和</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-11.分形之城</title>
    <link href="/2023/01/11/Algorithm/Comp/0x00/20230111-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-011-%E5%88%86%E5%BD%A2%E4%B9%8B%E5%9F%8E/"/>
    <url>/2023/01/11/Algorithm/Comp/0x00/20230111-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-011-%E5%88%86%E5%BD%A2%E4%B9%8B%E5%9F%8E/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/91/">算法竞赛进阶指南-1.a^b</a></p><h3 id="method-位运算-二进制拆分"><a class="markdownIt-Anchor" href="#method-位运算-二进制拆分"></a> Method : 位运算-二进制拆分</h3><p>基础位运算，本题是快速幂的模板题。</p><p>注意两点:</p><ol><li>有取模运算时不要用自乘<code>*=</code>， 否则会影响计算顺序</li><li>return 时也要取模， 防止极端例子:<code>n = 0</code>且<code>p = 1</code></li></ol><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;LL a, b, p;LL fast_pow(LL x, LL n) &#123;    LL res &#x3D; 1LL;    while (n) &#123;        if (n &amp; 1) &#123;            res &#x3D; res * x % p;        &#125;        x &#x3D; x * x % p;        n &#x3D; n &gt;&gt; 1;    &#125;    return res % p;&#125;int main() &#123;    cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;    cout &lt;&lt; fast_pow(a, b) &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(log_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span>为对n进行二进制拆分的时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-10.约数之和</title>
    <link href="/2023/01/10/Algorithm/Comp/0x00/20230110-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-010-%E7%BA%A6%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2023/01/10/Algorithm/Comp/0x00/20230110-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-010-%E7%BA%A6%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/99/">算法竞赛进阶指南-10.约数之和</a></p><p>假设现在有两个自然数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>A</mi><mi>B</mi></msup></mrow><annotation encoding="application/x-tex">A^B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span></span></span></span></span></span></span> 的所有约数之和。</p><p>请你求出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mn>9901</mn></mrow><annotation encoding="application/x-tex">S \bmod 9901</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">9</span><span class="mord">0</span><span class="mord">1</span></span></span></span> 的值是多少。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>在一行中输入用空格隔开的两个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出一个整数，代表 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mn>9901</mn></mrow><annotation encoding="application/x-tex">S \bmod 9901</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">9</span><span class="mord">0</span><span class="mord">1</span></span></span></span> 的值。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo>≤</mo><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">0 \le A,B \le 5 \times 10^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><pre class="language-none"><code class="language-none">2 3</code></pre><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><pre class="language-none"><code class="language-none">15</code></pre><p><strong>注意</strong>: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 不会同时为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p><h3 id="method-分治"><a class="markdownIt-Anchor" href="#method-分治"></a> Method : 分治</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;unordered_map&gt;#include &lt;iostream&gt;using namespace std;typedef long long LL;const int MOD &#x3D; 9901;int a, b;unordered_map&lt;int, int&gt; primes;LL fast_pow(LL a, LL b) &#123;    LL res &#x3D; 1LL % MOD;    for (; b; b &gt;&gt;&#x3D; 1) &#123;        if (b &amp; 1) &#123;            res &#x3D; res * a % MOD;        &#125;        a &#x3D; a * a % MOD;    &#125;        return res;&#125;int sum(int p, int k) &#123;    if (k &#x3D;&#x3D; 1) return 1;    if (k % 2 &#x3D;&#x3D; 0) &#123;        return (fast_pow(p, k&#x2F; 2) + 1) * sum(p, k &#x2F; 2) % MOD;    &#125;    else &#123;        return (fast_pow(p, k - 1) + sum(p, k - 1)) % MOD;    &#125;&#125;int main() &#123;    cin &gt;&gt; a &gt;&gt; b;        for (int i &#x3D; 2; i &lt;&#x3D; a &#x2F; i; i ++) &#123;        while (a % i &#x3D;&#x3D; 0) &#123;            a &#x2F;&#x3D; i;            primes[i] ++;        &#125;    &#125;    if (a &gt; 1) primes[a] ++;        LL res &#x3D; 1;    for (auto&amp; prime : primes) &#123;        int p &#x3D; prime.first, k &#x3D; prime.second * b;                res &#x3D; res * sum(p, k + 1) % MOD;    &#125;        if (a &#x3D;&#x3D; 0) res &#x3D; 0;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(\log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>为对n进行二进制拆分的时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-9.奇怪的汉诺塔</title>
    <link href="/2023/01/09/Algorithm/Comp/0x00/20230109-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-009-%E5%A5%87%E6%80%AA%E7%9A%84%E6%B1%89%E8%AF%BA%E5%A1%94/"/>
    <url>/2023/01/09/Algorithm/Comp/0x00/20230109-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-009-%E5%A5%87%E6%80%AA%E7%9A%84%E6%B1%89%E8%AF%BA%E5%A1%94/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/98/">算法竞赛进阶指南-9.奇怪的汉诺塔</a></p><h3 id="method-dp-递推"><a class="markdownIt-Anchor" href="#method-dp-递推"></a> Method : DP + 递推</h3><p>首先要明白，每多一个塔，搬运次数必定减少：比如n个盘，n个塔，只需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2(n - 1) + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>次。</p><p>因此，关键在于怎么把4塔问题转化为3塔问题:</p><p>4塔: A   B   C   D</p><p>先把i个盘子放到B塔，然后关注剩下n - i个盘子放到A C D塔，怎么放搬运次数最少=&gt;这样转为3塔问题。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>∗</mo><mn>2</mn><mo>+</mo><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{f[i] = min (f[i], f[j] * 2 + d[i - j])}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;const int N &#x3D; 12 + 7;int d[N];  &#x2F;&#x2F; 三塔int f[N];  &#x2F;&#x2F; 四塔int main() &#123;        d[1] &#x3D; 1;    for (int i &#x3D; 2; i &lt;&#x3D; 12; i ++) &#123;        d[i] &#x3D; d[i -1] * 2 + 1;    &#125;        memset(f, 0x3f, sizeof f);    f[1] &#x3D; 1;    for (int i &#x3D; 2; i &lt;&#x3D; 12; i ++) &#123;        for (int j &#x3D; 0; j &lt; i; j ++) &#123;            f[i] &#x3D; min(f[i], f[j] * 2 + d[i - j]); &#x2F;&#x2F;依赖3塔min        &#125;    &#125;         for (int i &#x3D; 1; i &lt;&#x3D; 12; i ++) &#123;        printf(&quot;%d\n&quot;, f[i]);    &#125;        return 0;&#125;&#96;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n^2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>的DP双重循环。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul><h3 id="ps"><a class="markdownIt-Anchor" href="#ps"></a> PS</h3><p>推广到5塔，首先是要求出4塔的最小搬运次数，然后再转化为3塔。依次类推求n塔。</p><p>5塔问题转化为4塔问题，4塔问题转化为3塔问题…</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;const int N &#x3D; 12 + 7;int d[N];  &#x2F;&#x2F; 三塔int f[N];  &#x2F;&#x2F; 四塔int g[N];  &#x2F;&#x2F; 五塔int main() &#123;        d[1] &#x3D; 1;    for (int i &#x3D; 2; i &lt;&#x3D; 12; i ++) &#123;        d[i] &#x3D; d[i -1] * 2 + 1;    &#125;        memset(f, 0x3f, sizeof f);    f[1] &#x3D; 1;    for (int i &#x3D; 2; i &lt;&#x3D; 12; i ++) &#123;        for (int j &#x3D; 0; j &lt; i; j ++) &#123;            f[i] &#x3D; min(f[i], f[j] * 2 + d[i - j]); &#x2F;&#x2F;依赖3塔min        &#125;    &#125;        memset(g, 0x3f, sizeof g);    g[1] &#x3D; 1;        for (int i &#x3D; 2; i &lt;&#x3D; 12; i ++) &#123;        for (int j &#x3D; 0; j &lt; i; j ++) &#123;            g[i] &#x3D; min(g[i], g[j] * 2 + f[i - j]); &#x2F;&#x2F;依赖4塔min        &#125;    &#125;        for (int i &#x3D; 1; i &lt;&#x3D; 12; i ++) &#123;        printf(&quot;%d\n&quot;, e[i]);    &#125;        return 0;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>线性DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-8.费解的开关</title>
    <link href="/2023/01/08/Algorithm/Comp/0x00/20230108-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-008-%E8%B4%B9%E8%A7%A3%E7%9A%84%E5%BC%80%E5%85%B3/"/>
    <url>/2023/01/08/Algorithm/Comp/0x00/20230108-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-008-%E8%B4%B9%E8%A7%A3%E7%9A%84%E5%BC%80%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/95/">算法竞赛进阶指南-8.费解的开关</a></p><h3 id="method1-位运算枚举递推"><a class="markdownIt-Anchor" href="#method1-位运算枚举递推"></a> Method1 : 位运算+枚举+递推</h3><ul><li>对第一行所有灯按不按的所有情况的枚举<ul><li>以保证第一行为全1为目的，用第一行的当前状态确定第二行的按法，接下来每行依次类推</li><li>当最后一行没法全1，说明不满足</li></ul></li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;const int N &#x3D; 5 + 7;const int INF &#x3D; 0x3f3f3f3f;const int dir[5][2] &#x3D; &#123;&#123;0, 0&#125;, &#123;0, -1&#125;, &#123;1, 0&#125;, &#123;0, 1&#125;, &#123;-1, 0&#125;&#125;;char graph[N][N];&#x2F;&#x2F; 开关void turn(int x, int y) &#123;     for (auto d : dir) &#123;        int xn &#x3D; x + d[0];        int yn &#x3D; y + d[1];        if (0 &lt;&#x3D; xn &amp;&amp; xn &lt; 5 &amp;&amp; 0 &lt;&#x3D; yn &amp;&amp; yn &lt; 5) &#123;            graph[xn][yn] ^&#x3D; 1; &#x2F;&#x2F; 异或配对        &#125;    &#125;&#125;int main() &#123;    int m;     cin &gt;&gt; m;    while (m --) &#123;        for (int i &#x3D; 0; i &lt; 5; i ++) &#123;            scanf(&quot;%s&quot;, graph[i]);        &#125;                &#x2F;&#x2F;枚举        int res &#x3D; INF;        for (int k &#x3D; 0; k &lt; 1 &lt;&lt; 5; k ++) &#123;            char backup[N][N];            memcpy(backup, graph, sizeof graph);                        int cnt &#x3D; 0;            for (int j &#x3D; 0; j &lt; 5; j ++) &#123;                if (k &gt;&gt; j &amp; 1) &#123;                    turn(0, j);                    cnt ++;                &#125;            &#125;                        &#x2F;&#x2F; 根据第一行递推            for (int i &#x3D; 0; i &lt; 4; i ++) &#123;                for (int j &#x3D; 0; j &lt; 5; j ++) &#123;                    if (graph[i][j] &#x3D;&#x3D; &#39;0&#39;) &#123;                        turn(i + 1, j);                        cnt ++;                    &#125;                   &#125;            &#125;                        bool flag &#x3D; true;            for (int j &#x3D; 0; j &lt; 5; j ++) &#123;                if (graph[4][j] &#x3D;&#x3D; &#39;0&#39;) &#123;                    flag &#x3D; false;                    break;                &#125;            &#125;                        if(flag) res &#x3D; min(res, cnt);            memcpy(graph, backup, sizeof backup);        &#125;                if (res &lt;&#x3D; 6) cout &lt;&lt; res &lt;&lt; endl;        else cout &lt;&lt; -1 &lt;&lt; endl;    &#125;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>∗</mo><mn>32</mn><mo>∗</mo><mo stretchy="false">(</mo><mn>25</mn><mo>∗</mo><mn>5</mn><mo>+</mo><mn>5</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(m * 32 * (25 * 5 + 5))}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>为m次询问，32为第一行的枚举，25 为棋盘, *5为按开关的dir[5]个方向， +5为判断最后一行， 还要额外加上两次memcpy的时间复杂度（O(5 * 5)）。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul><h3 id="method2-广度优先遍历-递归"><a class="markdownIt-Anchor" href="#method2-广度优先遍历-递归"></a> Method2 : 广度优先遍历-递归</h3><p>我的最初想法 ： 把图转为25位的数来做，利用 i * n + j，确定当前位数，然后判dfs判断6步以内能否出现25个1， 但这样也要注意上下左右的变法</p><h4 id="复杂度分析-2"><a class="markdownIt-Anchor" href="#复杂度分析-2"></a> 复杂度分析</h4>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>位运算</tag>
      
      <tag>递推</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-7.递归实现排列型枚举</title>
    <link href="/2023/01/07/Algorithm/Comp/0x00/20230107-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-007-%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%88%97%E5%9E%8B%E6%9E%9A%E4%B8%BE/"/>
    <url>/2023/01/07/Algorithm/Comp/0x00/20230107-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-007-%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%88%97%E5%9E%8B%E6%9E%9A%E4%B8%BE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>排列的有序性用无序的for循环实现(并且需要visited数组辅助)</p><p>组合的无序性用有序的01选择实现</p></blockquote><h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/96/">算法竞赛进阶指南-7.递归实现排列型枚举</a></p><p>把 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∼</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">{1∼n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">n</span></span></span></span></span> 这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span>个整数排成一行后随机打乱顺序，输出所有可能的次序 =&gt; n个数的全排列，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>A</mi><mi>n</mi><mi>n</mi></msubsup></mrow><annotation encoding="application/x-tex">{A_n^n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>同一行相邻两个数用一个空格隔开</p><p>对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面</p><h3 id="method-递归"><a class="markdownIt-Anchor" href="#method-递归"></a> Method : 递归</h3><p>要记住用一个全局数组就能输出所有的排列情况。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;const int N &#x3D; 10;int n;vector&lt;int&gt; choosen;bool visited[N] &#x3D; &#123;0&#125;;void dfs(int depth) &#123;    &#x2F;&#x2F; boundary    if (depth &#x3D;&#x3D; n + 1) &#123;        for (int i &#x3D; 0; i &lt; choosen.size(); i ++) &#123;            printf(&quot;%d &quot;, choosen[i]);        &#125;        cout &lt;&lt; endl;        return;    &#125;        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        if (!visited[i]) &#123;            visited[i] &#x3D; true;            choosen.emplace_back(i);            dfs(depth + 1);            &#x2F;&#x2F; recover            choosen.pop_back();            visited[i] &#x3D; false;        &#125;    &#125;&#125;int main() &#123;    cin &gt;&gt; n;    dfs(1);    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n!)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mclose">)</span></span></span></span></span>， 由于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>i</mi><mi>e</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">vistied[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>数组，每次递归的循环执行次数会减1。并且很明显<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mclose">!</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>A</mi><mi>n</mi><mi>n</mi></msubsup></mrow><annotation encoding="application/x-tex">A_{n}^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>在数学上是相通的。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span>, choosen数组。</p></li></ul><h3 id="拓展-求a_nm"><a class="markdownIt-Anchor" href="#拓展-求a_nm"></a> 拓展 求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>A</mi><mi>n</mi><mi>m</mi></msubsup></mrow><annotation encoding="application/x-tex">{A_n^m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></h3><h3 id="method1-递归"><a class="markdownIt-Anchor" href="#method1-递归"></a> Method1 : 递归</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;const int N &#x3D; 10;int n, m;vector&lt;int&gt; choosen;bool visited[N] &#x3D; &#123;0&#125;;void dfs(int depth, int select) &#123;    &#x2F;&#x2F; prune    if (select &gt; m || n + 1 - depth &lt; m - select) &#123;        return;    &#125;        &#x2F;&#x2F; bounary    if (select &#x3D;&#x3D; m) &#123;        for (int i &#x3D; 0; i &lt; choosen.size(); i ++) &#123;            printf(&quot;%d &quot;, choosen[i]);        &#125;        cout &lt;&lt; endl;             return;    &#125;    if (depth &#x3D;&#x3D; n + 1) return;        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        if (!visited[i]) &#123;            visited[i] &#x3D; true;            choosen.emplace_back(i);            dfs(depth + 1, select + 1);            &#x2F;&#x2F; recover            choosen.pop_back();            visited[i] &#x3D; false;        &#125;    &#125;&#125;int main() &#123;    cin &gt;&gt; n &gt;&gt; m;    dfs(1, 0);    return 0;&#125;</code></pre><h4 id="复杂度分析-2"><a class="markdownIt-Anchor" href="#复杂度分析-2"></a> 复杂度分析</h4><h3 id="method2-a_nm-c_nm-a_mm"><a class="markdownIt-Anchor" href="#method2-a_nm-c_nm-a_mm"></a> Method2 : <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>A</mi><mi>n</mi><mi>m</mi></msubsup></mrow><annotation encoding="application/x-tex">{A_n^m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>m</mi></msubsup></mrow><annotation encoding="application/x-tex">{C_n^m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span> * <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>A</mi><mi>m</mi><mi>m</mi></msubsup></mrow><annotation encoding="application/x-tex">{A_m^m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></h3><p>利用公式定义：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>A</mi><mi>n</mi><mi>m</mi></msubsup></mrow><annotation encoding="application/x-tex">{A_n^m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>m</mi></msubsup></mrow><annotation encoding="application/x-tex">{C_n^m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span> * <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>A</mi><mi>m</mi><mi>m</mi></msubsup></mrow><annotation encoding="application/x-tex">{A_m^m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>那么可以拆解成两个bfs，嵌套来做:</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;const int N &#x3D; 10;int n, m;vector&lt;int&gt; proposal;vector&lt;int&gt; choosen;bool visited[N] &#x3D; &#123;0&#125;;&#x2F;&#x2F; Ammvoid dfs2 (int depth) &#123;    if (depth &#x3D;&#x3D; m + 1) &#123;        for (int i &#x3D; 0; i &lt; choosen.size(); i ++) &#123;            printf(&quot;%d &quot;, choosen[i]);        &#125;        cout &lt;&lt; endl;        return;    &#125;        for (int i &#x3D; 0; i &lt; proposal.size(); i ++) &#123;        if (!visited[proposal[i]]) &#123;            visited[proposal[i]] &#x3D; true;            choosen.emplace_back(proposal[i]);            dfs2(depth + 1);            &#x2F;&#x2F; recover            choosen.pop_back();            visited[proposal[i]] &#x3D; false;        &#125;    &#125;&#125;&#x2F;&#x2F; Cnmvoid dfs1(int depth, int select) &#123;    &#x2F;&#x2F; prune    if (select &gt; m || n + 1 - depth &lt; m - select) &#123;        return;    &#125;        &#x2F;&#x2F; boundary    if (select &#x3D;&#x3D; m) &#123;        dfs2(1);          return;    &#125;    if (depth &#x3D;&#x3D; n + 1) return;        proposal.emplace_back(depth);    dfs1(depth + 1, select + 1);    &#x2F;&#x2F; recover    proposal.pop_back();    dfs1(depth + 1, select);&#125;int main() &#123;    cin &gt;&gt; n &gt;&gt; m;    dfs1(1, 0);    cout &lt;&lt; cnt;    return 0;&#125;</code></pre><h4 id="复杂度分析-3"><a class="markdownIt-Anchor" href="#复杂度分析-3"></a> 复杂度分析</h4><p>注意Method1和Method2的输出字典序顺序不同。</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-6.递归实现组合型枚举</title>
    <link href="/2023/01/06/Algorithm/Comp/0x00/20230106-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-006-%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E7%BB%84%E5%90%88%E5%9E%8B%E6%9E%9A%E4%B8%BE/"/>
    <url>/2023/01/06/Algorithm/Comp/0x00/20230106-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-006-%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E7%BB%84%E5%90%88%E5%9E%8B%E6%9E%9A%E4%B8%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/95/">算法竞赛进阶指南-6.递归实现组合型枚举</a></p><p>从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∼</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">{1∼n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">n</span></span></span></span></span> 这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span> 个整数中随机选出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span></span></span> 个，输出所有可能的选择方案 =&gt;  即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>m</mi></msubsup></mrow><annotation encoding="application/x-tex">{C_{n}^{m}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>同一行内的数升序排列，相邻两个数用一个空格隔开</p><p>对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面</p><h3 id="method-递归"><a class="markdownIt-Anchor" href="#method-递归"></a> Method : 递归</h3><p>本题相较上一个题目，多一个(select == m)的条件。</p><p>其次，可以使用剪枝去优化时空复杂度，<code>n + 1 - depth &lt; m - select</code> 是表示剩下的数量 &lt; 要选的数量。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;int n, m;vector&lt;int&gt; choosen;void dfs(int depth, int select) &#123;    &#x2F;&#x2F; prune    if (select &gt; m || n + 1 - depth &lt; m - select) &#123;        return;    &#125;        &#x2F;&#x2F; boundary    if (select &#x3D;&#x3D; m) &#123;          for (int i &#x3D; 0; i &lt; choosen.size(); i ++) &#123;           printf(&quot;%d &quot;, choosen[i]);        &#125;        cout &lt;&lt; endl;        return;    &#125;    if (depth &#x3D;&#x3D; n + 1) return;            choosen.emplace_back(depth);    dfs(depth + 1, select + 1);    &#x2F;&#x2F; recover    choosen.pop_back();    dfs(depth + 1, select);&#125;int main() &#123;    cin &gt;&gt; n &gt;&gt; m;    dfs(1, 0);    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(mlog_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span>为递归函数栈的深度。 但由于剪枝，实际时间复杂度会小于该理论时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(m)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></span>,数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>h</mi><mi>o</mi><mi>o</mi><mi>s</mi><mi>e</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">{choosen}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span></span></span></span></span>的空间为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span></span></span>，另外递归函数栈会花费额外常数级空间。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-5.递归实现指数型枚举</title>
    <link href="/2023/01/05/Algorithm/Comp/0x00/20230105-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-005-%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%8C%87%E6%95%B0%E5%9E%8B%E6%9E%9A%E4%B8%BE/"/>
    <url>/2023/01/05/Algorithm/Comp/0x00/20230105-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-005-%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%8C%87%E6%95%B0%E5%9E%8B%E6%9E%9A%E4%B8%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/94/">算法竞赛进阶指南-5.递归实现指数型枚举</a></p><p>从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∼</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1∼n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个整数中随机选取任意多个，输出所有可能的选择方案。</p><p>同一行内的数必须升序排列，相邻两个数用恰好1个空格隔开</p><h3 id="method-递归"><a class="markdownIt-Anchor" href="#method-递归"></a> Method : 递归</h3><p>你的疑惑是什么？</p><p>只用一个数组能输出多种结果么？ =&gt; 可以</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;int n;vector&lt;int&gt; choosen;void dfs(int depth) &#123;    &#x2F;&#x2F; boundary    if (depth &#x3D;&#x3D; n + 1) &#123;        for (int i &#x3D; 0; i &lt; choosen.size(); i ++) &#123;            printf(&quot;%d &quot;, choosen[i]);        &#125;        cout &lt;&lt; endl;        return;    &#125;        &#x2F;&#x2F; 构造选或不选的递归二叉树    choosen.emplace_back(depth);    dfs(depth + 1);    &#x2F;&#x2F; recover    choosen.pop_back();    dfs(depth + 1);&#125;int main() &#123;    cin &gt;&gt; n;    dfs(1);     return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(nlog_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span>为递归函数栈的深度，外层<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>为打印数组的循环次数。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>h</mi><mi>o</mi><mi>o</mi><mi>s</mi><mi>e</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">{choosen}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span></span></span></span></span>的空间为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span>，另外递归函数栈会花费额外常数级空间。</p></li></ul><h3 id="method-递归-位运算"><a class="markdownIt-Anchor" href="#method-递归-位运算"></a> Method : 递归 + 位运算</h3><p>使用位运算可以把choosen数组优化</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>位运算</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-4.起床困难综合症</title>
    <link href="/2023/01/04/Algorithm/Comp/0x00/20230104-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-004-%E8%B5%B7%E5%BA%8A%E5%9B%B0%E9%9A%BE%E7%BB%BC%E5%90%88%E7%97%87/"/>
    <url>/2023/01/04/Algorithm/Comp/0x00/20230104-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-004-%E8%B5%B7%E5%BA%8A%E5%9B%B0%E9%9A%BE%E7%BB%BC%E5%90%88%E7%97%87/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/1000/">算法竞赛进阶指南-4.起床困难综合症</a></p><h3 id="method-位运算-贪心"><a class="markdownIt-Anchor" href="#method-位运算-贪心"></a> Method : 位运算-贪心</h3><p>首先，很容易想到暴力的做法：枚举每一个m，进行n次操作，然后记录最大值:</p><pre class="language-c++" data-language="c++"><code class="language-c++">for (int i &#x3D; 1; i &lt;&#x3D; m; i ++) &#123;    for (int j &#x3D; 1; j &lt;&#x3D; n; j ++) &#123;        if (op[j] &#x3D;&#x3D; &quot;XOR&quot;) &#123;            i &#x3D; i ^ t[j];        &#125;        else if (...) &#123;            &#x2F;&#x2F; ...        &#125;    &#125;    if (i &gt; max_i) &#x2F;&#x2F; ...&#125;</code></pre><p>但是这样时间复杂度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，是不可取的。</p><hr /><p>而不难发现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>N</mi><mi>D</mi><mo separator="true">,</mo><mi>X</mi><mi>O</mi><mi>R</mi><mo separator="true">,</mo><mi>O</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">{AND,XOR, OR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span></span>这三个操作，参与位运算时，各个位之间是独立无关的。<br />因此，为了保证res取最大值，可以从高位到低位考虑，输入的x的每一位填0还是1，并且要尽量保证操作完后的数的高位是1(贪心)。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;bitset&gt;#include &lt;string&gt;#include &lt;iostream&gt;using namespace std;const int M &#x3D; 31;int n , m ;int main() &#123;    bitset&lt;M&gt; zero , one ;    zero.reset(); &#x2F;&#x2F; 一个初始化每一位都是0    one.set();    &#x2F;&#x2F; 一个初始化每一位都是1    cin &gt;&gt; n &gt;&gt; m ;        while(n --) &#123;        string x ;        int y ;        cin &gt;&gt; x &gt;&gt; y ;                if (x &#x3D;&#x3D; &quot;AND&quot;) zero &amp;&#x3D; y , one &amp;&#x3D; y ;        else if (x &#x3D;&#x3D; &quot;OR&quot;) zero |&#x3D; y , one |&#x3D; y ;        else if (x &#x3D;&#x3D; &quot;XOR&quot;) zero ^&#x3D; y , one ^&#x3D; y ;    &#125;        int ans &#x3D; 0; int val &#x3D; 0;    for(int i &#x3D; M ; i &gt;&#x3D; 0 ; i --) &#123;        if(zero[i] &#x3D;&#x3D; 1) &#123;            ans +&#x3D; (1 &lt;&lt; i);          &#125;        else if(one[i] &#x3D;&#x3D; 1 &amp;&amp; val + (1 &lt;&lt; i) &lt;&#x3D; m) &#123;            val +&#x3D; (1 &lt;&lt; i);            ans +&#x3D; (1 &lt;&lt; i);         &#125;    &#125;        cout &lt;&lt; ans &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(nlog_2m)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>m</mi></mrow><annotation encoding="application/x-tex">log_2m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">m</span></span></span></span>为对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>逐位判断的时间复杂度，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>次操作。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-3.最短Hamilton路径</title>
    <link href="/2023/01/03/Algorithm/Comp/0x00/20230103-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-003-%E6%9C%80%E7%9F%ADHamilton%E8%B7%AF%E5%BE%84/"/>
    <url>/2023/01/03/Algorithm/Comp/0x00/20230103-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-003-%E6%9C%80%E7%9F%ADHamilton%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/93/">算法竞赛进阶指南-3.最短Hamilton路径</a></p><p>汉密尔顿路径是一道旅行商问题，已被证明是NP-Hard问题，无法在多项式级别的复杂度求出。</p><p>如果用暴力来做，首先要枚举所有路径，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mi mathvariant="normal">，</mi><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">{0，n - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">0</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span></span>  相当于求n个点的全排列，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mclose">!</span></span></span></span>，<br />然后枚举完之后要遍历一次，求整体的路径长度， 即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n! * n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，这个时间复杂度太高了。</p><h3 id="method-状态压缩dp"><a class="markdownIt-Anchor" href="#method-状态压缩dp"></a> Method : 状态压缩DP</h3><blockquote><p>不难发现状态是比较多的，但对于每一个节点，都只关心0(未访问)和1(已访问)这两种状态。</p><p>因此可以考虑用一个N位2进制数来表示状态集合，用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><msup><mn>2</mn><mi>N</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, 2 ^N - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>之间的一个十进制数形式表示DP状态的其中一维。</p></blockquote><p><strong>状态表示</strong> ：所有从0走到j，走过的所有点的情况是i的所有路径， 求min。</p><p><strong>状态划分</strong> ：枚举上一个状态，即0-&gt;·····–&gt;k–&gt;j中k的所有可能情况。</p><p><strong>状态转移</strong>：枚举走到j点前的一个状态=&gt;[<code>i - (1 &lt;&lt; j)</code>能把 <code>i</code>的第 <code>j</code>位 置为<code>0</code>]</p><p>上一个状态中的所处的位置，可能是 <code>i - (1 &lt;&lt; j)</code>中任意一个是1的数位k,从k到j需要花费<code>g[k][j]</code></p><p>因此 <code>f[i][j] = min(f[i][j], f[i - (1 &lt;&lt; j)][k] + g[k][j])</code></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 20;const int M &#x3D; 1 &lt;&lt; N; &#x2F;&#x2F; int一共32位&#x2F;&#x2F;无向图int g[N][N];&#x2F;&#x2F;状态int f[M][N];int n;int main() &#123;    cin &gt;&gt; n;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;        for (int j &#x3D; 0; j &lt; n; j ++) &#123;            scanf(&quot;%d&quot;, &amp;g[i][j]);        &#125;    &#125;        &#x2F;&#x2F; 起点0 &#x3D;&gt; 二进制表示: 00...01    memset(f, 0x3f, sizeof f);    f[1][0] &#x3D; 0;        for (int i &#x3D; 0; i &lt; 1 &lt;&lt; n; i ++) &#123;        for (int j &#x3D; 0; j &lt; n; j ++) &#123;            &#x2F;&#x2F; 如果i的第j位是1，说明j点可达            if (i &gt;&gt; j &amp; 1) &#123;                &#x2F;&#x2F; 枚举走到j点前的一个状态,以k为终点的最短距离                for (int k &#x3D; 0; k &lt; n; k ++) &#123;                    &#x2F;&#x2F; i - (1 &lt;&lt; j)为走到j点的前一个状态,k是前一个状态中的可达点                    if (i - (1 &lt;&lt; j) &gt;&gt; k &amp; 1) &#123;                        f[i][j] &#x3D; min(f[i][j], f[i - (1 &lt;&lt; j)][k] + g[k][j]);                    &#125;                &#125;                            &#125;        &#125;    &#125;        cout &lt;&lt; f[(1 &lt;&lt; n) - 1][n - 1] &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>∗</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(2^n * n^2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>为二进制状态压缩(i层循环)，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">{n^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>为枚举j层和枚举k层的两重循环。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n^2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>，用于存储图<code>g[N][N]</code>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-2.64位整数乘法</title>
    <link href="/2023/01/02/Algorithm/Comp/0x00/20230102-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-002-64%E4%BD%8D%E6%95%B4%E6%95%B0%E4%B9%98%E6%B3%95/"/>
    <url>/2023/01/02/Algorithm/Comp/0x00/20230102-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-002-64%E4%BD%8D%E6%95%B4%E6%95%B0%E4%B9%98%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/92/">算法竞赛进阶指南-2.64位整数乘法</a></p><h3 id="method-位运算-二进制拆分"><a class="markdownIt-Anchor" href="#method-位运算-二进制拆分"></a> Method : 位运算-二进制拆分</h3><p>基础位运算，类似于快速幂，用了倍增的思想:</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>∗</mo><mn>1</mn><mo>=</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">{a * 1 = a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">a</span></span></span></span></span>;</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>∗</mo><mn>2</mn><mo>=</mo><mn>2</mn><mi>a</mi></mrow><annotation encoding="application/x-tex">{a * 2 = 2a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mord mathdefault">a</span></span></span></span></span>;</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>∗</mo><mn>4</mn><mo>=</mo><mn>4</mn><mi>a</mi></mrow><annotation encoding="application/x-tex">{a * 4 = 4a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">4</span><span class="mord mathdefault">a</span></span></span></span></span>;</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>∗</mo><mn>8</mn><mo>=</mo><mn>8</mn><mi>a</mi></mrow><annotation encoding="application/x-tex">{a * 8 = 8a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">8</span><span class="mord mathdefault">a</span></span></span></span></span>;<br />…</p><p>对于任意一个b，都可以把b拆成一个2进制数表达</p><p>如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>9</mn><mo>=</mo><mo stretchy="false">(</mo><mn>1001</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub><mo>=</mo><mn>1</mn><mo>∗</mo><mn>8</mn><mo>+</mo><mn>0</mn><mo>∗</mo><mn>4</mn><mo>+</mo><mn>0</mn><mo>∗</mo><mn>2</mn><mo>+</mo><mn>1</mn><mo>∗</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">{9 = (1001)_2 = 1 * 8 + 0 * 4 + 0 * 2 + 1 * 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">9</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span></span></p></blockquote><p>注意两点:</p><ol><li>有取模运算时不要用自加<code>+=</code>， 否则会影响计算顺序</li><li>return 时也要取模， 防止极端例子:<code>b = 0</code>且<code>p = 1</code></li></ol><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef unsigned long long LL;LL a, b, p;LL int64_mul(LL a, LL b) &#123;    LL res &#x3D; 0LL;    while (b) &#123;        if (b &amp; 1) &#123;            res &#x3D; (res + a) % p;        &#125;        a &#x3D; (a + a) % p;        b &#x3D; b &gt;&gt; 1;    &#125;    return res % p;&#125;int main() &#123;    cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;    cout &lt;&lt; int64_mul(a, b) &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(log_2b)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>b</mi></mrow><annotation encoding="application/x-tex">log_2b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">b</span></span></span></span>为对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>进行二进制拆分的时间复杂度。</p></li><li><p>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode杂记</title>
    <link href="/2023/01/01/Algorithm/LeetCode/leetcode%E6%9D%82%E8%AE%B0/"/>
    <url>/2023/01/01/Algorithm/LeetCode/leetcode%E6%9D%82%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="判断圆形和矩形是否相交"><a class="markdownIt-Anchor" href="#判断圆形和矩形是否相交"></a> 判断圆形和矩形是否相交</h3><p><a href="https://leetcode.cn/problems/circle-and-rectangle-overlapping/">leetcode-1401.圆和矩形是否有重叠</a></p><p>这题相当有意思，如果按照常理来判断，需要分多种情况讨论圆心所在位置：</p><ul><li>圆心在矩形上下左右</li><li>圆形在矩形四个顶角上</li></ul><p>但是下面这个知乎回答，使用了<strong>向量</strong>来统合了所有情况：</p><p><a href="https://www.zhihu.com/question/24251545/answer/27184960">https://www.zhihu.com/question/24251545/answer/27184960</a></p><p>以下是其代码实现版：</p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    bool checkOverlap(int radius, int xCenter, int yCenter, int x1, int y1, int x2, int y2) &#123;        double xc &#x3D; (x1 + x2) &#x2F; 2.0;        double yc &#x3D; (y1 + y2) &#x2F; 2.0;        vector&lt;double&gt; v &#x3D; &#123;abs(xCenter - xc), abs(yCenter - yc)&#125;;        vector&lt;double&gt; h &#x3D; &#123;(x2 - x1) &#x2F; 2.0, (y2 - y1) &#x2F; 2.0&#125;;        vector&lt;double&gt; u &#x3D; &#123;max(v[0] - h[0], 0.0), max(v[1] - h[1], 0.0)&#125;;         return sqrt(u[0] * u[0] + u[1] * u[1]) &lt;&#x3D; radius;    &#125;&#125;;</code></pre><h3 id="回环句"><a class="markdownIt-Anchor" href="#回环句"></a> 回环句</h3><p><a href="https://leetcode.cn/problems/circular-sentence/">leetcode-2490.回环句</a></p><ul><li><p>环形写法<code>(i + 1) % n</code></p></li><li><p>c++实现string分割函数split，类似python中自带的split</p></li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    bool isCircularSentence(string sentence) &#123;        vector&lt;string&gt; words &#x3D; split(sentence, &#39; &#39;);        int n &#x3D; words.size();        for (int i &#x3D; 0; i &lt; n; i ++) &#123;            if (words[i].back() !&#x3D; words[(i + 1) % n][0]) &#123;                return false;            &#125;        &#125;        return true;    &#125;   &#x2F;&#x2F; delimiter 分隔符    vector&lt;string&gt; split(string&amp; s, char delimiter) &#123;        int n &#x3D; s.size();        vector&lt;string&gt;words;        int left &#x3D; 0, right &#x3D; 0;        while (right &lt; n) &#123;            if (s[right] &#x3D;&#x3D; delimiter) &#123;                words.push_back(s.substr(left, right - left));                left &#x3D; right + 1;            &#125;            right++;        &#125;        words.push_back(s.substr(left, right - left));        return words;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法竞赛进阶指南-1.a^b</title>
    <link href="/2023/01/01/Algorithm/Comp/0x00/20230101-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-001-a%5Eb/"/>
    <url>/2023/01/01/Algorithm/Comp/0x00/20230101-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-001-a%5Eb/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a class="markdownIt-Anchor" href="#题目链接"></a> 题目链接</h3><p><a href="https://www.acwing.com/problem/content/91/">算法竞赛进阶指南-1.a^b</a></p><h3 id="method-位运算-二进制拆分"><a class="markdownIt-Anchor" href="#method-位运算-二进制拆分"></a> Method : 位运算-二进制拆分</h3><p>基础位运算，本题是快速幂的模板题。</p><p>注意两点:</p><ol><li>有取模运算时不要用自乘<code>*=</code>， 否则会影响计算顺序</li><li>return 时也要取模， 防止极端例子:<code>n = 0</code>且<code>p = 1</code></li></ol><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;LL a, b, p;LL fast_pow(LL x, LL n) &#123;    LL res &#x3D; 1LL;    while (n) &#123;        if (n &amp; 1) &#123;            res &#x3D; res * x % p;        &#125;        x &#x3D; x * x % p;        n &#x3D; n &gt;&gt; 1;    &#125;    return res % p;&#125;int main() &#123;    cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;    cout &lt;&lt; fast_pow(a, b) &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(log_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span>为对n进行二进制拆分的时间复杂度。</p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法竞赛进阶指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>C++</tag>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0-based&amp;1-based</title>
    <link href="/2023/01/01/Algorithm/0-based&amp;1-based/"/>
    <url>/2023/01/01/Algorithm/0-based&amp;1-based/</url>
    
    <content type="html"><![CDATA[<p>0-based =&gt; 0 ~ n - 1   STL写法</p><p>1-based =&gt; 1 ~ n         普通数组写法</p><p>个人模板当中</p><h3 id="中位数"><a class="markdownIt-Anchor" href="#中位数"></a> 中位数</h3><p>这个随意</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>−</mo><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">0-based</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span></span></span></span>：取$ [n / 2]$</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">1-based</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span></span></span></span>：取 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[(n + 1)/ 2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">]</span></span></span></span></p><p>中位数常见于货仓选址问题</p><h3 id="前缀和差分"><a class="markdownIt-Anchor" href="#前缀和差分"></a> 前缀和&amp;差分</h3><p>基本上都是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">1-based</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span></span></span></span>，不用考虑边界</p><h3 id="图论"><a class="markdownIt-Anchor" href="#图论"></a> 图论</h3><p>个人习惯：看题目意思，一般题目从0节点开始， 就0-based，从1节点开始，就1-based，只要修改idx就行</p><p>包括但不限于邻接表head节点，边edge；有向无环图的入度deg[]，拓扑序列seq[]等。</p><pre class="language-c++" data-language="c++"><code class="language-c++">struct Edge &#123;    int to;    int w;    int nxt;&#125;;Edge[M];int head[N], idx &#x3D; 1;  &#x2F;&#x2F; head节点int deg[N], seq[N];    &#x2F;&#x2F; 拓扑排序：入度deg，拓扑序列seqvoid add(int form, int to, int w) &#123;    edge[idx].to &#x3D; to, edge[idx].w &#x3D; w, edge[idx].nxt &#x3D; head[from];     head[from] &#x3D; idx ++;    deg[to] ++;&#125;int main() &#123;    memset(head, -1, sizeof head);    memset(deg, 0, sizeof deg);    &#x2F;&#x2F; ...&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Interetsing Issue</title>
    <link href="/2023/01/01/Algorithm/Insteresting/"/>
    <url>/2023/01/01/Algorithm/Insteresting/</url>
    
    <content type="html"><![CDATA[<h3 id="对顶"><a class="markdownIt-Anchor" href="#对顶"></a> 对顶</h3><p>&quot;始终在序列中某个指定位置进行修改&quot;的性质</p><h4 id="对顶栈"><a class="markdownIt-Anchor" href="#对顶栈"></a> 对顶栈</h4><p><a href="https://www.acwing.com/problem/content/130/">Acwing-128.编辑器</a></p><p>使用两个栈，栈顶对顶，动态维护光标位置</p><h4 id="对顶堆"><a class="markdownIt-Anchor" href="#对顶堆"></a> 对顶堆</h4><p><a href="https://www.acwing.com/problem/content/108/">Acwing-106-动态中位数</a></p><p>使用一个大根堆一个小根堆，堆顶对顶，动态维护中位数</p><h3 id="货仓选址"><a class="markdownIt-Anchor" href="#货仓选址"></a> 货仓选址</h3><h4 id="货仓选址-2"><a class="markdownIt-Anchor" href="#货仓选址-2"></a> 货仓选址</h4><p><a href="https://www.acwing.com/problem/content/106/">Acwing-104.货仓选址</a></p><p>中位数问题</p><h4 id="二维货仓选址"><a class="markdownIt-Anchor" href="#二维货仓选址"></a> 二维货仓选址</h4><p><a href="https://www.luogu.com.cn/problem/P1889">P1889 士兵站队</a></p><p>中位数问题，公式变形</p><h3 id="石子合并"><a class="markdownIt-Anchor" href="#石子合并"></a> 石子合并</h3><h4 id="每次合并2个"><a class="markdownIt-Anchor" href="#每次合并2个"></a> 每次合并2个</h4><p><a href="https://www.acwing.com/problem/content/150/">Acwing-148.合并果子</a></p><p><strong>二进制编码huffman树</strong></p><h4 id="每次最多合并k个"><a class="markdownIt-Anchor" href="#每次最多合并k个"></a> 每次(最多)合并K个</h4><p><a href="https://www.acwing.com/problem/content/151/">Acwing-149.荷马史诗</a></p><p><strong>K进制编码huffman树</strong></p><h4 id="每次合并2个加强版"><a class="markdownIt-Anchor" href="#每次合并2个加强版"></a> 每次合并2个(加强版)</h4><p><a href="https://www.luogu.com.cn/problem/P6033">P6033 [NOIP2004 提高组] 合并果子 加强版</a></p><p><strong>桶排序 + 队列</strong></p><h4 id="每次合并相邻2个链式"><a class="markdownIt-Anchor" href="#每次合并相邻2个链式"></a> 每次合并相邻2个(链式)</h4><p><a href="https://www.luogu.com.cn/problem/P5569">P5569 [SDOI2008] 石子合并</a></p><p><strong>区间DP</strong></p><h4 id="每次合并相邻2个环形"><a class="markdownIt-Anchor" href="#每次合并相邻2个环形"></a> 每次合并相邻2个(环形)</h4><p><a href="https://www.luogu.com.cn/problem/P1880">P1880 [NOI1995] 石子合并</a></p><p><strong>区间DP</strong></p><h4 id="每次合并连续k个链式"><a class="markdownIt-Anchor" href="#每次合并连续k个链式"></a> 每次合并连续K个(链式)</h4><p><a href="https://leetcode.cn/problems/minimum-cost-to-merge-stones">LeetCode-1000.合并石头的最低成本</a></p><p><strong>区间DP</strong></p><h3 id="均分纸牌"><a class="markdownIt-Anchor" href="#均分纸牌"></a> 均分纸牌</h3><h4 id="链式均分纸牌"><a class="markdownIt-Anchor" href="#链式均分纸牌"></a> 链式均分纸牌</h4><p><a href="https://www.luogu.com.cn/problem/P1031">P1031 [NOIP2002 提高组] 均分纸牌</a></p><p>均分纸牌，最后一个人不传递</p><h4 id="环形均分纸牌"><a class="markdownIt-Anchor" href="#环形均分纸牌"></a> 环形均分纸牌</h4><p><a href="https://www.luogu.com.cn/problem/P2512">P2512 [HAOI2008]糖果传递</a></p><p>考虑如何破环成链=&gt;存在最优解，使得环中有相邻两人之间没有发生交换，以此作为断点.</p><h3 id="约瑟夫环"><a class="markdownIt-Anchor" href="#约瑟夫环"></a> 约瑟夫环</h3><p><a href="https://www.luogu.com.cn/problem/P1996">P1996 约瑟夫问题</a></p><p>比较经典的做法就是用链表构造循环链表，或者用双向队列构造循环队列</p><h3 id="超级源点"><a class="markdownIt-Anchor" href="#超级源点"></a> 超级源点</h3><h4 id="多源bfs"><a class="markdownIt-Anchor" href="#多源bfs"></a> 多源BFS</h4><p><a href="https://www.acwing.com/problem/content/175/">Acwing-173.矩阵距离</a></p><h4 id="多源dijsktra"><a class="markdownIt-Anchor" href="#多源dijsktra"></a> 多源dijsktra</h4><p><a href="https://www.acwing.com/problem/content/1490/">Acwing-1488.最短距离</a></p><h4 id="差分约束"><a class="markdownIt-Anchor" href="#差分约束"></a> 差分约束</h4><h2 id="计算几何"><a class="markdownIt-Anchor" href="#计算几何"></a> 计算几何</h2><h3 id="平面最近点对"><a class="markdownIt-Anchor" href="#平面最近点对"></a> 平面最近点对</h3><p><a href="https://www.luogu.com.cn/problem/P1257">P1257.平面最近点对</a></p><p><a href="https://www.luogu.com.cn/problem/P1429">P1429 平面最近点对（加强版）</a></p><p><a href="https://www.luogu.com.cn/problem/P7883">P7883 平面最近点对（加强加强版）</a></p><p>给你一组points，要你求距离最短的两个point</p><p><strong>分治</strong></p><p>非常经典的计算几何问题，需要分治下标区间来做。</p><h3 id="平面最小面积矩形"><a class="markdownIt-Anchor" href="#平面最小面积矩形"></a> 平面最小面积矩形</h3><p><a href="https://leetcode.cn/problems/minimum-area-rectangle/">LeetCode-939.最小面积矩形</a></p><p>给你一组points，确定由这些点组成的矩形的最小面积，其中矩形的边平行于 x 轴和 y 轴。</p><p><strong>枚举对角线上的两个点 + hash</strong></p><p>先把所有点按hash值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>∗</mo><mn>40001</mn><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x * 40001 + y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，存入hash表，由于题目数据，可以保证不发生冲突。<br />然后<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>枚举对角线上两个点，再判断另外两个点是否在hash表中，由此判断能否组成矩形，即可计算答案。</p><h3 id="平面上判断圆形和矩形相交"><a class="markdownIt-Anchor" href="#平面上判断圆形和矩形相交"></a> 平面上判断圆形和矩形相交</h3><p><a href="https://leetcode.cn/problems/circle-and-rectangle-overlapping/">LeetCode-1401.圆和矩形是否有重叠</a></p><p>可用使用向量的形式，来统合所有分类讨论的情况，具体原理见<a href="https://www.zhihu.com/question/24251545">知乎回答</a></p><h2 id="子数组问题"><a class="markdownIt-Anchor" href="#子数组问题"></a> 子数组问题</h2><p>子数组要求是在原数组中<strong>连续</strong>的一段</p><ul><li>DP，(一般都是线性)</li><li>前缀和+哈希表</li><li>滑动窗口，(可能会用到双端队列)  =&gt; 这种一般是固定长度的子数组</li></ul><h3 id="最大子数组问题"><a class="markdownIt-Anchor" href="#最大子数组问题"></a> 最大子数组问题</h3><h4 id="最大子数组"><a class="markdownIt-Anchor" href="#最大子数组"></a> 最大子数组</h4><p><a href="https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/solutions/">剑指offer42.连续子数组最大和</a></p><p>Method1：DP</p><p>状态集合：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>  ： 表示以当前下标<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 结尾的所有子数组中的最大和。</p><p>转移方程：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f[i] = max(f[i - 1] + arr[i], arr[i])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></p><p>由于当前状态只与上一个有关，因此可以用滚动数组优化空间</p><p>Method2：预处理为<a href="https://leetcode.cn/problems/maximum-subarray/solutions/2061194/53-zui-da-zi-shu-zu-he-qian-zhui-he-qian-czfq/">前缀和问题</a>， 找出两个下标l,r 使得,S[r] - S[l]最大，并且 r &gt;= l，</p><p>这里再维护一个当前位置前缀和的最小值下标数组（作为l），然后枚举r，时间复杂度同样是O(n)</p><h4 id="环形子数组最大和"><a class="markdownIt-Anchor" href="#环形子数组最大和"></a> 环形子数组最大和</h4><h4 id="长度为k的最大子数组"><a class="markdownIt-Anchor" href="#长度为k的最大子数组"></a> 长度为K的最大子数组</h4><p><a href="https://leetcode.cn/problems/maximum-sum-of-distinct-subarrays-with-length-k/">LeetCode-2461.长度为 K 子数组中的最大和</a></p><p><strong>滑动窗口</strong></p><p>对于每个滑动窗口, 我们可以使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span> 的时间遍历其中的每一个元素, 找出其中的最大值。 对于长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的数组 nums 而言, 窗口的数量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-k+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, 因此该算法的时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O((n-k+1) k)=O(n k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span>, 会超出时间限制, 因此我们需要进行一些优化。</p><h4 id="长度不超过k的最大子数组"><a class="markdownIt-Anchor" href="#长度不超过k的最大子数组"></a> 长度不超过K的最大子数组</h4><p><a href="https://www.acwing.com/problem/content/description/137/">Acwing-135.最大子序和</a></p><p><strong>前缀和 + 单调队列优化DP</strong></p><p>不固定长度，预处理为前缀和问题， 找出两个下标l,r 使得,S[r] - S[l]最大，并且 r - l &gt;= M</p><h3 id="最长子数组问题"><a class="markdownIt-Anchor" href="#最长子数组问题"></a> 最长子数组问题</h3><h4 id="和为0的最长子数组"><a class="markdownIt-Anchor" href="#和为0的最长子数组"></a> 和为0的最长子数组</h4><p><a href="https://leetcode.cn/problems/find-longest-subarray-lcci/description/">面试题17.05.字母与数字</a></p><p><strong>前缀和+哈希表</strong></p><p>找到一个最长子数组，其元素和等于 0 =&gt; 用前缀和处理，「元素和等于0」等价于「两个前缀和之差等于 0」，进而等价于「两个前缀和相同」</p><p>从前缀和 s中找到两个相同的数 s[right]和 s[left]，并使得right−left 最大。<br />用hash表记录前缀和中<strong>每个数字第一次出现的下标</strong>，然后每当再次遇到该数字，计算当前的长度间隔，由此得到最大间隔。</p><blockquote><p>前缀和+哈希表的用法真的很经典</p></blockquote><h3 id="其它子数组问题"><a class="markdownIt-Anchor" href="#其它子数组问题"></a> 其它子数组问题</h3><h4 id="统计和为k的子数组"><a class="markdownIt-Anchor" href="#统计和为k的子数组"></a> 统计和为K的子数组</h4><p><a href="https://leetcode.cn/problems/subarray-sum-equals-k/">LeetCode560.和为 K 的子数组</a></p><p><strong>前缀和+哈希表</strong></p><p>首先，和为k的子数组，一眼就可以转成前缀和,求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo>−</mo><mi>s</mi><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mo>=</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">s[r] - s[l - 1] == k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>。</p><p>那么可以转化成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo>−</mo><mi>k</mi><mo>=</mo><mo>=</mo><mi>s</mi><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[r] - k == s[l - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></p><p>那么遍历数组，每次计算到当前前缀和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>时，可以看看哈希表中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>−</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">s[i] - k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>的个数，然后直接加上就能统计出来。</p><p>特别地，<strong>哈希表要初始化{0，1}</strong>，可以看作是在前缀和前多加了一个和，是为了防止从序号0开始加到序号i时刚好为k的情况出现时，没法找到对应数值计数。</p><h4 id="统计中位数为k的子数组"><a class="markdownIt-Anchor" href="#统计中位数为k的子数组"></a> 统计中位数为K的子数组</h4><p><a href="https://leetcode.cn/problems/count-subarrays-with-median-k/">LeetCode-2488. 统计中位数为 K 的子数组</a></p><p><strong>前缀和+哈希表</strong></p><p>这道题有限制的：数组内的数字各不相同为1~n，并且规定偶数长度的子数组其中位数是位于中间靠 <strong>左</strong> 的元素</p><p>子数组的中位数如果是K，等价转换：预处理数组，把数组中小于K的数视作-1，大于K的数视作-1，K视作0。</p><ul><li><p>对于奇数长度的子数组，「子数组中小于K的数的个数 == 大于 K 的数的个数」，等价于前缀和为k_</p></li><li><p>对于偶数长度的子数组，「子数组中小于K的数的个数 == 大于 K 的数的个数 - 1」，等价于前缀和为k_ + 1</p></li></ul><p>由此可以转换成「统计和为K的子数组」这道题。</p><h2 id="子序列问题"><a class="markdownIt-Anchor" href="#子序列问题"></a> 子序列问题</h2><p>因为不要求连续，所以如果是统计子序列长度问题，</p><p>可以先排序看看，然后想想能不能二分查找</p><p>然后就是DP了</p>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>H2RBox</title>
    <link href="/2022/11/21/AI-Learning/20221121-H2RBox/"/>
    <url>/2022/11/21/AI-Learning/20221121-H2RBox/</url>
    
    <content type="html"><![CDATA[<h1 id="h2rbox"><a class="markdownIt-Anchor" href="#h2rbox"></a> H2RBox</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>论文题目</strong> ：HORIZONTAL BOX ANNOTATION IS ALL YOU NEED FOR ORIENTED OBJECT DETECTION</p><p><strong>论文地址</strong> ：<a href="https://arxiv.org/abs/2210.06742">https://arxiv.org/abs/2210.06742</a></p><p><strong>论文出处</strong> ：arxiv 2022.10</p><p><strong>代码实现</strong> ：<a href="https://github.com/yangxue0827/h2rbox-mmrotate">https://github.com/yangxue0827/h2rbox-mmrotate</a></p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p>现在很多目标检测数据集的annotation都是基于水平边界框的注释，但是水平框数据集不能直接用于旋转检测器的训练，这就导致现成的数据集和不断增长的旋转目标检测需求之间存在gap。因此作者提出了一种HBox-to-RBox style method(H2RBox)，使用水平框进行弱监督学习，并且采用无监督学习辅助修正尺度和空间上的一致性，来预测对象角度。</p><p>SKU110K  (零售场景数据集， 2019) = &gt; SKU110K-R  (2020)<br />DIOR  (航空数据集 2020)  =&gt;  DIOR-R  (2022)</p><p>这两个数据集一开始是水平框标注的，然后后面为了做旋转目标检测而特地使用旋转框重新标注。</p><h2 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h2><p>作者实验发现，通过一些用水平框弱监督的实例分割模型(BoxInst,  BoxLevelSet)，可以轻松获得分割掩码Mask，然后通过掩码的最小外接性，可以轻松获得最终的旋转框。作者称这种方法为HBox-Mask-RBox style methods.</p><p><img src="/img/article/2022/11/21/2.png" alt="" /></p><p>可以看到这个model也是一个二阶段的任务，而且第一阶段是实例分割，</p><p>如果直接引入实例分割，会带来以下问题:</p><ol><li>分割质量很可能对背景噪声敏感</li><li>在对象拥挤等复杂场景中，会严重影响后续RBox的检测步骤.</li><li>实例分割的计算成本往往更高，导致整个检测过程耗时更长。</li></ol><p>基于以上几点，作者提出了一种HBox-to-RBox style method(H2RBox)。想要跳过实例分割这个步骤，来构造一个HBox-to-RBox paradigm.</p><p><img src="/img/article/2022/11/21/3.png" alt="" /></p><p>具体来说:</p><ol><li><p>首先经过WS分支中的FCOS网络，得到预测的RBox<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>w</mi><mo separator="true">,</mo><mi>h</mi><mo separator="true">,</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y ,w, h, \theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span></p></li><li><p>然后把输入的水平图像旋转一个随机角度，经过SS分支，然后同样回归得到子网络(FCOS)预测的RBox</p></li></ol><p>然后开始计算LOSS</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>c</mi><mi>l</mi><mi>s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{L_{cls}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>:  FCOS网络中的分类Loss</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>c</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{L_{cn}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>:   FCOS网络中的center-ness loss，通过将class score与center-ness相乘后作为最终该预测框的score，从而降低了那些远离object中心点的预测框的权重，并进行NMS,去掉一些远离object的低质量检测框。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>r</mi><mi>e</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L_{reg}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>:  使用H2RBox的外接矩形与GT的HBox进行Loss计算.</p><blockquote><p>作者认为在理想情况下，WS分支的RBox的外接矩形和GT的HBox是高度重叠的。</p></blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>s</mi><mi>s</mi></mrow></msub><mo>:</mo></mrow><annotation encoding="application/x-tex">L_{ss}:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>   WS分支的RBox * Rotation Matrix后，与SS分支的RBox进行Loss计算。</p><blockquote><p>这个就是作者说的通过学习两个分支，不同视图的RBox的一致性(包括尺度和空间)，以消除undesired cases.</p></blockquote><p>测试阶段只涉及WS分支.</p><p>label re-assignment strategies  (label at location <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>∗</mo><mo separator="true">,</mo><mi>y</mi><mo>∗</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x*, y*)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord">∗</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∗</span><span class="mclose">)</span></span></span></span> in SS branch 旋转映射回 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> in WS branch的策略)</p><p>简单贴一下Loss</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>c</mi><mi>l</mi><mi>s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{L_{cls}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>:  SoftMax Loss    <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>c</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{L_{cn}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> :  Center-ness loss   <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>r</mi><mi>e</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L_{reg}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>: Cross entropy Loss</p><p><img src="/img/article/2022/11/21/9.png" alt="" /></p><p><img src="/img/article/2022/11/21/10.png" alt="" /></p><p><img src="/img/article/2022/11/21/11.png" alt="" /></p><h2 id="result"><a class="markdownIt-Anchor" href="#result"></a> Result</h2><p>下面两张图对比，说明了但WS的效果不好，这也是为什么作者要引入SS分支。</p><p><img src="/img/article/2022/11/21/5.png" alt="" /></p><p><img src="/img/article/2022/11/21/6.png" alt="" /></p><p>下面是DOTA-v1.0数据集上的性能对比:</p><p><img src="/img/article/2022/11/21/7.png" alt="" /></p><p>下面是DIOR-R数据集上的性能对比:</p><p><img src="/img/article/2022/11/21/8.png" alt="" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>不难发现，因为作者的这个方法原创性比较大，没有一个好的baseline，因此效果整体上来说不是很好。</p><p>作者的想法很好：怎么样把水平框数据集利用到旋转目标检测上来, more data, more powerful。</p><p>但我要研究的重点不是这个方面，因此可能帮助不是很大。</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RBox</title>
    <link href="/2022/11/14/AI-Learning/20221114-RBox/"/>
    <url>/2022/11/14/AI-Learning/20221114-RBox/</url>
    
    <content type="html"><![CDATA[<h1 id="rbox"><a class="markdownIt-Anchor" href="#rbox"></a> RBox</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>论文题目</strong> ：Few Could Be Better Than All: Feature Sampling and Grouping for Scene Text Detection</p><p><strong>论文地址</strong> ：<a href="https://arxiv.org/abs/2203.15221v2">https://arxiv.org/abs/2203.15221v2</a></p><p><strong>论文出处</strong> ：2022’CVPR</p><p><strong>代码实现</strong> ：Not released.</p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p>作者认为没有必要对所有像素的relationship进行特征学习。因为前景目标只占场景图像中的几个小而窄的区域。作者首先采样并收集与前景高度相关的特征，然后使用Tansformer建模来分析采样特征之间的关系，使得前景特征能被正确的分组。并且这样做可以免去anchor generation、NMS等后处理。</p><p><img src="/img/article/2022/11/14/2.png" alt="" /></p><h2 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h2><p><img src="/img/article/2022/11/14/3.png" alt="" /></p><p>首先通过一个Backbone network(Backbone: ResNet50 + neck: FPN)，得到多尺度特征图，然后送入MultiSale Text Extrator中，对多尺度特征逐层的进行以下两个步骤:a) 预测提取代表性的文本(前景)区域; b) 在前景区域进行像素级的预测置信度得分confidence scores，选取Top-N个点作为与前景高度相关的特征。然后送入Tansformer模块[具体进行位置编码(Position Embedding)，然后送到Transfromer Block)]进行关系建模=&gt;特征分组，让每一组对应一个实例。最后送入预测head回归出检测框，并进行分类。</p><h3 id="backbone"><a class="markdownIt-Anchor" href="#backbone"></a> Backbone</h3><p><img src="/img/article/2022/11/14/6.png" alt="" /></p><p>主要选取的是P2-P4 (1/4、1/8、1/16)进行特征采样。</p><h3 id="multi-scale-text-extractor"><a class="markdownIt-Anchor" href="#multi-scale-text-extractor"></a> Multi-Scale Text Extractor</h3><p><strong>CoordConv Layer</strong></p><p><img src="/img/article/2022/11/14/4.png" alt="" /></p><p>将每个特征图与两个额外的归一化坐标(x, y)通道连接起来，以引入位置信息。</p><p><strong>Constrained Deformable Pooling</strong></p><p><img src="/img/article/2022/11/14/7.png" alt="" /></p><p>作者设计了一种独特的下采样方式，即在下采样时增加了一个可学习的尺度参数用于约束预测的偏差，保证不近邻的特征区域不会相互影响，即只合成较小范围内的文本区域的特征。</p><p><strong>Scoring Net</strong></p><p>用sigmoid激活函数来二分类，以生成前景文本区域的置信度得分confidence scores。然后对这些score排序选择每个尺度下前TopN个点，送入Transformer。</p><h3 id="feature-grouping"><a class="markdownIt-Anchor" href="#feature-grouping"></a> Feature Grouping</h3><p>作者在论文中没有具体说是如何利用Tansformer做到给特征进行分组的。</p><h2 id="result"><a class="markdownIt-Anchor" href="#result"></a> Result</h2><p>截了一个在DOTA数据集上的实验对比:</p><p><img src="/img/article/2022/11/14/5.png" alt="" /></p><p><img src="/img/article/2022/11/14/8.png" alt="" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>看着简单，但是还有有几个点是值得注意的：</p><ol><li><p>首先，作者仅仅只是把Transformer用于对特征点之间的关系建模上, (只用于一个子任务)这是很值得注意的。根据我以往读过的Tansformer目标检测相关的论文，之前要么就是把Swin Transfomer作为一个backbone，处理出特征图，然后送入后续head进行处理; 要么就是一整个网络用Tansformer结构.</p></li><li><p>只在预测出来的前景区域做Transformer，可以大幅度减少Transfomer因为大量参数带来的计算量。减少了背景噪声带来的影响，从而提高的检测精度.</p></li><li><p>整个网络结构避免掉了anchor,可以无需通过复杂的后处理(anchor generation，NMS等)而准确获得bbox。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
      <tag>Transformer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QueryDet</title>
    <link href="/2022/10/31/AI-Learning/20221031-QueryDet/"/>
    <url>/2022/10/31/AI-Learning/20221031-QueryDet/</url>
    
    <content type="html"><![CDATA[<h1 id="querydet"><a class="markdownIt-Anchor" href="#querydet"></a> QueryDet</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>论文题目</strong> ：QueryDet</p><p><strong>论文地址</strong> ：<a href="https://arxiv.org/pdf/2103.09136.pdf">https://arxiv.org/pdf/2103.09136.pdf</a></p><p><strong>论文出处</strong> ：2022’CVPR oral</p><p><strong>代码实现</strong> ：<a href="https://github.com/ChenhongyiYang/QueryDet-PyTorch">https://github.com/ChenhongyiYang/QueryDet-PyTorch</a></p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p>针对小目标检测，作者提出了QueryDet，设计了级联稀疏查询(CSQ)机制，它可以有效利用高分辨率特征，同时高可以降低所有基于特征金字塔的目标检测器的计算成本，保证快速的推理速度，从而提高对小目标的检测性能。</p><p><img src="/img/article/2022/10/31/2.png" alt="" /></p><h2 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h2><h3 id="question-in-small-objection"><a class="markdownIt-Anchor" href="#question-in-small-objection"></a> Question in small objection</h3><p>小目标检测中出现性能衰减主要由三个因素所导致：</p><ol><li><p>由于下采样操作导致引导小目标的特征消失，或被background中的噪声污染。</p></li><li><p>低分辨率特征对应的感受野无法与小目标的尺度相匹配。</p></li><li><p>小目标较小的偏差就会导致IoU上较大的扰动，导致小目标检测先天难于大目标。</p></li></ol><p>针对这些问题，作者认为：</p><ol><li><p>low-level特征层上的计算中，有很大部分是冗余的。</p></li><li><p>FPN结构中，即使低分辨率（high-level）的特征层无法精确的检测出小目标，但也能以较高的置信度来粗略判断出小目标是否存在以及对应的区域。</p></li></ol><p><img src="/img/article/2022/10/31/3.png" alt="" /></p><p>图1是普通的retinanet，图二retinanet+P2,计算的参数量明显增加了很多，图三QueryDet(CSQ)</p><p>做法：</p><p><img src="/img/article/2022/10/31/4.png" alt="" /></p><p>引入更高分辨率特征图（P2）进行计算，因为<strong>更高分辨率的特征图能更好的保留小目标的语义信息</strong></p><p>Head设计上：平行于分类和回归头，添加了一个查询头（query head）。query head会输出的热力图(heat map)，表示位置<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>r</mi><mi>i</mi><mi>d</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">grid(i, j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span>含有小目标的概率。</p><h3 id="cascade-sparse-query-csq"><a class="markdownIt-Anchor" href="#cascade-sparse-query-csq"></a> Cascade Sparse Query (CSQ)</h3><p>在训练过程中，每一层预定义阈值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">{s_l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>设置为该层最小的anchor尺寸（anchor-based）/最小的回归范围（anchor-free），尺寸小于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">{s_l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>的ground truth，在该层会被视为小目标(small ground truth)。</p><p>query操作：然后对query head输出的heatmap做一个binary mask：计算small ground truth中心位置与head map上每个位置之间的距离来编码，距离小于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">s_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的位置设为1，否则为0. 那么在下一层中heat map 中对应映射mask为0的位置，就不会进行概率的预测了。(这样就可以少计算很多冗余的anchor的Loss,从而减少计算量)</p><blockquote><p>每层损失采用不同加权系数（P2-P7在[1, 2.6]线性增加）来求得总损失，使模型同时从所有层学习。因为添加的更高分辨率特征（P2）使训练样本的分布发生了显著变化。P2上的训练样本总数甚至大于P3~P7的训练样本总和，如果不降低其权重，训练将由小目标主导。</p></blockquote><p>在测试/推理过程中，因为没有ground truth作为参照了，因此在做query的binary mask操作时，直接设定了一个阈值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi><mo>=</mo><mn>0.15</mn></mrow><annotation encoding="application/x-tex">{\sigma = 0.15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">5</span></span></span></span></span>。当query head输出heat map，其位置<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>r</mi><mi>i</mi><mi>d</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">grid(i, j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span>的预测概率分数&gt;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">{\sigma}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span></span>时,mask设置为1，否则为0. 查询后的Query value feature，做稀疏卷积spconv来减少计算量。</p><h2 id="result"><a class="markdownIt-Anchor" href="#result"></a> Result</h2><p>实验中设置阈值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi><mo>=</mo><mn>0.15</mn></mrow><annotation encoding="application/x-tex">{\sigma}=0.15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">5</span></span></span></span></p><p><img src="/img/article/2022/10/31/5.png" alt="" /></p><p><img src="/img/article/2022/10/31/6.png" alt="" /></p><p>总体上来说，设计得是比较简单，并且这种设计对于检测遥感图像也值得借鉴。</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机视觉</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Focal and Global Distillation</title>
    <link href="/2022/10/24/AI-Learning/20221024-Focal%20and%20Global%20Dlistillation/"/>
    <url>/2022/10/24/AI-Learning/20221024-Focal%20and%20Global%20Dlistillation/</url>
    
    <content type="html"><![CDATA[<h1 id="focal-and-global-knowledge-distillation"><a class="markdownIt-Anchor" href="#focal-and-global-knowledge-distillation"></a> Focal and Global Knowledge Distillation</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>论文题目</strong> ：Focal and Global Knowledge Distillation for Detectors</p><p><strong>论文地址</strong> ：<a href="https://arxiv.org/pdf/2111.11837.pdf">https://arxiv.org/pdf/2111.11837.pdf</a></p><p><strong>论文出处</strong> ：2022’CVPR</p><p><strong>代码实现</strong> ：<a href="https://github.com/yzd-v/FGD">https://github.com/yzd-v/FGD</a></p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p>在目标检测中，Teacher和Student的特征在不同的区域由很大的差异，特别是在前景和背景上。如果同等的提取它们，特征图之间的不均匀差异将对提取产生负面影响。因此作者提出了焦点和全局蒸馏FGD，所有损失函数仅根据特征计算，因此可以适用于各种检测器。</p><p><img src="/img/article/2022/10/24/5.png" alt="" /></p><p>焦点蒸馏分离前景和背景，迫使学生关注教师的关键像素和通道，全局蒸馏重建了不同像素之间的关系，并由教师传递给学生以补偿焦点蒸馏丢失的全局信息。</p><h2 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h2><h3 id="feature-distllation"><a class="markdownIt-Anchor" href="#feature-distllation"></a> Feature Distllation</h3><p>参考文章1：<a href="https://arxiv.org/pdf/1412.6550.pdf">[2015’ICLR]-FitNets:Hints For Thin Deep Nets</a></p><p>参考文章2：<a href="https://arxiv.org/pdf/1904.01866.pdf">[2019’ICCV]-A Comprehensive Overhaul of Feature Distillation</a></p><p>Logits Distllation引入了一个模型压缩框架(Teacher-Student)，该框架通过将深度网络(Teacher)的集合压缩为具有相似深度的学生(Student)网络。但是高性能的Teacher输出的Soft Target与Ground Truth并没有显著差异，这就会限制蒸馏效果。</p><p>为了更好的利用Teacher网络中包含的信息，可以使用Feature Distllation。</p><h4 id="hint-layerguided-layer"><a class="markdownIt-Anchor" href="#hint-layerguided-layer"></a> hint layer&amp;guided layer</h4><p>选择Student的一个中间层(这层称为guided layer)，去学习Teacher的一个中间层(称为hint layer)的output，也就是guided layer需要正确预测hint layer的输出。</p><p><img src="/img/article/2022/10/24/2.png" alt="" /></p><p>hint layer 高宽和通道数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>N</mi><mrow><mi>h</mi><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>N</mi><mrow><mi>h</mi><mn>2</mn></mrow></msub><mo separator="true">,</mo><msub><mi>O</mi><mi>h</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(N_{h1}, N_{h2}, O_h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>guided layer 高宽和通道数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>N</mi><mrow><mi>g</mi><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>N</mi><mrow><mi>g</mi><mn>2</mn></mrow></msub><mo separator="true">,</mo><msub><mi>O</mi><mi>g</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(N_{g1}, N_{g2}, O_g)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><h4 id="regressor"><a class="markdownIt-Anchor" href="#regressor"></a> regressor</h4><p>考虑到Teacher通常比Student更高更宽，所选的hint layer可能比guided layer具有更多输出，因此给guided layer添加一个regressor，使guided经过regressor后其输出与hint layer的大小一致。(自适应宽高)</p><p><img src="/img/article/2022/10/24/3.png" alt="实际上只有加粗的是hint layer和guided layer" /></p><p><strong>全连接</strong></p><p>regressor的weight矩阵参数：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>r</mi></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>N</mi><mrow><mi>h</mi><mn>1</mn></mrow></msub><mo>∗</mo><msub><mi>N</mi><mrow><mi>g</mi><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>N</mi><mrow><mi>h</mi><mn>2</mn></mrow></msub><mo>∗</mo><msub><mi>N</mi><mrow><mi>g</mi><mn>2</mn></mrow></msub><mo separator="true">,</mo><msub><mi>O</mi><mi>h</mi></msub><mo>∗</mo><msub><mi>O</mi><mi>g</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">W_r = (N_{h1} * N_{g1}, N_{h2} * N_{g2}, O_h * O_g)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p><strong>反卷积</strong></p><p>regressor的kernel大小确定：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mrow><mi>g</mi><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>k</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mo>=</mo><msub><mi>N</mi><mrow><mi>h</mi><mn>1</mn></mrow></msub><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>p</mi><mi>a</mi><mi>d</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mo>=</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N_{g1} - k_1 + 1 = N_{h1}, (padding = 0, stride = 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ，<br />用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>O</mi><mi>h</mi></msub></mrow><annotation encoding="application/x-tex">{O_h}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>个大小为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>k</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>O</mi><mi>g</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(k_1, k_2, O_g)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的kernel对guided layer做反卷积。</p><p>regressor的weight矩阵参数：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>r</mi></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>k</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>O</mi><mi>h</mi></msub><mo>∗</mo><msub><mi>O</mi><mi>g</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">W_r = (k_1, k_2, O_h * O_g)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><blockquote><p>关于特征蒸馏的位置选取，FitNets是使用的是<strong>任意中间层的末端</strong>输出作为蒸馏点。</p></blockquote><h4 id="training-scheme"><a class="markdownIt-Anchor" href="#training-scheme"></a> Training Scheme</h4><p><img src="/img/article/2022/10/24/2.png" alt="" /></p><p>特征蒸馏提取的损失可以被定义为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>f</mi><mi>e</mi><mi>a</mi></mrow></msub><mo>=</mo><mi>d</mi><mo stretchy="false">(</mo><msub><mi>T</mi><mi>t</mi></msub><mo stretchy="false">(</mo><msub><mi>F</mi><mi>t</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>T</mi><mi>s</mi></msub><mo stretchy="false">(</mo><msub><mi>F</mi><mi>s</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_{fea} = d(T_t(F_t), T_s(F_s))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><p>Teacher transform : 对Teacher的hint layer层输出做变换。</p><p>Student transform : 对Student的guided layer层输出做变换。</p><p>Distillation feature position：改变特征蒸馏的位置选取。</p><p>比如在激活函数前进行蒸馏:</p><p><img src="/img/article/2022/10/24/4.png" alt="" /></p><p>Distance function：衡量特征提取的损失函数通常采用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mn>2</mn></msub><mi>D</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">L_2 Distance</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span></span></span></span>。</p><p>以上是Feature Distllation的提出及归纳，因为guided layer和hint layer的维度不一致和特征图的差异性，并且引入了特征提取的损失，后续在此上有很多文章可做。</p><h3 id="focal-and-global-distillation"><a class="markdownIt-Anchor" href="#focal-and-global-distillation"></a> Focal and Global Distillation</h3><p><img src="/img/article/2022/10/24/6.png" alt="" /></p><p>把特征蒸馏损失按CWH维度拓展:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>f</mi><mi>e</mi><mi>a</mi></mrow></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mi>C</mi><mi>H</mi><mi>W</mi></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>C</mi></munderover><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>H</mi></munderover><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>W</mi></munderover><mo stretchy="false">(</mo><msubsup><mi>F</mi><mrow><mi>k</mi><mo separator="true">,</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><mi>T</mi></msubsup><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><msubsup><mi>F</mi><mrow><mi>k</mi><mo separator="true">,</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><mi>S</mi></msubsup><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">L_{fea} = \frac{1}{CHW}\sum_{k=1}^{C}\sum_{i=1}^{H}\sum_{j=1}^{W}(F_{k,i,j}^T-f(F_{k,i,j}^S))^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2421130000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-2.4530000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.274439em;vertical-align:-0.383108em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-2.4530000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="focal-distillation"><a class="markdownIt-Anchor" href="#focal-distillation"></a> Focal Distillation</h4><p>这里所谓的Focal，是让Distillation更多注意gt的bboxes。</p><h5 id="binary-mask"><a class="markdownIt-Anchor" href="#binary-mask"></a> Binary Mask</h5><p>首先设置一个Binary Mask来分离背景和前景。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>i</mi><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>r</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>O</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">M_{i,j}=\left\{\begin{matrix}1 &amp;if(i,j)\in r\\0 &amp;Ortherwise\end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>表示ground-truth的bboxes，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i,j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span>是特征图中的横纵坐标，如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i,i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span>映射回原图落在ground-truth中，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">M_{i,j}=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，否则为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>.</p><h5 id="scale-mask"><a class="markdownIt-Anchor" href="#scale-mask"></a> Scale Mask</h5><p>然后为了平衡前景和背景的损失，使其被平等对待，设置一个Scale Mask：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mrow><msub><mi>H</mi><mi>r</mi></msub><msub><mi>W</mi><mi>r</mi></msub></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>i</mi><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>r</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><msub><mi>N</mi><mrow><mi>b</mi><mi>g</mi></mrow></msub></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>O</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">S_{i,j}=\left\{\begin{matrix}\frac{1}{H_rW_r}  &amp;if(i,j)\in r\\\frac{1}{N_{bg}} &amp;Ortherwise\end{matrix}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5916979999999996em;"><span style="top:-3.74659em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.08125em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.4563820000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.10903em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29011428571428566em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5480799999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0916979999999996em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5916979999999996em;"><span style="top:-3.74659em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span><span style="top:-2.4563820000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0916979999999996em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mrow><mi>b</mi><mi>g</mi></mrow></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>H</mi></munderover><munder><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow></munder><mi>W</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>M</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N_{bg}=\sum_{i=1}^{H}\sum_{j=1}{W}(1 - M_{i,j})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2421130000000002em;vertical-align:-1.413777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8723309999999997em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.413777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>可以看出来其实就是面积比的倒数作为权重。</p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">W_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">H_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示ground-truth的宽高。(如果有像素被多个gt bboxes重叠，选择最小的框来计算S)</p><h5 id="attention-mask"><a class="markdownIt-Anchor" href="#attention-mask"></a> Attention Mask</h5><p>借鉴了<a href="">2017’ICLR:pay more attention to attention</a>该文章提出了注意力蒸馏。</p><p>然后把像素和通道分离，做Attention Mask =&gt; 分别为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>A</mi><mi>S</mi></msup><mi mathvariant="normal">和</mi><msup><mi>A</mi><mi>C</mi></msup></mrow><annotation encoding="application/x-tex">A^S和A^C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">和</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span></span></span></span></span></span></span></p><p>这就是提出的问题图中的spatial attention map和channel attention map。</p><p>先求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">{F_T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">{F_S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>输出的绝对值的平均值</p><p><img src="/img/article/2022/10/24/7.png" alt="" /></p><p><img src="/img/article/2022/10/24/8.png" alt="" /></p><h5 id="focal-distillation-loss"><a class="markdownIt-Anchor" href="#focal-distillation-loss"></a> Focal Distillation loss</h5><p><img src="/img/article/2022/10/24/9.png" alt="" /></p><p>前半部分是前景，后半部分是背景。</p><p><img src="/img/article/2022/10/24/10.png" alt="" /></p><p>用L2 loss衡量特征图蒸馏损失,用L1 loss衡量注意力蒸馏损失。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>f</mi><mi>o</mi><mi>c</mi><mi>a</mi><mi>l</mi></mrow></msub><mo>=</mo><msub><mi>L</mi><mrow><mi>f</mi><mi>e</mi><mi>a</mi></mrow></msub><mo>+</mo><msub><mi>L</mi><mrow><mi>a</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L_{focal} = L_{fea} + L_{at}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>可以认为焦点蒸馏 = 特征蒸馏 + 注意力蒸馏</p><h4 id="global-distillation"><a class="markdownIt-Anchor" href="#global-distillation"></a> Global Distillation</h4><p>把GCNet提出的GC-Block(Global Context Block)模块，应用到知识蒸馏当中。</p><p>GC Block可以理解为一个适用于求目标检测任务的图像attention map的模块。</p><p><img src="/img/article/2022/10/24/11.png" alt="" /></p><p><img src="/img/article/2022/10/24/12.png" alt="" /></p><h5 id="overall-loss"><a class="markdownIt-Anchor" href="#overall-loss"></a> Overall loss</h5><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>=</mo><msub><mi>L</mi><mrow><mi>o</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow></msub><mo>+</mo><msub><mi>L</mi><mrow><mi>f</mi><mi>o</mi><mi>c</mi><mi>a</mi><mi>l</mi></mrow></msub><mo>+</mo><msub><mi>L</mi><mrow><mi>g</mi><mi>l</mi><mi>o</mi><mi>b</mi><mi>a</mi><mi>l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L = L_{original} + L_{focal} + L_{global}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></p><h3 id="result"><a class="markdownIt-Anchor" href="#result"></a> Result</h3><p><img src="/img/article/2022/10/24/13.png" alt="" /></p><p><img src="/img/article/2022/10/24/14.png" alt="" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>可以看到在最新的研究中，又把特征图蒸馏、注意力蒸馏按空间角度划分了像素，通道。</p><p>GC Block是一个很好的模块，用于提取目标检测任务中的attention map。</p><p>所以说总的来看，Feature Distllation的可以改进和切入的角度有很多。</p><p>而且我认为，作者的这个思路肯定不是一蹴而就的，而是在做实验的过程中不断调整的。</p><blockquote><p>todo: 一定要读一下GC Net。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机视觉</tag>
      
      <tag>目标检测</tag>
      
      <tag>知识蒸馏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Difficulty in Oriented Object Detection</title>
    <link href="/2022/10/17/Difficulty%20in%20Oriented%20Object%20Detection/"/>
    <url>/2022/10/17/Difficulty%20in%20Oriented%20Object%20Detection/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a966f04c332042583a06500a45b135da8cff0209e87653babaf160859e1dc769"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>备忘录</title>
    <link href="/2022/10/17/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <url>/2022/10/17/%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8773ceb95a914732703358f371cbe1d83292e5ce5877430cbb0a4ef7abfccba4">af01d0b7d63db801117cb0ef9676516d6820572fcb1585f7f834163391e420f550090dca334df367e05e8b78a412fdb86dd73ec48bab6fe410fa16b1f895f76517f589a5f163f3968ae05588d5a87804448d892e634c907cae8b6465ed79b42a5e1e732960b0bc33d836111a3f20e03534bce123237631fa6ab112f462b8a1eef46600abf2b2bf938f058cd06072a05ac0e5d6a39522c3423cc8e5eac4ab50151dfbde36a82852b732db69b233a1c9f3ac4e7e5c29eb4d9a5aad8b4cca481718e011ce74a066c58993064468793b76305f0a640ef3d616cdc2070a582a509ce42dfe20a648f87d83a3e2b555f51ae02ce1d09dd45cedbbfcd25126dce207b8fc3c85434763e4e8bd4c6d38fc90ff99a40263eb79fb231ca2714645b0861657ebbf19415bd4810744772b6489e87323eee0523a71ccc99537ded0a8540f3b9289a6e233e38bc06913a813e72726dd4792501a4d0fc349645048e030befce8a6b68ca861b33c57779ad053b2b16f6eb9b2e6f1b4630bc9d23707fc0c37a5af38e38e5f17cef85cad18e045f6d055a74685d091736beadf5aa06cebe35e028ba9acbbd9c262a87e4f8f57b7f487a779c64cc969fb027d1edcae2406c369ff691e6c89d3afb0af0315d378e4d098bfe0f055c0a438625a5c1c9bf4c8c26e66220c47</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Localization Distillation</title>
    <link href="/2022/10/10/AI-Learning/20221011-Localization%20Distillation/"/>
    <url>/2022/10/10/AI-Learning/20221011-Localization%20Distillation/</url>
    
    <content type="html"><![CDATA[<h1 id="localization-distillation-for-dense-object-detection"><a class="markdownIt-Anchor" href="#localization-distillation-for-dense-object-detection"></a> Localization Distillation for Dense Object Detection</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>论文题目</strong> ：Localization Distillation for Dense Object Detection</p><p><strong>论文地址</strong> ：<a href="https://arxiv.org/pdf/2102.12252.pdf">https://arxiv.org/pdf/2102.12252.pdf</a></p><p><strong>论文出处</strong> ：2022’CVPR</p><p><strong>代码实现</strong> ：<a href="https://github.com/HikariTJU/LD">https://github.com/HikariTJU/LD</a></p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p>把用于分类的KD（Knowledge Distillation），用于回归BBox中，形成了LD（Localization Distillation）。</p><p>做法：先把bbox的4个logits输出值，离散化成4n个logits输出值，之后与分类KD几乎一致。</p><h2 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h2><h3 id="logits-distillation"><a class="markdownIt-Anchor" href="#logits-distillation"></a> Logits Distillation</h3><p><strong>参考文献</strong>⏬</p><p>现在的深度学习模型越来越大，尤其是近年Transformer比较火，而各种基于的Transformer的模型参数普遍较多，在这种情况下就需要找到有效的模型压缩的方法。知识蒸馏就又回归到了研究者的视野之中。</p><p>KD最早就是专门为图像分类而设计的：</p><p><strong>核心思想</strong>：就是用一个已训练的复杂模型（Teacher，黑盒）输出的知识，去指导一个小模型（Student）训练学习。</p><p><img src="/img/article/2022/10/10/2.png" alt="" /></p><h4 id="知识soft-targets和hard-targets"><a class="markdownIt-Anchor" href="#知识soft-targets和hard-targets"></a> 知识：soft targets和hard targets</h4><p>分类采用的是one-hot编码：</p><p><strong>hard targets</strong>:  Ground truth   &lt;=&gt;    <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, 0, 1, 0, 0, 0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">]</span></span></span></span>                      极大似然</p><p><strong>soft targets</strong>： Softmax层输出 &lt;=&gt;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>0.01</mn><mo separator="true">,</mo><mn>0.03</mn><mo separator="true">,</mo><mn>0.91</mn><mo separator="true">,</mo><mn>0.01</mn><mo separator="true">,</mo><mn>0.02</mn><mo separator="true">,</mo><mn>0.01</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0.01,0.03,0.91,0.01,0.02,0.01]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">9</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>  概论分布</p><blockquote><p>softmax层的输出，除了正例之外，<strong>负标签也带有大量的信息</strong>，比如某些负标签对应的概率远远大于其他负标签。而在传统的训练过程(hard target)中，所有负标签都被统一对待。</p><p><img src="/img/article/2022/10/10/3.png" alt="" /></p></blockquote><h4 id="蒸馏温度t"><a class="markdownIt-Anchor" href="#蒸馏温度t"></a> 蒸馏：温度T</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>q</mi><mi>i</mi><mn>1</mn></msubsup><mo>=</mo><mfrac><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><msub><mi>z</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><mrow><msubsup><mo>∑</mo><mi>k</mi><mi>N</mi></msubsup><mo stretchy="false">(</mo><msub><mi>z</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">q_{i}^{1} = \frac{exp(z_i)}{\sum_{k}^{N}(z_k)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.072772em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.664672em;vertical-align:-0.654672em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.570335em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8852357142857143em;"><span style="top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-2.8971428571428572em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32143857142857146em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">p</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.654672em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>但是原始softmax函数的负标签概率都接近0，对损失函数的贡献非常小。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>q</mi><mi>i</mi><mi>T</mi></msubsup><mo>=</mo><mfrac><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><msub><mi>z</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><mi>T</mi><mo stretchy="false">)</mo></mrow><mrow><msubsup><mo>∑</mo><mi>k</mi><mi>N</mi></msubsup><mo stretchy="false">(</mo><msub><mi>z</mi><mi>k</mi></msub><mi mathvariant="normal">/</mi><mi>T</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">q_{i}^{T} = \frac{exp(z_i/T)}{\sum_{k}^{N}(z_k/T)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0999949999999998em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.664672em;vertical-align:-0.654672em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.570335em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8852357142857143em;"><span style="top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-2.8971428571428572em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32143857142857146em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">p</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.654672em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>当T=1时，就是原始softmax函数，T越高，标签越平滑，负标签携带的信息会被相对地放大</p><blockquote><p>T = 100，标签更平滑</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>0.01</mn><mo separator="true">,</mo><mn>0.03</mn><mo separator="true">,</mo><mn>0.91</mn><mo separator="true">,</mo><mn>0.01</mn><mo separator="true">,</mo><mn>0.02</mn><mo separator="true">,</mo><mn>0.01</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0.01,0.03,0.91,0.01,0.02,0.01]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">9</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mclose">]</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>0.0001</mn><mo separator="true">,</mo><mn>0.0003</mn><mo separator="true">,</mo><mn>0.0091</mn><mo separator="true">,</mo><mn>0.0001</mn><mo separator="true">,</mo><mn>0.0001</mn><mo separator="true">,</mo><mn>0.0001</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0.0001,0.0003,0.0091,0.0001,0.0001,0.0001]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord">9</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mclose">]</span></span></span></span></p></blockquote><h4 id="distill-loss"><a class="markdownIt-Anchor" href="#distill-loss"></a> distill loss</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>K</mi><mi>D</mi></mrow></msub><mo>=</mo><mi>α</mi><msub><mi>L</mi><mrow><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi></mrow></msub><mo>+</mo><mi>β</mi><msub><mi>L</mi><mrow><mi>h</mi><mi>a</mi><mi>r</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L_{KD} = \alpha L_{soft} + \beta L_{hard}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>在温度T的条件下，student的softmax输出和teacher输出的soft target的cross entropy就是<strong>Loss函数的第一部分</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi></mrow></msub><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mi>j</mi><mi>N</mi></munderover><msubsup><mi>p</mi><mi>j</mi><mi>T</mi></msubsup><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><msubsup><mi>q</mi><mi>j</mi><mi>T</mi></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_{soft} = -\sum_{j}^{N}p_{j}^{T}log(q_{j}^{T})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2421130000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>p</mi><mi>i</mi><mi>T</mi></msubsup><mo>=</mo><mfrac><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><mi>T</mi><mo stretchy="false">)</mo></mrow><mrow><msubsup><mo>∑</mo><mi>k</mi><mi>N</mi></msubsup><mo stretchy="false">(</mo><msub><mi>v</mi><mi>k</mi></msub><mi mathvariant="normal">/</mi><mi>T</mi><mo stretchy="false">)</mo></mrow></mfrac><mo separator="true">,</mo><msubsup><mi>q</mi><mi>i</mi><mi>T</mi></msubsup><mo>=</mo><mfrac><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><msub><mi>z</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><mi>T</mi><mo stretchy="false">)</mo></mrow><mrow><msubsup><mo>∑</mo><mi>k</mi><mi>N</mi></msubsup><mo stretchy="false">(</mo><msub><mi>z</mi><mi>k</mi></msub><mi mathvariant="normal">/</mi><mi>T</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">p_{i}^{T} = \frac{exp(v_i/T)}{\sum_{k}^{N}(v_k/T)},q_{i}^{T} = \frac{exp(z_i/T)}{\sum_{k}^{N}(z_k/T)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0999949999999998em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.664672em;vertical-align:-0.654672em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.570335em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8852357142857143em;"><span style="top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-2.8971428571428572em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32143857142857146em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">p</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.654672em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.664672em;vertical-align:-0.654672em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.570335em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8852357142857143em;"><span style="top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-2.8971428571428572em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32143857142857146em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">p</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.654672em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>在温度T=1的条件下，student的softmax输出和ground truth的cross entropy就是<strong>Loss函数的第二部分</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>h</mi><mi>a</mi><mi>r</mi><mi>d</mi></mrow></msub><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mi>j</mi><mi>N</mi></munderover><msub><mi>c</mi><mi>j</mi></msub><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><msubsup><mi>q</mi><mi>j</mi><mn>1</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_{hard} = -\sum_{j}^{N}c_{j}log(q_{j}^{1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2421130000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>q</mi><mi>i</mi><mn>1</mn></msubsup><mo>=</mo><mfrac><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><msub><mi>z</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><mrow><msubsup><mo>∑</mo><mi>k</mi><mi>N</mi></msubsup><mo stretchy="false">(</mo><msub><mi>z</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">q_{i}^{1} = \frac{exp(z_i)}{\sum_{k}^{N}(z_k)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.072772em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.664672em;vertical-align:-0.654672em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.570335em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8852357142857143em;"><span style="top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-2.8971428571428572em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32143857142857146em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">p</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.654672em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><blockquote><p>上述公式中：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ：Teacher模型中的logits(logits是softmax之前，网络中最后一个全连接层的输出)</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>z</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">z_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>： student模型中的logits</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>p</mi><mi>i</mi><mi>T</mi></msubsup></mrow><annotation encoding="application/x-tex">p_{i}^{T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0999949999999998em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span></span></span></span>：Teacher模型在温度T下的softmax输出在第i类上的值</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>q</mi><mi>i</mi><mi>T</mi></msubsup></mrow><annotation encoding="application/x-tex">q_{i}^{T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0999949999999998em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span></span></span></span>：student模型在温度T下的softmax输出在第i类上的值</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>： ground truth在第i类上的值，正标签取1，负标签取0</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>： 总标签的数量</li></ul></blockquote><p>目前知识蒸馏主要分为了两个派系：logit蒸馏和feature蒸馏，上述是logit蒸馏</p><h3 id="localization-distillation"><a class="markdownIt-Anchor" href="#localization-distillation"></a> Localization Distillation</h3><p>基于此背景，再说说本文的LD，LD想解决的问题与GFL一样–由遮挡等因素带来的定位不确定性</p><p><img src="/img/article/2022/10/10/4.png" alt="" /></p><p>参考GFL，假设bbox的边e</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mo>=</mo><msubsup><mo>∫</mo><msub><mi>e</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><msub><mi>e</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></msubsup><mi>x</mi><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>x</mi><mo separator="true">,</mo><mi>e</mi><mo>∈</mo><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">e = \int_{e_{min}}^{e_{max}} xP(x)dx, e\in edge</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.426342em;vertical-align:-1.01205em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4142920000000003em;"><span style="top:-1.7880500000000004em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.8129000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.01205em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span></span></span></span></span></p><p>然后把range<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mo>∈</mo><mo stretchy="false">[</mo><msub><mi>e</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo separator="true">,</mo><msub><mi>e</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">e\in[e_{min}, e_{max}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>离散化为集合<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><msub><mi>e</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo separator="true">,</mo><msub><mi>e</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>e</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>e</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo fence="true">}</mo></mrow><annotation encoding="application/x-tex">\left \{e_{min},e_{min+1},..e_{max-1},e_{max}  \right \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span>。</p><blockquote><p><strong>集合中的每个值可以看作一个类</strong>，一般取间隔为1。</p></blockquote><p>这样bbox的每条边都可以通过Softmax函数转为一个概率分布。</p><p>作者使用的是相对熵（KL-divergence）作为LD的概率：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>L</mi><mi>D</mi></mrow></msub><mo>=</mo><msubsup><mo>∑</mo><mi>e</mi><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi></mrow></msubsup><mi>l</mi><mi>o</mi><mi>g</mi><mfrac><msubsup><mi>q</mi><mi>j</mi><mi>T</mi></msubsup><msubsup><mi>p</mi><mi>j</mi><mi>T</mi></msubsup></mfrac></mrow><annotation encoding="application/x-tex">L_{LD} = \sum_{e}^{edge} log\frac{q_{j}^{T}}{p_{j}^{T}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9666299999999999em;vertical-align:-0.7158449999999998em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250785em;"><span style="top:-2.6069750000000003em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8328928571428571em;"><span style="top:-2.177714285714286em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-2.8448em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.46117142857142857em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.60742em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9190928571428572em;"><span style="top:-2.214em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.42488571428571426em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7158449999999998em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>p</mi><mi>i</mi><mi>T</mi></msubsup><mo>=</mo><mfrac><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><mi>T</mi><mo stretchy="false">)</mo></mrow><mrow><msubsup><mo>∑</mo><mi>e</mi><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi></mrow></msubsup><mo stretchy="false">(</mo><msub><mi>v</mi><mi>e</mi></msub><mi mathvariant="normal">/</mi><mi>T</mi><mo stretchy="false">)</mo></mrow></mfrac><mo separator="true">,</mo><msubsup><mi>q</mi><mi>i</mi><mi>T</mi></msubsup><mo>=</mo><mfrac><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><msub><mi>z</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><mi>T</mi><mo stretchy="false">)</mo></mrow><mrow><msubsup><mo>∑</mo><mi>e</mi><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi></mrow></msubsup><mo stretchy="false">(</mo><msub><mi>z</mi><mi>e</mi></msub><mi mathvariant="normal">/</mi><mi>T</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">p_{i}^{T} = \frac{exp(v_i/T)}{\sum_{e}^{edge}(v_e/T)},q_{i}^{T} = \frac{exp(z_i/T)}{\sum_{e}^{edge}(z_e/T)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0999949999999998em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.670227em;vertical-align:-0.6602269999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.5647800000000003em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8931714285714285em;"><span style="top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span style="top:-2.8971428571428572em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32143857142857146em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">p</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6602269999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.670227em;vertical-align:-0.6602269999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.5647800000000003em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8931714285714285em;"><span style="top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span style="top:-2.8971428571428572em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32143857142857146em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">p</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6602269999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，符号基本与上文对应。</p><p>也算是把KD和LD的任务统一了，统称为Logit Mimicking。</p><h3 id="others"><a class="markdownIt-Anchor" href="#others"></a> others</h3><p>后续作者结合了feature蒸馏只会传递混合知识的，划分了两个区域：</p><p><img src="/img/article/2022/10/10/5.png" alt="" /></p><ul><li>Main distillation Region（主蒸馏区域、红色）&lt;=&gt; 直接通过正标签的所在区域确定</li><li>Valuable Localization Region（有价值区域，蓝色） &lt;=&gt; 通过设置DIOU阈值，计算DIOU确定</li></ul><p>讨论了分别在Main,VLR区域中使用KD、LD的效果消融实验:</p><p><img src="/img/article/2022/10/10/6.png" alt="" /></p><p>由于不太了解feature蒸馏，所以这一部分没细看。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>我认为蒸馏不是本文的重点，</p><p>倒是最近这种通过离散化，然后加权(概率)，把bbox的回归任务看成分类任务的思想比较常见。</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机视觉</tag>
      
      <tag>目标检测</tag>
      
      <tag>知识蒸馏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Generalized Focal Loss</title>
    <link href="/2022/10/03/AI-Learning/20221003-GFL/"/>
    <url>/2022/10/03/AI-Learning/20221003-GFL/</url>
    
    <content type="html"><![CDATA[<h1 id="generalized-focal-loss"><a class="markdownIt-Anchor" href="#generalized-focal-loss"></a> Generalized Focal Loss</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>论文题目</strong> ：Generalized Focal Loss: Learning Qualified and Distributed Bounding Boxes for Dense Object Detection</p><p><strong>论文地址</strong> ：<a href="https://arxiv.org/pdf/2006.04388.pdf">https://arxiv.org/pdf/2006.04388.pdf</a></p><p><strong>论文出处</strong> ：2020’NeurIPS</p><p><strong>代码实现</strong> ：<a href="https://github.com/ViTAE-Transformer/Remote-Sensing-RVSA">https://github.com/ViTAE-Transformer/Remote-Sensing-RVSA</a></p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p>one-stage的检测器最后都会归于两个子任务，即分类和定位。分类通常用Focal Loss，而定位通常用IOU Loss。而在近年的one-stage论文中（FCOS）,趋势是引入额外的分支centerness来评估检测框的定位质量。但是这样会带来两个问题(classification score 和 IoU/centerness score 训练测试不一致和bbox regression 采用的表示不够灵活，在建模复杂场景下的具有不确定性)，作者尝试解决这两个问题，提出了GFL。</p><p>基于任意one-stage 检测器上，调整框本身与框质量估计的表示，同时用泛化版本的GFocal Loss训练该改进的表示，可以实现无cost涨点（一般1个点出头）AP。</p><h2 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h2><h3 id="question"><a class="markdownIt-Anchor" href="#question"></a> Question</h3><h4 id="1classification-score-和-ioucenterness-score-训练测试不一致"><a class="markdownIt-Anchor" href="#1classification-score-和-ioucenterness-score-训练测试不一致"></a> 1.classification score 和 IoU/centerness score 训练测试不一致</h4><p><img src="/img/article/2022/10/03/2.png" alt="" /></p><ol><li><p>用法不一致。</p><p>训练的时候，分类和质量的评估是分离的，但测试的时候却又是乘在一起作为NMS score排序的依据，这个操作显然没有end-to-end，必然存在一定的gap</p></li><li><p>对象不一致。</p><p>Classification : 得益于Focal Loss ，可以计算少量正样本和大量负样本的classification score，并一起成功训练.</p><p>Localization: 在使用IoU/centerness score时，却是只针对正样本的score训练(正负样本的score都会计算)。</p><p>在做NMS score排序的时候，所有的样本都会将分类score和质量预测score相乘用于排序。</p></li></ol><blockquote><p>由于有大量的负样本，就很有可能出现以下情况：</p><p>NMS score: 负样本（分类score相对较低 * 高质量定位score）&gt; 正样本(分类score不够高 * 质量score较低)</p><p>出现NMS score排序后，负样本排在正样本前面的不合理现象，导致真实的正样本被NMS过滤。</p><p><img src="/img/article/2022/10/03/3.png" alt="" /></p><p>本文提出的联合分类和定位表示使得分类和定位得分保持一致(图b绿色的点)。</p></blockquote><p>可以看出来，作者在对监督训练和one-stage的端到端理念有很深的见解。</p><h4 id="2bbox-regression-采用的表示不够灵活在建模复杂场景下的具有不确定性"><a class="markdownIt-Anchor" href="#2bbox-regression-采用的表示不够灵活在建模复杂场景下的具有不确定性"></a> 2.bbox regression 采用的表示不够灵活，在建模复杂场景下的具有不确定性</h4><p><img src="/img/article/2022/10/03/4.png" alt="" /></p><p><img src="/img/article/2022/10/03/5.png" alt="" /></p><p>白色的是真实框，绿色的是预测框。可以看到图中的帆板边缘或被遮挡的大象边界，其实都很难去界定一个精确的位置。</p><p>在这时候，传统的单一Dirac delta分布建模并不符合实际的情况。</p><p>作者提出的一般分布，针对模糊和遮挡的物体采用扁平的分布来表示，清晰的物体采用尖锐的分布表示。</p><h3 id="method"><a class="markdownIt-Anchor" href="#method"></a> Method</h3><p><img src="/img/article/2022/10/03/6.png" alt="" /></p><p>针对离散的{0, 1}标签，本文classifcation 联合 IoU score变为了产生0~1的值作为相应类别的质量评估，将其扩展采用QFL来进行训练；</p><h4 id="qfl"><a class="markdownIt-Anchor" href="#qfl"></a> QFL</h4><p><img src="/img/article/2022/10/03/7.png" alt="" /></p><p><img src="/img/article/2022/10/03/8.png" alt="" /></p><p>对比可以发现，把离散的0，1分布改为了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>为0~1的质量标签，然后把调制因子<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>p</mi><mi>t</mi></msub><msup><mo stretchy="false">)</mo><mi>γ</mi></msup></mrow><annotation encoding="application/x-tex">-(1-p_t)^\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05556em;">γ</span></span></span></span></span></span></span></span></span></span></span>外面括号换成了绝对值，形成了标准的交叉熵函数。</p><h4 id="dfl"><a class="markdownIt-Anchor" href="#dfl"></a> DFL</h4><p>之前的回归的标签<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>当作Dirac delta分布<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>x</mi><mi mathvariant="normal">−</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">σ(x−y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，只做单一概率分布，不够灵活。</p><p>假定我们回归的标签 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 存在最小值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">y_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和最大值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">y_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>通过均等划分<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>y</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>n</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[y_0,y_n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>(简单取:间隔为1)得到离散的集合<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><msub><mi>y</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>y</mi><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>y</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub><mo>+</mo><mn>1.</mn><msub><mi>y</mi><mi>n</mi></msub><mo fence="true">}</mo></mrow><annotation encoding="application/x-tex">{\left \{y_0, y1, y2,..y_i, y_i+1. y_n\right \} }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span></span>(这种离散化可以通过softmax实现)</p><p><img src="/img/article/2022/10/03/9.png" alt="" /></p><p>可以理解为DFL以类似交叉熵的形式去优化与标签<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>最接近的一左一右两个位置的概率<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mi mathvariant="normal">和</mi><msub><mi>y</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">y_i和y_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">和</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>，从而让网络快速地聚焦到目标位置的邻近区域的分布中去</p><h3 id="gfl"><a class="markdownIt-Anchor" href="#gfl"></a> GFL</h3><p>统合了QFL和DFL</p><p><img src="/img/article/2022/10/03/13.png" alt="" /></p><p><img src="/img/article/2022/10/03/10.png" alt="" /></p><h2 id="result"><a class="markdownIt-Anchor" href="#result"></a> Result</h2><p>在ATSS上做消融实验：</p><p><img src="/img/article/2022/10/03/11.png" alt="" /></p><p>总体网络对比：</p><p>仔细对比对应的网络结构，发现是有涨点的。</p><p><img src="/img/article/2022/10/03/12.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-09-27-组会</title>
    <link href="/2022/09/26/Seminar/20220927-%E7%BB%84%E4%BC%9A/"/>
    <url>/2022/09/26/Seminar/20220927-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="2022-09-27-组会"><a class="markdownIt-Anchor" href="#2022-09-27-组会"></a> 2022-09-27-组会</h1><h2 id="orthogonal-transformer"><a class="markdownIt-Anchor" href="#orthogonal-transformer"></a> Orthogonal Transformer</h2><p>NeurIPS’ 2022: <a href="https://nips.cc/Conferences/2022/Schedule?showEvent=55394">https://nips.cc/Conferences/2022/Schedule?showEvent=55394</a></p><p><img src="/img/article/2022/09/26/2.png" alt="" /></p><p><img src="/img/article/2022/09/26/3.png" alt="" /></p><p>如果后续这篇文章放到arxiv上了，我会再读一读。</p><h2 id="o-vitorthogonal-vision-transformer"><a class="markdownIt-Anchor" href="#o-vitorthogonal-vision-transformer"></a> O-ViT：Orthogonal Vision Transformer</h2><p>2022年2月16日： arXiv:2201.12133v2</p><p>这篇文章可以学习借鉴的地方不多：</p><p>=&gt;它是 <strong>纯数学理论上的优化</strong> ，通过正交流形在黎曼空间和欧几里得空间中的转换，保证特征图的失真度较小，进而保证计算过程的置信度</p><blockquote><p>文章中反复提到一些几何流形、正交群、李代数等概念，需要有相当好的矩阵论和抽象代数的基础才能理解，缺少一般Deep Learning的优化思想，我认为只适合套用。</p></blockquote><p>=&gt;该 <strong>文章代码未开源</strong> ，难以学习及复现（套用都套用不了）</p><h3 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h3><p><img src="/img/article/2022/09/26/4.png" alt="" /></p><ul><li>ViT中Self-Attention的线性变换会给特征空间带来尺度模糊性</li><li>Softmax函数存在梯度消失的风险</li></ul><p>前人有将流形优化用在R-NN和C-NN上，也有人利用正交矩阵的范式稳定性来缓解梯度爆炸和消失的问题，因此作者想试试将这个应用在ViT上。</p><h3 id="o-vit-architecture"><a class="markdownIt-Anchor" href="#o-vit-architecture"></a> O-ViT Architecture</h3><p>实际上，有用的就是两行伪代码：</p><p><img src="/img/article/2022/09/26/5.png" alt="" /></p><p><img src="/img/article/2022/09/26/6.png" alt="" /></p><p>通过构造斜对角矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>A</mi><mi>Q</mi></msup><mi mathvariant="normal">、</mi><msup><mi>A</mi><mi>k</mi></msup><mi mathvariant="normal">、</mi><msup><mi>A</mi><mi>v</mi></msup></mrow><annotation encoding="application/x-tex">A^Q、A^k、A^v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span></span></span></span></span></span></span>过渡，来实现对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>Q</mi></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>K</mi></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">W_Q,W_K,W_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的正交约束。</p><blockquote><p>这就必须要求原<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>Q</mi></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>K</mi></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">W_Q,W_K,W_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>都是正交矩阵，这是怎么保证这三个权重矩阵初始化时就是正交矩阵的？</p></blockquote><p>附录中含有数学证明:</p><p><img src="/img/article/2022/09/26/7.png" alt="" /></p><h2 id="swin-transformer"><a class="markdownIt-Anchor" href="#swin-transformer"></a> Swin TransFormer</h2>]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Advancing ViT in Remote Sensing</title>
    <link href="/2022/09/19/AI-Learning/20220919-Advancing%20ViT%20in%20Remote%20Sensing/"/>
    <url>/2022/09/19/AI-Learning/20220919-Advancing%20ViT%20in%20Remote%20Sensing/</url>
    
    <content type="html"><![CDATA[<h1 id="advancing-vit-in-remote-sensing"><a class="markdownIt-Anchor" href="#advancing-vit-in-remote-sensing"></a> Advancing ViT in Remote Sensing</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>论文题目</strong> ：Advancing Plain Vision Transformer Towards Remote Sensing Foundation Model</p><p><strong>论文地址</strong> ：<a href="https://arxiv.org/pdf/2208.03987v2.pdf">https://arxiv.org/pdf/2208.03987v2.pdf</a></p><p><strong>论文出处</strong> ：arxiv</p><p><strong>代码实现</strong> ：<a href="https://github.com/ViTAE-Transformer/Remote-Sensing-RVSA">https://github.com/ViTAE-Transformer/Remote-Sensing-RVSA</a></p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><ul><li><p>提出了一个为Remote Sensing领域定制的大型ViT模型，有1亿个参数。</p></li><li><p>提出了一种新的旋转可变大小窗口注意力机制（RVSA）来替代Trasnsformer中的全注意力机制。</p></li></ul><p>检测任务的实验证明优于所有最先进的模型，在DOTA-V1.0上实现了81.16%的mAP。</p><h2 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h2><p><img src="/img/article/2022/09/19/2.png" alt="" /></p><p>本文与前面一些旋转目标检测文章的主要不同点就在pretrain和backbone上。</p><h3 id="pretrainmae"><a class="markdownIt-Anchor" href="#pretrainmae"></a> Pretrain–MAE</h3><p>本文当中的ViT和ViTAE都是基于一种自监督学习的方法MAE去进行预训练的，使用的数据集是MillionAID（无label）。</p><blockquote><p>MAE 2022 CVPR Kaiming He</p><p><img src="/img/article/2022/09/19/3.png" alt="" /></p><p>在预训练期间，对输入图像的patches按照预先指定的mask ratio进行随机掩码。</p><p>没有被掩盖的patch经过encoder生成visual token ; 被掩盖的patch不会经过encoder,而是按照原先patch的顺序填充mask token。</p><p>然后按顺序排列好的visual token和mask token经过decoder，decoder以像素为单位去生成原始图像。</p><p>预训练之后，decoder被丢弃，encoder被应用于未损坏的图像，为识别任务生成表示。</p></blockquote><p>在本文的介绍当中，是所有的patch都会经过encoder生成visual token，然后按照mask ratio的比率去随机丢弃token(token dropping)。</p><h3 id="backbonevit-和-vitae"><a class="markdownIt-Anchor" href="#backbonevit-和-vitae"></a> Backbone–ViT 和 ViTAE</h3><p>主要区别就在于堆叠的Vision Transformer Block结构上。</p><p><img src="/img/article/2022/09/19/4.png" alt="" /></p><p>ViT的Block就不过多介绍，很经典的Layer Normalization + Muti Head Sel Attention + Feed-Forwad Network(MLP) + Add</p><p>ViTAE，是作者之前的成果，论文中放的图片也是，</p><p>主要就是增加了一个并行卷积分支（Parallel convolution branches，PCM)</p><p>Group Conv + Batch Norm + SiLU + Group Conv</p><blockquote><p>本文的原话：MAE中关键的设计就是token dropping，但是这个操作会破坏token之间的空间关系，所以作者设计了ViTAE的Block。<br />原理是说结合了归纳偏置，具体是怎么回事可能还得看ViTAE的原文</p></blockquote><h3 id="attentionrvsa"><a class="markdownIt-Anchor" href="#attentionrvsa"></a> Attention–RVSA</h3><p>在本文中作者使用了旋转可变大小窗口注意力机制（(Rotated Varied-Size Attention,RVSA)替换了原先的多头注意力机制(MHSA)。</p><p>RVSA基于作者之前的成果(Varied-Size Window Attention,VSA)。</p><p><img src="/img/article/2022/09/19/5.png" alt="" /></p><p>Varied-Size Window Attention又是基于Window-base attention(思路源于Swin-T)，以固定大小的窗口作为初始化,并从这些窗口提取Qw，对于Kw和Vw，通过输入Xw去预测目标窗口的偏移量o和比例s去得到。</p><p>对着论文比较好讲，先讲Window-base attention的s，</p><p><img src="/img/article/2022/09/19/6.png" alt="" /></p><h4 id="coordinate-transformation"><a class="markdownIt-Anchor" href="#coordinate-transformation"></a> Coordinate Transformation</h4><p>该模块主要是就是坐标变换，</p><p>对于VSA:</p><p><img src="/img/article/2022/09/19/7.png" alt="" /></p><p>对于RVSA:</p><p><img src="/img/article/2022/09/19/8.png" alt="" /></p><h3 id="一些细节"><a class="markdownIt-Anchor" href="#一些细节"></a> 一些细节</h3><p>最佳Mask Ratio通过Linear probing setting和 Fine tune setting实验获得，为0.75时达到最佳性能。</p><p>Window-base attention的初始化分割， 通过实验，在DOTA和DIOR-R数据集上s均取7能达到最佳性能。</p><h2 id="result"><a class="markdownIt-Anchor" href="#result"></a> Result</h2><p>作者使用的大的网络框架是Oriented-RCNN，主要对比pretrain和backbone</p><p>黑、红、蓝色依次标注是该类别的acc1、2、 3名</p><p><img src="/img/article/2022/09/19/9.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
      <tag>Transformer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-09-12-组会</title>
    <link href="/2022/09/11/Seminar/20220912-%E7%BB%84%E4%BC%9A/"/>
    <url>/2022/09/11/Seminar/20220912-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="2022-09-12-组会"><a class="markdownIt-Anchor" href="#2022-09-12-组会"></a> 2022-09-12-组会</h1><h2 id="loss"><a class="markdownIt-Anchor" href="#loss"></a> loss</h2><h3 id="oriented-rcnn"><a class="markdownIt-Anchor" href="#oriented-rcnn"></a> Oriented-RCNN</h3><p><img src="/img/article/2022/09/12/2.png" alt="" /></p><p>分类分支: Cross Entropy Loss</p><p>回归分支: SmothL1Loss</p><p><img src="/img/article/2022/09/12/3.png" alt="" /></p><p><img src="/img/article/2022/09/12/4.png" alt="" /></p><h3 id="atss"><a class="markdownIt-Anchor" href="#atss"></a> ATSS</h3><h4 id="mmdet框架水平目标检测"><a class="markdownIt-Anchor" href="#mmdet框架水平目标检测"></a> mmdet框架(水平目标检测)</h4><p>分类分支: FocalLoss</p><p>回归分支: IOULoss</p><p>Centerness分支:</p><p><img src="/img/article/2022/09/12/5.png" alt="" /></p><p><img src="/img/article/2022/09/12/6.png" alt="" /></p><h4 id="mmrotate框架旋转目标检测"><a class="markdownIt-Anchor" href="#mmrotate框架旋转目标检测"></a> mmrotate框架(旋转目标检测)</h4><p>分类分支: FocalLoss</p><p>回归分支: L1Loss</p><p><img src="/img/article/2022/09/12/7.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-09-06-组会</title>
    <link href="/2022/09/06/Seminar/20220906-%E7%BB%84%E4%BC%9A/"/>
    <url>/2022/09/06/Seminar/20220906-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="2022-09-06-组会"><a class="markdownIt-Anchor" href="#2022-09-06-组会"></a> 2022-09-06-组会</h1><h2 id="atss与oriented-r-cnn"><a class="markdownIt-Anchor" href="#atss与oriented-r-cnn"></a> ATSS与Oriented R-CNN</h2><h3 id="区别"><a class="markdownIt-Anchor" href="#区别"></a> 区别</h3><p>ATSS原论文是将ATSS这种动态划分正负样本策略应用在one-stage的RetinaNet(anchor-based)t和one-stage的FCOS(anchor-free)</p><blockquote><p>one-stage中能够匹配到目标的候选框（正样本）个数一般只用十几个或几十个，而没匹配到的候选框（负样本）大概有 10^4 - 10^5 个。</p><p>选出来的proposal直接就相当于正样本了</p><p>容易出现正负样本不均衡，所以要平衡正负样本</p></blockquote><p>anchor=&gt;proposal(positive sample)</p><hr /><p>Oriented R-CNN(anchor-based)是two-stage的检测器，它把正负样本的划分了2个步骤，每个stage各一个步骤。</p><blockquote><p>在第一阶段先选出一些候选框proposal（如Faster R-CNN 的rpn），大概2000个左右;</p><p>在第二阶段再从proposal中筛选出正负样本，虽然这时正负样本也是存在不均衡的，但是(10  ：2000) 相对（10  :   10^4 - 10^5 )好了很多。</p><p>这也是为什么普遍two-stage的检测器比one-stage的检测器的精度要高一些的原因之一。</p></blockquote><p>anchor=&gt;proposal=&gt;positive sample</p><h3 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用</h3><p>如果我要将ATSS应用在Oriented R-CNN中，我是应该要应用在第一阶段还是应用在第二阶段，还是都应用，这么做的提升效果？</p><p>如果我应用在第一阶段:  anchor=&gt;proposal， 相当于是提出了动态划分proposal策略（理论上来说可以应用）</p><p>而且Oriented R-CNN的在第一阶段的rpn-head中encoder-decoder就是采用的是6元组(midpointoffset)的表达形式。</p><blockquote><p>一些假想:</p><p>第一阶段，动态划分proposal，假设是Fast R-CNN中的数据规模，划分出1000-5000个;  数据规模相比与2000来说变化不大，会有提升效果么？<br />如果不改变第二阶段，当我筛出10:5000， 和原本的10:2000来说是不是负优化了？</p></blockquote><hr /><p>如果我应用在第二阶段:  proposal=&gt;positive sample</p><blockquote><p>感觉上不能直接用ATSS，因为ATSS是从所有anchor中选中心点与GT最近的topK个anchor，我不清楚从proposal开始，是否也有足够数量的proposal支持我这么做</p></blockquote><p>而且Oriented R-CNN的在第二阶段的rcnn-head中encoder-decoder已经回归到5元组(xywha)的表达形式了，也就不涉及表达转换。</p><p>所以将ATSS应用在two-stage检测器中真的有意义么，可能只有实验才能验证。</p><h3 id="表达转换"><a class="markdownIt-Anchor" href="#表达转换"></a> 表达转换</h3><p>我觉得直接使用Oriented R-CNN中的转换公式就行了</p><p>encoder:</p><p><img src="/img/article/2022/09/06/2.png" alt="" /></p><p>decoder:</p><p><img src="/img/article/2022/09/06/3.png" alt="" /></p><p>如果要设计公式，我觉得也是在loss部分</p><p>ATSS额外加入了 centerness 分支，这部分也要计算loss</p><hr />]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vision Transformer</title>
    <link href="/2022/08/29/AI-Learning/20220829-Vision%20Transformer/"/>
    <url>/2022/08/29/AI-Learning/20220829-Vision%20Transformer/</url>
    
    <content type="html"><![CDATA[<h1 id="vision-transformer"><a class="markdownIt-Anchor" href="#vision-transformer"></a> Vision Transformer</h1><h2 id="vision-transformer-2"><a class="markdownIt-Anchor" href="#vision-transformer-2"></a> Vision Transformer</h2><p><strong>论文题目</strong> ：AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE</p><p><strong>论文地址</strong> ：<a href="https://arxiv.org/pdf/2010.11929.pdf">https://arxiv.org/pdf/2010.11929.pdf</a></p><p><strong>论文出处</strong> ：ICLR’2021</p><p><strong>代码实现</strong> ：-</p><h3 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h3><p>通过将图像拆分为块 (patch)，并将这些图像块的线性嵌入序列作为 Transformer 的输入，作者将Transformer成功应用到CV领域。</p><blockquote><p>没有直接把像素点作为输入，可以减少参数量</p></blockquote><p>通过这篇文章的实验，说明Transformer在CV领域确实有效，并且效果惊人。</p><h3 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h3><h4 id="network"><a class="markdownIt-Anchor" href="#network"></a> Network</h4><p><img src="/img/article/2022/08/29/2.png" alt="" /></p><ul><li>Linear Projection of Flattened Patches(Patch Embedding层)</li><li>Transformer Encoder(图右侧有给出更加详细的结构)</li><li>MLP Head（最终用于分类的层结构）</li></ul><h4 id="patch-embedding"><a class="markdownIt-Anchor" href="#patch-embedding"></a> Patch Embedding</h4><p><img src="/img/article/2022/08/29/3.png" alt="" /></p><p>以ViT-Base/16为例:</p><p>首先将一张图片按给定大小分成一堆Patches。将输入图片(224x224)按照16x16大小的Patch进行划分，划分后会得到(224/16)^2 = 196 个patch。</p><p>每个Patche数据shape为<code>[16,16,3]</code>通过线性映射将每个Patch映射到一维向量中，映射得到一个长度为768的向量token<code>[196,768]</code>。</p><blockquote><p>具体使用一个卷积层（768个16x16的卷积核,stride为16）来实现Patch划分。</p></blockquote><p>拼接一个[class]token， Concat([1,768],[196,768] =&gt; <code>[197,768]</code>。</p><p>叠加位置编码Position Embedding, <code>[197,768]</code> =&gt; <code>[197,768]</code>。</p><blockquote><p>自注意力的<strong>扰动不变性</strong>(<strong>Permutation-invariant</strong>): <strong>打乱 Sequence 中 tokens 的顺序并不会改变结果</strong>。</p><p>这里的[class] token和位置编码都是可训练参数。</p></blockquote><p><img src="/img/article/2022/08/29/4.png" alt="" /></p><p>位置编码之间的余弦相似度可视化，表明任意两个patches之间在位置上的关联度。</p><p>可以发现相近的图像块的位置编码关联度较高，且同行或列的位置编码关联度也相近。</p><p>这里的图片按32x32的大小划分，所以是得到7x7个patch。</p><h4 id="transformer-encoder"><a class="markdownIt-Anchor" href="#transformer-encoder"></a> Transformer Encoder</h4><p><img src="/img/article/2022/08/29/5.png" alt="" /></p><p>Transformer Encoder其实就是重复堆叠Encoder Block L次:</p><p><img src="/img/article/2022/08/29/6.png" alt="" /></p><ul><li><p>Layer Norm，这种Normalization方法主要是针对NLP领域提出的，这里是对每个token进行Norm处理</p><blockquote><p>BN是取不同样本的同一个通道的特征做归一化；LN则是取同一个样本的不同通道做归一化。</p></blockquote></li><li><p>Multi-Head Attention，这个结构之前是在Attention Is All You Need这篇文章中提出</p><p><img src="/img/article/2022/08/29/7.png" alt="" /></p><p><img src="/img/article/2022/08/29/8.png" alt="" /></p><blockquote><p>我感觉这原文当中这两个图比较抽象，大概讲下我的理解:</p><p><strong>Self-Attention</strong> :</p><p><img src="/img/article/2022/08/29/9.png" alt="" /></p><p>首先把输入的token通过Input Embedding映射为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，然后<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>通过3个可变换矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>q</mi></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>k</mi></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">W_q,W_k,W_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(这三个参数是可训练的，并且是共享的)计算得到对应的Q,K,V。</p><ul><li>q代表query，后续会去和每一个k进行匹配</li><li>k代表key，后续会被每个q匹配</li><li>v代表value，从a中提取得到的信息，可以理解为相关性权值</li></ul><p>Q和K相乘，得到是查询向量和各个对应的键向量的相关性（匹配度），是 n×n 的矩阵。</p><p>除以根号dk，再通过SoftMax得到缩放后的attention score，再与V相乘，得到加权和作为最后的输出。</p><p>点乘操作可以写成矩阵乘法,实现计算并行化，因此计算速度会快很多。</p><p><strong>Multi-Head Attention</strong> :</p><p>Q，V，K分别通过n次线性变换得到n组Q，K，V，这里n对应着<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>e</mi><mi>a</mi><msub><mi>d</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">Head_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>对于每一组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>K</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Q_i,K_i,V_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>通过Self-Attention得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>e</mi><mi>a</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Head_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>拼接所有的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>e</mi><mi>a</mi><msub><mi>d</mi><mn>0</mn></msub><mo>−</mo><mi>H</mi><mi>e</mi><mi>a</mi><msub><mi>d</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">Head_0 - Head_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，然后将其线性映射得到最终输出。</p></blockquote></li><li><p>Dropout，减少过拟合，保证模型的稀疏性</p></li><li><p>MLP，如图所示，就是全连接+GELU激活函数+Dropout</p></li></ul><h4 id="mlp-head"><a class="markdownIt-Anchor" href="#mlp-head"></a> MLP Head</h4><p><img src="/img/article/2022/08/29/10.png" alt="" /></p><p>上面通过Transformer Encoder后输出的shape和输入的shape是保持不变的。</p><p>所以我们只需要提取出[class]token生成的对应结果就行，即<code>[197, 768]</code>中提取出[class]token对应的<code>[1, 768]</code>。</p><p>接着我们通过MLP Head得到我们最终的分类结果。</p><p>MLP Head 由 Linear+tanh激活函数+Linear组成。</p><p>整体网络的内部结构:</p><p><img src="/img/article/2022/08/29/11.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
      <tag>Transformer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-08-22-组会</title>
    <link href="/2022/08/22/Seminar/20220822-%E7%BB%84%E4%BC%9A/"/>
    <url>/2022/08/22/Seminar/20220822-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="2022-08-22-组会"><a class="markdownIt-Anchor" href="#2022-08-22-组会"></a> 2022-08-22-组会</h1><p><img src="/img/article/2022/08/22/2.png" alt="" /></p><p>上次组会开完后，目前比较主流的遥感旋转目标检测相关论文读得差不多了</p><h3 id="论文总结"><a class="markdownIt-Anchor" href="#论文总结"></a> 论文总结</h3><p>使用基于角度回归的检测方法=&gt;直接解决面对</p><p>角度参数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">{\theta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span></span>的周期性带来的 <strong>损失的不连续性</strong> 和 <strong>回归的不一致性</strong></p><p>解决思路: 设计一些新型IOU或Loss函数去解决， 如GWD，KFIOU等</p><hr /><p>借鉴传统通用检测器的新型表示方法(如点集(reppoints)，平行四边形)，规避掉 <strong>损失的不连续性</strong> 和 <strong>回归的不一致性</strong></p><p>把这种检测框的表示，从水平垂直框迁移到旋转框的表示，需要设计一系列的转换函数。</p><blockquote><ul><li><p>有借鉴目标检测的新型表达方式的，如Oriented RepPoint(借鉴RepPoint)，效果很好</p></li><li><p>有自己设计的新型表达方式(如根据四边形偏移量)， 如Oriented R-CNN, RSDet, Gliding Vertex等，其中Oriented R-CNN效果很好，其它的效果一般</p></li></ul></blockquote><hr /><p>还有像ATSS(SASM)这样另辟蹊径，动态设置IOU阈值划分正负样本。设计一些算法，使用超参数调整动态值。</p><hr /><p>…</p><p>目前一个好的思路可以尝试： 能否将ATSS和Oriented R-CNN结合起来，达到一个更高的mAP?</p><p>实现思路：重新设计Head、BBox Assigner等模块去把原本固定的IOU阈值给覆盖掉</p><p><img src="/img/article/2022/08/22/3.png" alt="" /></p><p>目前的在做一些尝试性的实验，学习Pytorch。</p><h3 id="论文阅读"><a class="markdownIt-Anchor" href="#论文阅读"></a> 论文阅读</h3><h4 id="vit"><a class="markdownIt-Anchor" href="#vit"></a> ViT</h4><p>找到一篇论文Advancing Plain Vision Transformer Towards Remote Sensing Foundation Model 武汉大学 8月10号发布的</p><blockquote><p>有代码，是目前DOTA数据集上的SOTA</p></blockquote><p>这篇论文主要思想是把Vision Transformer应用在遥感图像，但ViT这一块我不太了解其具体实现，这篇论文可能自己也没有理解透彻(尤其是里面Mask Image Modeling部分)，所以我打算再找些相关的论文去读一读再讲。</p><p>它跟以往的基于rpn为backbone的网络模型结构完全不一样，可能能成为一个新的思路。</p><h4 id="文本检测方向"><a class="markdownIt-Anchor" href="#文本检测方向"></a> 文本检测方向</h4><p>水平文本检测、多向文本检测、弯曲文本检测，文本识别(OCR)</p><p>多向文本检测中的比较新的文章:</p><p>MOST[2021’CVPR] (A Multi-Oriented Scene Text Detector with Localization Refinement)</p><p><img src="/img/article/2022/08/22/4.png" alt="" /></p><p>使用的是DCN(可变形卷积)，这就回到了Oriented Reppoint中的新型表达方式了。</p><ul><li>后续是否应该继续读文章找新的思路？</li><li>遥感旋转目标检测方向上的文章读的差不多了，该如何找适合自己方向的新的文章?</li></ul>]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ATSS与SASM</title>
    <link href="/2022/08/01/AI-Learning/20220801-SASM/"/>
    <url>/2022/08/01/AI-Learning/20220801-SASM/</url>
    
    <content type="html"><![CDATA[<h1 id="atss与sasm"><a class="markdownIt-Anchor" href="#atss与sasm"></a> ATSS与SASM</h1><p>动态设置IOU阈值以划分正负样本。</p><h2 id="atss"><a class="markdownIt-Anchor" href="#atss"></a> ATSS</h2><p><strong>论文题目</strong> ：Bridging the Gap Between Anchor-based and Anchor-free Detection via Adaptive Training Sample Selection</p><p><strong>论文地址</strong> ：<a href="https://arxiv.org/pdf/1912.02424.pdf">https://arxiv.org/pdf/1912.02424.pdf</a></p><p><strong>论文出处</strong> ：2020’CVPR</p><p><strong>代码实现</strong> : <a href="https://github.com/sfzhang15/ATSS">https://github.com/sfzhang15/ATSS</a></p><h3 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h3><ul><li>指出anchor-free和一阶段anchor-based方法的根本差异主要来源于正负样本的选择</li><li>提出ATSS( Adaptive Training Sample Selection)方法来根据对象的统计特征自动选择正负样本</li></ul><h3 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h3><h3 id="retinanet与fcos"><a class="markdownIt-Anchor" href="#retinanet与fcos"></a> RetinaNet与FCOS</h3><p>RetinaNet 网络结构是目前主流的一阶段anchor-based目标检测网络结构，我在之前的组会中有介绍过。</p><p>FCOS沿用了主流网络结构 RetinaNet，使其具备公平对比的特性，在几乎没有修改情况下，性能可以超越 RetinaNet</p><p>区别:</p><blockquote><p>(1)<strong>每个位置平铺的anchor数目不同。</strong> RetinaNet每个位置会平铺几个anchor box而FCOS每个位置只会设定一个anchor point（anchor free 却 center-based）。</p><p>(2)<strong>正负样本的定义方式不同。</strong> RetinaNet根据IOU来选择正负样本，FCOS则利用空间和尺度约束来选择样本。</p><p>(3) <strong>回归的起始状态不同。</strong> RetinaNet从预定义的anchor处回归边界框，而FCOS则从预定义的point上定位目标。</p><p>(4) <strong>Trick</strong>。FCOS论文中提出了一些通用trick，可以有效提升性能。</p></blockquote><p>作者首先对两大主流算法进行深入公平对比分析，希望能找到性能差异的根本原因:</p><p><img src="/img/article/2022/08/01/2.png" alt="" /></p><p>因为 FCOS 算法性能优于 RetinaNet，并且其额外引入了许多 trick，为了公平对比，将 FCOS 所提 trick 也迁移到 RetinaNet 中，并且设置 RetinaNet 的 anchor 个数为 1，结果如上所示。可以看出即使所有 trick 都加上 RetinaNet 依然差了 0.8 mAP。</p><p>排除上述因素后，两个算法的区别是：</p><ul><li><p>分类分支上，正负样本的定义方式不同</p></li><li><p>回归分支上，回归的起始状态不同</p></li></ul><h4 id="essential-difference"><a class="markdownIt-Anchor" href="#essential-difference"></a> Essential Difference</h4><h5 id="classification"><a class="markdownIt-Anchor" href="#classification"></a> Classification</h5><p><img src="/img/article/2022/08/01/3.png" alt="" /></p><p>RetinaNet使用IoU阈值(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">{\theta_p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mi>g</mi></msub></mrow><annotation encoding="application/x-tex">{\theta_g}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span>)来区分正负anchor bbox，处于中间的全部忽略。</p><p>FCOS使用空间尺寸和尺寸限制来区分正负anchor point，正样本首先必须在GT box内，其次需要是GT尺寸对应的层，其余均为负样本。</p><h5 id="regression"><a class="markdownIt-Anchor" href="#regression"></a> Regression</h5><p><img src="/img/article/2022/08/01/4.png" alt="" /></p><p>RetinaNet预测4个偏移值对anchor box进行调整输出，而FCOS则预测4个相对于anchor point值对anchor box进行调整输出</p><p>对上述差异进行交叉实验做对比:</p><p><img src="/img/article/2022/08/01/5.png" alt="" /></p><p>发现相同的正负样本定义下的RetinaNet和FCOS性能几乎一样，不同的定义方法性能差异较大，而回归初始状态对性能影响不大。所以，基本可以确定正负样本的确定方法是影响性能的重要一环。</p><h3 id="atssadaptive-training-sample-selection"><a class="markdownIt-Anchor" href="#atssadaptive-training-sample-selection"></a> ATSS(Adaptive Training Sample Selection)</h3><p><img src="/img/article/2022/08/01/6.png" alt="" /></p><p>论文提出ATSS方法，该方法根据目标的相关统计特征，计算自适应阈值进行正负样本的选择。</p><p>论文提出ATSS方法，该方法根据目标的相关统计特征自动进行正负样本的选择，具体逻辑如算法1所示。对于每个GT box g，首先在每个特征层找到中心点最近的k个候选anchor boxes(非预测结果)，计算候选box与GT间的IoU Dg，计算IoU的均值mg和标准差vg，得到IoU阈值tg=mg+vg，最后选择阈值大于tg的box作为最后的输出。如果anchor box对应多个GT，则选择IoU最大的GT。</p><h3 id="result"><a class="markdownIt-Anchor" href="#result"></a> Result</h3><p>应用在RetinaNet与FCOS上的实验结果(COCO数据集):</p><p><img src="/img/article/2022/08/01/7.png" alt="" /></p><h2 id="sasm"><a class="markdownIt-Anchor" href="#sasm"></a> SASM</h2><p><strong>论文题目</strong> ：Shape-Adaptive Selection and Measurement for Oriented Object Detection</p><p><strong>论文地址</strong> ：<a href="https://www.aaai.org/AAAI22Papers/AAAI-2171.HouL.pdf?ref=https://githubhelp.com">https://www.aaai.org/AAAI22Papers/AAAI-2171.HouL.pdf?ref=https://githubhelp.com</a></p><p><strong>论文出处</strong> ：2022’AAAI</p><p><strong>代码实现</strong> : <a href="https://github.com/houliping/SASM">https://github.com/houliping/SASM</a></p><h3 id="idea-2"><a class="markdownIt-Anchor" href="#idea-2"></a> Idea</h3><p>提出了一种新的动态选择(SA-S)策略和动态评估(SA-M)策略，选择正负样本</p><h3 id="detail-2"><a class="markdownIt-Anchor" href="#detail-2"></a> Detail</h3><p><img src="/img/article/2022/08/01/8.png" alt="" /></p><h4 id="sa-s"><a class="markdownIt-Anchor" href="#sa-s"></a> SA-S</h4><p><img src="/img/article/2022/08/01/9.png" alt="" /></p><p>SA-S的做法很容易理解，效仿ATSS，根据物体的形状动态调整每个object的IoU阈值</p><p>根据物体长宽比设计了一个关于阈值的递减函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>γ</mi><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{ f(γi) }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span></span>，长宽比越大，IoU越小。</p><p>论文中的公式 μ 就是计算出的均值， σ 就是计算出来的标准差。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>γ</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">{γi}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mord mathdefault">i</span></span></span></span></span>  是目标的纵横比，长边比短边。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">{w}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span></span>是一个超参数（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">{w}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span></span> 越大，函数曲线越平滑，就更能表示纵横比更大的目标）</p><h4 id="sa-m"><a class="markdownIt-Anchor" href="#sa-m"></a> SA-M</h4><p>一般来说，做完动态选择（SA-M）策略之后，所有的正样本都会一视同仁。但作者认为，正样本之间也有质量上的区别的。以anchor-free的样本为例（即点），假如这5个点都被分配为了正样本点，但是位于位于物体中心的点比物体中心的点更能代表物体的特性。因此我们根据点相对于物体的距离对于选中的正样本点做了质量上的区分。对于anchor-based方法，点用anchor的中心点代表。</p><p><img src="/img/article/2022/08/01/10.png" alt="" /></p><p>第j个样本点与第i个目标中心点的距离计算:</p><p><img src="/img/article/2022/08/01/11.png" alt="" /></p><p>这样综合了点相对物体中心和边界的距离，离中心越近，边界越远，代表质量越好</p><p>正样本点的质量计算为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Q</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><msup><mi>e</mi><mrow><mo>−</mo><mi mathvariant="normal">Δ</mi><msub><mi>d</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow></msup></mrow><annotation encoding="application/x-tex">{Q_{ij}=e^{-\Delta d_{ij}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1852159999999998em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">Δ</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>该质量权重后续运用在计算Loss函数中:</p><p><img src="/img/article/2022/08/01/12.png" alt="" /></p><p><img src="/img/article/2022/08/01/13.png" alt="" /></p><p><img src="/img/article/2022/08/01/14.png" alt="" /></p><p><img src="/img/article/2022/08/01/15.png" alt="" /></p><h3 id="result-2"><a class="markdownIt-Anchor" href="#result-2"></a> Result</h3><p>作者基于RepPoint(anchor-free)和S2A-Net(anchor-based)模型在HRSC2016上进行了实验，效果显著。</p><p><img src="/img/article/2022/08/01/16.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oriented RepPoints</title>
    <link href="/2022/07/25/AI-Learning/20220725-Oriented%20RepPoints/"/>
    <url>/2022/07/25/AI-Learning/20220725-Oriented%20RepPoints/</url>
    
    <content type="html"><![CDATA[<h1 id="oriented-reppoints"><a class="markdownIt-Anchor" href="#oriented-reppoints"></a> Oriented RepPoints</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>论文题目</strong> ：Oriented RepPoints for Aerial Object Detection</p><p><strong>论文地址</strong> ：<a href="https://arxiv.org/pdf/2105.11111.pdf">https://arxiv.org/pdf/2105.11111.pdf</a></p><p><strong>论文出处</strong> ：2022’CVPR</p><p><strong>代码实现</strong> ：<a href="https://github.com/LiWentomng/OrientedRepPoints">https://github.com/LiWentomng/OrientedRepPoints</a></p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p>1.提出3种定向转换函数，将每个特征图中的点集（9个点），转换成有向的框。</p><p>2.点集学习提出了一种有效的 <strong>自适应点评估和分配样本方案APPA</strong> 。</p><p>3.为了匹配定向目标数据和转换函数，提出了损失函数的改进。</p><h2 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h2><h3 id="related-work"><a class="markdownIt-Anchor" href="#related-work"></a> Related Work</h3><p>此前，基于角度回归的检测方法在该研究领域占主导地位(通过直接添加角度参数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">{\theta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span></span>)，</p><p>但是直接方向预测会带来一系列问题=&gt;包括 <strong>损失的不连续性</strong> 和 <strong>回归的不一致性</strong></p><blockquote><p>这两个问题主要是由于角度的周期性(有界)和旋转框的定义表示。</p></blockquote><p>这就导致虽然定位比较准确,但是旋转方向的回归很多时候是不太准确的。</p><p><img src="/img/article/2022/07/25/2.png" alt="" /></p><p>在传统通用检测器中，RepPoints通过使用点集表示来捕获细粒度对象。</p><h3 id="oriented-reppoints-2"><a class="markdownIt-Anchor" href="#oriented-reppoints-2"></a> Oriented RepPoints</h3><h4 id="pre-可变形卷积dcn"><a class="markdownIt-Anchor" href="#pre-可变形卷积dcn"></a> [Pre]-可变形卷积(DCN)</h4><p>ICCV2017： <a href="https://openaccess.thecvf.com/content_ICCV_2017/papers/Dai_Deformable_Convolutional_Networks_ICCV_2017_paper.pdf">Deformable Convolutional Networks</a></p><p><img src="/img/article/2022/07/25/3.png" alt="" /></p><p>这是可变形卷积想要表达的采样形式，a是代表普通的卷积核是3*3的，所示采样的点数是9个，b,c,d都是可变形卷积（c、d只是一种特殊的形式），可以看出a普通卷积采样的位置是固定的，而可变形卷积做的事情就是给9个采样点，<strong>每一个点加一个偏移量得到新的采样坐标</strong>（偏移量是小数，例如原一个采样点坐标（3,4）加上偏移量可能为（3.6,5.8）坐标变成了小数，这个时候就用双线性插值法为该点取值），把新的9个位置作为可变形卷积采样点的位置，<strong>然后再进行常规的卷积加权的操作</strong>。只是改变了采样点的位置。</p><blockquote><ul><li>单线性插值</li></ul><p><img src="/img/article/2022/07/25/5.png" alt="" /></p><p>根据同一条直线斜率相等，可得:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>y</mi><mo>−</mo><msub><mi>y</mi><mn>1</mn></msub></mrow><mrow><mi>x</mi><mo>−</mo><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac><mo>=</mo><mfrac><mrow><msub><mi>y</mi><mn>2</mn></msub><mo>−</mo><msub><mi>y</mi><mn>1</mn></msub></mrow><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">{\frac{y-y_1}{x-x_1}= \frac{y_2-y_1}{x_2-x_1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.09633em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></span></p><p>整理得:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mrow><mfrac><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><mi>x</mi></mrow><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac><msub><mi>y</mi><mn>1</mn></msub><mo>+</mo><mfrac><mrow><mi>x</mi><mo>−</mo><msub><mi>x</mi><mn>1</mn></msub></mrow><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac><msub><mi>y</mi><mn>2</mn></msub></mrow></mrow><annotation encoding="application/x-tex">y = {\frac{x_2-x}{x_2-x_1}y_1 +\frac{x-x_1}{x_2-x_1}y_2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09633em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>双线性插值</li></ul><p><img src="/img/article/2022/07/25/6.png" alt="" /></p><p>就是选择周围相邻的四个点进行三次单行线插值，其中x轴2次，y轴1次。</p></blockquote><p><img src="/img/article/2022/07/25/4.png" alt="" /></p><p>再说一下可变形卷积的结构，先从输入的特征图中，单独用一个小的卷积分支对特征图中的每一个点都学习一组偏移量的信息offset field（这里的通道数是2N，N表示采样点的个数3*3的卷积核N在这里表示9，2表示每个采样点都有x坐标偏移值和y坐标的偏移值），用来表示当卷积核的走到特征图该点的时候应该偏移到哪个位置来计算。这个偏移量没有具体的取值范围，offsets学出来值的应该是有正有负的小数(正负代表方向)，代码中也有后处理来保证加上偏移量的新采样的位置不会超过特征图的范围 。<strong>这个offsets就是点集表示目标的关键</strong>。</p><h4 id="pre-reppoints"><a class="markdownIt-Anchor" href="#pre-reppoints"></a> [Pre]-RepPoints</h4><p>ICCV2019: <a href="https://openaccess.thecvf.com/content_ICCV_2019/papers/Yang_RepPoints_Point_Set_Representation_for_Object_Detection_ICCV_2019_paper.pdf">RepPoints: Point Set Representation for Object Detection</a></p><p>RepPoints点集表示的目标检测属于anchor free的表示。</p><p><img src="/img/article/2022/07/25/7.png" alt="" /></p><p>整体上来看这个网络分为<strong>定位</strong>和<strong>分类</strong>两个内容。这个网络的训练<strong>定位是分为两个阶段</strong>，<strong>分类是一个阶段</strong>。</p><p>下面具体来看下网络结构:</p><p>首先这个网络的backone是用的FPN，出来的是5个层级的Scale的特征图，在此处只对一个特征图出来的head举例子。一层特征图出来被分为两个分支，一个用来做目标的定位，另一个用来做分类。</p><p><img src="/img/article/2022/07/25/8.png" alt="" /></p><p><strong>定位:</strong> 定位部分有两个阶段:</p><p>第一阶段:先做一次3x3的卷积学习一下特征，然后1x1的卷积用来改变通道产生offsets，再进入offset field进行可变形卷积得到每个点的x方向和y方向上的偏移量，我们得到了一组点集9个点的坐标，在通过转换函数Convert即可以生成pseudo box(伪框)。</p><p>转换函数Convert有三种：</p><p><strong>1.Min-max function.</strong> 通过点集所有点的x，y坐标的最大最小值画框。</p><p><strong>2.Partial min-max function.</strong> 通过点集部分点（文章中指出代码中是前四个点）的x，y坐标的最大最小值画框。</p><p><strong>3.Moment-based function.</strong> 通过一组点集中点位置的均值和标准差回归出框的位置。</p><p><img src="/img/article/2022/07/25/9.png" alt="" /></p><p>Positive:</p><p>1.根据GT的尺寸大小，选择某一个scale的特征图，将GT映射在该特征图上(中心点映射)</p><p>2.第一阶段产生的所有pseudo box中与GT的IOU的值大于0.5，评判为positive，进入第二阶段</p><p>第二阶段: Refine stage，与第一阶段步骤大致相同，可以看到point loss明显变小。</p><p><strong>分类:</strong> 分类分支也是对positive pseudo box（有目标的框）做分类，第一阶段产生的pseudo box与GT的IOU大于0.5认为有目标的框做分类损失，用的是focal loss。</p><h4 id="network"><a class="markdownIt-Anchor" href="#network"></a> Network</h4><p><img src="/img/article/2022/07/25/10.png" alt="" /></p><h4 id="oriented-conversion-function"><a class="markdownIt-Anchor" href="#oriented-conversion-function"></a> Oriented conversion function</h4><p>三个定向转换函数</p><p>1.<strong>MinAeraRect</strong> ：在采样点中选择具有最小面积的旋转矩形；（该函数不可导在网路中训练参数不可以反传，所以只在推理的时候应用）</p><p>2.<strong>NearestGTCorner</strong> ：GT的四个角点，找4个距离最近采样点作为预测点。</p><p>3.<strong>ConvexHull</strong>：通过Jarvis March算法，找到包围所有采样点的外接多边形。</p><p><img src="/img/article/2022/07/25/17.png" alt="" /></p><h4 id="adaptive-points-assessment-and-assignment"><a class="markdownIt-Anchor" href="#adaptive-points-assessment-and-assignment"></a> Adaptive Points Assessment and Assignment</h4><p>自适应点集评估和分配样本方案</p><p><img src="/img/article/2022/07/25/11.png" alt="" /></p><p>该方案是在pseudo box与GT box的IOU&gt;0.5的基础上，对这些pseudo box再从四个方面来衡量质量的好坏，然后按照质量分数对其进行排序，通过一个采样率选择质量分数Top前几的作为positive样本进行细化，通过此方式训练的网络可以更好。</p><p><img src="/img/article/2022/07/25/12.png" alt="" /></p><p>1.分类质量:该点集与GT的分类损失focal loss</p><p><img src="/img/article/2022/07/25/13.png" alt="" /></p><p>2.定位质量:该点集生成的多边形与GT的GIOU损失值</p><p><img src="/img/article/2022/07/25/14.png" alt="" /></p><p>3.定向质量:通过倒角距离（Chamfer distance）来衡量</p><p><img src="/img/article/2022/07/25/15.png" alt="" /></p><p>4.逐点相关性质量</p><p><img src="/img/article/2022/07/25/16.png" alt="" /></p><p><strong>动态Top K分配</strong>：选择根据前面4个质量标准，质量分数排在前面k的点集生成的pseudo box去做第二阶段的细化。</p><h4 id="loss-function"><a class="markdownIt-Anchor" href="#loss-function"></a> Loss function</h4><p><strong>NearestGTCorner</strong> 和 <strong>ConvexHull</strong> 转换函数实际上生成的不是一个规则的矩形，而是一个不规则的四边形和多边形。所以这个时候就能用GT的角点来衡量loc的损失，这里是用的GIOU的损失，也对分布在GT范围以外的离群点做了惩罚。惩罚项就是对超出GT的离群点做惩罚，让所有的点分布在GT box之内。(通过惩罚监督，边形框就会越来越接近标准的矩形)</p><p><img src="/img/article/2022/07/25/18.png" alt="" /></p><p>分类:</p><p><img src="/img/article/2022/07/25/19.png" alt="" /></p><p><img src="/img/article/2022/07/25/20.png" alt="" /></p><p>有向定位框:</p><p><img src="/img/article/2022/07/25/21.png" alt="" /></p><p>离散点惩罚：</p><p><img src="/img/article/2022/07/25/22.png" alt="" /></p><p><img src="/img/article/2022/07/25/23.png" alt="" /></p><h2 id="实验部分"><a class="markdownIt-Anchor" href="#实验部分"></a> 实验部分</h2><p>Oriented R-CNN</p><p>有两个问题:</p><p>map比论文中的大</p><p>应该是要取多个阈值训练下的平均值。</p><blockquote><p>voc07通过将IoU从0.5变化到0.95计算不同的mAP,再求平均,更能反映出定位精度</p></blockquote><p>与github上给出的log.json还有一定差距(4%)，不知道是不是参数的设置，准备做一个json比对。</p><p>我自己跑过两个相同的训练，相差只有0.2%左右。</p><p>mutilscale数据集</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-07-11-组会</title>
    <link href="/2022/07/11/Seminar/20220711-%E7%BB%84%E4%BC%9A/"/>
    <url>/2022/07/11/Seminar/20220711-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="2022-07-11-组会"><a class="markdownIt-Anchor" href="#2022-07-11-组会"></a> 2022-07-11-组会</h1><h2 id="oriented-r-cnn"><a class="markdownIt-Anchor" href="#oriented-r-cnn"></a> Oriented R-CNN</h2><p>周末跑通了Oriented R-CNN的代码</p><p>目前在服务器上跑训练，跑到了epoch4/epoch12</p><p>预计明天跑完</p><h2 id="trick"><a class="markdownIt-Anchor" href="#trick"></a> Trick</h2><p>多尺度训练+多尺度测试（[0.5 1.0 1.5]），可以大幅度提升性能</p>]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-07-04-组会</title>
    <link href="/2022/07/04/Seminar/20220704-%E7%BB%84%E4%BC%9A/"/>
    <url>/2022/07/04/Seminar/20220704-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="2022-07-04-组会"><a class="markdownIt-Anchor" href="#2022-07-04-组会"></a> 2022-07-04-组会</h1><h2 id="gliding-vertex"><a class="markdownIt-Anchor" href="#gliding-vertex"></a> Gliding Vertex</h2><h2 id="rsdet"><a class="markdownIt-Anchor" href="#rsdet"></a> RSDet</h2><p>四边形的检测还是挺有意义的，毕竟四边形相比旋转矩形的定位更加精确。</p><p>这两篇文章也让我知道了，要想考虑使用四边形检测，需要要考虑标签顺序问题和边界回归问题。</p><h2 id="others"><a class="markdownIt-Anchor" href="#others"></a> Others</h2><p>最近使用batchsize = 8重跑了一次ReDet</p><p>5月底第一次用batchsize=1来跑</p><pre class="language-none"><code class="language-none">2022-05-31 11:41:46,926 - mmrotate - INFO - Saving checkpoint at 12 epochs2022-05-31 13:22:35,774 - mmrotate - INFO - +--------------------+-------+--------+--------+-------+| class              | gts   | dets   | recall | ap    |+--------------------+-------+--------+--------+-------+| plane              | 18788 | 23259  | 0.896  | 0.799 || baseball-diamond   | 1087  | 2135   | 0.724  | 0.651 || bridge             | 4181  | 4962   | 0.584  | 0.470 || ground-track-field | 733   | 1090   | 0.618  | 0.556 || small-vehicle      | 58868 | 110625 | 0.841  | 0.748 || large-vehicle      | 43075 | 74399  | 0.905  | 0.842 || ship               | 76153 | 88620  | 0.869  | 0.805 || tennis-court       | 5923  | 9230   | 0.937  | 0.904 || basketball-court   | 1180  | 2564   | 0.770  | 0.700 || storage-tank       | 13670 | 15183  | 0.674  | 0.622 || soccer-ball-field  | 827   | 2764   | 0.625  | 0.472 || roundabout         | 973   | 1973   | 0.623  | 0.544 || harbor             | 15468 | 22735  | 0.791  | 0.687 || swimming-pool      | 3836  | 8011   | 0.794  | 0.644 || helicopter         | 1189  | 1946   | 0.807  | 0.765 |+--------------------+-------+--------+--------+-------+| mAP                |       |        |        | 0.681 |+--------------------+-------+--------+--------+-------+2022-05-31 13:22:35,861 - mmrotate - INFO - Exp name: redet_re50_refpn_1x_dota_le90.py2022-05-31 13:22:35,861 - mmrotate - INFO - Epoch(val) [12][12800]mAP: 0.6807</code></pre><p>7月初第二次用batchsize=8(ReDet论文中的同一batchsize)来跑，结果近似。。</p><p>好像Batch Normalization在这里并没有提高精度</p><pre class="language-none"><code class="language-none">2022-07-02 19:50:12,213 - mmrotate - INFO - Saving checkpoint at 12 epochs2022-07-02 20:20:42,710 - mmrotate - INFO - +--------------------+-------+--------+--------+-------+| class              | gts   | dets   | recall | ap    |+--------------------+-------+--------+--------+-------+| plane              | 18788 | 39421  | 0.931  | 0.892 || baseball-diamond   | 1087  | 5512   | 0.857  | 0.711 || bridge             | 4181  | 25338  | 0.636  | 0.473 || ground-track-field | 733   | 6700   | 0.782  | 0.552 || small-vehicle      | 58868 | 155702 | 0.807  | 0.703 || large-vehicle      | 43075 | 103456 | 0.882  | 0.766 || ship               | 76153 | 112373 | 0.839  | 0.790 || tennis-court       | 5923  | 13502  | 0.932  | 0.901 || basketball-court   | 1180  | 7586   | 0.714  | 0.615 || storage-tank       | 13670 | 33506  | 0.696  | 0.615 || soccer-ball-field  | 827   | 6799   | 0.674  | 0.454 || roundabout         | 973   | 8810   | 0.733  | 0.549 || harbor             | 15468 | 30952  | 0.773  | 0.658 || swimming-pool      | 3836  | 11873  | 0.810  | 0.688 || helicopter         | 1189  | 3929   | 0.866  | 0.786 |+--------------------+-------+--------+--------+-------+| mAP                |       |        |        | 0.677 |+--------------------+-------+--------+--------+-------+2022-07-02 20:20:42,713 - mmrotate - INFO - Exp name: redet_re50_refpn_1x_dota_le90.py2022-07-02 20:20:42,713 - mmrotate - INFO - Epoch(val) [12][12800]mAP: 0.6769</code></pre>]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSDet</title>
    <link href="/2022/07/03/AI-Learning/20220703-RSDet/"/>
    <url>/2022/07/03/AI-Learning/20220703-RSDet/</url>
    
    <content type="html"><![CDATA[<h1 id="rsdet"><a class="markdownIt-Anchor" href="#rsdet"></a> RSDet</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>论文题目</strong> ：Learning Modulated Loss for Rotated Object Detection</p><p><strong>论文地址</strong> ：<a href="https://arxiv.org/pdf/1911.08299v3.pdf">https://arxiv.org/pdf/1911.08299v3.pdf</a></p><p><strong>论文出处</strong> ：2021’AAAI</p><p><strong>代码实现</strong> ：MMRotate</p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p>四边形检测，直面顺序标签问题</p><h2 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h2><h3 id="quadrilateral-detection"><a class="markdownIt-Anchor" href="#quadrilateral-detection"></a> Quadrilateral detection</h3><p>四边形检测需要考虑顺序标签点的问题:</p><p>举一个简单的例子，如果一个四边形的ground-truth是（x1,y1,x2,y2,x3,y3,x4,y4）并且所有的ground-truth并不是按一定规则顺序标注的，那么检测器有可能给出的预测结果是（x2,y2,x3,y3,x4,y4,x1,y1）。其实这两个是框是完全重合的，只是标注点的顺序变化了但是网络训练算损失的时候并不知道，它会按对应位置计算损失，此时的损失值并不为0甚至很大。</p><h3 id="rsdet-2"><a class="markdownIt-Anchor" href="#rsdet-2"></a> RSDet</h3><p>RSDet使用的是非常直白的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mn>1</mn><mo separator="true">,</mo><mi>x</mi><mn>2</mn><mo separator="true">,</mo><mi>y</mi><mn>2</mn><mo separator="true">,</mo><mi>x</mi><mn>3</mn><mo separator="true">,</mo><mi>y</mi><mn>3</mn><mo separator="true">,</mo><mi>x</mi><mn>4</mn><mo separator="true">,</mo><mi>y</mi><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x1,y1,x2,y2,x3,y3,x4,y4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">4</span><span class="mclose">)</span></span></span></span>八参数表示法，描述了四边形的四个顶点坐标。</p><p>解决四边形检测的顺序标签点问题:</p><p><img src="/img/article/2022/07/03/3.png" alt="" /></p><p>其主要步骤是先确定最左边的点（如果水平矩形的话有两个点满足取上面的那个）。然后通过向量叉乘找到对角点，也就是第三个点。最后利用这两个点构成的向量以及叉乘方法，根据顺序的要求（逆时针或者顺时针）找点其他两个点。</p><h4 id="边界问题"><a class="markdownIt-Anchor" href="#边界问题"></a> 边界问题</h4><p><img src="/img/article/2022/07/03/2.png" alt="" /></p><p>蓝色预选框到实际位置的回归过程。绿色真实框为{(a→a) , (b→b) ,(c→c), (d→d)} ，但显然理想的回归过程应为{(a→b),(b→c),(c→d),(d→a)}。这种情况也导致模型训练困难和回归不平滑。</p><p><img src="/img/article/2022/07/03/4.png" alt="" /><br />作者设计了旋转损失的八参数版本，由三个部分组成：<br />①将预选框的四个顶点顺时针移动一个位置；<br />②保持预选框顶点的顺序不变；<br />③将预选框的四个顶点逆时针移动一个位置；<br />④在上述三种情况下取最小值</p><h2 id="result"><a class="markdownIt-Anchor" href="#result"></a> Result</h2><p>作者使用RetinaNet进行有关实验。另外，作者得出八参数比五参数更容易回归。</p><p><img src="/img/article/2022/07/03/5.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gliding Vertex</title>
    <link href="/2022/07/02/AI-Learning/20220702-Gliding%20Vertex/"/>
    <url>/2022/07/02/AI-Learning/20220702-Gliding%20Vertex/</url>
    
    <content type="html"><![CDATA[<h1 id="gliding-vertex"><a class="markdownIt-Anchor" href="#gliding-vertex"></a> Gliding Vertex</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>论文题目</strong> ：Gliding vertex on the horizontal bounding box for multi-oriented object detection</p><p><strong>论文地址</strong> ：<a href="https://arxiv.org/pdf/1911.09358v2.pdf">https://arxiv.org/pdf/1911.09358v2.pdf</a></p><p><strong>论文出处</strong> ：2020’TPAMI</p><p><strong>代码实现</strong> ：MMRotate</p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p>四边形检测，Gliding Vertex是通过学习四个点在非旋转矩形上的偏移来定位出一个四边形来表示一个物体。但具体来说不是直接回归四边形的四个顶点，而是回归四个长度比(这四个长度比反应了每个对应测的相对滑动偏移量)。额外引入了一个倾角因子r去指导应该进行水平检测还是定向检测。</p><h2 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h2><h3 id="quadrilateral-detection"><a class="markdownIt-Anchor" href="#quadrilateral-detection"></a> Quadrilateral detection</h3><p>四边形检测需要考虑顺序标签点的问题:</p><p>举一个简单的例子，如果一个四边形的ground-truth是（x1,y1,x2,y2,x3,y3,x4,y4）并且所有的ground-truth并不是按一定规则顺序标注的，那么检测器有可能给出的预测结果是（x2,y2,x3,y3,x4,y4,x1,y1）。其实这两个是框是完全重合的，只是标注点的顺序变化了但是网络训练算损失的时候并不知道，它会按对应位置计算损失，此时的损失值并不为0甚至很大。</p><h3 id="gliding-vertex-2"><a class="markdownIt-Anchor" href="#gliding-vertex-2"></a> Gliding Vertex</h3><p><img src="/img/article/2022/07/02/2.png" alt="" /></p><p>除了有水平矩形框的基本标签<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>w</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,,y,w,h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span>，还额外增加了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>α</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>α</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>α</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>α</mi><mn>4</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\alpha_1,\alpha_2,\alpha_3,\alpha_4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，另外还额外引入了一个倾角因子<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>.</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span>长度比反应了每个对应测的相对滑动偏移量，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>则是四边形框与其对应水平框的面积比。</p><p><img src="/img/article/2022/07/02/3.png" alt="" /></p><p>Gliding Vertex文章通过改变框的表示方式避免了上述四边形检测的标签排序问题。</p><h3 id="network"><a class="markdownIt-Anchor" href="#network"></a> Network</h3><p><img src="/img/article/2022/07/02/4.png" alt="" /></p><p>整体的网络结构就是Faster R-CNN，并且后续的损失函数也没有进行创新。</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu深度学习服务器环境搭建</title>
    <link href="/2022/07/01/Programing/20220701-Ubuntu%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/07/01/Programing/20220701-Ubuntu%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu深度学习服务器环境搭建"><a class="markdownIt-Anchor" href="#ubuntu深度学习服务器环境搭建"></a> Ubuntu深度学习服务器环境搭建</h1><p>进入系统后设置一下root账户密码:</p><pre class="language-bash" data-language="bash"><code class="language-bash">sudo passwd root</code></pre><p>同时为了避免每次sudo都要输入密码，配置一下<code>visudo</code>:</p><pre class="language-bash" data-language="bash"><code class="language-bash">sudo visudo</code></pre><p>文件最后加上一行,$[UserName]改为自己的用户名</p><pre class="language-bash" data-language="bash"><code class="language-bash">$[UserName] All&#x3D;(ALL) NOPASSWD: ALL</code></pre><p><code>ctrl + O</code>，<code>回车</code>保存,<code>ctrl + X</code>退出</p><h2 id="下载安装配置"><a class="markdownIt-Anchor" href="#下载安装配置"></a> 下载安装配置</h2><h3 id="21下载vim"><a class="markdownIt-Anchor" href="#21下载vim"></a> 2.1下载vim</h3><pre class="language-bash" data-language="bash"><code class="language-bash">sudo apt install vim</code></pre><h3 id="22-配置国内镜像软件源"><a class="markdownIt-Anchor" href="#22-配置国内镜像软件源"></a> 2.2 配置国内镜像软件源</h3><ol><li>备份原来的源</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.bak</code></pre><ol start="2"><li>设置阿里云镜像源</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">sudo vim &#x2F;etc&#x2F;apt&#x2F;sources.list</code></pre><p>修改内容为:</p><pre class="language-txt" data-language="txt"><code class="language-txt">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-security main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-security main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-updates main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-updates main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-proposed main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-proposed main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-backports main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; focal-backports main restricted universe multiverse</code></pre><p><code>esc</code>退出编辑,   <code>:wq</code>保存</p><p>更新软件列表</p><pre class="language-bash" data-language="bash"><code class="language-bash">sudo apt updatesudo apt upgrade</code></pre><h3 id="23-安装python和pip"><a class="markdownIt-Anchor" href="#23-安装python和pip"></a> 2.3 安装Python和pip</h3><p>步骤同智辉君.</p><h3 id="24-ssh远程连接"><a class="markdownIt-Anchor" href="#24-ssh远程连接"></a> 2.4  ssh远程连接</h3><ol><li>安装ssh</li></ol><pre class="language-text" data-language="text"><code class="language-text">sudo apt install ssh</code></pre><ol start="2"><li>安装xrdp</li></ol><pre class="language-text" data-language="text"><code class="language-text">sudo apt install xrdp</code></pre><p>启动xrdp:</p><pre class="language-text" data-language="text"><code class="language-text">sudo systemctl status xrdp</code></pre><p>`将xrdp用户添加到ssl-cert  用户组：</p><pre class="language-text" data-language="text"><code class="language-text">sudo adduser xrdp ssl-cert  sudo systemctl restart xrdp</code></pre><p>使用Windows自带的远程桌面软件连接服务器IP地址或者域名就行</p><h3 id="25-安装frp进行内网穿透"><a class="markdownIt-Anchor" href="#25-安装frp进行内网穿透"></a> 2.5 安装frp进行内网穿透</h3><p>这一部分需要一个公网ip,可以用网上的各种临时公网ip租用(如花生壳)，也可以买一个cvm云服务器(送一个公网ip)</p><p><a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><p>本人下载的是frp_0.43.0_linux_amd64.tar</p><h4 id="在云服务器端配置frps-frp-server"><a class="markdownIt-Anchor" href="#在云服务器端配置frps-frp-server"></a> 在云服务器端配置frps (frp server)</h4><p>解压</p><pre class="language-bash" data-language="bash"><code class="language-bash">tar -zxvf frp_0.43.0_linux_amd64.tar.gz</code></pre><p>编辑frps.ini 文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">[common]#frp服务的端口号，可以自己定bind_port &#x3D; 7000 #frp的web界面的端口号dashboard_port &#x3D; 7500 #web界面的登陆账户，自己修改dashboard_user &#x3D; user#web界面的登陆密码，自己修改dashboard_pwd &#x3D; pass authentication_method &#x3D; token#frp客户端连接时的密码，自己修改token &#x3D; xxxxx </code></pre><p>在<code>/etc/systemd/system/</code>配置自动运行服务脚本frps.service(<code>vim frps.service</code>)</p><pre class="language-bash" data-language="bash"><code class="language-bash">[GLACIER]Description&#x3D;Frp Server DaemonAfter&#x3D;syslog.target network.targetWants&#x3D;network.target [Service]Type&#x3D;simple#修改为你的frps实际安装目录ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;frp&#x2F;frps -c &#x2F;usr&#x2F;local&#x2F;bin&#x2F;frp&#x2F;frps.ini ExecStop&#x3D;&#x2F;usr&#x2F;bin&#x2F;killall frps#启动失败1分钟后再次启动RestartSec&#x3D;1minKillMode&#x3D;control-group#重启控制：总是重启Restart&#x3D;always [Install]WantedBy&#x3D;multi-user.target</code></pre><p>启用脚本并查看脚本状态,为running配置成功:</p><pre class="language-bash" data-language="bash"><code class="language-bash">sudo systemctl enable frps.servicesudo systemctl start frps.servicesudo systemctl status frps.service</code></pre><p><strong>注意</strong></p><blockquote><p>大部分云服务器都要配置安全组，将对应端口放行</p><p>如果云服务器上还配置了nginx服务器如宝塔，要注意防火墙将对应端口放行</p></blockquote><h4 id="在个人服务器端配置frpc-frp-client"><a class="markdownIt-Anchor" href="#在个人服务器端配置frpc-frp-client"></a> 在个人服务器端配置frpc (frp client)</h4><p>解压</p><pre class="language-bash" data-language="bash"><code class="language-bash">tar -zxvf frp_0.43.0_linux_amd64.tar.gz</code></pre><p>编辑frpc.ini 文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">[common]#你的云服务器的公网ipserver_addr &#x3D; xx.xx.xx.xx authentication_method &#x3D; token#刚刚配置的frp连接密码 token &#x3D; xxxxx #刚刚配置的frp服务端口server_port &#x3D; 7000#Frpc login to server failed: i&#x2F;o deadline reachedtls_enable &#x3D; true[GLACIER-ssh]type &#x3D; tcplocal_ip &#x3D; 127.0.0.1local_port &#x3D; 22remote_port &#x3D; 20022[GLACIER-rdp]type &#x3D; tcplocal_ip &#x3D; 127.0.0.1local_port &#x3D; 3389remote_port &#x3D; 23389</code></pre><p>在<code>/etc/systemd/system/</code>下配置自动运行服务脚本frpc.service(<code>vim frpc.service</code>)</p><pre class="language-text" data-language="text"><code class="language-text">[GLACIER]Description&#x3D;Frp Client DaemonAfter&#x3D;syslog.target network.targetWants&#x3D;network.target [Service]Type&#x3D;simple#修改为你的frpc实际安装目录ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;frp&#x2F;frpc -c &#x2F;usr&#x2F;local&#x2F;bin&#x2F;frp&#x2F;frpc.ini ExecStop&#x3D;&#x2F;usr&#x2F;bin&#x2F;killall frpc#启动失败1分钟后再次启动RestartSec&#x3D;1minKillMode&#x3D;control-group#重启控制：总是重启Restart&#x3D;always [Install]WantedBy&#x3D;multi-user.target</code></pre><p>启用脚本并查看脚本状态,为running配置成功:</p><pre class="language-bash" data-language="bash"><code class="language-bash">sudo systemctl enable frpc.servicesudo systemctl start frpc.servicesudo systemctl status frpc.service</code></pre><h3 id="26-配置samba映射网络驱动"><a class="markdownIt-Anchor" href="#26-配置samba映射网络驱动"></a> 2.6 配置SAMBA，映射网络驱动</h3><h4 id="个人服务器端"><a class="markdownIt-Anchor" href="#个人服务器端"></a> 个人服务器端</h4><ol><li>安装<code>samba</code> 和<code>samba-common-bin</code></li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">sudo apt-get install samba samba-common-bin</code></pre><ol start="2"><li>配置/etc/samba/smb.conf文件</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">sudo vim &#x2F;etc&#x2F;samba&#x2F;smb.conf</code></pre><p>在最后一行后面加入：</p><pre class="language-bash" data-language="bash"><code class="language-bash"># 共享文件夹显示的名称[home]# 说明信息comment &#x3D; GLACIER WorkStation Storage# 可以访问的用户valid users &#x3D; grinder,root# 共享文件的路径path &#x3D; &#x2F;home&#x2F;grinder&#x2F;# 可被其他人看到资源名称（非内容）browseable &#x3D; yes# 可写writable &#x3D; yes# 新建文件的权限为 664create mask &#x3D; 0664# 新建目录的权限为 775directory mask &#x3D; 0775</code></pre><ol start="3"><li>添加登陆账户并创建密码</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">sudo smbpasswd -a grinder</code></pre><p>重启服务即可:</p><pre class="language-bash" data-language="bash"><code class="language-bash">sudo &#x2F;etc&#x2F;init.d&#x2F;samba-ad-dc restart</code></pre><h4 id="window端"><a class="markdownIt-Anchor" href="#window端"></a> Window端</h4><p><strong>控制面板</strong> -&gt; <strong>程序</strong> -&gt; <strong>程序和功能</strong> -&gt; <strong>启用或关闭 Windows 功能</strong> -&gt; 勾选<strong>SMB 1.0/CIFS 文件共享支持</strong></p><p>(<strong>Win + R</strong> 快捷键打开运行界面 ，输入<strong>gpedit.msc</strong> 打开本地组策略编辑器)</p><p><strong>本地组策略编辑器</strong> -&gt; <strong>计算机配置</strong> -&gt; <strong>管理模板</strong> -&gt; <strong>网络</strong> -&gt; <strong>Lanman工作站</strong> -&gt; <strong>启用不安全的来宾登录</strong></p><p>(<strong>Win + R</strong> 快捷键打开运行界面 ，输入<strong>secpol.msc</strong> 打开本地安全策略编辑器)</p><p><strong>本地安全策略编辑器</strong> -&gt; <strong>本地策略</strong> -&gt; <strong>安全选项</strong> -&gt; <strong>网络安全：LAN管理器身份验证级别</strong> -&gt; <strong>仅发送 NTLM2响应</strong></p><p>重启Windows</p><p>映射网络驱动器  : <code>\\192.168.0.106</code> =&gt; (ip地址是你的ubuntu服务器, 用<code>ifconfig</code>查看)</p><p>以上于2022年6月29日 配置完成</p><p>做完以上步骤就能方便的使用ssh连接该服务器了</p><h2 id="dl环境"><a class="markdownIt-Anchor" href="#dl环境"></a> DL环境</h2><h3 id="31-安装nvidia驱动"><a class="markdownIt-Anchor" href="#31-安装nvidia驱动"></a> 3.1 安装NVIDIA驱动</h3><p>进入系统的图形桌面，打开<code>Software &amp; Updates</code>软件，可以看到标签栏有一个<code>Additional Drivers</code>：</p><p>选择510版本的驱动安装，不要选择515测试版</p><p>安装完后重启电脑，查看显卡驱动:</p><pre class="language-none"><code class="language-none">nvidia-smi</code></pre><h3 id="32-安装cuda"><a class="markdownIt-Anchor" href="#32-安装cuda"></a> 3.2 安装CUDA</h3><p>这里pythorch 有11.3的支持，因此选择安装11.3update1版本的cuda</p><p>登录https://developer.nvidia.com/cuda-toolkit-archive</p><p>选择11.3.1版本的runfile版本,下载到/usr/local/bin中，在这个过程中可以先下载liburcu6</p><blockquote><p>然后22.04的ubuntu需要下载liburcu6: <a href="https://packages.debian.org/bullseye/amd64/liburcu6/download">https://packages.debian.org/bullseye/amd64/liburcu6/download</a><br />解压安装该liburcu6</p><pre class="language-bash" data-language="bash"><code class="language-bash">&gt;sudo dpkg -i  liburcu6_0.12.2-1amd64.deb</code></pre></blockquote><p>下载好cuda11.3后，执行以下命令安装</p><p>如果你的gcc版本是11，需要添加<code>--orverride</code>或者降级到gcc9</p><p><a href="https://blog.csdn.net/Cris_Hu/article/details/124711093">https://blog.csdn.net/Cris_Hu/article/details/124711093</a></p><pre class="language-bash" data-language="bash"><code class="language-bash">sudo chmod +x cuda_11.3.1_465.19.01_linux.runsudo sh cuda_11.3.1_465.19.01_linux.run  (--override)</code></pre><p>配置环境变量</p><pre class="language-bash" data-language="bash"><code class="language-bash">sudo vim  ~&#x2F;.bashrc</code></pre><p>在该文件的最后一行加入以下语句:</p><pre class="language-bash" data-language="bash"><code class="language-bash"># CUDA Environment Pathexport CUDA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-11.3export LD_LIBRARY_PATH&#x3D;$&#123;CUDA_HOME&#125;&#x2F;lib64export PATH&#x3D;$&#123;CUDA_HOME&#125;&#x2F;bin:$&#123;PATH&#125;</code></pre><p>更新环境变量:</p><pre class="language-bash" data-language="bash"><code class="language-bash">source ~&#x2F;.bashrc</code></pre><p>使用命令查看cuda信息，检验是否安装成功:</p><pre class="language-bash" data-language="bash"><code class="language-bash">nvcc -V</code></pre><h3 id="33安装cudnn"><a class="markdownIt-Anchor" href="#33安装cudnn"></a> 3.3安装CuDNN</h3><p><a href="https://developer.nvidia.com/rdp/cudnn-download">https://developer.nvidia.com/rdp/cudnn-download</a></p><p>需要登录网址才能下载cudnn</p><blockquote><p>备忘: 这里我用的是QQ邮箱账号和密码政注册的</p></blockquote><p>然后选择cudnn 8.4.1 Linux_x86_64.tar下载</p><p>解压:</p><p>使用以下两条命令复制这些文件到CUDA目录下：(<strong>注意修改</strong>)</p><pre class="language-text" data-language="text"><code class="language-text">sudo cp cudann&#x2F;lib64&#x2F;* &#x2F;usr&#x2F;local&#x2F;cuda-11.3&#x2F;lib64&#x2F;sudo cp cudann&#x2F;include&#x2F;* &#x2F;usr&#x2F;local&#x2F;cuda-11.3&#x2F;include&#x2F;</code></pre><p>查看CUDNN版本</p><pre class="language-none"><code class="language-none">cat &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;cudnn_version.h | grep CUDNN_MAJOR -A 2</code></pre><h3 id="34-安装anaconda"><a class="markdownIt-Anchor" href="#34-安装anaconda"></a> 3.4 安装anaconda</h3><p>浏览器搜索然后安装linux版的就好了</p><p>注意安装在<code>/home/&#123;用户名&#125;/Software</code>下，</p><p>如果你不想安装Docker，那么可以直接开始建你需要的虚拟环境了</p><h3 id="35-安装docker"><a class="markdownIt-Anchor" href="#35-安装docker"></a> 3.5 安装Docker</h3><h2 id="杂项配置"><a class="markdownIt-Anchor" href="#杂项配置"></a> 杂项配置</h2><h3 id="安装pycharm"><a class="markdownIt-Anchor" href="#安装pycharm"></a> 安装Pycharm</h3><h3 id="同步ubuntu和window时间"><a class="markdownIt-Anchor" href="#同步ubuntu和window时间"></a> 同步ubuntu和window时间</h3><pre class="language-bash" data-language="bash"><code class="language-bash">sudo apt install ntpdatesudo ntpdate time.windows.comsudo hwclock --localtime --systohc</code></pre><h3 id="unbuntu截图工具flameshot"><a class="markdownIt-Anchor" href="#unbuntu截图工具flameshot"></a> Unbuntu截图工具flameshot</h3><pre class="language-bash" data-language="bash"><code class="language-bash">sudo apt install flameshot</code></pre>]]></content>
    
    
    <categories>
      
      <category>常用命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-06-27-组会</title>
    <link href="/2022/06/27/Seminar/20220627-%E7%BB%84%E4%BC%9A/"/>
    <url>/2022/06/27/Seminar/20220627-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="2022-06-27-组会"><a class="markdownIt-Anchor" href="#2022-06-27-组会"></a> 2022-06-27-组会</h1><h2 id="oriented-r-cnn"><a class="markdownIt-Anchor" href="#oriented-r-cnn"></a> Oriented R-CNN</h2><p>2021 CVPR</p><p><a href="/2022/06/26/AI-Learning/20220627-Oriented R-CNN" target="_blank">Oriented R-CNN解读</a></p><h2 id="kld"><a class="markdownIt-Anchor" href="#kld"></a> KLD</h2><p>2021 NeurIPS</p><p><strong>Gaussian Wasserstein Distance换成了Kullback-Leibler Divergence</strong></p><p>GWD的侧重点在于分析将框的表示从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>w</mi><mo separator="true">,</mo><mi>h</mi><mo separator="true">,</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y,w,h,\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>转换成二维高斯分布的好处，也就是解决了边界问题、类正方形检测问题、损失和评估不一致问题</p><p>作者在KLD中从理论上分析：为什么Kullback-Leibler Divergence会比Wasserstein Distance要好</p><p>用旋转还是水平anchor有了一些新的理解:</p><blockquote><p><strong>当目标非常小或者某一条边比较短的时候，很小的位置偏移都会造成IoU的急剧下降</strong></p><p>偏移的现象和中心点参数梯度的权重有关，</p><p>旋转anchor能提供高质量的先验，它的长宽和gt接近，所以基于旋转anchor的方法中心点偏移不严重；</p><p>而水平anchor的长宽没法反应实际gt的尺寸大小，因此中心点偏移严重，需要额外的精修阶段</p></blockquote><h2 id="scrdet"><a class="markdownIt-Anchor" href="#scrdet"></a> SCRDet</h2><p>2019 ICCV</p><p>放在现在，没有特别多能够借鉴的地方，因为现在许多基于RPN的检测器都超过了该检测器</p><p>IoU-Smooth L1 Loss</p>]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oriented R-CNN</title>
    <link href="/2022/06/26/AI-Learning/20220627-Oriented%20R-CNN/"/>
    <url>/2022/06/26/AI-Learning/20220627-Oriented%20R-CNN/</url>
    
    <content type="html"><![CDATA[<h1 id="oriented-r-cnn"><a class="markdownIt-Anchor" href="#oriented-r-cnn"></a> Oriented R-CNN</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>论文题目</strong> ：Oriented R-CNN for Object Detection</p><p><strong>论文地址</strong> ：<a href="https://arxiv.org/pdf/2101.11952v4.pdf">https://arxiv.org/pdf/2101.11952v4.pdf</a></p><p><strong>论文出处</strong> ：2021’ICCV</p><p><strong>代码实现</strong> ：<a href="https://github.com/jbwang1997/OBBDetection">https://github.com/jbwang1997/OBBDetection</a></p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p>Oriented R-CNN是一个Two-Stage的检测器。</p><p>在the first stage上，作者进行了主要创新:提出了oriented Region Proposal Network(简称oriented RPN)，该网络能 <strong>已近乎0成本的方式直接生成高质量的旋转建议框(oriented proposal)</strong> ，使得检测速度在单张2080ti上达到了15.1FPS；在the second stage上，作者沿用了ROI Transformer中的RROI Align提取旋转不变特征，并用于后续分类和回归。</p><h2 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h2><h3 id="related-work"><a class="markdownIt-Anchor" href="#related-work"></a> Related Work</h3><p><img src="/img/article/2022/06/27/2.png" alt="" /></p><p>之前的Two-Stage检测器主要存在以下问题：</p><ol><li>生成旋转建议框的计算成本很高</li><li>采用水平ROI进行分类和定向边界框回归，这样对象和特征之间的错位导致分类置信度与定位精度的不一致</li></ol><h3 id="oriented-r-cnn-2"><a class="markdownIt-Anchor" href="#oriented-r-cnn-2"></a> Oriented R-CNN</h3><p><img src="/img/article/2022/06/27/3.png" alt="" /></p><p>具体细分为Oriented RPN和Oriented R-CNN Head两个部分。</p><h4 id="oriented-rpn"><a class="markdownIt-Anchor" href="#oriented-rpn"></a> Oriented RPN</h4><p><img src="/img/article/2022/06/27/4.png" alt="" /></p><p><img src="/img/article/2022/06/27/5.png" alt="" /></p><p>其实Oriented RPN是很自然并且很直观的一个idea，但它实现的关键就在于如何直接表示oriented proposal。</p><p>在原本的RPN基础上，作者添加了两个1x1的conv layer构成了Oriented RPN。</p><p>第一个conv layer是一个回归分支，通过6A的channel输出proposal相对于anchor的偏移量:</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>δ</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>δ</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>δ</mi><mi>w</mi></msub><mo separator="true">,</mo><msub><mi>δ</mi><mi>h</mi></msub><mo separator="true">,</mo><msub><mi>δ</mi><mi>α</mi></msub><mo separator="true">,</mo><msub><mi>δ</mi><mi>β</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\delta = (\delta_{x},\delta_{y},\delta_{w},\delta_{h},\delta_{\alpha},\delta_{\beta})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p><img src="/img/article/2022/06/27/6.png" alt="" /></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><mi>α</mi><mo>=</mo><msub><mi>δ</mi><mi>α</mi></msub><mo>⋅</mo><mi>w</mi><mo separator="true">,</mo><mspace width="1em"/><mi mathvariant="normal">Δ</mi><mi>β</mi><mo>=</mo><msub><mi>δ</mi><mi>β</mi></msub><mo>⋅</mo><mi>h</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>w</mi><mo>=</mo><msub><mi>a</mi><mi>w</mi></msub><mo>⋅</mo><msup><mi>e</mi><msub><mi>δ</mi><mi>w</mi></msub></msup><mo separator="true">,</mo><mspace width="1em"/><mi>h</mi><mo>=</mo><msub><mi>a</mi><mi>h</mi></msub><mo>⋅</mo><msup><mi>e</mi><msub><mi>δ</mi><mi>h</mi></msub></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>=</mo><msub><mi>δ</mi><mi>x</mi></msub><mo>⋅</mo><msub><mi>a</mi><mi>w</mi></msub><mo>+</mo><msub><mi>a</mi><mi>x</mi></msub><mo separator="true">,</mo><mspace width="1em"/><mi>y</mi><mo>=</mo><msub><mi>δ</mi><mi>y</mi></msub><mo>⋅</mo><msub><mi>a</mi><mi>h</mi></msub><mo>+</mo><msub><mi>a</mi><mi>y</mi></msub></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{\begin{array}{l}\Delta \alpha=\delta_\alpha \cdot w, \quad \Delta \beta=\delta_\beta \cdot h \\ w=a_w \cdot e^{\delta_w}, \quad h=a_h \cdot e^{\delta_h} \\ x=\delta_x \cdot a_w+a_x, \quad y=\delta_y \cdot a_h+a_y\end{array}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.609108000000001em;vertical-align:-1.5545540000000004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0545540000000004em;"><span style="top:-4.214554000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">h</span></span></span><span style="top:-3.0054459999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.03785em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.03785em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.8054459999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5545540000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>然后通过上述公式Decoding得到:</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>w</mi><mo separator="true">,</mo><mi>h</mi><mo separator="true">,</mo><mi mathvariant="normal">△</mi><mi>α</mi><mo separator="true">,</mo><mi mathvariant="normal">△</mi><mi>β</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y,w,h,\triangle\alpha,\triangle\beta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">△</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">△</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">△</mi><mi>α</mi><mo separator="true">,</mo><mi mathvariant="normal">△</mi><mi>β</mi></mrow><annotation encoding="application/x-tex">\triangle\alpha,\triangle\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">△</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">△</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>是平行四边形proposal顶点相对于外部矩形上侧和右侧中点的偏移量</p><p><img src="/img/article/2022/06/27/7.png" alt="" /></p><p>然后通过上述公式求得proposal四个顶点:</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>v</mi><mn>1</mn><mo separator="true">,</mo><mi>v</mi><mn>2</mn><mo separator="true">,</mo><mi>v</mi><mn>3</mn><mo separator="true">,</mo><mi>v</mi><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(v1,v2,v3,v4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">4</span><span class="mclose">)</span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mn>1</mn><mo separator="true">,</mo><mi>v</mi><mn>2</mn><mo separator="true">,</mo><mi>v</mi><mn>3</mn><mo separator="true">,</mo><mi>v</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">v1,v2,v3,v4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">4</span></span></span></span>是平行四边形proposal四个顶点的坐标向量</p><p><img src="/img/article/2022/06/27/8.png" alt="" /></p><p>作者将上述这个表示法称为midpoint offset representation。</p><p>第二个conv layer是一个对oriented proposal分类准确度的评分分支，不重要，具体没有展开讲解。</p><h4 id="oriented-r-cnn-head"><a class="markdownIt-Anchor" href="#oriented-r-cnn-head"></a> Oriented R-CNN Head</h4><p><img src="/img/article/2022/06/27/9.png" alt="" /></p><p>得到了上述的平行四边形oriented proposals<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>v</mi><mn>1</mn><mo separator="true">,</mo><mi>v</mi><mn>2</mn><mo separator="true">,</mo><mi>v</mi><mn>3</mn><mo separator="true">,</mo><mi>v</mi><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(v1,v2,v3,v4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">4</span><span class="mclose">)</span></span></span></span>后，需要转换为矩形才能用于RROI Align。</p><p>作者的做法是 <strong>延长该平行四边形两条对角线中较短的一边，以此构成矩形框</strong></p><p><img src="/img/article/2022/06/27/10.png" alt="" /></p><p>通过数学方法将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>v</mi><mn>1</mn><mo separator="true">,</mo><mi>v</mi><mn>2</mn><mo separator="true">,</mo><mi>v</mi><mn>3</mn><mo separator="true">,</mo><mi>v</mi><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(v1,v2,v3,v4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">4</span><span class="mclose">)</span></span></span></span>转为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>w</mi><mo separator="true">,</mo><mi>h</mi><mo separator="true">,</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y,w,h,\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>，而后将该矩形框映射到Feature map上，再进入到后续RROI Align模块。</p><p>RROI Align部分，直接沿用了ROI Transformer中的成果，使用深度特征对齐提取旋转不变特征，并用于后续分类和回归。</p><h3 id="experiments"><a class="markdownIt-Anchor" href="#experiments"></a> Experiments</h3><p>作者使用ResNet-50-FPN, ResNet-101-FPN作为Backbone，在DOTA和HSRC2016数据集上，用单张2080ti做训练和测试，达到了SOTA。</p><p><img src="/img/article/2022/06/27/11.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GWD Loss</title>
    <link href="/2022/06/19/AI-Learning/20220620-GWD/"/>
    <url>/2022/06/19/AI-Learning/20220620-GWD/</url>
    
    <content type="html"><![CDATA[<h1 id="gaussian-wasserstein-distance-loss"><a class="markdownIt-Anchor" href="#gaussian-wasserstein-distance-loss"></a> Gaussian Wasserstein Distance Loss</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>论文题目</strong> : Rethinking Rotated Object Detection with GaussianWasserstein Distance Loss</p><p><strong>论文地址</strong> : <a href="https://arxiv.org/pdf/2101.11952v4.pdf">https://arxiv.org/pdf/2101.11952v4.pdf</a></p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p>将任意旋转矩形近似成一个二维的高斯分布，通过计算分布之间的Wasserstein距离解决RIoU不可导的问题</p><p>目前旋转目标检测主流的工作，相较于水平目标检测，都是添加一个角度参数，采用回归的方法来预测旋转角度。但是这样的角度回归模型会带来新的问题：</p><ol><li>评估度量（metric）和损失（loss）和的不一致性</li><li>边界不连续性</li><li>类正方形检测问题</li></ol><h2 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h2><p>先认识上述提到的三个问题</p><h3 id="the-inconsistency-between-metriciou-and-loss"><a class="markdownIt-Anchor" href="#the-inconsistency-between-metriciou-and-loss"></a> The inconsistency between metric（IOU） and loss</h3><p>IOU一直是水平和旋转目标检测的标准评估指标，然而该度量和回归损失之间存在着不一致。</p><p>在水平目标检测中,后面提出的PIOU和DIOU可以填补这个问题，但是在旋转目标检测中，两个旋转框的IOU的Learning是不可微分的(旋转IoU存在稀疏的几个不可导点)</p><blockquote><p>作者举例提到了一个(ln-norms)，并给出了论文索引[45,80]，还没深究。</p></blockquote><p>而旋转目标检测的角度回归模型，更放大了这一特性:</p><p><img src="/img/article/2022/06/20/3.png" alt="" /></p><p>主要看图中IOU和经典旋转目标检测中的Smooth L1 Loss的对比</p><ol><li>图a描述了角度差和损失函数的关系</li><li>图b展示了具有不同的长宽比例的检测框和损失函数的关系</li><li>图c探讨了中心点移动和损失函数的关系</li></ol><p>通过以上对比，可以看出旋转目标检测中经典的Smooth L1 loss的缺陷。</p><h3 id="boundary-discontinuity"><a class="markdownIt-Anchor" href="#boundary-discontinuity"></a> Boundary discontinuity</h3><p>两种定义方法:长边定义法和OpenCV定义法。</p><p><img src="/img/article/2022/06/20/4.png" alt="" /></p><p>这里的边界问题主要在于预定义的anchor/proposal如果在90度,180度等这样的边界位置，</p><blockquote><p><strong>长边定义法在边界处有角度的周期性(POA)</strong></p><p><strong>OpenCV定义法在边界处有角度的周期性(POA)和长短边的可交换性(EOE)</strong></p></blockquote><p><strong>导致预测框的结果超出了定义范围</strong>，此时会带来非常大的Smooth L1 IOU Loss。</p><p>这对一些学习能力较弱的模型，在边界情况下的表现是非常脆弱的:</p><p><img src="/img/article/2022/06/20/2.png" alt="" /></p><h3 id="square-like-problem"><a class="markdownIt-Anchor" href="#square-like-problem"></a> Square-like problem</h3><p>基于长边定义法的模型还存在一个类似正方形的对象检测问题。</p><p><img src="/img/article/2022/06/20/5.png" alt="" /></p><p>预测框(-60度)和Ground Truth(30度)的IOU接近1，但是回归损失会很大，这样又回到了第一个问题:评估度量和损失的不一致。</p><p>而由于OpenCV定义法具有长短边的可交换性，因此不存在类Square-like problem。</p><h3 id="the-proposed-method"><a class="markdownIt-Anchor" href="#the-proposed-method"></a> The Proposed Method</h3><p>将任意旋转矩形近似成一个二维的高斯分布，通过计算分布之间的Wasserstein距离解决RIoU不可导的问题</p><p><img src="/img/article/2022/06/20/6.png" alt="" /></p><p>将任意旋转矩形框转换为二维高斯分布:</p><p><img src="/img/article/2022/06/20/7.png" alt="" /></p><p>两个高斯分布之间的Wasserstein距离公式:</p><p><img src="/img/article/2022/06/20/8.png" alt="" /></p><p>而该Wasserstein距离是可导的，这样通过计算两个高斯分布之间Wasserstein距离的Loss来近似IOU的Loss</p><p>后续通过引入一些超参数变换，控制函数值域，去近似IOU的Loss：</p><p><img src="/img/article/2022/06/20/9.png" alt="" /></p><h2 id="result"><a class="markdownIt-Anchor" href="#result"></a> Result</h2><p>作者在五个公共数据集和两个前沿的旋转目标检测模型上，应用了该GWD Loss，得到的效果基本完胜IoU-Smooth L1 Loss, Modulated loss，CSL, 和DCL。</p><p><img src="/img/article/2022/06/20/10.png" alt="" /></p><p><img src="/img/article/2022/06/20/11.png" alt="" /></p><p><img src="/img/article/2022/06/20/12.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-06-06-组会</title>
    <link href="/2022/06/05/Seminar/20220606-%E7%BB%84%E4%BC%9A/"/>
    <url>/2022/06/05/Seminar/20220606-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="2022-06-06-组会"><a class="markdownIt-Anchor" href="#2022-06-06-组会"></a> 2022-06-06-组会</h1><h2 id="训练结果"><a class="markdownIt-Anchor" href="#训练结果"></a> 训练结果</h2><p>跑完了ReDet的训练(基于DOTAv1.0)</p><p>训练结果日志:</p><p>ap为平均精度</p><pre class="language-none"><code class="language-none">2022-05-31 13:41:46,926 - mmrotate - INFO - Saving checkpoint at 12 epochs2022-05-31 14:22:35,774 - mmrotate - INFO - +--------------------+-------+--------+--------+-------+| class              | gts   | dets   | recall | ap    |+--------------------+-------+--------+--------+-------+| plane              | 18788 | 23259  | 0.896  | 0.799 || baseball-diamond   | 1087  | 2135   | 0.724  | 0.651 || bridge             | 4181  | 4962   | 0.584  | 0.470 || ground-track-field | 733   | 1090   | 0.618  | 0.556 || small-vehicle      | 58868 | 110625 | 0.841  | 0.748 || large-vehicle      | 43075 | 74399  | 0.905  | 0.842 || ship               | 76153 | 88620  | 0.869  | 0.805 || tennis-court       | 5923  | 9230   | 0.937  | 0.904 || basketball-court   | 1180  | 2564   | 0.770  | 0.700 || storage-tank       | 13670 | 15183  | 0.674  | 0.622 || soccer-ball-field  | 827   | 2764   | 0.625  | 0.472 || roundabout         | 973   | 1973   | 0.623  | 0.544 || harbor             | 15468 | 22735  | 0.791  | 0.687 || swimming-pool      | 3836  | 8011   | 0.794  | 0.644 || helicopter         | 1189  | 1946   | 0.807  | 0.765 |+--------------------+-------+--------+--------+-------+| mAP                |       |        |        | 0.681 |+--------------------+-------+--------+--------+-------+2022-05-31 14:22:35,861 - mmrotate - INFO - Exp name: redet_re50_refpn_1x_dota_le90.py2022-05-31 14:22:35,861 - mmrotate - INFO - Epoch(val) [12][12800]mAP: 0.6807</code></pre><p>和论文中贴出来的结果表格的相比，总体mAP(平均精度均值)要少8个百分点:</p><p><img src="/img/article/2022/06/06/1.png" alt="" /></p><p>初步分析是因为Batch Size不一样， GPU不一样,:</p><p><img src="/img/article/2022/06/06/4.png" alt="" /></p><p>我租用的云服务器GPU是2080ti，因为第一次训练怕爆显存，我跑的时候batch_size设置成了1。</p><h2 id="日志分析"><a class="markdownIt-Anchor" href="#日志分析"></a> 日志分析</h2><p>分类损失和回归损失:</p><p>最终loss_rpn_cls: 0.0263, loss_rpn_bbox: 0.0228</p><p><img src="/img/article/2022/06/06/2.png" alt="" /></p><p>总Loss函数损失:</p><p>最终总loss: 0.5917</p><p><img src="/img/article/2022/06/06/3.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-05-30-组会</title>
    <link href="/2022/05/29/Seminar/20220530-%E7%BB%84%E4%BC%9A/"/>
    <url>/2022/05/29/Seminar/20220530-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="2022-05-29-组会"><a class="markdownIt-Anchor" href="#2022-05-29-组会"></a> 2022-05-29-组会</h1><p>已经通过MMRotate框架，跑通了ReDet模型</p><p>目前正在训练,设置了一共跑12个epoch。</p><p>2022/5/29  17时，开始训练</p><p><img src="/img/article/2022/05/30/1.png" alt="" /></p><p>2022/5/30  14时, 正在跑第6个epoch，</p><p><img src="/img/article/2022/05/30/2.png" alt="" /></p><p>大概要跑到5月31日晚上</p>]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MMRotate框架学习(一)</title>
    <link href="/2022/05/22/AI-Learning/Code-Implement/20220523-MMRotate/"/>
    <url>/2022/05/22/AI-Learning/Code-Implement/20220523-MMRotate/</url>
    
    <content type="html"><![CDATA[<h1 id="mmrotate框架学习一"><a class="markdownIt-Anchor" href="#mmrotate框架学习一"></a> MMRotate框架学习(一)</h1><h2 id="mmrotate中的旋转框定义"><a class="markdownIt-Anchor" href="#mmrotate中的旋转框定义"></a> MMRotate中的旋转框定义</h2><p>图像空间采用右手坐标系 (y,x) ，即 y轴 是从上-&gt;下， x轴是从左-&gt;右。 此时存在2种相反的旋转方向，顺时针和逆时针。</p><h3 id="旋转变换"><a class="markdownIt-Anchor" href="#旋转变换"></a> 旋转变换</h3><h4 id="顺时针cw"><a class="markdownIt-Anchor" href="#顺时针cw"></a> 顺时针(CW)</h4><p>顺时针正角度，逆时针负角度。(<strong>上负下正</strong>)</p><pre class="language-none"><code class="language-none">0-------------------&gt; x (0 rad)|  A-------------B|  |             ||  |     box     h|  |   angle&#x3D;0   ||  D------w------Cvy (pi&#x2F;2 rad)</code></pre><h5 id="顺时针的旋转矩阵"><a class="markdownIt-Anchor" href="#顺时针的旋转矩阵"></a> 顺时针的旋转矩阵</h5><p>因为采用的是右手坐标系，所以顺时针的旋转矩阵与普通坐标系逆时针的旋转矩阵是一样的。</p><p>{\begin{split}\begin{pmatrix} \cos\alpha & -\sin\alpha \\ \sin\alpha & \cos\alpha \end{pmatrix}\end{split}}</p><h5 id="顺时针的旋转变换"><a class="markdownIt-Anchor" href="#顺时针的旋转变换"></a> 顺时针的旋转变换</h5><p>通过旋转变换，可以通过目标框中心点，求得旋转后目标框的任意点坐标的公式，在代码中实现。</p><p>\begin{split}P_A= \begin{pmatrix} x_A \\ y_A\end{pmatrix} = \begin{pmatrix} x_{center} \\ y_{center}\end{pmatrix} + \begin{pmatrix}\cos\alpha & -\sin\alpha \\ \sin\alpha & \cos\alpha\end{pmatrix} \begin{pmatrix} -0.5w \\ -0.5h\end{pmatrix} \\ = \begin{pmatrix} x_{center}-0.5w\cos\alpha+0.5h\sin\alpha \\ y_{center}-0.5w\sin\alpha-0.5h\cos\alpha\end{pmatrix}\end{split}</p><h4 id="逆时针ccw"><a class="markdownIt-Anchor" href="#逆时针ccw"></a> 逆时针(CCW)</h4><p>顺时针负角度，逆时针负角度。(上正下负)</p><pre class="language-none"><code class="language-none">0-------------------&gt; x (0 rad)|  A-------------B|  |             ||  |     box     h|  |   angle&#x3D;0   ||  D------w------Cvy (-pi&#x2F;2 rad)</code></pre><h5 id="逆时针的旋转矩阵"><a class="markdownIt-Anchor" href="#逆时针的旋转矩阵"></a> 逆时针的旋转矩阵</h5><p>\begin{split}\begin{pmatrix} \cos\alpha & \sin\alpha \\ -\sin\alpha & \cos\alpha \end{pmatrix}\end{split}</p><h5 id="逆时针的旋转变换"><a class="markdownIt-Anchor" href="#逆时针的旋转变换"></a> 逆时针的旋转变换</h5><p>{\begin{split}P_A= \begin{pmatrix} x_A \\ y_A\end{pmatrix} = \begin{pmatrix} x_{center} \\ y_{center}\end{pmatrix} + \begin{pmatrix}\cos\alpha & \sin\alpha \\ -\sin\alpha & \cos\alpha\end{pmatrix} \begin{pmatrix} -0.5w \\ -0.5h\end{pmatrix} \\ = \begin{pmatrix} x_{center}-0.5w\cos\alpha-0.5h\sin\alpha \\ y_{center}+0.5w\sin\alpha-0.5h\cos\alpha\end{pmatrix}\end{split}}</p><blockquote><p>在MMRotate中，旋转框的旋转方向默认为顺时针(CW)方向</p></blockquote><h3 id="旋转框定义"><a class="markdownIt-Anchor" href="#旋转框定义"></a> 旋转框定义</h3><h4 id="opencv定义法"><a class="markdownIt-Anchor" href="#opencv定义法"></a> OpenCV定义法</h4><h5 id="opencv旧版本定义451"><a class="markdownIt-Anchor" href="#opencv旧版本定义451"></a> OpenCV旧版本定义(&lt;4.5.1)</h5><p>OpenCV在版本4.5.1之前，表示形式为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>o</mi><mi>c</mi></mrow></msub><mo separator="true">,</mo><msub><mi>y</mi><mrow><mi>o</mi><mi>c</mi></mrow></msub><mo separator="true">,</mo><msub><mi>w</mi><mrow><mi>o</mi><mi>c</mi></mrow></msub><mo separator="true">,</mo><msub><mi>h</mi><mrow><mi>o</mi><mi>c</mi></mrow></msub><mo separator="true">,</mo><msub><mi>θ</mi><mrow><mi>o</mi><mi>c</mi></mrow></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>θ</mi><mrow><mi>o</mi><mi>c</mi></mrow></msub><mo>∈</mo><mo stretchy="false">[</mo><mo>−</mo><mi>π</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{(x_{oc},y_{oc},w_{oc},h_{oc},{\theta}_{oc}),{\theta}_{oc}∈[-\pi/2,0)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord">/</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span></span></p><p>角度的由宽W与x轴所成的<strong>负的锐角或者直角</strong>。</p><h5 id="opencv新版本定义451"><a class="markdownIt-Anchor" href="#opencv新版本定义451"></a> OpenCV新版本定义(&gt;=4.5.1)</h5><p>OpenCV在版本4.5.1之后修改了角度定义范围，表示形式为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>o</mi><mi>c</mi></mrow></msub><mo separator="true">,</mo><msub><mi>y</mi><mrow><mi>o</mi><mi>c</mi></mrow></msub><mo separator="true">,</mo><msub><mi>w</mi><mrow><mi>o</mi><mi>c</mi></mrow></msub><mo separator="true">,</mo><msub><mi>h</mi><mrow><mi>o</mi><mi>c</mi></mrow></msub><mo separator="true">,</mo><msub><mi>θ</mi><mrow><mi>o</mi><mi>c</mi></mrow></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>θ</mi><mrow><mi>o</mi><mi>c</mi></mrow></msub><mo>∈</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>π</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">{(x_{oc},y_{oc},w_{oc},h_{oc},{\theta}_{oc}),{\theta}_{oc}∈(0,\pi/2]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">]</span></span></span></span></span></p><p>角度的由宽W与x轴所成的<strong>正的锐角或者直角</strong>。</p><p>新旧版本的转换关系如下图所示:</p><p><img src="/img/article/2022/05/23/2.jpg" alt="" /></p><blockquote><p>在MMRotate中，旋转框的定义方式采用OpenCV新版本定义法</p></blockquote><h2 id="mmrotate框架结构"><a class="markdownIt-Anchor" href="#mmrotate框架结构"></a> MMRotate框架结构</h2><p>MMRotate主要包括四个部分, <code>datasets</code>, <code>models</code>, <code>core</code> and <code>apis</code>。</p><ul><li><code>datasets</code> 用于数据加载和数据增强。</li><li><code>models</code> 主要包括各类模型和损失函数。</li><li><code>core</code> 为模型训练和评估提供工具。</li><li><code>apis</code> 为模型训练、测试和推理提供的API接口。</li></ul><p><img src="/img/article/2022/05/23/3.jpg" alt="" /></p><p>关于Dataset，目前已完成DOTA_v1.5、HRSC2016、SSDD的预处理，还剩下HRSID和DOTA_V1.0</p><p>关于Model, 目前在尝试跑Rotated-RetinaNet模型，使用HRSC2016，目前还在调整代码，目前没有遇到问题</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统设计-Ch12-设计一个聊天系统</title>
    <link href="/2022/05/12/System-Design/20230512-SysDesign-Ch12-Design%20A%20Chat%20System/"/>
    <url>/2022/05/12/System-Design/20230512-SysDesign-Ch12-Design%20A%20Chat%20System/</url>
    
    <content type="html"><![CDATA[<h2 id="设计一个聊天系统"><a class="markdownIt-Anchor" href="#设计一个聊天系统"></a> 设计一个聊天系统</h2><p>几乎每个人都会使用聊天app，下图展示了一些应用市场上最为流行的聊天app：</p><p><img src="/img/design/ch12/12-1.png" alt="" /></p><p>市场上的聊天app并不是同质化的，针对不同类型的用户，不同的聊天app会侧重不同的功能。在市场上，有Fackbook、Messenger、微信和Whatsapp等一对一聊天应用，Slack等专注于群聊的办公室聊天应用，或Discord等专注于大型群聊和低语音聊天延迟的游戏聊天应用。因此面试官确定准确的需求是非常重要的。</p><h3 id="step1understand-the-problem-and-establish-design-scope"><a class="markdownIt-Anchor" href="#step1understand-the-problem-and-establish-design-scope"></a> Step1：Understand the problem and establish design scope</h3><p>对于”设计一个聊天系统“这个系统设计话题，我们可以向面试官提出以下问题：</p><ul><li><p>Q：我们应该设计一个什么样的聊天应用？一对一还是群聊？</p><blockquote><p>A：它应该支持一对一聊天和群聊</p></blockquote></li><li><p>Q：是一个移动应用程序还是一个Web应用程序?</p><blockquote><p>A：二者兼而有之</p></blockquote></li><li><p>Q：哪些功能对于这个聊天功能很重要呢？像是发表情，传文件？</p><blockquote><p>A：一对一聊天低延迟，多人聊天（最多100人），其他人的在线情况，系统暂时仅支持文本聊天</p></blockquote></li><li><p>Q：消息有大小限制么？</p><blockquote><p>A：是的，文本长度应该少于100000个字符</p></blockquote></li><li><p>Q：是否需要端到端加密？</p><blockquote><p>A：暂时不需要，如果时间允许，我们会讨论的</p></blockquote></li><li><p>Q：我们要把聊天记录保存多久？</p><blockquote><p>A：永远</p></blockquote></li><li><p>Q：同一个账户可以同时登录到多个设备么？</p><blockquote><p>A：是的，应该支持</p></blockquote></li><li><p>Q：这个应用的规模是多大？</p><blockquote><p>A：计划是5000万日活跃用户(DAU)</p></blockquote></li></ul><h3 id="step2propose-high-level-design-and-get-buy-in"><a class="markdownIt-Anchor" href="#step2propose-high-level-design-and-get-buy-in"></a> Step2：Propose high-level design and get buy-in</h3><p>我们首先应该对客户端和服务端如何通信有基本的了解，在聊天系统中，客户端可以是手机应用，也可以是Web应用。但客户端之间不能直接进行通信，而是每个客户端的消息都通过服务端的Chat Service转发给另一个客户端（群聊就是另外多个客户端）。让我们把重心放在基本操作上，Chat Service必须支持以下功能：</p><ul><li>接收来自其它客户端（发送者）的信息</li><li>为每条信息找到正确的接收者</li><li>如果接收者不在线，把接收者的信息暂存在服务器上，直到它联机为止</li></ul><p>下图展示了客户端（发送方sender和接收方receiver）</p><p><img src="/img/design/ch12/12-2.png" alt="" /></p><p>当客户端打算开始聊天时，它会使用一个或多个网络协议连接聊天服务。对于聊天服务来说，网络协议的选择很重要，让我们来和面试官详细讨论一下：</p><p>对于大多数Client/Server架构的应用程序，请求都是由客户端发起的。对于聊天应用也是如此，在上图中，当发送方通过Chat Service向接收方发送消息时，它使用HTTP(s)协议，这是最常见的Web协议。在这种情况下客户端与服务端的Chat Service建立HTTP连接并发送消息，来通知Chat Service把消息转发给接收方。这个时候建立keep-alive是更加高效的，因为keep-alive header允许客户端保持与服务端的Chat Service持久连接，可以减少TCP的握手次数。因此HTTP在发送方是一个不错的选择，许多流行的聊天应用程序(如Facebook)最初使用HTTP发送消息。</p><p>然而，接收方这一边要复杂一些，由于HTTP协议在C/S架构中一般都是客户端发起的，因此从服务端发送消息并非易事。多年来，许多技术用于模拟服务器启动的连接：Polling(轮询)，Long Polling(长轮询)和WebSocket。这些都是在系统设计面试中广泛使用的重要技术，因此让我们来一一介绍它们。</p><h4 id="network-protocols"><a class="markdownIt-Anchor" href="#network-protocols"></a> Network Protocols</h4><p><strong>Polling</strong></p><p>如下图所示，轮询是一种客户端定期询问服务器是否有可用消息的技术，根据轮询频率不同，轮询的成本也不同。它可能会消耗宝贵的服务器资源来返回<strong>当前没有消息</strong>的结果。</p><p><img src="/img/design/ch12/12-3.png" alt="" /></p><p><strong>Long Polling</strong></p><p>由于轮询并不高效，下一个要介绍的是长轮询，如下图所示：</p><p><img src="/img/design/ch12/12-4.png" alt="" /></p><p>在长轮询中，客户端保持连接打开(keep-alive)，直到有新消息或者达到HTTP连接超时阈值。一旦客户端收到新消息，它会立即重启这个进程(重新对HTTP连接计时)，向服务器发送另一个请求。</p><p>缺点：</p><ul><li>发送方和接收方可能连接到的不是同一个聊天服务器。基于HTTP的服务器是无状态的。如果使用round robin(循环调度)的负载均衡策略，则接收消息的服务器和接收消息的客户端无法建立长轮询连接。</li><li>服务端没有比较好的办法来判断客户端是否已断开连接</li><li>效率低下。如果用户不经常聊天，长轮询仍然会在超时后定期连接，这无疑浪费服务器资源</li></ul><p><strong>WebSocket</strong></p><p>WebSocket是从服务端到客户端发送异步更新(asynchronous update)的最常见解决方案，如下图所示：</p><p><img src="/img/design/ch12/12-5.png" alt="" /></p><p>与HTTP协议不同，WebSocket协议在客户端和服务器之间只建立一次连接，之后就可以保持连接状态，客户端和服务器之间可以随时互相发送消息，实现实时通信和数据传输。客户端和服务器之间的通信是基于帧（frame）进行的，帧是WebSocket协议中的最小数据单位，包含一个或多个数据块，可以是文本或二进制数据。</p><p>WebSocket协议使用HTTP/1.1协议的Upgrade头部字段来升级连接，从HTTP协议切换到WebSocket协议。在握手阶段，客户端向服务器发送Upgrade请求，请求升级为WebSocket协议。如果服务器支持WebSocket协议，它将发送响应，客户端和服务器之间的连接就升级为WebSocket连接。</p><p>需要注意的是，WebSocket协议在使用时需要注意安全性问题，因为它允许客户端和服务器之间进行双向通信，如果未做好安全措施，可能会导致安全隐患。常见的安全措施包括使用SSL/TLS加密协议、使用安全的身份验证机制等。</p><p>之前我们说过，HTTP在发送方是一个不错的选择，许多流行的聊天应用程序最初使用HTTP发送消息，但由于WebSocket是支持双向通信的，我们在发送方也使用WebSoket显然是更好的选择。</p><p><img src="/img/design/ch12/12-6.png" alt="" /></p><hr /><p>上一节我们提到，WebSocket被选为客户端和服务器之间的主要通信协议，用于双向通信。需要注意的是，除了Chat Service其它的服务都不必是WebSocket协议。事实上，聊天应用程序的大多数功能(注册、登录、用户配置文件等)都可用使用HTTP上的传统request/response方法。让我们深入了解一下系统的高级组件。</p><h4 id="high-level-design"><a class="markdownIt-Anchor" href="#high-level-design"></a> High-Level Design</h4><p>如下图所示，聊天系统分为三大类，无状态服务(Stateless)，有状态服务(Stateful)和第三方集成(Thrid-party)：</p><p><img src="/img/design/ch12/12-7.png" alt="" /></p><p><strong>Stateless Service</strong></p><p>无状态服务就是传统的request/response服务，用于管理登录、注册、用户配置等这些许多网站和应用程序的常见功能。无状态服务位于负载均衡器后面，由负载均衡器根据请求路径将请求路由到正确的服务。这些服务可以是单体式架构，也可以是单独的微服务架构。</p><p>我们将深入讨论的一项服务是服务发现，它的主要工作是向客户端提供客户端可以连接的服务器的DNS主机列表。</p><p><strong>Stateful Service</strong></p><p>在聊天系统中，唯一一个有状态的服务就是Chat Service。该服务是有状态的，因为每个客户端都保持与聊天服务器的持久为网络连接。在这项服务中，只要当前聊天服务器仍然可用，客户端通常不会切换到另一个聊天服务器。服务发现与聊天服务密切协调，以避免服务器过载。我们将深入探讨细节。</p><p><strong>Thrid-party Integration</strong></p><p>对于聊天应用来说，推送通知是最重要的第三方集成，这是一种在新消息到达时通知用户的方式，即使聊天应用没有运行。有关更多的信息，可用参考第10章设计通知系统。</p><p>把上述服务整合起来，就得到了如下分布式架构：</p><p><img src="/img/design/ch12/12-8.png" alt="" /></p><ul><li><p>WebSocket：</p><ul><li>Chat Servers用于发送/接收消息</li><li>Presence Servers管理在线/离线状态</li></ul></li><li><p>Http：</p><ul><li>API Servers处理其它事务，包括用户登录、注册、更改配置等功能</li></ul></li><li><p>Thrid-Party</p><ul><li>Notification Servers发送推送通知</li></ul></li><li><p>最后，key-value存储引擎存储聊天历史记录。当离线用户重新上线时，她能看到以前的所有聊天记录</p></li></ul><p><strong>Storage</strong></p><p>技术栈的深层是数据层，我们必须做出一个重要的决定：是使用SQL还是NoSQL数据库？<br />为了做出明智的决定，我们将重新审视一下我们的数据类型和读写模式：</p><p>在一个典型的聊天系统中存在两种类型的数据。第一种是通用数据，如用户资料、用户设置和好友列表。这些数据存储在强大可靠的关系型数据库（SQL）中，随使可用复制和分片技术扩展数据库；第二种是聊天系统独有的数据–聊天历史数据，聊天历史中的消息可能包含文本、图片、音频和视频等多种类型的数据，这些数据的结构可能不同，难以在关系型数据库中进行高效地存储和查询。NoSQL数据库通常可以更好地处理大规模的数据存储和访问，并且就聊天消息这种半结构化/非结构化数据而言，可以比SQL更容易实现水平扩展，此外，NoSQL数据库通常具有更高的性能和更低的延迟，这对于处理实时聊天数据非常重要。因此我们更推荐使用Key-Value键值存储的NoSQL数据库。</p><h4 id="data-model"><a class="markdownIt-Anchor" href="#data-model"></a> Data Model</h4><p>现在我们来仔细看看消息数据的设计。</p><p><strong>Message table for 1 to 1 chat</strong></p><p>下图展示了1对1的聊天消息表设计，主键是<code>&lt;message_id&gt;</code>，它有助于决定消息序列的有序性，我们不能通过created_at来决定消息序列，因为可以同时创建多个消息。</p><p><img src="/img/design/ch12/12-9.png" alt="" /></p><p><strong>Message table for group chat</strong></p><p>下图展示了群聊的聊天消息表设计，复合主键是<code>&lt;channel_id, message_id&gt;</code>，channel在这里跟group是一个意思。channel_id是分区键，因为群聊中的所有查询都在同一个通道中操作。</p><p><img src="/img/design/ch12/12-10.png" alt="" /></p><p><code>&lt;message_id&gt;</code>负责确定消息的顺序，因此必须满足以下两个要求：</p><ul><li><code>&lt;message_id&gt;</code>必须是唯一的</li><li><code>&lt;message_id&gt;</code>应该按照时间粗略有序</li></ul><p>如何生成<code>&lt;message_id&gt;</code>，可以参考第七章：设计分布式ID生成器</p><h3 id="step3design-deep-dive"><a class="markdownIt-Anchor" href="#step3design-deep-dive"></a> Step3：Design deep dive</h3><p>在系统设计面试中，通常你需要深入了解高级设计中的一些组件。对于聊天系统，服务发现(Service Discovery)，消息流(Message Flows)和在线/离线指标(online/ offline indicator)值得深入探讨。</p><h4 id="service-discovery"><a class="markdownIt-Anchor" href="#service-discovery"></a> Service Discovery</h4><p>服务发现的主要作用是根据地理位置、服务器负载等标准为客户端推荐最佳的聊天服务器。Apache ZooKeeper是一种流行的服务发现开源解决方案，它注册所有可用的服务器，并根据预定义的标准为客户端选择最佳的聊天服务器。</p><p>下图展示了ZooKeeper的服务发现是如何工作的：</p><p><img src="/img/design/ch12/12-11.png" alt="" /></p><ol><li>用户A尝试登录应用程序</li><li>负载均衡器向API服务器发送登录请求</li><li>后端对用户进行身份验证后，服务发现为用户A找到最佳的聊天服务器。在本例中，选择服务器2，并将服务器信息返回给用户A</li><li>用户A通过WebSocket连接聊天服务器2</li></ol><h4 id="message-flows"><a class="markdownIt-Anchor" href="#message-flows"></a> Message Flows</h4><p>聊天系统的端到端流程是很有趣的，我们将讨论1对1聊天流程、多设备间消息同步和群聊流程。</p><p><strong>1 on 1 chat flow</strong></p><p>下图展示了当用户A发送一条消息给用户B时会发生什么：</p><p><img src="/img/design/ch12/12-12.png" alt="" /></p><ol><li>User A向Chat Server1 发送聊天信息</li><li>Chat Server1从ID生成器中获取<code>&lt;message_id&gt;</code></li><li>Chat Server1将消息发送到消息同步队列</li><li>消息写入存储到key-value数据库中</li><li>如果User B在线，聊天消息会转发到User B所在的Chat Server 2；如果User B不在线，则给推送PN Servers，由它发送推送通知</li><li>Chat Server 2将消息转发给User B</li></ol><p><strong>Message synchronization across multiple devices</strong></p><p>许多用户拥有多个设备(手机、平板、电脑等)，下图展示了在多个设备之间同步消息的示例：</p><p><img src="/img/design/ch12/12-13.png" alt="" /></p><p>在图中，User A拥有两个设备，一部手机和一台笔记本电脑。当用户A用手机登录聊天程序时，它会与Chat Server 1建立WebSocket连接。类似地，在用笔记本电脑登录时也会与Chat Server 1建立连接。</p><p>每台设备都维护了一个名为<code>&lt;cur_max_message_id&gt;</code>的变量，用于跟踪设备上的最新消息id。满足以下两个条件的消息被视为新消息：</p><ul><li>消息接收者ID等于当前登录的用户ID</li><li>消息的<code>message_id</code>键值大于当前登录设备的<code>&lt;cur_max_message_id&gt;</code></li></ul><p>这样每台设备都能够很容易的从k-v数据库中拉取到自己的新消息。</p><p><strong>Small group chat flow</strong></p><p>与1对1聊天相比，群聊的逻辑更加复杂，下图展示了群聊的流程：</p><p><img src="/img/design/ch12/12-14.png" alt="" /></p><p>上图解释了当User A在群聊中发送消息时发生什么：<br />假设组中有3个成员(User A、User B、 User C)。首先，来自用户A的消息被复制到每个组成员的消息同步队列中—图中就被复制到了User B的消息同步队列和User C的消息同步队列。你可用把消息同步队列视为消息接收者的邮箱。每个接收者都只有一个消息同步队列，其中包含不同消息发送者的消息，如下图所示：</p><p><img src="/img/design/ch12/12-15.png" alt="" /></p><p>这种设计非常适合小型群聊：</p><ul><li>因为它简化了消息同步流程，因为每个客户端只需要检查自己的消息同步队列就能获取新消息</li><li>当组内人数很少时，在每个消息接收者中存储一份副本并不算昂贵</li></ul><p>微信就采用了类似的方法，它将一个群组成员限制在500人以内（200以上需要邀请，上限500)。</p><p>但是，对于拥有大量用户的群组，为每个成员创建一个消息同步队列来存储消息副本是不可接受的。</p><hr /><h4 id="onlineoffline-indicator"><a class="markdownIt-Anchor" href="#onlineoffline-indicator"></a> Online/Offline Indicator</h4><p>在线状态指示器， 是许多聊天应用程序的基本功能。通常，你可用看用户的个人资料图片是否是彩色，或者看用户名旁边是否有一个绿点来判断一个用户是否在线。</p><p>在High-Level Design中，Presence Sever负责管理在线状态，并通过WebSocket与客户端进行通信。有几个流程会触发在线状态的更改，让我们逐个研究一下：</p><ul><li><strong>User Login</strong>：用户登录会建立WebSocket连接，把用户状态修改成在线</li><li><strong>User Logout</strong>：用户等出会断开WebSocket连接，把用户状态修改成离线</li><li>**User disconnection：**用户断连，这种情况不能简单地直接修改用户状态，因为用户在短时间内频繁断开和重新连接是很常见的，这样频繁修改状态会对数据库造成不小的压力。因此，我们可用引入一种心跳机制来解决这个问题：让客户端定期向Presence Server发送检测信号，如果服务器在指定的时间内接收到了该信号，则用户被视为在线，否则，它将处于离线状态</li></ul><p><strong>Online Status Fanout</strong></p><p>目前只是Presence Server知道所有用户状态，那么User A的朋友是如何知道User A的状态更改的呢？下图解释了它的工作原理：</p><p><img src="/img/design/ch12/12-19.png" alt="" /></p><p>Presence Server使用发布-订阅模型，其中每个**好友对(User A - User B)**维护一个channel，当用户A发送状态变化时，Presence Server会向图中每个channel发送一个通知事件，因此，朋友很容易获取在线状态的更新。</p><p>这个方式也是仅针对小用户群体是有效的，比如说微信也采用了类似的方式。但对于较大的群体来说（比如说10000个群成员），每当有状态修改时，会产生10000个通知事件。为解决性能瓶颈，一种可行的解决方案是仅当用户进入群聊或者手动刷新好友列表时，来获取最新的好友在线状态。</p><h3 id="step4warm-up"><a class="markdownIt-Anchor" href="#step4warm-up"></a> Step4：Warm up</h3><p>如果你在面试结束前有多余的时间，你也可以跟面试官进一步探讨以下问题：</p><ul><li>如何实现同一个账户可以同时登录到多个设备？</li><li>如何实现聊天信息的端到端加密？</li><li>如何设计客户端缓存消息，来减少客户端和服务器之间的数据传输?</li><li>媒体文件的大小明显远大于文本，云存储和媒体压缩技术也会是有趣的话题</li><li>聊天消息撤销、重发机制设计</li></ul>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统设计-Ch11-设计一个动态推送系统</title>
    <link href="/2022/05/11/System-Design/20230511-SysDesign-Ch11-Design%20A%20News%20Feed%20System/"/>
    <url>/2022/05/11/System-Design/20230511-SysDesign-Ch11-Design%20A%20News%20Feed%20System/</url>
    
    <content type="html"><![CDATA[<h2 id="设计一个动态推送系统"><a class="markdownIt-Anchor" href="#设计一个动态推送系统"></a> 设计一个动态推送系统</h2><p>在本章中，您被要求设计一个动态推送系统。动态推送系统系统是在主页中间不断更新的动态消息列表。</p><p>动态消息包括状态更新、照片、视频、链接、应用活动以及你关注的人、页面和喜欢的群组。常见的问题有：设计Facebook news feeds， Instagram feed, Twitter timeline等等。</p><h3 id="step1understand-the-problem-and-establish-design-scope"><a class="markdownIt-Anchor" href="#step1understand-the-problem-and-establish-design-scope"></a> Step1：Understand the problem and establish design scope</h3><p>对于”设计一个信息流系统“这个系统设计话题，我们可以向面试官提出以下问题：</p><ul><li><p>Q：这是一个mobile app还是一个web app？</p><blockquote><p>A：两者都有</p></blockquote></li><li><p>Q：有哪些重要功能？</p><blockquote><p>A：用户可以发布动态，并在动态推送页面上看到他朋友（关注的人）的动态。</p></blockquote></li><li><p>Q： 动态推送的动态是按照时间倒序还是按照评价分数或其他特定顺序排列？</p><blockquote><p>A：为简单起见，是按照逆时间顺序排序的</p></blockquote></li><li><p>Q：动态是否可以包含图像或视频，还是只包含文本？</p><blockquote><p>A：可以包含媒体文件，包括图像和视频</p></blockquote></li><li><p>Q： APP的日活量是多少？</p><blockquote><p>A：1000万DAU</p></blockquote></li></ul><h3 id="step2propose-high-level-design-and-get-buy-in"><a class="markdownIt-Anchor" href="#step2propose-high-level-design-and-get-buy-in"></a> Step2：Propose high-level design and get buy-in</h3><p>设计分为两个流程：Feed Publishing 和 News Feed Building。</p><ul><li>Feed Publishing：当用户发布动态时，相应的数据会写入缓存和数据库。她朋友的动态推送会有一个动态</li><li>News Feed Building：动态推送是按照时间逆序聚合朋友们的动态来构建的</li></ul><h4 id="newsfeed-apis"><a class="markdownIt-Anchor" href="#newsfeed-apis"></a> Newsfeed APIs</h4><p>动态推送APIs是客户端和服务器通信的主要方式。这些APIs基于HTTP。这里我们讨论两个最重要的API： feed publishing API（新闻发布）和 news feed retrieval API（动态推送检索）</p><h4 id="feed-publishing"><a class="markdownIt-Anchor" href="#feed-publishing"></a> Feed Publishing</h4><p>Feed Publishing流程如下：</p><p><img src="/img/design/ch11/11-2.png" alt="" /></p><ul><li><p>用户可以在浏览器或手机APP上通过以下API发布内容为&quot;Hello&quot;的动态：</p><pre class="language-html" data-language="html"><code class="language-html">&#x2F;v1&#x2F;me&#x2F;feeds? content&#x3D;Hello &amp; auth_token&#x3D;&#123;auth_token&#125;</code></pre></li><li><p>负载均衡器：将请求按负载均衡策略分配到web服务器上</p></li><li><p>web服务器：将请求重定向到不同的内部服务</p></li><li><p>Post Service：将动态在缓存和数据库中持久化</p></li><li><p>Fanout Service：将新动态推送到朋友的动态推送页面， Newsfeed 数据存储在缓存中以便快速检索</p></li><li><p>Notification Service：发送通知，通知朋友有新的动态可以查看</p></li></ul><h4 id="newsfeed-building"><a class="markdownIt-Anchor" href="#newsfeed-building"></a> NewsFeed Building</h4><p>News Feed Building流程如下：</p><p><img src="/img/design/ch11/11-3.png" alt="" /></p><ul><li><p>用户可以在浏览器或手机APP上通过以下API刷新她的动态推送：</p><pre class="language-html" data-language="html"><code class="language-html">&#x2F;v1&#x2F;me&#x2F;feed</code></pre></li><li><p>负载均衡器：将请求按负载均衡策略分配到web服务器上</p></li><li><p>web服务器：将请求重定向到动态推送服务NewsFeed Service</p></li><li><p>NewsFeed  Service：动态推送服务从缓存中获取新的动态</p></li></ul><h3 id="step3design-deep-dive"><a class="markdownIt-Anchor" href="#step3design-deep-dive"></a> Step3：Design deep dive</h3><h4 id="feed-publishing-deep-dive"><a class="markdownIt-Anchor" href="#feed-publishing-deep-dive"></a> Feed Publishing deep dive</h4><p>下图概述了Feed Publishing的详细设计：</p><p><img src="/img/design/ch11/11-4.png" alt="" /></p><p>我们主要详细讨论一下这张图中的Web Servers和Fanout Service两个部分。</p><p><strong>Web Servers</strong></p><p>除了与客户端通信外，Web服务器还要执行身份验证(Authentication)和速率限制)(Rate Limiting)任务。</p><p>其实很简单，为了避免垃圾邮件和API滥用，只有携带相应auth_token的用户才能发帖，并且在一段时间内用户的发帖有数量限制。</p><p><strong>Fanout service</strong></p><p>Fanout 是向所有朋友发送动态的过程，Fanout有两种实现方式：Fanout on write 和Fanout on read，我们将分别介绍其优劣，并探讨选择最适合我们这个系统的实现方式。</p><hr /><p>Fanout on write</p><p>使用Fanout on write这种方式时，动态推送(News Feed)会在编写时预先计算，新动态发布后会立即发送到朋友的缓存中。</p><p>优点：</p><ul><li>动态推送是实时生成的，可以立即推送给朋友</li><li>获取动态推送很快，因为动态推送是在写入时预先计算的</li></ul><p>缺点：</p><ul><li>如果一个用户有很多朋友，那么获取朋友列表并为所有朋友生成动态推送既缓慢又耗时，这被称为热键问题(hotkey problem)</li><li>对于不活跃的用户，预计算动态推送会浪费计算资源</li></ul><p>Fanout on read</p><p>使用Fanout on read这种方式时，动态推送是在阅读期间生成的。这是一种按需模式。当用户加载其主页时，会拉取最新的未读动态。</p><p>优点：</p><ul><li>对于不活跃的用户，这种Fanout效果更好，因为不会浪费计算资源</li><li>数据不会主动推送给朋友，因此不存在热键问题</li></ul><p>缺点：</p><ul><li>获取动态推送很慢，因为动态推送是用户浏览时实时拉取计算的</li></ul><hr /><p>我们采用一种混合方法来综合这两种方法的优点：</p><p>由于快速获取动态推送至关重要，我们为大多数用户使用Fanout on write模式。对于有很多朋友/关注者的用户（比如说：明星），我们允许关注者按需拉取动态推送内容，以避免系统过载。一致性哈希是一种有效的技术，可以缓解热键问题，因为它有助于更均匀地分配 请求/数据。</p><p>让我们单独把Fanout Service拿出来看一下：</p><p><img src="/img/design/ch11/11-5.png" alt="" /></p><p>Fanout Service工作原理如下：</p><ol><li><p>从Graph Database中获取好友ID</p><blockquote><p><a href="https://neo4j.com/developer/graph-database/">Graph Database</a>使用图这种数据结构来构建数据库，适用于管理朋友关系和朋友推荐</p></blockquote></li><li><p>从用户缓存中获取好友信息，然后系统会根据用户设置过滤掉好友。(例如设置屏蔽某个好友或者此动态不可见)</p></li><li><p>将好友列表和新帖子ID发送到消息队列Message Queue</p></li><li><p>Fanout worker从消息队列中获取数据，并将动态数据存储在缓存(News Feed Cache)中</p><blockquote><p>你可以将News Feed Cache视为&lt;post_id, user_id&gt;的映射表，如下图所示：</p><p><img src="/img/design/ch11/11-6.png" alt="" /></p><p>每当用户发布新的动态时，这条动态都会被附加到这张动态推送表中</p></blockquote></li></ol><h4 id="news-feed-buliding-deep-dive"><a class="markdownIt-Anchor" href="#news-feed-buliding-deep-dive"></a> News Feed Buliding deep dive</h4><p>下图概述了News Feed Publishing的详细设计：</p><p><img src="/img/design/ch11/11-7.png" alt="" /></p><p>其中媒体内容(图像、视频等)存储在CDN中，以便快速检索。</p><p>让我们看看客户端如何刷新动态：</p><ul><li><p>用户可以在浏览器或手机APP上通过以下API刷新她的动态推送：</p><pre class="language-html" data-language="html"><code class="language-html">v1&#x2F;me&#x2F;feed</code></pre></li><li><p>负载均衡器：将请求按负载均衡策略分配到web服务器上</p></li><li><p>web服务器：将请求重定向到动态推送服务News Feed Service，同时包含身份验证和速率限制功能</p></li><li><p>News Feed Service：从News Feed Cache中获取post ID列表&lt;post_id, user_id&gt;</p></li><li><p>一个用户的动态不仅仅包含Post ID列表&lt;post_id, user_id&gt;，还包含用户名，个人资料图片，动态的音视频内容等。因此需要从User Cache中获取完整的用户信息，从Post Cache中获取完整的动态内容信息，从而构建完整的动态推送</p></li><li><p>完整的动态推送以JSON格式返回给客户端进行渲染</p></li></ul><h4 id="cache-aerchitecture"><a class="markdownIt-Anchor" href="#cache-aerchitecture"></a> Cache Aerchitecture</h4><p>缓存对于动态推送系统来说无疑非常重要，我们将缓存分为5层，如下图所示：</p><p><img src="/img/design/ch11/11-8.png" alt="" /></p><ul><li>News Feed Cache：前面也提到过，它存储&lt;post_id, user_id&gt;映射表</li><li>Content Cache：它存储动态内容数据，热门内容存储在hot cache</li><li>Social Graph Cache：它存储用户关系数据</li><li>Action Cache：它存储用户是否喜欢动态，回复动态或者其它操作信息</li><li>Counters Cache：它存储点赞数量、回复数量、关注人数等计数器</li></ul><h3 id="step4warm-up"><a class="markdownIt-Anchor" href="#step4warm-up"></a> Step4：Warm up</h3><p>在本章中，我们设计了一个动态推送系统，我们的设计主要包括两个流程，动态发布和动态推送检索。</p><p>如果还有几分钟时间，你可以和面试官探讨以下问题：</p><p><strong>数据库扩展</strong>：</p><ul><li>垂直缩放和水平缩放</li><li>SQL与NoSQL</li><li>主从复制</li><li>一致性模型</li><li>数据库分片</li></ul><p><strong>其它要点</strong>：</p><ul><li>保持web层无状态</li><li>尽可能地缓存更多的数据</li><li>支持多个数据中心</li><li>监控关键数据，如高峰时间段的QPS等</li></ul><blockquote><p>PS：感觉都是一些第一章第二章谈到的通用问题，意义不大。</p></blockquote><p>主要是浏览一下动态发布和动态推送检索的流程设计，有个印象即可；另外就是还有一个Graph Database，Neo4j，是专门用来存储人际关系的，学到了！！</p>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统设计-Ch10-设计一个通知系统</title>
    <link href="/2022/05/10/20230512-SysDesign-Ch12-Design%20A%20Notification%20System/"/>
    <url>/2022/05/10/20230512-SysDesign-Ch12-Design%20A%20Notification%20System/</url>
    
    <content type="html"><![CDATA[<h2 id="设计一个网络爬虫"><a class="markdownIt-Anchor" href="#设计一个网络爬虫"></a> 设计一个网络爬虫</h2><h3 id="step1understand-the-problem-and-establish-design-scope"><a class="markdownIt-Anchor" href="#step1understand-the-problem-and-establish-design-scope"></a> Step1：Understand the problem and establish design scope</h3><p>对于”设计一个通知系统“这个系统设计话题，我们可以向面试官提出以下问题：</p><h3 id="step2propose-high-level-design-and-get-buy-in"><a class="markdownIt-Anchor" href="#step2propose-high-level-design-and-get-buy-in"></a> Step2：Propose high-level design and get buy-in</h3><h3 id="step3design-deep-dive"><a class="markdownIt-Anchor" href="#step3design-deep-dive"></a> Step3：Design deep dive</h3><h3 id="step4warm-up"><a class="markdownIt-Anchor" href="#step4warm-up"></a> Step4：Warm up</h3>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统设计-Ch10-设计一个通知系统</title>
    <link href="/2022/05/10/System-Design/20230510-SysDesign-Ch10-Design%20A%20Notification%20System/"/>
    <url>/2022/05/10/System-Design/20230510-SysDesign-Ch10-Design%20A%20Notification%20System/</url>
    
    <content type="html"><![CDATA[<h2 id="设计一个通知系统"><a class="markdownIt-Anchor" href="#设计一个通知系统"></a> 设计一个通知系统</h2><p>近年来，通知系统已经成为许多应用中非常流行的功能。通知提醒用户重要信息，如突发新闻，产品更新等。<br />它已成为我们日常生活中不可或缺的一部分。在本章中，您被要求设计一个通知系统。</p><p>通知一共有三种类型，分别是手机推送通知，短信和电子邮件，下图显示了每种通知的示例：</p><p><img src="/img/design/ch10/10-1.png" alt="" /></p><h3 id="step1understand-the-problem-and-establish-design-scope"><a class="markdownIt-Anchor" href="#step1understand-the-problem-and-establish-design-scope"></a> Step1：Understand the problem and establish design scope</h3><p>对于”设计一个通知系统“这个系统设计话题，我们可以向面试官提出以下问题：</p><ul><li><p>Q：系统支持哪些类型的通知？</p><blockquote><p>A：手机推送通知，短信和电子邮件</p></blockquote></li><li><p>Q：这是一个实时系统吗？</p><blockquote><p>A：可以说是一个软实时系统。我们希望用户尽快收到通知，但当系统处于高负载的情况下允许轻微的延迟</p></blockquote></li><li><p>Q：系统支持哪些设备？</p><blockquote><p>A：iOS设备、android设备和笔记本电脑/台式。</p></blockquote></li><li><p>Q：通知由什么触发？</p><blockquote><p>A：通知可以由客户端应用程序触发，也可以在服务器端进行调度。</p></blockquote></li><li><p>Q：用户可以选择关闭通知吗？</p><blockquote><p>A：是的，选择关闭通知的用户将不再收到通知。</p></blockquote></li><li><p>Q：每天发出多少份通知？</p><blockquote><p>A：1000W条手机推送通知、100W条短信、500W封7电子邮件</p></blockquote></li></ul><h3 id="step2propose-high-level-design-and-get-buy-in"><a class="markdownIt-Anchor" href="#step2propose-high-level-design-and-get-buy-in"></a> Step2：Propose high-level design and get buy-in</h3><p>本小节展示了支持各种通知类型的高级设计：</p><ul><li>不同类型的通知(Different types of notification)</li><li>用户联系方手收集流程(Contact info gathering flow)</li><li>通知发送/接收流程(Notification sending/receiving flow)</li></ul><h4 id="different-types-of-notification"><a class="markdownIt-Anchor" href="#different-types-of-notification"></a> Different types of notification</h4><p>首先来看不同类型的通知:</p><p><strong>iOS push notification</strong></p><p>我们主要需要三个组件来发送iOS推送通知：</p><ul><li>Provider：供应商构建通知请求并将其发送到APNS(Apple Push Notification Service)，要构建推送通知，供应商需要提供以下数据：<ul><li><p>Device Token（设备令牌）：用于发送推送给通知的唯一标识符</p></li><li><p>Payload（）：是一个JSON字典，包含推送的有效负载。下面是一个payload示例：</p><pre class="language-json" data-language="json"><code class="language-json">&#123;    &quot;to&quot;: [      &#123;            &quot;user_id&quot;: 123456        &#125;    ],    &quot;from&quot;: &#123;        &quot;email&quot;: &quot;from_address@example.com&quot;    &#125;,    &quot;subject&quot;: &quot;Hello World!&quot;,    &quot;content&quot;: [        &#123;            &quot;type&quot;: &quot;text&#x2F;plain&quot;,            &quot;value&quot;: &quot;Hello World!&quot;        &#125;    ]&#125;</code></pre><blockquote><p>你可以把payload理解为<strong>一系列信息中最为关键的信息</strong>。</p><p>例如：胶囊里的药粉就是payload，外面的皮是为了保证中间药粉的完好有效。</p></blockquote></li></ul></li><li>APNS：苹果公司提供的一项远程服务，用于向iOS设备发送通知</li><li>iOS：是接收推送通知的客户端</li></ul><p><strong>Android push notification</strong></p><p>安卓采用了与iOS类似的通知推送流程。只不过中间的是FCM(Firebase Cloud Messaging) 而不是APNS。</p><p><strong>SMS message</strong></p><p>对于SMS（短信服务）,通常使用第三方SMS服务，如Twilio、Nexmo,都是商业（付费）服务。</p><p><strong>Email</strong></p><p>对于电子邮件，公司可以自建电子邮件服务器，但是也有许多公司选择了商业（付费）电子服务，如Sendgrid和Mailchimp，它们提供了更好的推送效率和数据分析。</p><h4 id="contact-info-gathering-flow"><a class="markdownIt-Anchor" href="#contact-info-gathering-flow"></a> Contact info gathering flow</h4><p>要发送通知，我们需要收集移动设备令牌，电话号码或邮箱地址，如下图所示：</p><p><img src="/img/design/ch10/10-7.png" alt="" /></p><p>当用户首次安装注册我们的应用时，API服务器会收集用户联系方式并将其存储到数据库中。</p><hr /><p>下图显示了用于存储联系人信息的简化数据库表：</p><p><img src="/img/design/ch10/10-8.png" alt="" /></p><p>邮箱(email)和电话号码(phone_number)存储在用户表，移动设备令牌存储在设备表（通过user_id关联），这表明一个用户可能有多个设备，因此可以向多个设备发通知。</p><h4 id="notification-sendingreceiving-flow"><a class="markdownIt-Anchor" href="#notification-sendingreceiving-flow"></a> Notification sending/receiving flow</h4><p>我们首先介绍一下通知推送的初始high-level设计，然后推荐一些优化方式。</p><p><strong>Hig-level Design</strong></p><p>下图展示了通知推送系统的high-level design，你会看到一些必要的系统组件：</p><p><img src="/img/design/ch10/10-9.png" alt="" /></p><ul><li><strong>Service 1 to N</strong>：服务可以是微服务，cron job，或是一个用于触发通知推送事件的分布式系统。例如，计费服务发送电子邮件以提醒客户应该付款，或者购物网站告诉客户他们的包裹将在明天到达快递点等等。</li><li><strong>Notification System</strong>：通知系统(Notification System)是发送/接收通知的核心。从简单的事情开始，只是用一个通知服务器。它为Service 1 to N提供API，并且为第三方服务构建Notification payload。</li><li><strong>Tird-party Services</strong>：第三方服务负责向用户发送通知。在与第三方服务集成时，需要格外注意可扩展性，当前使用的第三方服务可能在未来不可用或被其它第三方服务替代，良好的可扩展性意味着可插拔的第三方服务。</li><li><strong>iOS，Amdroid，SMS，Email</strong>：用户在他们自己的设备上收到通知推送。</li></ul><p>这个设计中存在三个问题：</p><ol><li>Single point of failue(SPOF，单点故障)：单个通知服务器意味着单点故障</li><li>Hard to scale（难以扩展）：通知系统在一台服务器中处理与推送通知相关的一切。独立扩展数据库、缓存和不同的通知处理组件具有挑战性。</li><li>Performance bottleneck(性能瓶颈)：处理和发送通知可能会占用大量资源。例如，构建HTML页面和等待第三方服务的响应可能会占用大量时间。</li></ol><blockquote><p>（本质上都是单点服务器的问题，喊着你上分布式呢！）</p></blockquote><p><strong>Hig-level Design(improved)</strong></p><p>我们对设计进行了改进，如下图所示：</p><p><img src="/img/design/ch10/10-10.png" alt="" /></p><ul><li>将数据库(DB)和缓存(Cache)移出服务器：</li><li>添加更多通知服务器，并设置自动横向扩展:</li><li>引入消息队列解耦系统组件：我们给每种通知类型都分配了消息队列，当要发送大量通知时，消息队列充当缓冲区，因此第三方服务的中断不会影响其它通知类型。</li><li>引入Worker：worker是从消息队列中提取通知事件并将其发送到相应第三方服务的服务器。</li></ul><p>经过improved后，现在的通知推送流程如下：</p><ol><li>Service调用Notification Server提供的API来发送通知</li><li>Notification Server从缓存(Cache)或数据库(DB)中获取元数据，如用户信息，设备令牌和通知设置。</li><li>将通知事件(notification events)发送到相应的消息队列等待处理</li><li>Worker从消息队列中提取通知事件</li><li>Worker向第三方服务发送通知</li><li>第三方服务向用户设备发送通知</li></ol><h3 id="step3design-deep-dive"><a class="markdownIt-Anchor" href="#step3design-deep-dive"></a> Step3：Design deep dive</h3><p>我们将在Design deep dive中讨论如下内容：</p><ul><li>Reliability：</li><li>Additional compent and considerations</li><li>Updated design</li></ul><h4 id="reliability"><a class="markdownIt-Anchor" href="#reliability"></a> Reliability</h4><p>在分布式环境中设计系统时，我们必须回答几个重要的可靠性问题。</p><p><strong>How to prevent data loss?</strong></p><p>通知系统最重要的要求之一就是不能丢失数据。通知可以延迟或者重新发送，但是不能永远不会丢失。为了满足这一要求：通知数据保存在数据库中，并实现重试机制（通知日志数据库用于数据持久化）。</p><p><img src="/img/design/ch10/10-11.png" alt="" /></p><p><strong>Will recipients receive a notification exactly once？</strong></p><p>收件人会只收到一次通知吗？答案当然是No。尽管大多数情况下通知只发送一次，但分布式性质可能会导致重复的通知。为了减少重复的发生，我们引入了重复数据消除机制，以下是一个简单的数据消除机制的实现逻辑：</p><p>当通知事件第一次到达时，我们通过检查事件ID来检查它以前是否被查看过，如果它以前被查看过，它将被丢弃；否则，我们将发送通知。</p><h4 id="additional-compnents-and-considerations"><a class="markdownIt-Anchor" href="#additional-compnents-and-considerations"></a> Additional compnents and considerations</h4><p>这里我们讨论通知系统的其它组件，包括模板重用，通知设置、事件跟踪、系统监控和速率限制等。</p><p><strong>Notification template</strong></p><p>一个大型通知系统每天发送数百万个通知，其中许多通知采用类似的格式。引入通知模板可以快速构建一个通知，以避免从头开始构建每个通知。</p><p><strong>Notification setting</strong></p><p>用户通常每天都会收到很多通知，他们很容易因此感到不知所措。</p><p>为此，许多网站和应用都为用户提供了对通知设置的细粒度控制，比如设计一个通知设置表，包含以下字段：</p><pre class="language-sql" data-language="sql"><code class="language-sql">user_id bigInt  # 用户idchannel varchar # 频道类型：SMS或邮件或手机推送opt_in boolean  # 用户是否接收此类通知</code></pre><p>在向用户发送任何通知之前，首先检查用户是否已选择接收此类通知。</p><p><strong>Rating limiting</strong></p><p>速率限制：为了避免用户收到过多通知，我们可以限制用户在一定时间内可以接收通知的数量。这一点很重要，因为如果我们发送得太频繁，用户很可能会完全关闭通知权限。</p><p><strong>Security in push notifications</strong></p><p>对于iOS或Andriod应用程序，appKey和appSecret用户保护推送通知API。只有经过身份验证的客户端才允许使用我们的API发送推送通知。</p><p><strong>Monitor queued notifications</strong></p><p>系统需要监控的关键指标之一是消息队列中的通知总数，如果这个数量很大，则说明Worker处理通知事件的速度不够快，需要部署更多的Worker以避免消息延迟。</p><p><strong>Events tracking</strong></p><p>通知系统中的一些指标，如打开率，点击率和参与度等，对于理解用户行为非常重要。分析服务需要事件跟踪(Events tracking)来实现，下图显示了出于分析目的可能被跟踪的事件示例：</p><p><img src="/img/design/ch10/10-13.png" alt="" /></p><h4 id="update-design"><a class="markdownIt-Anchor" href="#update-design"></a> Update design</h4><p>把design deep dive中提到的组件加上，更新后的通知系统设计图如下所示：</p><p><img src="/img/design/ch10/10-14.png" alt="" /></p><ul><li>通知服务器添加了两个关键功能：身份验证(authentication)和速率限制(Rate-Limiting)</li><li>我们还添加了一个重试机制来处理通知失败。如果系统未能发送通知，它们将被放回消息队列中，Worker将重置预定义的次数。</li><li>此外，通知模板提供了一致且高效的通知创建过程</li><li>最后，增加了监测和跟踪系统，用户系统健康检查和未来改进</li></ul><h3 id="step4warm-up"><a class="markdownIt-Anchor" href="#step4warm-up"></a> Step4：Warm up</h3><p>一点文字总结，没什么看的。</p>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统设计-Ch9-设计一个网络爬虫</title>
    <link href="/2022/05/09/System-Design/20230509-SysDesign-Ch9-Design%20A%20Web%20Crawler/"/>
    <url>/2022/05/09/System-Design/20230509-SysDesign-Ch9-Design%20A%20Web%20Crawler/</url>
    
    <content type="html"><![CDATA[<h2 id="设计一个网络爬虫"><a class="markdownIt-Anchor" href="#设计一个网络爬虫"></a> 设计一个网络爬虫</h2><h3 id="step1understand-the-problem-and-establish-design-scope"><a class="markdownIt-Anchor" href="#step1understand-the-problem-and-establish-design-scope"></a> Step1：Understand the problem and establish design scope</h3><p>对于”设计一个网络爬虫“这个系统设计话题，我们可以向面试官提出以下问题：</p><h3 id="step2propose-high-level-design-and-get-buy-in"><a class="markdownIt-Anchor" href="#step2propose-high-level-design-and-get-buy-in"></a> Step2：Propose high-level design and get buy-in</h3><h3 id="step3design-deep-dive"><a class="markdownIt-Anchor" href="#step3design-deep-dive"></a> Step3：Design deep dive</h3><h3 id="step4warm-up"><a class="markdownIt-Anchor" href="#step4warm-up"></a> Step4：Warm up</h3>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-05-09-组会</title>
    <link href="/2022/05/08/Seminar/20220509-%E7%BB%84%E4%BC%9A/"/>
    <url>/2022/05/08/Seminar/20220509-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="2022-05-09-组会"><a class="markdownIt-Anchor" href="#2022-05-09-组会"></a> 2022-05-09-组会</h1><h2 id="1redet"><a class="markdownIt-Anchor" href="#1redet"></a> 1.ReDet</h2><p>由于显示结果的代码实在调不通，所以先搁置。</p><h2 id="2-论文阅读"><a class="markdownIt-Anchor" href="#2-论文阅读"></a> 2. 论文阅读</h2><p>看了一篇论文Rotated Faster RCNN</p><p>感觉</p><h2 id="3-mmrotate框架"><a class="markdownIt-Anchor" href="#3-mmrotate框架"></a> 3. MMRotate框架</h2><p>前些天刷知乎，发现了一个4月份刚刚开源的旋转框检测框架。 基于Pytorch</p><p>MMRotate提供了目前旋转框检测任务最先进的算法模型，包括ReDet、 Oriented R-CNN等.</p><p>目前刚安装配置好环境，还没有实质性的进展。</p><p>后续打算边看文档学习该框架的使用，边写文章记录一些使用心得。</p>]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统设计-Ch8-设计一个短链接生成器</title>
    <link href="/2022/05/08/System-Design/20230508-SysDesign-Ch8-Design%20A%20URL%20Shortener/"/>
    <url>/2022/05/08/System-Design/20230508-SysDesign-Ch8-Design%20A%20URL%20Shortener/</url>
    
    <content type="html"><![CDATA[<h2 id="设计一个短链接生成器"><a class="markdownIt-Anchor" href="#设计一个短链接生成器"></a> 设计一个短链接生成器</h2><h3 id="step1understand-the-problem-and-establish-design-scope"><a class="markdownIt-Anchor" href="#step1understand-the-problem-and-establish-design-scope"></a> Step1：Understand the problem and establish design scope</h3><p>对于”设计一个短链接生成器“这个系统设计话题，我们可以向面试官提出以下问题：</p><ul><li><p>Q：我见过，是类似于B站那种<code>b23.tv/xxxxxx</code>的链接，然后重定向到<code>bilibili.com/xxxx</code>的？</p><blockquote><p>A：是的</p></blockquote></li><li><p>Q：短链接可以删除或者更新吗？</p><blockquote><p>A：为了简单起见，生成后的短链接不能被主动删除或更新，但会有过期时间</p></blockquote></li><li><p>Q：短链接的长度有要求吗？</p><blockquote><p>A：域名后的字串长度尽可能短</p></blockquote></li><li><p>Q：域名后的字串有要求吗，纯数字或是纯字母，还是可以混合？</p><blockquote><p>A：可以是数字(0 ~ 9)和大小写字母(a~z, A~Z)的组合</p></blockquote></li><li><p>Q：短链接对长链接的重定向是永久的还是临时的？</p><blockquote><p>A：临时的</p></blockquote></li><li><p>Q：有没有性能要求？比如每天支持生成多少个URL短链接？</p><blockquote><p>A：每天生成一亿个url短链接</p></blockquote></li></ul><h3 id="step2propose-high-level-design-and-get-buy-in"><a class="markdownIt-Anchor" href="#step2propose-high-level-design-and-get-buy-in"></a> Step2：Propose high-level design and get buy-in</h3><h4 id="api-endpoints"><a class="markdownIt-Anchor" href="#api-endpoints"></a> API Endpoints</h4><p>通过上述分析，这个URL短链接生成器系统需要提供以下两个API：</p><ol><li><p><code>URLShorten(string long_URL)</code></p><p>Post请求，接受一个长链接参数，判断该长连接是否有效（格式是否有效）</p><ul><li>无效则返回提示界面，有效则生成短链接并返回</li></ul></li><li><p><code>URLRedirect(string short_URL)</code></p><p>Get请求，接收一个短链接参数，判断该短链接是否有效（格式是否有效，是否生成过，是否过期）:</p><ul><li>无效则返回提示界面，有效则重定向到对应长链接</li></ul></li></ol><p>本质上，我们需要做的就是找一个方式将long_URL转换成short_URL（<code>long_URL-&gt;short_URL</code>），然后把<code>&lt;short_URL， long_URL&gt;</code>这个键值对映射存储到一个非关系型key-value数据库中，简化的数据库表设计如下图所示：</p><p><img src="/img/design/ch8/8-4.png" alt="" /></p><h4 id="url-shortening"><a class="markdownIt-Anchor" href="#url-shortening"></a> URL Shortening</h4><p>将long_URL转换成short_URL，这里介绍哈希+冲突解决和Base62编码两种方式。</p><h5 id="hash-collision-resolution哈希-冲突解决"><a class="markdownIt-Anchor" href="#hash-collision-resolution哈希-冲突解决"></a> Hash + collision resolution(哈希 + 冲突解决)</h5><p>为了将long_URL转换为7位的字符串，我们可以用一些常见的Hash函数（如CRC32、MD5、SHA-1）来生成hashValue，然后取hashValue的前面7位：</p><p><img src="/img/design/ch8/8-2.png" alt="" /></p><p>然而，只取前面7位这样做避免不了冲突的，为了避免冲突，我们可以使用<strong>再哈希</strong>：</p><p>具体而言，就是当出现冲突后，给long_URL加上一个预设的字符串(predefined string)，然后重新输入到hash函数中生成hash值，如下图所示：</p><p><img src="/img/design/ch8/8-5.png" alt="" /></p><p>这个方法确实可以避免碰撞，然而，每次哈希都要查询数据库中是否已经存在short_URL是非常昂贵的。</p><blockquote><p>如果一定要用上述方法，布隆过滤器(bloom filter)是一种高效的空间概率技术，可以提高性能。</p></blockquote><h5 id="base-62-conversionbase62转换"><a class="markdownIt-Anchor" href="#base-62-conversionbase62转换"></a> Base 62 Conversion(Base62转换)</h5><p>Base62编码其实很简单，就是62进制，最大能表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><msup><mn>2</mn><mn>7</mn></msup><mo>=</mo><mn>3521614606208</mn></mrow><annotation encoding="application/x-tex">62^7=3521614606208</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">5</span><span class="mord">2</span><span class="mord">1</span><span class="mord">6</span><span class="mord">1</span><span class="mord">4</span><span class="mord">6</span><span class="mord">0</span><span class="mord">6</span><span class="mord">2</span><span class="mord">0</span><span class="mord">8</span></span></span></span>(约3521亿)个网址如下所示：</p><pre class="language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 62进制 &#x3D; 10个数字0-9 + 26个大写字母A-Z + 26个小写字母A-Zprivate static String chars &#x3D;  &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;</code></pre><p>其思想就是说我们抛开long_URL，把目光转向数据库ID，把10进制的数据库ID转为62进制，来作为shory_URL的字符串，其工作原理就是用辗转相除法，如下图所示：</p><p><img src="/img/design/ch8/8-6.png" alt="" /></p><p>数据库ID是11157,转为62进制变成2TX,那么短链接就是<code>https://tinyurl.com/2TX</code></p><p>那么问题就转变为保证数据库ID唯一----这不就是分布式ID生成器吗？（因此可以参考第7章）</p><hr /><p>下面这张表是对上述两种方法的优缺点总结：</p><table><thead><tr><th>Hash + collision resolution</th><th>Base 62 conversion</th></tr></thead><tbody><tr><td>短链接长度固定</td><td>短链接长度不固定</td></tr><tr><td>不需要分布式ID生成器</td><td>依赖于分布式ID生成器</td></tr><tr><td>可能发生碰撞</td><td>不可能发生碰撞，因为ID是唯一的</td></tr><tr><td>找出下一个可用的hashValue可能代价高昂</td><td>找出下一个可用的hashValue很简单，如果设置数据库ID自增1</td></tr></tbody></table><p>综上，我们一般采用Base 62 conversion来生成short_URL.</p><h4 id="url-redirecting"><a class="markdownIt-Anchor" href="#url-redirecting"></a> URL Redirecting</h4><p>由Http协议，URL重定向有两种，301重定向和302重定向:</p><p><code>301 Redirect</code>：301重定向表示短链接对长链接的重定向是<strong>永久</strong>的，因此浏览器会缓存这个映射，下次在搜索栏输入短链接不会调用<code>URLRedirect(string short_URL)</code>这个API，而是直接根据缓存重定向到长链接。</p><p><code>302 Redirect</code>：302重定向表示短链接对长链接的重定向是<strong>临时</strong>的，因此浏览器不会缓存这个映射，每次在搜索栏输入短链接都会调用<code>URLRedirect(string short_URL)</code>这个API，然后由服务器返回对应长链接</p><p>一般来说，302重定向是更好的选择，因为它能够更容易的跟踪点击率和点击源。</p><h3 id="step3design-deep-dive"><a class="markdownIt-Anchor" href="#step3design-deep-dive"></a> Step3：Design deep dive</h3><h4 id="url-shortening-deep-dive"><a class="markdownIt-Anchor" href="#url-shortening-deep-dive"></a> URL Shortening deep dive</h4><p>URL缩短的流程如下：</p><p><img src="/img/design/ch8/8-7.png" alt="" /></p><ol><li>用户输入long_URL</li><li>系统检查long_URL是否在数据库中（也可以不检查，直接为相同的长链接生成新的短链接）</li><li>如果存在数据库中，则直接返回数据库中的short_URL</li><li>如果不存在数据库中，则生成一个新的unique 数据库ID。</li><li>使用base62编码将数据库ID转换为short_URL</li><li>使用ID，short_URL，long_URL创建一个新的数据库行，然后存储。</li></ol><h4 id="url-redirecting-deep-dive"><a class="markdownIt-Anchor" href="#url-redirecting-deep-dive"></a> URL Redirecting deep dive</h4><p>URL重定向的流程如下：</p><p><img src="/img/design/ch8/8-8.png" alt="" /></p><ol><li>用户输入short_URL</li><li>负载均衡器将请求转发到web服务器</li><li>如果缓存(Cache)中已经存在shortURL，则直接返回longURL</li><li>如果缓存(Cache)中不存在shortURL，则在数据库中寻找，如果数据库中同样不存在，则很可能是用户输入了无效的shortURL</li><li>返回长链接给用户。</li></ol><h3 id="step4warm-up"><a class="markdownIt-Anchor" href="#step4warm-up"></a> Step4：Warm up</h3><h4 id="如何设计short_url过期"><a class="markdownIt-Anchor" href="#如何设计short_url过期"></a> 如何设计short_URL过期？</h4><p>以下引用一个知乎的回答：</p><p>这里很容易陷入到“我要怎么把一个长网址转换成一个短网址=&gt;映射=&gt;设计一个hash函数”这样一个误区当中。<br />如果真要实现这样一个hash算法，那必然是会出现碰撞的，也就是多个长地址转成了同一个短地址，</p><p>正确答案是参考<strong>分布式ID生成策略</strong>，直接使用数据库的自增索引作为短网址发号。</p><p>我们并不需要在存储中用62进制，用10进制就好了(10进制也方便统计已使用的短网址个数）。可以在后端做一个10进制到62进制的转换。</p><p>我们通过数据库索引自增，实际上是把短网址作为key，长地址作为value，短对长的一种kv存储映射。<br />如果不判断某个长网址被转换过，直接递增，会造成多个短网址对应一个长网址。</p><p>那我再建立长对短的kv存储映射不行吗？可以，但是长对短的kv存储浪费大量空间</p><p>可以用一台Redis缓存服务器，存储的不是短网址-&gt;长网址，而是长网址-&gt;短网址，保存“最近”生成的长对短的一个对应关系。注意是“最近”，也就是说，我<strong>并不保存全量的长对短的关系，而只保存最近的</strong>。比如采用一小时过期的机制来实现LRU淘汰。</p><p>长转短的流程变成这样：</p><p>1 在这个Redis缓存服务器的“LRU”表中查看一下，看长地址有没有对应的短地址</p><p>​1.1 有就直接返回短网址，并且将这个key-value对的过期时间再延长成一小时</p><p>​1.2 如果没有，就通过发号器生成一个短网址，并且将这个“最近”表中，过期时间为1小时</p><p>这样也同时解决了过期策略。</p><h3 id="ref"><a class="markdownIt-Anchor" href="#ref"></a> Ref</h3><style>table{    font-size: 13px;}table th:first-of-type {    font-size: 15px;    width: 15%;}table th:nth-of-type(2) {    font-size: 15px;    width: 15%;}table th:nth-of-type(3) {    font-size: 15px;    width: 15%;}table th:nth-of-type(4) {    font-size: 15px;    width: 15%;}table th:nth-of-type(5) {    font-size: 15px;    width: 15%;}table th:nth-of-type(6) {    font-size: 15px;    width: 25%;}</style>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统设计-Ch7-设计一个分布式ID生成器</title>
    <link href="/2022/05/07/System-Design/20230507-SysDesign-Ch7-Design%20A%20Unique%20ID%20Generator%20In%20Distributed%20Systems/"/>
    <url>/2022/05/07/System-Design/20230507-SysDesign-Ch7-Design%20A%20Unique%20ID%20Generator%20In%20Distributed%20Systems/</url>
    
    <content type="html"><![CDATA[<h2 id="设计一个分布式id生成器"><a class="markdownIt-Anchor" href="#设计一个分布式id生成器"></a> 设计一个分布式ID生成器</h2><h3 id="step1understand-the-problem-and-establish-design-scope"><a class="markdownIt-Anchor" href="#step1understand-the-problem-and-establish-design-scope"></a> Step1：Understand the problem and establish design scope</h3><p>对于”设计一个分布式ID生成器“这个系统设计话题，我们可以向面试官提出以下问题：</p><ul><li><p>Q：生成的ID是要保证是唯一的吗？</p><blockquote><p>A：ID必须是唯一的</p></blockquote></li><li><p>Q：生成的ID必须要是数值吗？ 要求可排序吗？</p><blockquote><p>A：是的，要求是数值，要求晚创建的ID比早创建的ID大（即按日期排序）</p></blockquote></li><li><p>Q：对于每个新的记录，ID是否递增1？</p><blockquote><p>A：不一定只递增1，随创建时间而定</p></blockquote></li><li><p>Q：ID的长度有没有要求？</p><blockquote><p>A：64位</p></blockquote></li><li><p>Q：系统最多支持每秒钟生成多少个ID？</p><blockquote><p>A：随使用场景可调节的，你可以假设每秒生成1000个ID</p></blockquote></li></ul><p>根据以上提问和回答，对于设计分布式ID生成器这个问题，我们可以总结要求如下：</p><ul><li>ID必须是唯一的</li><li>ID仅为数值</li><li>ID适合64位</li><li>ID按生成日期排序</li><li>系统具备每秒生成1000个唯一ID的能力，并且可调节</li></ul><h3 id="step2propose-high-level-design-and-get-buy-in"><a class="markdownIt-Anchor" href="#step2propose-high-level-design-and-get-buy-in"></a> Step2：Propose high-level design and get buy-in</h3><h4 id="uuid"><a class="markdownIt-Anchor" href="#uuid"></a> UUID</h4><p>UUID（Universally Unique Identifier，通用唯一标识码），看名字就知道，是一类通用的唯一标识码算法。</p><p>UUID 的标准形式为，以连字号分为五段，形式为8-4-4-4-12的 32 个十六进制数（128位）组成的字符串，例如：<br /><code>467e8542-2275-4163-95d6-7adc205580a9</code>。</p><p>为什么说UUID是一类算法呢，因为其基于使用场景的不同，有不同的版本，到目前为止业界一共有5种方式生成UUID（详情请见<a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique IDentifier (UUID) URN Namespace</a>]），这里只简单介绍最常见的：<br />基于时间的 UUID：主要依赖当前的时间戳和机器 mac 地址生成UUID，基本可以保证全球唯一性。</p><p>优点：</p><ul><li><p>生成性能高，由于是本地生成，没有网络消耗（无中心认证网络交互）。</p></li><li><p>自主性：在分布式环境下，UUID可以不依赖中心认证即可自动生成全局唯一ID</p></li></ul><p>缺点：</p><ul><li>不易存储：16字节128位过长，不适合作为DB主键（效率）</li><li>不安全：基于时间的 UUID 可能会暴露机器的mac 地址和ID的生成时间</li><li>不适用于实际的业务需求：如果用作订单号的UID生成，UUID这样的字符串看不出和订单相关的有用信息</li></ul><h4 id="auto_increment"><a class="markdownIt-Anchor" href="#auto_increment"></a> auto_increment</h4><p>常见的关系型数据库一般都带有数据库字段自增的特性，如：</p><ul><li>MySQL，AUTO_INCREMENT 特性</li><li>PostgresSQL，SEQUENCE 特性</li><li>Oracle，SEQUENCE 特性</li></ul><p>这些数据库自增ID的方案，都支持设置<code>初始值</code>以及<code>自增步长</code></p><p>例如，flicker的<a href="https://code.flickr.net/2010/02/08/ticket-servers-distributed-unique-primary-keys-on-the-cheap/">这篇文章</a>所介绍的，他仅使用了两台MySQL服务器，就实现了分布式自增，原理如下：</p><p><img src="/img/design/ch7/7-2.png" alt="" /></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">TicketServer1:auto-increment-increment &#x3D; 2   # 自增步长 2auto-increment-offset &#x3D; 1      # 初始值 1TicketServer2:auto-increment-increment &#x3D; 2   # 自增步长 2auto-increment-offset &#x3D; 2      # 初始值 2# TicketServer1只会生成UID： 1 3 5 7 9.....# TicketServer2只会生成UID： 2 4 6 8 10.....</code></pre><p>不难发现只要保证<strong>SQL服务器集群的数量 == 自增步长</strong>，就能够保证数据库中的ID是全局唯一的。</p><p><img src="/img/design/ch7/ex-1.png" alt="" /></p><p>虽然这种方案不是非常优雅，但是简单有效work well。</p><p>优点：</p><ul><li>生成性能高，具有全局唯一性，不依赖中心认证</li><li>ID单调递增，数值类型查询速度快</li></ul><p>缺点：</p><ul><li>不利于扩展：如果后续需要增加新的SQL服务器，需要修改所有其它SQL服务器实例的<code>初始值</code>和<code>步长</code>配置<br />而且需要扩容的数量或次数越多，配置方案越复杂，<strong>后期维护的噩梦</strong></li></ul><h4 id="twitter-snowflake"><a class="markdownIt-Anchor" href="#twitter-snowflake"></a> Twitter Snowflake</h4><p><a href="https://github.com/twitter-archive/snowflake">snowflake</a>是一种以划分命名空间（UUID也算，由于比较常见，所以单独分析）来生成ID的一种算法，这种方案把64-bit分别划分成多段，分开来标示机器、时间等，比如在snowflake中的64-bit分别表示如下图所示：</p><p><img src="/img/design/ch7/7-5.png" alt="" /></p><p>最高位不用，永远为0，其余三组bit占位均可浮动，看具体的业务需求而定。<br />默认情况下：</p><ul><li>41-bit的时间戳可以表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mi>L</mi><mo>&lt;</mo><mo>&lt;</mo><mn>41</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mn>1000</mn><mi>L</mi><mo>∗</mo><mn>3600</mn><mo>∗</mo><mn>24</mn><mo>∗</mo><mn>365</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1L&lt;&lt;41)/(1000L*3600*24*365)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">6</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord">6</span><span class="mord">5</span><span class="mclose">)</span></span></span></span>=69年的时间范围。</li><li>5-bit的数据中心id可以支持32个数据中心。</li><li>5-bit的工作机器id可以支持32台服务器（因此总共32 * 32 = 1024个服务器）。</li><li>12-bit序列号支持1毫秒（一个时间戳）产生4096个自增序列id。</li></ul><p>优点：</p><ul><li>毫秒数在高位，自增序列在低位，整个ID都是趋势递增的，满足时间粗略有序的要求。</li><li>不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的。</li><li>可以根据自身业务特性分配bit位，非常灵活。</li></ul><h3 id="step3design-deep-dive"><a class="markdownIt-Anchor" href="#step3design-deep-dive"></a> Step3：Design deep dive</h3><p>最优的方案是基于Snowflake算法，即雪花算法。优缺点都总结在上面，这里就不再赘述</p><h3 id="step4warm-up"><a class="markdownIt-Anchor" href="#step4warm-up"></a> Step4：Warm up</h3><p>下面介绍一些Snowflake算法的拓展，供读者参考：</p><h4 id="美团leaf"><a class="markdownIt-Anchor" href="#美团leaf"></a> 美团Leaf</h4><h5 id="leaf-segment"><a class="markdownIt-Anchor" href="#leaf-segment"></a> Leaf-segment</h5><p>号段模式是对直接用数据库自增 ID 充当分布式 ID 的一种优化，减少对数据库的访问频率。<br />相当于新增了一片缓存用于存放ID，每次从数据库批量的获取自增 ID，每次获取一个seg(step大小)号段的值。</p><pre class="language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">+-------------+--------------+------+-----+-------------------+-----------------------------+| Field       | Type         | Null | Key | Default           | Extra                       |+-------------+--------------+------+-----+-------------------+-----------------------------+| biz_tag     | varchar(128) | NO   | PRI |                   |                             || max_id      | bigint(20)   | NO   |     | 1                 |                             || step        | int(11)      | NO   |     | NULL              |                             || desc        | varchar(256) | YES  |     | NULL              |                             || update_time | timestamp    | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |+-------------+--------------+------+-----+-------------------+-----------------------------+</code></pre><p>字段说明：</p><ul><li>biz_tag：用来区分业务</li><li>max_id：表示该biz_tag目前所被分配的ID号段的最大值</li><li>step：表示每次分配的Segment号段长度</li></ul><p><img src="/img/design/ch7/ex-2.png" alt="" /></p><p>Leaf-server 中缓存的号段耗尽之后再去数据库获取新的号段，可以大大地减轻数据库的压力。<br />获取新段号：对 max_id 字段做一次 update 操作，update max_id = max_id + step，update 成功则说明新号段获取成功，新的号段范围为(max_id, max_id + step]。</p><p><strong>双buffer优化</strong></p><p>Leaf-server 中采用了异步更新的策略，通过双 buffer 的方式存储号段，如下图所示：</p><p><img src="/img/design/ch7/ex-3.png" alt="" /></p><p>当前号段消费到一定程度时，会开启一个新的线程从db中获取新的号段放到另一个segment buffer;<br />当前号段消费完成后，进行切换操作：修改pos指向另一个号段并继续消费，并当前号段写入到数据库中。</p><p>通过这样双buffer的机制可以<strong>保证DB取号段的过程做到无阻塞</strong>.可以很大程度上的降低系统的TP999指标</p><p>优点：</p><ul><li><p>Leaf服务可以很方便的线性扩展，性能完全能够支撑大多数业务场景。</p></li><li><p>ID号码是趋势递增的8byte的64位数字，满足上述数据库存储的主键要求</p></li><li><p>数据库压力小：读写数据库的频率从1减小到了1/step</p></li><li><p>容灾性高：Leaf服务内部有号段缓存，即使DB宕机，短时间内Leaf仍能正常对外提供服务。</p></li></ul><p>缺点：</p><ul><li>ID号码不够随机，能够泄露发号数量的信息，不太安全。</li></ul><h5 id="leaf-snowflake"><a class="markdownIt-Anchor" href="#leaf-snowflake"></a> Leaf-Snowflake</h5><p>Leaf-snowflake方案完全沿用snowflake方案的bit位设计，即使用“1+41+10+12”的方式组装ID号。</p><p>但是对于10-bit的WorkID的配置，由于Leaf服务规模较大，使用Zookeeper持久顺序节点的特性自动对snowflake节点配置wokerID。</p><p><img src="/img/design/ch7/ex-4.png" alt="" /></p><p>Leaf-snowflake 方案在处理时钟回拨问题的策略如下所示：</p><p>1）服务启动时</p><ul><li>在服务启动时，首先检查自己是否写过 zookeeper leaf_forever 节点；</li><li>如果写过，则用自身系统时间与 leaf_forever/${self}节点记录时间做比较，若小于则认为机器时间发生了大步长回拨，服务启动失败并告警；</li><li>如果没有写过，直接创建持久节点 leaf_forever/${self}，并写入自身系统时间；</li><li>然后取 leaf_temporary 下的所有临时节点(所有运行中的 Leaf-snowflake 节点)的服务 IP：Port，然后通过 RPC 请求得到所有节点的系统时间，计算 sum(time)/nodeSize；</li><li>如果若 abs( 系统时间-sum(time)/nodeSize ) &lt; 阈值，认为当前系统时间准确，正常启动服务，同时写临时节点 leaf_temporary/${self} 维持租约；否则认为本机系统时间发生大步长偏移，启动失败并报警；</li><li>每隔一段时间(3s)上报自身系统时间写入 leaf_forever/${self}。</li></ul><p>2）服务运行时</p><ul><li>会检查时钟回拨时间是否小于 5ms，若时钟回拨时间小于等于 5ms，等待时钟回拨时间后，重新产生新的 ID；若时钟回拨时间大于 5ms，直接抛异常给到业务侧。</li></ul><h4 id="基于多时间线改进的雪花算法"><a class="markdownIt-Anchor" href="#基于多时间线改进的雪花算法"></a> 基于多时间线改进的雪花算法</h4><p>基于多时间线改进的雪花算法在 snowflake 基础上增加了时间线部分（1~2 位），可同时支持 2~4 条时间线并行。其对雪花算法的 bit 位的分配做了微调，如下图所示：</p><p><img src="/img/design/ch7/ex-5.png" alt="" /></p><p>基于多时间线改进的雪花算法生成 ID 过程如下所示：</p><ul><li>初始时，所有时间线进度均为基准时间，随机选定一条时间线作为当前时间线；</li><li>在当前时间线上生成 ID，同时推进当前时间线进度；</li><li>一旦发生时钟回退，且回退距离小于一定阈值，等待时间推进直到回退前的时间，会到步骤 2 继续生成 ID；</li><li>如果回退距离大于阈值，暂停当前时间线进度，选择一条合适的时间线（进度&lt;当前时间）并切换到该时间线，回到步骤 2 继续生成 ID。如果找不到合适的时间线，报错返回。</li></ul><hr /><p>总体而言，现在主流的分布式UID生成主要分为以下两种方案：</p><ol><li>基于数据库字段自增的号段模式</li><li>基于NameSpace的Snowflake算法</li></ol><p>针对其各自衍生出的问题，上述一些企业提出了自己的改进策略：<br />号段模式（提高数据库读写效率）+双buffer异步更新（实现取号段无阻塞）<br />ZooKeeper持久化或多时间线标志位解决Snowflake的时钟回拨问题</p><h3 id="ref"><a class="markdownIt-Anchor" href="#ref"></a> Ref</h3><p>【1】<a href="https://soulmachine.gitbooks.io/system-design/content/cn/distributed-id-generator.html">https://soulmachine.gitbooks.io/system-design/content/cn/distributed-id-generator.html</a></p><p>【2】<a href="https://zhuanlan.zhihu.com/p/534893180">https://zhuanlan.zhihu.com/p/534893180</a></p><p>【3】<a href="https://zhuanlan.zhihu.com/p/152179727">https://zhuanlan.zhihu.com/p/152179727</a></p><style>table{    font-size: 13px;}table th:first-of-type {    font-size: 15px;    width: 15%;}table th:nth-of-type(2) {    font-size: 15px;    width: 15%;}table th:nth-of-type(3) {    font-size: 15px;    width: 15%;}table th:nth-of-type(4) {    font-size: 15px;    width: 15%;}table th:nth-of-type(5) {    font-size: 15px;    width: 15%;}table th:nth-of-type(6) {    font-size: 15px;    width: 25%;}</style>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统设计-Ch6-设计一个Key-Value存储引擎</title>
    <link href="/2022/05/06/System-Design/20230506-SysDesign-Ch6-Design%20A%20Key-Value%20Stroe/"/>
    <url>/2022/05/06/System-Design/20230506-SysDesign-Ch6-Design%20A%20Key-Value%20Stroe/</url>
    
    <content type="html"><![CDATA[<h2 id="设计一个key-value存储引擎"><a class="markdownIt-Anchor" href="#设计一个key-value存储引擎"></a> 设计一个Key-Value存储引擎</h2><p>首先讲两个术语，<strong>数据库</strong>和<strong>存储引擎</strong>。数据库往往是一个比较丰富完整的系统, 提供了SQL查询语言，事务和水平扩展等支持。而存储引擎则是小而精, 纯粹专注于单机的读/写。一般来说, 数据库底层往往会使用某种存储引擎。因此二者其实是包含关系，实现一个数据库之前首先要实现一个存储引擎。</p><p>在本章中，你被要求设计一个Key-Value存储引擎，其支持以下基本操作：</p><ul><li><code>put(key, value)</code>，插入一个键值对</li><li><code>get(key)</code>，读取一个键所关联的值</li></ul><p>没有完美的设计，每种设计一方面要在<strong>读、写、内存使用</strong>中做出权衡，另一方面要在<strong>一致性和可用性</strong>之间做出权衡。在本章中，我们设计一个常见的key-value存储引擎，该存储引擎包含以下特征：</p><ul><li><p>键值对的大小很小，小于10KB</p></li><li><p>具备存储大数据的能力</p></li><li><p>高可用性：即使在出现故障时，系统也能很快响应</p></li><li><p>高可扩展性：系统可以扩展以支持多台服务器分布式运作</p></li><li><p>自动扩展：服务器的添加/删除应根据流量自动调整</p></li><li><p>可调一致性（最终一致性）</p><blockquote><p>最终一致性：表示如果有足够的时间，所有更新都会传播，从而最终保证所有副本都是一致的</p></blockquote></li><li><p>低延迟</p></li></ul><p>我们从易到难，先讲单服务器存储，在讲分布式存储</p><h3 id="单服务器key-value存储引擎"><a class="markdownIt-Anchor" href="#单服务器key-value存储引擎"></a> 单服务器key-value存储引擎</h3><p>开发一个只运行在一个服务器上的key-value存储引擎很容易。一种很容易想到的方式是直接将键值对存储在哈希表中，即使用unordered_map(c++)这种数据结构，将所有数据都保存在内存当中。</p><p>因为访问内存很快，这种方式读写效率高。但是内存空间是有限制的，很可能无法将所有内容都放进内存。为了在单服务器中容纳更多数据，可以进行两种优化：</p><ul><li>数据压缩</li><li>采用LRU策略，仅将常用数据存储在内存中，其余数据存储在磁盘上</li></ul><p>即使进行了这些优化，单个服务器的内容也容易很快达到其存储容量上限，因此需要分布式存储以支持大数据</p><h3 id="分布式key-value存储引擎"><a class="markdownIt-Anchor" href="#分布式key-value存储引擎"></a> 分布式key-value存储引擎</h3><p>分布式key-value存储引擎也称为分布式哈希表，它将键值对分布在许多服务器上。</p><p>在设计分布式系统时，理解CAP定理(<strong>C</strong>onsistency, <strong>A</strong>vailability, <strong>P</strong>artition Tolerance)是十分重要的。</p><h4 id="cap定理"><a class="markdownIt-Anchor" href="#cap定理"></a> CAP定理</h4><p>在了解CAP定理之前，要先清楚<strong>C</strong>onsistency, <strong>A</strong>vailability, <strong>P</strong>artition Tolerance这三个属性：</p><ul><li><strong>Consistency</strong>（一致性）：一致性意味着所有Client无论连接到哪个Server节点，都能<strong>同时</strong>看到<strong>相同</strong>的数据。</li><li><strong>Availability</strong>（可用性）：可用性意味着任何请求数据的Client都会得到响应，即使某些Server节点宕机。</li><li><strong>Partition Tolerance</strong>（分区容差）：分区容差意味着尽管Server节点之间存在网络分区(分区之间无法相互通信)，系统仍然能继续运作。</li></ul><p>CAP定理指出：必须牺牲三个属性中的其中一个来支撑另外两个属性，如下图所示：</p><p><img src="/img/design/ch6/6-1.png" alt="" /></p><p>现实世界中，由于网络故障是不可避免的，因此必须容忍网络分区，即保证<strong>Partition Tolerance</strong>。<br />因此一个分布式系统要么侧重一致性，要么侧重可用性，必须在这二者之间做出取舍。</p><p>如果我们选择一致性而不是可用性，当其中一个Server无法与其它Server通信（发生网络分区）时，我们必须阻止对其它Server的写入操作，以避免Server之间的数据不一致性。像银行系统通常就要求极高的一致性。</p><p>如果我们选择可用性而不是一致性，当其中一个Server无法与其它Server通信（发生网络分区）时，其它Server会继续接受写入，缺点就是这个Server被读取后会返回过时的数据，直到网络通信恢复使得Server之间数据同步。</p><h4 id="系统组件"><a class="markdownIt-Anchor" href="#系统组件"></a> 系统组件</h4><h5 id="数据分区data-partition"><a class="markdownIt-Anchor" href="#数据分区data-partition"></a> 数据分区(Data Partition)</h5><p>对于大型应用程序，将完整的数据集放在单个服务器中是不可行的。更好的方式是将数据拆成更小的分区，然后将它们存储在多个服务器中，这就是数据分区。对于数据分区有两个挑战：</p><ul><li>将数据均匀分布在多个服务器上</li><li>在添加或删除节点时最大限度地减少数据移动</li></ul><p>第五章介绍的一致性哈希是解决数据分区这个问题的一种很好的技术。</p><h5 id="数据复制data-relication"><a class="markdownIt-Anchor" href="#数据复制data-relication"></a> 数据复制(Data Relication)</h5><p>为了实现高可用性(availability)，必须在N（N是一个可配置参数）台服务器上<strong>异步</strong>复制数据。</p><p>这N台服务器是使用如下逻辑选择的：<br />在密钥(key)映射到哈希环上的某个位置后，从该位置顺时针走，然后选择环上的前N个服务器来存储数据副本。</p><blockquote><p>N个服务器是指N个真实节点服务器，如果顺时针上有多个虚拟节点指向同一个真实节点，只选择其中第一个</p></blockquote><p>如下图所示，当N=3时，key0在s1, s2, s3处被复制：</p><p><img src="/img/design/ch6/6-5.png" alt="" /></p><h5 id="一致性consistency"><a class="markdownIt-Anchor" href="#一致性consistency"></a> 一致性(Consistency)</h5><p>由于数据是在多个节点上复制的，因此必须跨复制副本进行同步。这里引入仲裁机制</p><ul><li><strong>N</strong> = 副本数</li><li><strong>W</strong> = 写入仲裁数。要使得写入操作成功执行，必须等待直到至少W个副本确认写入操作</li><li><strong>R</strong> = 读取仲裁数。要使得读取操作成功执行，必须等待直到至少R个副本响应读取操作</li></ul><p>N、W、R的配置是延迟和一致性之间的典型折衷：</p><ul><li>如果W = 1 或 R = 1，意味着系统会快速响应读写操作或读操作，因为仲裁者只需要等待来自任一副本的响应</li><li>如果W+R&gt;N，意味着系统具有强一致性，因为W+R&gt;N保证了系统有一个具有最新数据的节点(<strong>读写重叠</strong>)</li></ul><h5 id="不一致解决方案inconsistency-resolution"><a class="markdownIt-Anchor" href="#不一致解决方案inconsistency-resolution"></a> 不一致解决方案(Inconsistency Resolution)</h5><p>首先来看看不一致性是怎么发生的，如下图所示：</p><p><img src="/img/design/ch6/6-7.png" alt="" /></p><p><img src="/img/design/ch6/6-8.png" alt="" /></p><p>简而言之，就是多台Server取出同一数据，并同时更改为不同的值然后回写，此时就发生了冲突。</p><p>为了解决这个问题，我们需要一个能检测冲突并协调冲突的版本控制系统—vector clock。</p><p><strong>Vector Clock</strong></p><p>vector clock，是一个与数据项相关联的[server, version]键值对。</p><p>假设一个vector clock由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mo stretchy="false">[</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>1</mn></msub><mo stretchy="false">]</mo><mo separator="true">,</mo><mo stretchy="false">[</mo><msub><mi>s</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo stretchy="false">]</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mo stretchy="false">[</mo><msub><mi>s</mi><mi>n</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>n</mi></msub><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D([s_1, v_1], [s_2, v_2], ..., [s_n, v_n])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span>是数据项，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是服务器编号，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是版本计数器。那么如果有数据项被写入服务器<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,则系统必须执行以下任务之一：</p><ul><li>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>s</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[s_i, v_i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>存在，增加<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的计数</li><li>否则，创建一个新的条目<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>s</mi><mi>i</mi></msub><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[s_i, 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></li></ul><p><img src="/img/design/ch6/6-9.png" alt="" /></p><p>通过使用vector colck，我们可以很快的检测冲突：</p><ul><li>例如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mo stretchy="false">[</mo><msub><mi>s</mi><mn>0</mn></msub><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mo stretchy="false">[</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D([s_0, 1], [s_1, 2])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mo stretchy="false">[</mo><msub><mi>s</mi><mn>0</mn></msub><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mo stretchy="false">[</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D([s_0, 1], [s_1, 1])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>，前者的<strong>每个</strong>server的版本都<strong>大于等于</strong>后者对应server的版本，因此可以判断出后者是前者的祖先</li><li>例如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mo stretchy="false">[</mo><msub><mi>s</mi><mn>0</mn></msub><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mo stretchy="false">[</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D([s_0, 1], [s_1, 2])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mo stretchy="false">[</mo><msub><mi>s</mi><mn>0</mn></msub><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mo stretchy="false">[</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D([s_0, 2], [s_1, 1])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>，出现<strong>版本相互超越对方</strong>，可以判断出二者是兄弟（存在冲突）</li></ul><p>检测出冲突后，可以设计实现一个冲突解决逻辑。</p><blockquote><p>亚马逊Dynamo就是采用vector clock实现版本控制的。</p></blockquote><h5 id="故障处理handing-failures"><a class="markdownIt-Anchor" href="#故障处理handing-failures"></a> 故障处理(Handing failures)</h5><p>在本小节中，我们首先讨论故障检测的技术，然后我们讨论常见的故障解决策略。</p><p><strong>故障检测</strong></p><p>在分布式系统中，不会因为另一台服务器说某台服务器坏了就相信它是坏的，通常需要两个独立的信号源来标记一台服务器。</p><p>全对全广播(all-to-all ,multicasting)是一种简单的解决方案，如下图所示：</p><p><img src="/img/design/ch6/6-10.png" alt="" /></p><p>但是，当系统中有许多服务器时，这会变得非常低效。</p><p>更好的方案是使用离散的故障检测方法，如八卦协议(gossip protocol)。八卦协议的工作原理如下：</p><ul><li>每个节点都维护一个节点成员列表，其中包含成员ID和心跳计数器</li><li>每个节点周期性地递增自身的心跳计数器</li><li>每个节点周期性地向一组随机节点发送心跳</li><li>一旦节点成功接受到心跳检测信号，其节点成员列表就都会更新为最新信息</li><li>如果心跳没有增加超过预定义的时间段，则该节点视为离线</li></ul><p><img src="/img/design/ch6/6-11.png" alt="" /></p><p>如上图所示，s0的成员列表中有s2，s0注意到s2的心跳计数器长时间未增加，然后s0就把这个消息发送到一组随机节点，一旦其它成员列表也有s2的节点确认了s2的心跳计数器长时间未增加这个消息，则s2被标记为宕机。</p><p><strong>故障</strong></p><h5 id="系统架构图"><a class="markdownIt-Anchor" href="#系统架构图"></a> 系统架构图</h5><p>现在我们将重心转移到key-value存储引擎的架构图上：</p><p><img src="/img/design/ch6/6-17.png" alt="" /></p><p>如上图所示，该系统架构的特点如下：</p><ul><li>客户端(client)通过<code>get (key)</code>和<code>put(key, value)</code>这两个API来与key-value存储引擎交互</li><li>coordinator是一个在client和key-value存储引擎之间充当代理的节点</li><li>节点使用一致性哈希分布在一个哈希环上</li><li>数据在多个节点上进行复制</li><li>不存在单点故障，因为每个节点都有相同的责任，并且每个节点都可以执行多个任务</li></ul><p><img src="/img/design/ch6/6-18.png" alt="" /></p><h5 id="写入路径"><a class="markdownIt-Anchor" href="#写入路径"></a> 写入路径</h5><p>缓存满了或达到预设阈值时写入磁盘</p><h5 id="读取路径"><a class="markdownIt-Anchor" href="#读取路径"></a> 读取路径</h5><p>类似redis，缓存命中则不从磁盘读取</p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>本章涵盖了许多概念和技术，下表汇总了用于分布式key-value存储引擎的功能和相应技术：</p><table><thead><tr><th>目标/问题</th><th>技术</th></tr></thead><tbody><tr><td>使系统具备存储大数据的能力</td><td>使用一致性哈希</td></tr><tr><td>高可用读取</td><td>数据复制</td></tr><tr><td>高可用写入</td><td>使用vector clock检测冲突和解决冲突</td></tr><tr><td>数据复制</td><td>一致性哈希</td></tr><tr><td>自动扩展</td><td>一致性哈希</td></tr><tr><td>Heterogeneity</td><td>一致性哈希</td></tr><tr><td>可调一致性</td><td>仲裁机制</td></tr><tr><td>处理临时性故障</td><td>草率仲裁&amp;提示切换</td></tr><tr><td>处理永久性故障</td><td>Merkle tree</td></tr><tr><td>处理数据中心停电</td><td>交叉数据中心复制</td></tr></tbody></table><style>table{    font-size: 13px;}table th:first-of-type {    font-size: 15px;    width: 15%;}table th:nth-of-type(2) {    font-size: 15px;    width: 15%;}table th:nth-of-type(3) {    font-size: 15px;    width: 15%;}table th:nth-of-type(4) {    font-size: 15px;    width: 15%;}table th:nth-of-type(5) {    font-size: 15px;    width: 15%;}table th:nth-of-type(6) {    font-size: 15px;    width: 25%;}</style>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统设计-Ch5-设计一致性哈希</title>
    <link href="/2022/05/05/System-Design/20230505-SysDesign-Ch5-Design%20Consistent%20Hasing/"/>
    <url>/2022/05/05/System-Design/20230505-SysDesign-Ch5-Design%20Consistent%20Hasing/</url>
    
    <content type="html"><![CDATA[<h2 id="设计一致性哈希"><a class="markdownIt-Anchor" href="#设计一致性哈希"></a> 设计一致性哈希</h2><p>为了实现水平扩展，在服务器之间高效、均匀发分配请求是非常重要的。一致性哈希就是负载均衡策略的一种常见算法。但首先，让我们来了解下普通哈希算法在应用到水平扩展时会出现的问题：</p><h3 id="再哈希问题the-rehashing-problem"><a class="markdownIt-Anchor" href="#再哈希问题the-rehashing-problem"></a> 再哈希问题(The Rehashing Problem)</h3><p>如果你有N台缓存服务器，一个实现负载均衡最常见的哈希函数就是对N取余：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>I</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mo>=</mo><mi>h</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo stretchy="false">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">)</mo><mtext> </mtext><mi mathvariant="normal">%</mi><mtext> </mtext><mi>N</mi></mrow><annotation encoding="application/x-tex">serverIndex = hash(key)\ \% \ N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord">%</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></span></p><p>这里N是缓存服务器节点的数量。</p><p>下表简单显示了当有4台缓存服务器时，这个哈希函数是如何工作的：</p><table><thead><tr><th style="text-align:left">key</th><th style="text-align:left">hash</th><th style="text-align:left">hash % N(N = 4)</th></tr></thead><tbody><tr><td style="text-align:left">key0</td><td style="text-align:left">18358617</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">key1</td><td style="text-align:left">26143584</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">key2</td><td style="text-align:left">18131146</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">key3</td><td style="text-align:left">35863496</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">key4</td><td style="text-align:left">34085809</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">key5</td><td style="text-align:left">27581703</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">key6</td><td style="text-align:left">38164978</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">key7</td><td style="text-align:left">22530351</td><td style="text-align:left">3</td></tr></tbody></table><p>我们必须计算hash(key) % 4来找到存储key的缓存服务器，比如hash(key0) = 1意味着client必须访问server1才能获取缓存数据，下图展示了此时服务器的key分布情况：</p><p><img src="/img/design/ch5/5-1.png" alt="" /></p><p>如果此时其中一台服务器（server1）宕机，那么此时N == 3，我们再来看看变化：</p><table><thead><tr><th style="text-align:left">key</th><th style="text-align:left">hash</th><th style="text-align:left">hash % N(N = 3)</th></tr></thead><tbody><tr><td style="text-align:left">key0</td><td style="text-align:left">18358617</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">key1</td><td style="text-align:left">26143584</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">key2</td><td style="text-align:left">18131146</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">key3</td><td style="text-align:left">35863496</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">key4</td><td style="text-align:left">34085809</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">key5</td><td style="text-align:left">27581703</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">key6</td><td style="text-align:left">38164978</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">key7</td><td style="text-align:left">22530351</td><td style="text-align:left">0</td></tr></tbody></table><p>同样是刚才的key（hash值不变），但是key重新分布了（<strong>标红表示变化</strong>），这会导致缓存命中效率极低：</p><p><img src="/img/design/ch5/5-2.png" alt="" /></p><p>如果数据变化，就必须把数据做迁移。</p><p>一致性哈希算法就很好地解决了分布式系统在扩容或者缩容时，发生过多的数据迁移的问题。</p><hr /><h3 id="一致性哈希consistent-hashing"><a class="markdownIt-Anchor" href="#一致性哈希consistent-hashing"></a> 一致性哈希(Consistent Hashing)</h3><h4 id="定义definition"><a class="markdownIt-Anchor" href="#定义definition"></a> 定义(Definition)</h4><p>一致性哈希是一种特殊的哈希：当重新调整hash-table的大小并使用一致性哈希时，平均只需要重新映射<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mi mathvariant="normal">/</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">k/n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">/</span><span class="mord mathdefault">n</span></span></span></span>个key。这里<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>是密钥(key)的数量，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>是桶(buckets)的数量。【与之相对地，在大多数传统的哈希表中，桶(buckets)数量的变化会导致<strong>几乎所有</strong>的密钥被重新映射】</p><h4 id="实现how-it-works"><a class="markdownIt-Anchor" href="#实现how-it-works"></a> 实现(How it works)</h4><p>假设我们有一个哈希函数，它生成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,2^{32}- 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>范围内的整数哈希值。一致性哈希将哈希空间表示成一个环，这样使得哈希值的首尾相邻，哈希空间(Hash Space)如下图所示：</p><p><img src="/img/design/ch5/5-4.png" alt="" /></p><p>使用哈希函数，我们将服务器(桶,buckets)映射到这个哈希环上：</p><p><img src="/img/design/ch5/5-5.png" alt="" /></p><p>然后使用相同的哈希函数，我们也将密钥(key)映射到这个哈希环上：</p><p><img src="/img/design/ch5/5-6.png" alt="" /></p><p>为了确定密钥存储在哪个服务器上，我们从环上密钥的位置<strong>顺时针旋转</strong>找到第一个服务器，那么这个服务器就是当前存储该密钥的服务器，如下图所示：</p><p><img src="/img/design/ch5/5-7.png" alt="" /></p><p><strong>添加或移除服务器</strong></p><p>当你添加一个server 4时，只有key0（s3 ~ s4之间的分区）会被重新分配，如下图所示：</p><p><img src="/img/design/ch5/5-8.png" alt="" /></p><p>当你删除一个server 1时，只有key1（s0 ~ s1之间的分区）会被重新分配，如下图所示：</p><p><img src="/img/design/ch5/5-9.png" alt="" /></p><p>因此，无论是添加还是移除服务器，都只会有少量的密钥(key)需要重新映射</p><h4 id="虚拟节点virtual-node"><a class="markdownIt-Anchor" href="#虚拟节点virtual-node"></a> 虚拟节点(Virtual Node)</h4><p>一致性哈希存在两个问题：</p><ol><li>首先，不可能为所有服务器在环上保持相同大小的分区（分区是指相邻服务器节点之间的哈希空间）<br />当多次添加删除服务器后，环上的分区大小肯定会被打乱</li></ol><p><img src="/img/design/ch5/5-10.png" alt="" /></p><ol start="2"><li>其次，在环上有可能具有不均匀的密钥分布</li></ol><p><img src="/img/design/ch5/5-11.png" alt="" /></p><p>如果不解决这两个问题，就不能保证只有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mi mathvariant="normal">/</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">k/n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">/</span><span class="mord mathdefault">n</span></span></span></span>个密钥(key)需要被重新映射。</p><p>而虚拟节点正是解决这两个问题的关键，一致性哈希算法引入了虚拟节点的机制，也就是每个实际节点会进行多次哈希，最终每个实际节点在哈希环上会有多个虚拟节点存在，使用这种方式来大大削弱甚至避免数据倾斜问题。同时数据定位算法不变，只是多了一步虚拟节点到实际节点的映射：</p><p><img src="/img/design/ch5/5-12.png" alt="" /></p><p>随着虚拟节点的增加，密钥分布和分区大小就会变得更加均衡，这样会使得标准差越小。</p><blockquote><p>当然，虚拟节点越多，我们就需要更多的空间来存储虚拟节点到实际节点的映射，某种程度上这是一种折衷，我们可以调整虚拟节点的数量以满足我们的系统要求。</p></blockquote><h3 id="ref"><a class="markdownIt-Anchor" href="#ref"></a> Ref</h3><p><a href="https://medium.com/must-know-computer-science/system-design-consistent-hashing-f66fa9b75f3f">https://medium.com/must-know-computer-science/system-design-consistent-hashing-f66fa9b75f3f</a></p><style>table{    font-size: 13px;}table th:first-of-type {    font-size: 15px;    width: 15%;}table th:nth-of-type(2) {    font-size: 15px;    width: 15%;}table th:nth-of-type(3) {    font-size: 15px;    width: 15%;}table th:nth-of-type(4) {    font-size: 15px;    width: 15%;}table th:nth-of-type(5) {    font-size: 15px;    width: 15%;}table th:nth-of-type(6) {    font-size: 15px;    width: 25%;}</style>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统设计-Ch4-设计一个限流器</title>
    <link href="/2022/05/04/System-Design/20230504-SysDesign-Ch4-Design%20A%20Rate%20Limiter/"/>
    <url>/2022/05/04/System-Design/20230504-SysDesign-Ch4-Design%20A%20Rate%20Limiter/</url>
    
    <content type="html"><![CDATA[<h2 id="设计一个限流器"><a class="markdownIt-Anchor" href="#设计一个限流器"></a> 设计一个限流器</h2><p>API Gatway在云服务器中也有配置选项，你可以去了解了解</p><h3 id="step1understand-the-problem-and-establish-design-scope"><a class="markdownIt-Anchor" href="#step1understand-the-problem-and-establish-design-scope"></a> Step1：Understand the problem and establish design scope</h3><p>对于”设计一个限流器“这个系统设计话题，我们可以向面试官提出以下问题：</p><ul><li><p>这个限流器是要集成在服务器端，还是做成一个限流器中间件？</p></li><li><p>限流的规则是什么？是基于UserID、还是基于IP地址还是其它属性？</p></li><li><p>是要做一个分布式的限流器么，还是单server的就行？</p></li><li><p>当用户的速率被限制住了，我们应该通知他吗？</p></li></ul><h3 id="step2propose-high-level-design-and-get-buy-in"><a class="markdownIt-Anchor" href="#step2propose-high-level-design-and-get-buy-in"></a> Step2：Propose high-level design and get buy-in</h3><p>下面主要介绍一些实现限流器的限流算法，这是最关键的一步：</p><h3 id="限流算法algorithm-for-rate-limiting"><a class="markdownIt-Anchor" href="#限流算法algorithm-for-rate-limiting"></a> 限流算法(Algorithm for rate limiting)</h3><h4 id="令牌桶token-bucket"><a class="markdownIt-Anchor" href="#令牌桶token-bucket"></a> 令牌桶(Token Bucket)</h4><p>令牌桶算法的工作原理如下：</p><ul><li>一个令牌桶有预设的最大容量，令牌会以预设的速率，周期性的放到桶中，一旦桶满了就不会添加令牌</li><li>设定为每个请求消耗一个令牌（&quot;昂贵&quot;的请求可能会消耗更多）</li><li>如果桶中有足够的令牌，那么从桶中删除请求所需的令牌数量，请求被允许</li><li>如果桶是空的，那么说明已超过限额，请求被拒绝</li></ul><p>下图演示了如何基于令牌桶，设计一个限流器：</p><p><img src="/img/design/ch4/4-5.png" alt="" /></p><p>我们总共需要多少个令牌桶呢？这取决于限流规则，来举几个例子：</p><ul><li><p>对于不同功能的API，需要不同的令牌桶。比如：</p><ul><li>允许用户每秒最多发1篇文章</li><li>允许用户每秒最多点赞5篇文章</li><li>允许用户每天最多关注150个用户</li></ul><p>以上三个不同功能的API，每个用户就需要3个不同的令牌桶</p></li><li><p>如果我们需要根据IP地址限流，那么每个IP地址都需要一个令牌桶</p></li><li><p>如果系统每秒最多允许10000个请求，那么就有必要设计一个让所有请求共享的全局令牌桶</p></li></ul><blockquote><p>这是一个聪明的算法，只占用很少的空间。但但天真的实现有一个很大的缺陷——一些进程需要不断地重新填充桶。有数百万用户，并且每个重新填充操作都需要写入，这对我们的 Redis 实例来说是不可持续的负载。</p><p>我们考虑<strong>放弃周期性填充</strong>，添加记录最后一次(上次)请求的时间戳。当用户发出请求时，我们获取当前请求的时间戳，由此计算<code>[上次请求时间戳，当前请求时间戳]</code>这段时间该授予用户多少个令牌。这样每当用户的新请求到来时，才进行令牌桶的填充，可以大大减少填充操作写入次数。</p><p>这个改进操作并不是完美实现，在分布式限流器架构中会有race contidton，最好的实现方式是redis sorted set或redis + lua脚本。</p></blockquote><p>优点：</p><ul><li>该算法易于实现</li><li>高效存储</li><li>令牌桶允许短时间内的流量爆发，只要还有令牌，请求就可以通过</li></ul><p>缺点：</p><ul><li>算法中的两个超参数是令牌桶的容量和令牌填充速率，要对它们适当调整可能具有挑战性</li></ul><h4 id="漏桶leaky-bucket"><a class="markdownIt-Anchor" href="#漏桶leaky-bucket"></a> 漏桶(Leaky Bucket)</h4><p>漏桶算法和令牌桶算法非常相似，其工作原理如下：</p><ul><li>想象一个底部有个洞的桶，桶底的洞一般是比桶口小很多的</li><li>这个洞漏水的速率就是我们成功接收请求的速率</li><li>桶口进水的速率是实际请求发送的速率</li><li>中间这个桶实际上就是一个先进先出队列(FIFO)</li></ul><p>下图演示了如何基于漏桶算法，设计一个限流器：</p><p><img src="/img/design/ch4/4-7.png" alt="" /></p><p>可以看到漏桶算法同样有两个参数：桶的容量（即队列的大小）和漏水速率（处理请求的速率）</p><p>优点：</p><ul><li>在队列大小有限的情况下，内存效率高</li><li>请求以恒定的速率进行处理，因此适合一些特殊的用例</li></ul><p>缺点：</p><ul><li>突发的流量会使得队列中充满了旧情求，如果不及时处理，将会导致最近的请求速率受到限制</li><li>算法中有两个超参数，要对它们适当调整可能具有挑战性</li></ul><h4 id="固定窗口计数器fixed-window-counter"><a class="markdownIt-Anchor" href="#固定窗口计数器fixed-window-counter"></a> 固定窗口计数器(Fixed Window Counter)</h4><p>固定窗口计数器的工作原理如下：</p><ul><li>该算法划分时间片，每个时间片分配一个计数器，并把时间片看作固定的窗口</li><li><strong>只关注当前时间片窗口的计数器</strong>，每个请求会将当前计数器＋1</li><li>一旦计数器到达预设的阈值，就会丢弃新请求，直到新的时间片窗口开始</li></ul><p>下图演示了如何基于固定窗口计数器，设计一个1秒最多3次请求的限流器：</p><p><img src="/img/design/ch4/4-8.png" alt="" /></p><p>固定窗口计数器的主要问题在于，在时间窗口边缘的流量爆发，可能会超过请求的允许配额，如下图所示：</p><p><img src="/img/design/ch4/4-9.png" alt="" /></p><p>如果系统每分钟最多允许5个请求，并且可用配额在每分钟整点重置，那么如图所示，其实在2:00:30~2:01:30这一分钟内，一共可以允许通过10个请求，是允许请求的两倍。</p><p>优点：</p><ul><li>高效存储</li><li>易于理解，这应该是最简单基础的限流器设计了</li><li>在单位时间窗口结束时重置可用配额，这个特性可能适合某些特殊用例</li></ul><p>缺点：</p><ul><li>时间窗口边缘的流量爆发可能会导致超过允许配额</li></ul><h4 id="滑动窗口日志sliding-window-log"><a class="markdownIt-Anchor" href="#滑动窗口日志sliding-window-log"></a> 滑动窗口日志(Sliding Window Log)</h4><p>滑动窗口日志算法可以解决固定窗口计数器算法的边缘流量爆发问题，该算法跟踪请求的时间戳，时间戳通常保存在缓存中（例如redis的<code>sorted set</code>），其工作原理如下：</p><ul><li>当前时间窗口的边界不再固定，<strong>以最新请求的时间戳作为右边界</strong></li><li>窗口时间段由人为预设，由此可以计算出时间窗口的左边界</li><li>收到新请求时，计算出当前时间窗口段，<strong>删除所有过期的时间戳</strong>（不在当前窗口内的），添加当前时间戳</li><li>加上当前时间戳后，可以得到当前窗口内的总请求次数，如果不超过允许配额，接受请求，否则拒绝请求</li></ul><p>可以看到该算法预设参数有2个：窗口时间段，窗口内的允许配额</p><p>下图演示了一个窗口时间段为1分钟，窗口允许配额为2，来实现每分钟最多2次请求的限流器：</p><p><img src="/img/design/ch4/4-10.png" alt="" /></p><p>①：日志一开始为空，最新的请求为1:00:01，它被允许了<br />②：最新的请求为1:00:30，计算得当前时间段为(0:59:30, 1:00:30]，当前窗口总请求次数2，允许该请求<br />③：最新的请求为1:00:50，计算得当前时间段为(0:59:50, 1:00:50]，当前窗口总请求次数3，拒绝该请求<br />③：最新的请求为1:01:40，计算得当前时间段为(1:00:40, 1:00:40]，当前窗口总请求次数2，允许该请求</p><p>优点：</p><ul><li>该算法实现的限流器非常准确，在任何滑动窗口中，请求都不会超过速率限制</li></ul><p>缺点：</p><ul><li>该算法消耗大量内存，因为即使请求被拒绝，其时间戳也可能存储在内存中</li></ul><h4 id="滑动窗口计数器-sliding-winodw-counter"><a class="markdownIt-Anchor" href="#滑动窗口计数器-sliding-winodw-counter"></a> 滑动窗口计数器 (Sliding Winodw Counter)</h4><p>滑动窗口计数器是一种将固定窗口计数和滑动窗口日志结合的混合方法，该算法可以通过两种不同的方法实现。<br />这里介绍其中一种实现：</p><ul><li>该算法划分时间片，每个时间片分配一个计数器，窗口根据最新请求滑动</li><li>收到新请求时，当前时间片计数器+1，根据新请求的时间戳，计算当前窗口在当前时间片的占比</li><li>计算当前窗口在上一个时间片的剩余占比，并假设上一个时间片内的请求是均匀分布的</li><li>由公式：<code>当前总请求次数 = 当前时间片计数 + 上个时间片计数 * 上一个时间片的剩余占比</code>，如果这个总请求次数不超过可用配额，则允许当前请求，否则拒绝当前请求。</li></ul><p>下图演示了一个</p><p><img src="/img/design/ch4/4-11.png" alt="" /></p><p>优点：</p><ul><li>该算法平滑了流量的峰值，因为请求速率是基于前一个时间片的平均速率</li><li>高效存储</li></ul><p>缺点：</p><ul><li>该算法只适用于不那么严格的回顾窗口，因为它假设上个时间片的请求是均匀分布的。但是这个问题并没有那么严重，因为该算法被Cloudfare使用，在他们的统计报告中，4亿个请求只有0.003%被错误允许。</li></ul><h3 id="step3design-deep-dive"><a class="markdownIt-Anchor" href="#step3design-deep-dive"></a> Step3：Design deep dive</h3><h4 id="详细设计detail-design"><a class="markdownIt-Anchor" href="#详细设计detail-design"></a> 详细设计(Detail Design)</h4><p>在展示详细设计前，先做一些铺垫:</p><p><strong>计数器存储(Stored Counter)</strong></p><p>上述限流算法在实际应用中最广泛的是令牌桶，其次是滑动窗口计数器，实现这两个算法都需要计数器来统计有多少个请求发送自相同的user或IP。那么我们应该将计数器存放在哪里呢？</p><p>存放在数据库中不是一个好主意，因为磁盘访问太慢了，每有一个请求就访问一次数据库，对数据库造成的压力也会非常大。内存缓存(In-memory cache)是一个不错的选择，因为它访问速度快，并且支持基于时间的过期策略(LRU等)。现实世界中，Redis就是一个非常受欢迎的选择，对于内存存储它提供了两条命令：INCR和EXPIRE.</p><ul><li>INCR：该命令将存储计数器+1</li><li>EXPIRE：该命令为存储计数器设置一个过期时间。过期后将对应的存储计数器删除。</li></ul><p><strong>限流规则(Rate Limiting Rules)</strong></p><p>下面是一些限流规则举例，这些规则通常被存放在XML或YAML中，以方便修改：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"># 该系统被配置为：每天最多允许5条营销信息domain: messiagingdescriptors:- key: message_type  value: marketing  rate_limit:    unit: day    request_pre_unit: 5# 该系统被配置为：每分钟最多登录5次domain: authdescriptors:- key: auth_type  value: login  rate_limit:    unit: mintue    request_pre_unit: 5</code></pre><p><strong>请求受限(Exceeding the rate limit)</strong></p><p>在请求受限的情况下，我们对于无法立即处理的请求，通常有两种选择：</p><ul><li><p>option1：直接将请求丢弃</p></li><li><p>option2：将请求排入消息队列，以便稍后处理</p></li></ul><p>上面2种选择是在服务器端的响应，在客户端都是返回<code>HTTP429：too many request</code>。</p><blockquote><p>在2023年3月份使用ChatGPT时，非常容易碰到HTTP429的情况。</p></blockquote><hr /><p>基于以上几点，下图演示了一个限流器中间件的详细设计：</p><p><img src="/img/design/ch4/4-13.png" alt="" /></p><ul><li>规则文件(XML、YAML)存储在磁盘上，workers服务器会定期从磁盘中提取规则并将其存储在缓存中</li><li>客户端向服务器发送请求时，该请求首先会被发送到限流器中间件</li><li>限流器中间件从缓存中加载规则。并从Redis缓存中获取计数器和最后一个请求的时间戳。然后根据限流器中的限流算法，限流器将做出以下决定：<ul><li>该请求不被限制，它会被发送到API服务器</li><li>该请求受到限制，它向客户端返回HTTP429，与此同时，请求要么被丢弃，要么转发到消息队列</li></ul></li></ul><h4 id="分布式限流器rate-limiter-in-distributed-environment"><a class="markdownIt-Anchor" href="#分布式限流器rate-limiter-in-distributed-environment"></a> 分布式限流器(Rate Limiter in distributed environment)</h4><p>分布式限流器主要会遇到两个问题：竞态条件和同步问题</p><blockquote><p>这两个问题和操作系统并发（多线程）的问题很像。</p></blockquote><p><strong>竞态条件(Race Condtion)</strong></p><p>redis是单线程的，然后在分布式架构里是怎么处理竞态条件的？</p><ul><li><p>redis的sorted set</p><p><a href="https://engineering.classdojo.com/blog/2015/02/06/rolling-rate-limiter/">https://engineering.classdojo.com/blog/2015/02/06/rolling-rate-limiter/</a></p><p>简单来说，就是利用了redis sorted set，其<strong>所有 redis 操作都可以作为原子操作执行</strong>。</p></li><li><p>redis + lua脚本</p><p><a href="https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d#request-rate-limiter">https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d#request-rate-limiter</a></p><p>简单来说，<strong>redis会将整个lua脚本作为一个原子命令执行</strong>，因此无需担心并发操作</p></li></ul><p><strong>同步问题(Synchronization)</strong></p><p>当同一个客户端向不同的限流器发送请求时，它的计数器等参数必须要共享才行：</p><p><img src="/img/design/ch4/4-15.png" alt="" /></p><p>实际上，这也能够通过redis解决，因为这些参数都是存放在redis里的，保证redis的一致性就行：</p><p><img src="/img/design/ch4/4-16.png" alt="" /></p><h3 id="step4warm-up"><a class="markdownIt-Anchor" href="#step4warm-up"></a> Step4：Warm up</h3><p>如果时间允许，你可以与面试官讨论包括但不限于以下要点：</p><ul><li><p>硬速率限制vs软速率限制</p><ul><li>硬速率限制：请求数量在任何时段都不能超出阈值</li><li>软速率限制：请求数量可以在短时间内超出阈值</li></ul></li><li><p>在不同层级使用速率限制</p><ul><li>在本章中，我们只讨论了应用程序级别(HTTP: layer7)的速率限制。你也可以尝试在其它层使用速率限制，例如，在网络层(HTTP:layer3)使用IPtable对IP地址进行速率限制等等。</li></ul></li><li><p>如何避免客户端受到速率限制</p><ul><li>使用客户端缓存，避免频繁调用API</li><li>为重试逻辑增加足够的缓冲时间（验证码60s才能发送一次）</li><li>返回醒目信息，让user明确了解当前的速率限制</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统设计-Ch3-系统设计面试框架</title>
    <link href="/2022/05/03/System-Design/20230503-SysDesign-Ch3-Framework%20For%20System%20Design%20Interview/"/>
    <url>/2022/05/03/System-Design/20230503-SysDesign-Ch3-Framework%20For%20System%20Design%20Interview/</url>
    
    <content type="html"><![CDATA[<h2 id="系统设计面试框架"><a class="markdownIt-Anchor" href="#系统设计面试框架"></a> 系统设计面试框架</h2><p>系统设计面试通常听上去很令人费解，它可以像：“请设计一个非常知名的产品XXX?”一样模糊且宽泛。<br />你的担忧情有可原----毕竟，谁能够在1小时内设计出一款由成百上千名开发人员历经数年打造的产品呢？</p><p>但好消息是，没人指望你这么做，现实世界的系统设计非常复杂，在面试时间内不可能设计出真实的系统。<br />在这整个系统设计面试过程中，面试官真正想要考察的是你的作为一个开发人员的综合能力，包括：</p><ul><li><p><strong>提出问题的能力</strong>：</p><p>思考对于当前的系统，什么是<strong>关键</strong>问题，然后提出；提问也是交流过程，能向面试官展现你的沟通能力</p><blockquote><p><strong>Tips：</strong></p><p>一些可能能用到的问题：</p><ul><li>系统的核心功能是什么？每个功能的具体需求是什么？（不要想当然，要主动询问确定需求）</li><li>公司的技术栈是什么？ 我可以利用哪些现有服务简化设计?</li></ul></blockquote></li><li><p><strong>思考问题的能力</strong>：</p><p>思考如何把这个大的系统设计，这个问题划分成多个子问题，降低问题的level有助于降低问题的难度</p><blockquote><p><strong>Tips：</strong></p><ol><li><p>问题往往需要按模块（比如功能模块）拆分</p></li><li><p>你可以打开电脑的画板，一边画出模块拆分图示，一遍解释你这样拆分的理由</p></li></ol></blockquote></li><li><p><strong>解决问题的能力</strong>：</p><p>划分到不可分割的子问题模块后，你该采用哪些技术细节来解决这个子问题</p><blockquote><p><strong>Tips：</strong></p><p>巧妇难为无米之炊，你不可能没有任何经验，然后凭空设计出一些不合理的方案丢给面试官;<br />因此，你需要阅读一些经典案例，看看成功企业是如何设计的，站在巨人的肩膀上，汲取经验。</p></blockquote></li></ul><p>作者这里也给出来了系统设计面试框架的4个步骤，</p><h4 id="step1understand-the-problem-and-establish-design-scope"><a class="markdownIt-Anchor" href="#step1understand-the-problem-and-establish-design-scope"></a> Step1：Understand the problem and establish design scope</h4><p>问正确的问题，做出合理的假设，然后整合所有信息再去构建整个系统框架。</p><h4 id="step2propose-high-level-design-and-get-buy-in"><a class="markdownIt-Anchor" href="#step2propose-high-level-design-and-get-buy-in"></a> Step2：Propose high-level design and get buy-in</h4><p>提出一个整体上的系统框架蓝图，并与面试在设计上达成一致。</p><p>如果面试官给出了某些数据需求（QPS、Memo等）的话，尝试与面试官讨论封底计算(ch2)。</p><h4 id="step3design-deep-dive"><a class="markdownIt-Anchor" href="#step3design-deep-dive"></a> Step3：Design deep dive</h4><p>这里就是具体的设计细节实现(组件设计)，需要你有一些经验功底才能完成，但不要担心，记住下面提示：</p><ul><li>激发面试官的想法：把技术实现引导到你了解过的技术上，然后面试官会对你的实现做评价反馈</li><li>不要放弃：总有你没碰到过的技术难题，但就算你毫无头绪，也不要直接放弃—你可以向面试官寻求提示<br /><strong>积极沟通、把你目前的想法说出来，不要陷入长时间的沉默思考，这样会让双方都很尴尬</strong></li></ul><h4 id="step4warm-up"><a class="markdownIt-Anchor" href="#step4warm-up"></a> Step4：Warm up</h4><p>在完成设计后，面试官可能会提出一些follow up的问题，比如这个系统的瓶颈在哪里？有没有潜在的改进措施？或者让你自由讨论其它要点等等。</p><p>首先明确：永远不要说你的设计是完美的，没有什么可改进的。<br />这是一个很好的展示你的批判性思维的环节，指出瓶颈或提出好的改进措施可以留给面试官良好的最终印象。</p><h4 id="时间分配"><a class="markdownIt-Anchor" href="#时间分配"></a> 时间分配</h4><p>把握面试时间很重要，这里给出每个步骤的时间分配供参考：</p><table><thead><tr><th style="text-align:left">Step</th><th style="text-align:left">时间</th></tr></thead><tbody><tr><td style="text-align:left">Step1：Understand the problem and establish design scope</td><td style="text-align:left">3 - 10 min</td></tr><tr><td style="text-align:left">Step2：Propose high-level design and get buy-in</td><td style="text-align:left">10 - 15 min</td></tr><tr><td style="text-align:left">Step3：Design deep dive</td><td style="text-align:left">10 - 25 min</td></tr><tr><td style="text-align:left">Step4：Warm up</td><td style="text-align:left">3 - 5 min</td></tr></tbody></table><style>table{    font-size: 13px;}table th:first-of-type {    font-size: 15px;    width: 15%;}table th:nth-of-type(2) {    font-size: 15px;    width: 15%;}table th:nth-of-type(3) {    font-size: 15px;    width: 15%;}table th:nth-of-type(4) {    font-size: 15px;    width: 15%;}table th:nth-of-type(5) {    font-size: 15px;    width: 15%;}table th:nth-of-type(6) {    font-size: 15px;    width: 25%;}</style>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统设计-Ch2-封底计算</title>
    <link href="/2022/05/02/System-Design/20230502-SysDesign-Ch2-Back%20Of%20The%20Envelope%20Estimation/"/>
    <url>/2022/05/02/System-Design/20230502-SysDesign-Ch2-Back%20Of%20The%20Envelope%20Estimation/</url>
    
    <content type="html"><![CDATA[<h2 id="封底计算"><a class="markdownIt-Anchor" href="#封底计算"></a> 封底计算</h2><p>封底计算，英文为back-of-the-envelope calculations (BotEC)，这个术语由物理学家恩里科·费米创造，指用简单到可以在手边随便的什么小纸片（比如信封的背面上）进行的计算，对复杂的方程作同一数量级内的近似求解。</p><p>在系统面试中，有时您会被要求评估系统容量或系统性能。</p><h3 id="常见数据"><a class="markdownIt-Anchor" href="#常见数据"></a> 常见数据</h3><h4 id="二的幂power-of-two"><a class="markdownIt-Anchor" href="#二的幂power-of-two"></a> 二的幂(Power of Two)</h4><p>为了获得正确的计算，使用2的幂作为数据量单位至关重要：</p><table><thead><tr><th style="text-align:left">幂次</th><th style="text-align:left">大致估计值</th><th style="text-align:left">全名</th><th style="text-align:left">缩写名</th></tr></thead><tbody><tr><td style="text-align:left">10</td><td style="text-align:left">1 Thousand</td><td style="text-align:left">1 Kilobyte</td><td style="text-align:left">1 KB</td></tr><tr><td style="text-align:left">20</td><td style="text-align:left">1 Milion</td><td style="text-align:left">1 Megabyte</td><td style="text-align:left">1 MB</td></tr><tr><td style="text-align:left">30</td><td style="text-align:left">1 Billion</td><td style="text-align:left">1 Gigabyte</td><td style="text-align:left">1 GB</td></tr><tr><td style="text-align:left">40</td><td style="text-align:left">1 Trilion</td><td style="text-align:left">1 Terabyte</td><td style="text-align:left">1 TB</td></tr><tr><td style="text-align:left">50</td><td style="text-align:left">1 Quadrillion</td><td style="text-align:left">1 Petabyte</td><td style="text-align:left">1 PB</td></tr></tbody></table><p>当然这话并不是绝对的，让我想起了stackoverflow上的一个经典问题，这个问题也在面试中很常问：<br /><a href="https://stackoverflow.com/questions/11413855/why-is-transposing-a-matrix-of-512x512-much-slower-than-transposing-a-matrix-of">为什么转置512x512的矩阵比转置513x513的矩阵慢得多？</a></p><h4 id="延迟数latency-numbers"><a class="markdownIt-Anchor" href="#延迟数latency-numbers"></a> 延迟数(Latency Numbers)</h4><p>下表是2010年典型计算机操作的时间长度。随着计算机变得更快、更强大，一些数字已经过时。然而，这些数字仍然能够让我们了解不同计算机操作的快速性和缓慢性。</p><table><thead><tr><th style="text-align:left">操作名称</th><th style="text-align:left">时间（<code>ns 纳秒</code>， <code>us 微秒</code>，<code>ms 毫秒</code>）</th></tr></thead><tbody><tr><td style="text-align:left">L1 cache reference</td><td style="text-align:left">0.5 ns</td></tr><tr><td style="text-align:left">分支预测失误</td><td style="text-align:left">5ns</td></tr><tr><td style="text-align:left">L2 cache reference</td><td style="text-align:left">7 ns</td></tr><tr><td style="text-align:left">Mutex lock/unlock</td><td style="text-align:left">100 ns</td></tr><tr><td style="text-align:left">Main memory reference</td><td style="text-align:left">100 ns</td></tr><tr><td style="text-align:left">使用Zippy压缩1K Byte</td><td style="text-align:left">10,000 ns = 10 μs</td></tr><tr><td style="text-align:left">通过1 Gbps网络发送2K字节</td><td style="text-align:left">20,000 ns = 20 μs</td></tr><tr><td style="text-align:left">从内存中按顺序读取1 MB</td><td style="text-align:left">250,000 ns = 250 μs</td></tr><tr><td style="text-align:left">同一数据中心内往返</td><td style="text-align:left">500,000 ns = 500 μs</td></tr><tr><td style="text-align:left">磁盘搜索</td><td style="text-align:left">10,000,000 ns = 10 ms</td></tr><tr><td style="text-align:left">从网络中按顺序读取1MB</td><td style="text-align:left">10,000,000 ns = 10ms</td></tr><tr><td style="text-align:left">从磁盘按顺序读取1 MB</td><td style="text-align:left">30,000,000 ns =30 ms</td></tr><tr><td style="text-align:left">发送数据包（加利福尼亚=&gt;荷兰=&gt;加利福尼亚）</td><td style="text-align:left">150,000,000 ns =150ms</td></tr></tbody></table><p>通过分析表中数字，我们得出以下结论：</p><ul><li>内存很快，但磁盘很慢</li><li>尽可能避免磁盘搜索</li><li>简单的压缩算法速度快，尽可能在通过互联网发送数据之前压缩数据</li><li>数据中心(DC)通常位于不同的区域，在它们之间发送数据需要较长时间</li></ul><h4 id="可靠性availbility-numbers"><a class="markdownIt-Anchor" href="#可靠性availbility-numbers"></a> 可靠性(Availbility Numbers)</h4><p>高可用性是指系统能够在理想的长时间内持续运作的能力。高可用性是以百分比来衡量的，100%意味着服务没有宕机时间。大多数服务可用性在99%到100%之间。</p><table><thead><tr><th style="text-align:left">可用性</th><th style="text-align:left">平均每天宕机时间</th><th style="text-align:left">平均每年宕机时间</th></tr></thead><tbody><tr><td style="text-align:left">99%</td><td style="text-align:left">14.4 分钟</td><td style="text-align:left">3.65天</td></tr><tr><td style="text-align:left">99.9%</td><td style="text-align:left">1.44 分钟</td><td style="text-align:left">8.77小时</td></tr><tr><td style="text-align:left">99.99%</td><td style="text-align:left">8.64 秒</td><td style="text-align:left">52.6分钟</td></tr><tr><td style="text-align:left">99.999%</td><td style="text-align:left">864毫秒</td><td style="text-align:left">5.26分钟</td></tr><tr><td style="text-align:left">99.9999%</td><td style="text-align:left">86.4毫秒</td><td style="text-align:left">31.56秒</td></tr></tbody></table><h3 id="估算twitter的qps和存储"><a class="markdownIt-Anchor" href="#估算twitter的qps和存储"></a> 估算twitter的QPS和存储</h3><p>注意以下数字不是twitter真实用户数据，仅仅是一个假设：</p><p><strong>假设</strong>:</p><ul><li>twitter每月有300 million的活跃用户</li><li>平均50%的用户每天使用twitter</li><li>平均每个用户每天发送2条推文</li><li>10%的推文有媒体内容（图片、视频）</li><li>数据需要存5年</li></ul><p><strong>评估</strong>：</p><p>QPS估算：</p><ul><li>日活用户(Daily active users) = <code>300 million * 50% = 150 million</code></li><li>QPS(Query per second) = <code>150 million * 2推文 / 24 hours / 3600 seconds = 3500</code></li><li>QPS峰值(Peek QPS)  = <code>QPS / 50% = 7000</code>（假设当天有100%的用户使用twitter）</li></ul><p><strong>数据存储</strong>：</p><p>这里只估算媒体存储，并且假设平均每个媒体占用1MB</p><ul><li><p>日均媒体存储 = <code>150 million * 2 * 10% * 1MB = 30 TB per day</code></p></li><li><p>5年媒体存储 = <code>30TB * 5 * 365 = 55 PB</code></p></li></ul><h2 id="ref"><a class="markdownIt-Anchor" href="#ref"></a> Ref</h2><p><a href="https://stackoverflow.com/questions/11413855/why-is-transposing-a-matrix-of-512x512-much-slower-than-transposing-a-matrix-of">https://stackoverflow.com/questions/11413855/why-is-transposing-a-matrix-of-512x512-much-slower-than-transposing-a-matrix-of</a></p><style>table{    font-size: 13px;}table th:first-of-type {    font-size: 15px;    width: 15%;}table th:nth-of-type(2) {    font-size: 15px;    width: 15%;}table th:nth-of-type(3) {    font-size: 15px;    width: 15%;}table th:nth-of-type(4) {    font-size: 15px;    width: 15%;}table th:nth-of-type(5) {    font-size: 15px;    width: 15%;}table th:nth-of-type(6) {    font-size: 15px;    width: 25%;}</style>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统设计-Ch1-从零到百万用户量，需要考虑哪些问题？</title>
    <link href="/2022/05/01/System-Design/20230501-SysDesign-Ch1-Zero%20To%20Million%20Of%20User/"/>
    <url>/2022/05/01/System-Design/20230501-SysDesign-Ch1-Zero%20To%20Million%20Of%20User/</url>
    
    <content type="html"><![CDATA[<h2 id="分布式系统架构"><a class="markdownIt-Anchor" href="#分布式系统架构"></a> 分布式系统架构</h2><h3 id="1分层业务与数据库请求"><a class="markdownIt-Anchor" href="#1分层业务与数据库请求"></a> 1.分层业务与数据库请求</h3><p>随着用户量的增长，一台服务器是远远不够的，<br />我们需要多台服务器，把Web/App服务请求和数据库这两类服务请求分离，分离成web server层和database层，使得它们可以独立扩展。</p><p>关系型数据库，也称为SQL数据库，以<strong>表</strong>的形式存储数据，可以通过<strong>联接</strong>表来在信息之间建立关联或关系。<br />非关系型数据库称，也为NOSQL数据库，存储方式分为4类：key-value，graph，column，document，通常不支持联接操作(Join operation)。</p><blockquote><p>通常来说，关系型数据库是最佳选择，因为关系型数据库能满足绝大部分需求并且work well。</p><p>但在以下情况下，非关系型数据库可能是更好的选择：</p><ul><li>你的Web/App需要 <strong>超低(super-low)</strong> 延迟</li><li>你的数据是非结构化的，或者甚至没有任何有相互关联的数据</li><li>你只需要序列化和反序列化数据（JSON、XML、YAML等序列化协议）</li><li>你需要存储海量数据（大数据应用）</li></ul></blockquote><h4 id="垂直扩展vertival-scalingvs水平扩展horizontal-scaling"><a class="markdownIt-Anchor" href="#垂直扩展vertival-scalingvs水平扩展horizontal-scaling"></a> 垂直扩展(Vertival Scaling)VS水平扩展(Horizontal Scaling)</h4><p><strong>垂直扩展(scale-up)</strong>：是指为服务器增加更多的功率（通过升级CPU、RAM等方式提升服务器性能）</p><p><strong>水平扩展(scale-out)</strong>：是指为添加更多台服务器，这些服务器提供相同的功能服务</p><p><img src="/img/design/ch1/1-20.png" alt="" /></p><p>显然，垂直扩展的优势是<strong>简单</strong>，只需要为服务器升级硬件即可，但是再好的硬件其性能终究有局限----当你全部换成最好的硬件，就没有提升空间了，还有当你升级服务器时，如果你只有一台服务器那就必须停止服务。并且当服务器宕机时，没有故障切换(failover)和冗余(redundancy)；相比之下，水平扩展对大规模，高并发应用更加可取，系统水平扩展后也就是我们常听到的分布式系统。</p><p>水平扩展具有下优点：</p><ul><li>更好的性能：多台服务器响应可以应对流量高峰。</li><li>可靠性：某个节点宕机后，仍然有其它节点工作，很容易解决故障切换的问题。</li></ul><h4 id="负载均衡器load-balancer"><a class="markdownIt-Anchor" href="#负载均衡器load-balancer"></a> 负载均衡器(Load Balancer)</h4><p>水平扩展的服务器通过负载均衡器连接，如下图所示：</p><p><img src="/img/design/ch1/1-4.png" alt="" /></p><p>由于负载均衡策略，负载均衡器会均匀分配传入流量到与其关联的服务器（统称为负载均衡集群）中。</p><blockquote><ul><li>水平扩展的负载均衡策略(Load-Balancing)是什么？</li><li>什么是负载均衡器的粘性会话？</li></ul></blockquote><h4 id="数据库复制database-replication"><a class="markdownIt-Anchor" href="#数据库复制database-replication"></a> 数据库复制（Database Replication）</h4><p>上面是对Web服务器的水平扩展，下面介绍数据库的水平扩展，也就是分布式数据库。</p><p>分布式数据库，相比于单节点数据库服务器能克服故障切换(failover)的问题，拥有<strong>多个节点的挑战在于数据一致性(data consistency)</strong>。如果所有节点在任何时间都是同步的，则系统是线性化的(<a href="https://vladmihalcea.com/linearizability/">linearizabile</a>)，这是跨多个寄存器的数据一致性的最强保证。跨所有数据库节点同步数据的过程称为复制，我们可以使用多种方案。下面介绍最常见的单主节点复制方案。</p><p><strong>单主节点复制(Single-Primary Replication)</strong></p><p>单主节点复制方案如下图所示：</p><p><img src="/img/design/ch1/1-5.png" alt="" /></p><p>图中的Master DB，即主节点，是<strong>唯一</strong>能接受写事务(wirte transactions)的节点；而图中多个Slave DB，即从节点，负责处理只读(read-only transactions)事务。<strong>拥有单一的事实来源可以让我们避免数据冲突。</strong></p><h4 id="数据库分片database-sharding"><a class="markdownIt-Anchor" href="#数据库分片database-sharding"></a> 数据库分片(Database Sharding)</h4><p>数据库分片是在多台机器上存储大型数据库的过程。一台计算机或数据库服务器只能存储和处理有限数量的数据。数据库分片通过将数据拆分为更小的块（称为分片）并将其存储在多个数据库服务器上来克服此限制。在任何时候访问数据时，都会使用哈希函数查找相应的分片数据库。</p><p>比如下面这种基于user_id分片的数据库，其使用<code>user_id % 4</code>作为哈希函数：</p><p><img src="/img/design/ch1/1-21.png" alt="" /></p><p>这个分片的哈希函数非常重要，其设计标准就是要<strong>使得数据量在分片中均匀分布</strong>：</p><p><img src="/img/design/ch1/1-22.png" alt="" /></p><p>假如说有名人，名人的数据量显然会多于普通人，对这种特定分片的过度访问困难会导致服务器过载，那么就有必要考虑是否需要为每个名人单独分配一个分片。</p><hr /><p>把负载均衡器和数据库复制都加上，整个系统设计就变成了如下图所示：</p><p><img src="/img/design/ch1/1-6.png" alt="" /></p><ul><li>用户访问DNS服务器，解析得到的是负载均衡器的IP地址</li><li>然后用户的Client会和负载均衡器建立连接</li><li>负载均衡器接受到用户发来的HTTP请求，通过其内置的路由表把HTTP请求转发到真正的Web服务器</li><li>Web服务器在Slave DB中读取用户数据</li><li>Web服务器在Mater DB中更改数据（如果有数据的增删改操作），之后Master数据同步到Salve</li></ul><hr /><h3 id="2优化加载响应时间"><a class="markdownIt-Anchor" href="#2优化加载响应时间"></a> 2.优化加载/响应时间</h3><p>现在你已经对web层和data层有了深刻的了解，是时候把目标转向改进加载/响应时间了。</p><h4 id="缓存cache"><a class="markdownIt-Anchor" href="#缓存cache"></a> 缓存(Cache)</h4><p>这里的缓存和操作系统中的缓存要达到的目的是一样的：</p><p>我们如果频繁的对数据库执行I/O操作，会极大的影响应用程序的性能（因为数据库的I/O往往是其瓶颈）。缓存通过将<strong>非常耗时的</strong>或<strong>频繁访问的</strong>响应数据结果存储在内存之中，以便更快处理后续相同的请求。</p><p><img src="/img/design/ch1/1-7.png" alt="" /></p><h4 id="内容分发网络content-delivery-network"><a class="markdownIt-Anchor" href="#内容分发网络content-delivery-network"></a> 内容分发网络(Content Delivery Network)</h4><p>CDN是一个由地理上分散的服务器组成的网络，用于传输静态内容，如image, video, css, javascript等。<br />简单来说，就是当用户访问网站时，距离用户主机地理位置最近的CDN服务器将提供网站的静态内容。</p><p><img src="/img/design/ch1/1-10.png" alt="" /></p><p>CDN的工作流程非常类似于缓存，不同之处在于其内容的过期时间一般由HTTP头中的Time-to-Live(TTL)决定</p><p>CDN通常是由第三方服务商统一提供服务。</p><hr /><p>添加缓存和内存分发网络后，整个系统设计就变成了如下图所示：</p><p><img src="/img/design/ch1/1-11.png" alt="" /></p><p>与之前相比有了如下变化：</p><ul><li>静态内容（如css, javascript, image, vide等）不在由web服务器提供，转为由CDN提供</li><li>添加了缓存层来减少数据库I/O频率，以减轻数据库负载</li></ul><hr /><h3 id="3打造无状态服务器层"><a class="markdownIt-Anchor" href="#3打造无状态服务器层"></a> 3.打造无状态服务器层</h3><h4 id="状态state"><a class="markdownIt-Anchor" href="#状态state"></a> 状态(State)</h4><p>web服务器的某些请求需要验证用户身份（如是否登录，是否VIP等），但由于HTTP协议是无状态的协议，web服务器所以并不知道请求是由哪个用户发出的，那么就需要用某个标识来识别具体的用户，这个标识就是session。当第一次创建session的时候，web服务器会在http(s)协议中告诉客户端（<strong>同一电脑上不同浏览器被视为不同的客户端</strong>）sessoin_id，客户端会在cookie里面记录一个<code>JSESSIONID=session_id</code>，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。</p><p>这里的session其实就是一种状态。</p><p>在分布式服务器架构上，如果不将状态和服务器分离，会带来一系列问题（如下面的有无状态服务器架构）;<br />一个好的做法是将会话数据存储在数据库（常用NoSQL k-v存储）中（如下面的有无状态服务器架构）。</p><p><strong>有状态服务器架构(Stateful Architecture)</strong></p><p>有状态服务器会记录从一个请求到下一个请求的客户端状态，其服务器架构如下所示：</p><p><img src="/img/design/ch1/1-12.png" alt="" /></p><p>用户 A的session被存储在Server 1中。要对用户 A进行身份验证，必须将http(s)请求路由到Server 1，因为如果向Server 2等其它服务器发送请求，因为其它服务器不包含用户 A的session，身份验证将会失败！</p><p>问题的本质在于当server是有状态服务器(Stateful server)时，<strong>来自同一客户端的每个请求必须路由到同一服务器</strong>。这可以通过负载均衡器中的粘性会话来实现；然而，这无疑增加了开销，并且也会为水平扩展带来困难。</p><p><strong>无状态服务器架构(Stateless Architecture)</strong></p><p>无状态服务器不会保留任何状态信息，其服务器架构如下所示：</p><p><img src="/img/design/ch1/1-13.png" alt="" /></p><p>会话数据存储在一个NoSQL数据库中，使得集群中的每个web服务器都能访问数据库中的状态数据。</p><p>选择NoSQL数据存储是因为它易于扩展。</p><hr /><p>现在我们将状态移出web服务器层，并将它们存储在持久化数据存储中，整个系统设计就变成了如下图所示：</p><p><img src="/img/design/ch1/1-14.png" alt="" /></p><hr /><h3 id="4建立数据中心"><a class="markdownIt-Anchor" href="#4建立数据中心"></a> 4.建立数据中心</h3><p>你的网站发展迅速，在国际上吸引了大量用户，为了提高可用性并在更广泛的地理区域提供更好的体验，支持多个数据中心至关重要。</p><h4 id="数据中心data-center"><a class="markdownIt-Anchor" href="#数据中心data-center"></a> 数据中心(Data Center)</h4><p><img src="/img/design/ch1/1-15.png" alt="" /></p><h3 id="5解耦系统组件"><a class="markdownIt-Anchor" href="#5解耦系统组件"></a> 5.解耦系统组件</h3><p>为了进一步扩展我们的系统，我们需要解耦系统的不同组件，以便它们可以独立扩展。</p><h4 id="消息队列message-queue"><a class="markdownIt-Anchor" href="#消息队列message-queue"></a> 消息队列(Message queue)</h4><p>消息队列是一个持久组件，存储在内存中，支持异步通信。它<strong>充当缓冲区并分发异步请求</strong>。</p><p><img src="/img/design/ch1/1-17.png" alt="" /></p><p>消息队列的基本架构很简单：</p><ul><li>输入服务，称为生产者(Producer)，创建消息，并将其发布在消息队列中。</li><li>其它服务，称为消费者(Consumer)，连接到队列，并执行消息中定义的操作。</li></ul><p>解耦使得消息队列成为构建可扩展程序的首选架构。有了消息队列，当消费者无法处理消息时，生产者可以将消息发布到队列。即使生产者不可用，消费者也可以从队列中读取信息。</p><h4 id="日志-指标-自动化logging-metrics-automation"><a class="markdownIt-Anchor" href="#日志-指标-自动化logging-metrics-automation"></a> 日志、指标、自动化(Logging, metrics, automation)</h4><p>日志、指标、自动化是维护网站/应用程序的好工具(tools)。</p><p>日志记录：监控错误日志尤为重要，你可以按服务器级别监视错误日志，也可以聚合到一个集中的服务方便查看</p><p>指标：收集不同类型的指标有助于了解业务发展状况和系统的健康情况。</p><p>自动化：当系统变得庞大时，自动化工具（构建、测试、部署等）可以显著提高生产力。</p><hr /><p>解耦以上组件后，整个系统设计就变成了如下图所示：</p><p><img src="/img/design/ch1/1-19.png" alt="" /></p><hr /><h3 id="最终系统设计图示"><a class="markdownIt-Anchor" href="#最终系统设计图示"></a> 最终系统设计图示</h3><p>加上数据库分片后，最终整个系统设计就变成了如下图所示：</p><p><img src="/img/design/ch1/1-23.png" alt="" /></p><p>当然上图也并不是最完善、最具体的设计方案，但是通过以上五点，相信你已经对分布式系统设计有了大体的概念和优化思路。</p><h2 id="ref"><a class="markdownIt-Anchor" href="#ref"></a> Ref</h2><p><a href="https://stackoverflow.com/questions/10539129/how-does-replication-work-in-a-distributed-database">https://stackoverflow.com/questions/10539129/how-does-replication-work-in-a-distributed-database</a></p>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-04-25-组会</title>
    <link href="/2022/04/24/Seminar/20220425-%E7%BB%84%E4%BC%9A/"/>
    <url>/2022/04/24/Seminar/20220425-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="2022-04-25-组会"><a class="markdownIt-Anchor" href="#2022-04-25-组会"></a> 2022-04-25-组会</h1><h2 id="1redet"><a class="markdownIt-Anchor" href="#1redet"></a> 1.ReDet</h2><p>再细读了一遍ReDet，并回顾了ROI transformer，理解它的第二个创新点的实现过程。</p><p><a href="/2022/03/27/AI-Learning/20220328-ReDet" target="_blank">ReDet解读</a></p><h2 id="2代码"><a class="markdownIt-Anchor" href="#2代码"></a> 2.代码</h2><p>尝试了去修改文件格式，修改部分代码，修改路径,</p><p>仍然配置不成功，最好的结果是提示文件名过长</p><p><img src="/img/article/2022/04/25/1.png" alt="" /></p><p>注释中说</p><blockquote><p>detpath 是 result文件的路径</p><p>annopath 是 .xml文件的路径</p><p>imagesetfile 是图片文件路径</p></blockquote><p>但是按注释中配置还是会配置失败</p><p>我认为归根结底的原因还是因为作者没有给出配置样例，导致某个路径我设置错了，但我发现不了。</p><h2 id="3接下来的工作"><a class="markdownIt-Anchor" href="#3接下来的工作"></a> 3.接下来的工作</h2><p>我打算去看一些ReDet论文中提到的一些关键文章，如OBB,HBB,HTC 等，去补充一些旋转目标检测的基础理论。</p>]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-04-18-组会</title>
    <link href="/2022/04/17/Seminar/20220418-%E7%BB%84%E4%BC%9A/"/>
    <url>/2022/04/17/Seminar/20220418-%E7%BB%84%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="2022-04-18-组会"><a class="markdownIt-Anchor" href="#2022-04-18-组会"></a> 2022-04-18-组会</h1><p>这两周毕业设计要提交很多材料，花费了很多时间来处理。</p><p>最近两天才有时间继续这边的实验研究。</p><h2 id="1邮箱"><a class="markdownIt-Anchor" href="#1邮箱"></a> 1.邮箱</h2><p>在4月2号晚上，我已经给ReDet的作者发送了电子邮件，询问评估Result的python文件中的路径该怎么配置。但是目前还没有收到回复。</p><h2 id="2reresnet"><a class="markdownIt-Anchor" href="#2reresnet"></a> 2.ReResNet</h2><p>也就是ReDet的backbone，作者在论文中基本没有提到这个backbone的具体实现。<br />我对比了ResNet和ReResNet的代码，查阅到了一些有用的资料，了解了其不同之处。</p><p>具体详情见<a href="/2022/03/27/AI-Learning/20220328-ReDet" target="_blank">ReDet解读</a></p>]]></content>
    
    
    <categories>
      
      <category>组会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReDet</title>
    <link href="/2022/03/27/AI-Learning/20220328-ReDet/"/>
    <url>/2022/03/27/AI-Learning/20220328-ReDet/</url>
    
    <content type="html"><![CDATA[<h1 id="redet"><a class="markdownIt-Anchor" href="#redet"></a> ReDet</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>论文题目</strong> : ReDet: A Rotation-equivariant Detector for Aerial Object Detection</p><p><strong>论文地址</strong> : <a href="https://arxiv.org/pdf/1708.02002.pdf">https://arxiv.org/pdf/1708.02002.pdf</a></p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p>提出了一种旋转等变检测器(ReDet)来从旋转等变特征中提取完全旋转不变的特征。</p><p><img src="/img/article/2022/03/27/1.png" alt="" /></p><p>如图，作者首先说明了普通CNN层对平移的不变性，但对旋转不具备不变性和等变性。作者采用了新的backbone【Reresnet，旋转不变主干网络，使用e2cnn重写Resnet】，能输出具有旋转等变性的特征图。同时特征图经过align后就不再具备旋转不变性了，所以作者也设计了一个特殊的align方法【RiRoI Align,除了普通RRoI Align具有的空间对齐(spatial alignment)，还多了一层方向对齐(orientation alignment)】,使得生成的特征图具备旋转不变性用以检测分类。</p><p>最后，旋转不变主干网络和RiRoI Align的结合形成了ReDet，以提取完全旋转不变的特征，从而实现精确的航空目标检测。</p><h2 id="network"><a class="markdownIt-Anchor" href="#network"></a> Network</h2><p><img src="/img/article/2022/03/27/2.png" alt="" /></p><p>Backbone: ResNet + FPN</p><p>改进–&gt; 添加了旋转等变</p><p>Rotation-equivariant Backbone:  ReResNet + ReFPN</p><p>紧接着采用RPN + RoI Transformer去生成RRoIs，然后再喂入到RiRoI Align 生成RoI feature， 最后再使用全连接层，然后到classification和bbox regression。</p><p>方向对齐: 循环切换方向通道并插值特征，以生成完全旋转不变的特征。</p><h2 id="detail"><a class="markdownIt-Anchor" href="#detail"></a> Detail</h2><h3 id="1backbonereresnet"><a class="markdownIt-Anchor" href="#1backbonereresnet"></a> 1.backbone【ReResNet】</h3><p>作者使用e2cnn，重写了mmdetction框架中的ResNet，形成了新的ReResNet，使其能输出具有旋转等变性的特征图。</p><p><img src="/img/article/2022/03/27/3.png" alt="" /></p><p>如图所示，在整体代码结构上，ReResNet相较于ResNet几乎没有变化。</p><p>作者在这里的主要工作，是使用开源的e2cnn库，重写了所有层(包括convolution, pooling, normalization, non-linearity等)，然后在代码中使用了这些层的地方全部做了替换。</p><p><img src="/img/article/2022/03/27/4.png" alt="" /></p><h3 id="2neckrefpn"><a class="markdownIt-Anchor" href="#2neckrefpn"></a> 2.neck【ReFPN】</h3><p>几乎与ReResNet如法炮制，同样使用e2cnn重写所有层。</p><p>但在ReFPN中多出了一个ConvModule，其e2cnn的部分都在这边引用，具体细节还在对比。</p><p><strong>e2cnn</strong></p><p>e2cnn全称:E(2)群等变可操控神经网络，于2019年提出，基于群等变卷积网络GroupEquivariant-CNN，给出了群表示如何改变特征图的概述，论述了群表示与非线性的兼容性。</p><p>论文地址：<a href="https://arxiv.org/pdf/1911.08251">https://arxiv.org/pdf/1911.08251</a></p><p>该作者给出了e2cnn的实现库，发布在github上：<a href="https://github.com/QUVA-Lab/e2cnn">https://github.com/QUVA-Lab/e2cnn</a></p><p>论文解读：<a href="https://blog.csdn.net/bxdzyhx/article/details/110521748">https://blog.csdn.net/bxdzyhx/article/details/110521748</a></p><p>这一部分论文偏理论，太过硬核，没看懂，需要抽象代数学得很好。。。<br />不过知道这个trick对旋转框很有用就行了。</p><h3 id="3roi-transformer"><a class="markdownIt-Anchor" href="#3roi-transformer"></a> 3.RoI transformer</h3><p><img src="/img/article/2022/03/27/9.png" alt="" /><br />原本的RT分为两部分，RRoI learner和RRoI warping。learner用来捕捉对旋转鲁棒的特征，warping相当于align部分。在本文中被拆开来用了。下图是RT的结构图：<br /><img src="/img/article/2022/03/27/5.png" alt="" /></p><h4 id="rroi-learner"><a class="markdownIt-Anchor" href="#rroi-learner"></a> RRoI learner</h4><p>在learner中，把RPN输出的HRoI当作输入，一次卷积后缩小至10channels，进入全连接层，输出一个5维向量(x,y,w,h,θ)，每个维度的GT(Groud Turth)值如下：<br /><img src="/img/article/2022/03/27/6.png" alt="" /><br />这里的五个值是RRoI GT和HRoI的偏移量，用这些偏移量作为输入进入decoder模块，解码出RRoI的相关参数，即(x,y,w,h,θ)。<br />这样可以使得最终的RRoI尽可能靠近gt值，这样即减少了参数量也提高了旋转框检测的性能。</p><h4 id="rroi-warpingrotation-invariant-roi-align"><a class="markdownIt-Anchor" href="#rroi-warpingrotation-invariant-roi-align"></a> RRoI warping(Rotation-invariant RoI Align)</h4><p>作者认为RoI warping已经可以捕捉旋转特征，但还无法使得生成的特征图具备旋转不变性，因此在RoI warping基础上添加了一个orientation alignment。同时为了保留位置信息，重新设计了特征图。</p><p><img src="/img/article/2022/03/27/7.png" alt="" /></p><p>本文的特征图维度为(k,n,h,w)，k是位置信息，n是方向channel数。</p><p>在orientation alignment中，特征图被分为n个方向的子特征图(一个channel一个方向)，根据对应的RoI的θ值,去进行该特征图的方向对齐，作者称这个过程叫switch channels。其过程如下：</p><p><img src="/img/article/2022/03/27/8.png" alt="" /></p><p>根据θ值计算一个下标r=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌊</mo><mfrac><mrow><mi>θ</mi><mo>∗</mo><mi>N</mi></mrow><mrow><mn>2</mn><mi>π</mi></mrow></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor \frac{\theta*N}{2\pi}\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="mbin mtight">∗</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span>，r&lt;=1说明在N个方向内，r&gt;1说明在N个方向外。</p><p>如果θ值属于我们事先设定的N个方向中，则将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>N</mi><mrow><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">C_N^{(r)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.338331em;vertical-align:-0.29353099999999993em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4064690000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29353099999999993em;"><span></span></span></span></span></span></span></span></span></span>这个特征图与其他前一个orientation channel特征图循环交换，直到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>N</mi><mrow><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">C_N^{(r)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.338331em;vertical-align:-0.29353099999999993em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4064690000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29353099999999993em;"><span></span></span></span></span></span></span></span></span></span>在第一位；如果θ值不属于N个方向，也就是说r需要向下取整，此时先交换至第一个特征图再通过线性插值的方法计算出该特征图的值。</p><p>【switch channels具体过程是这个样子，但是其原理没有弄懂，按文章中说应该是和e2cnn有很大关系】</p><blockquote><p>虽然目标检测方向的论文大体上都看过，了解一些目标检测Network架构，但感觉自己在遥感目标检测的一些专业术语知识还是太少了。</p><p>比如OBB, HBB,rotation-invariant features, RRoI Pooling ,RRoI Align，这篇文章还提到了 group convolutions（群卷积）也没接触过。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树&amp;N叉树</title>
    <link href="/2022/02/07/Algorithm/LeetCode/20220207-%E4%BA%8C%E5%8F%89%E6%A0%91&amp;N%E5%8F%89%E6%A0%91/"/>
    <url>/2022/02/07/Algorithm/LeetCode/20220207-%E4%BA%8C%E5%8F%89%E6%A0%91&amp;N%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>这种用指针表示的数据结构一般在leetcode上才会刷到，板子简单，浅浅总结一下。</p><h2 id="二叉树bst"><a class="markdownIt-Anchor" href="#二叉树bst"></a> 二叉树(BST)</h2><p>二叉树考点核心是深度优先搜索。</p><h3 id="二叉树的定义"><a class="markdownIt-Anchor" href="#二叉树的定义"></a> 二叉树的定义</h3><pre class="language-c++" data-language="c++"><code class="language-c++">struct TreeNode &#123;    int val;    TreeNode* left;    TreeNode* right;    TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;    TreeNode(int _val) : val(_val), lefft(nullptr), right(nullptr) &#123;&#125;    TreeNode(int _val, TreeNode* _left, TreeNode* _right) : val(_val), left(_left), right(_right) &#123;&#125;&#125;</code></pre><h3 id="二叉树的前序中序后序遍历-dfs"><a class="markdownIt-Anchor" href="#二叉树的前序中序后序遍历-dfs"></a> 二叉树的前序中序后序遍历-DFS</h3><p><strong>前序遍历</strong></p><p>前序遍历<strong>根左右</strong>，前序指的是根在前</p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    vector&lt;int&gt; preorderTraversal(TreeNode* root) &#123;        auto dfs &#x3D; [            f &#x3D; [](auto&amp;&amp; self, TreeNode* root, vector&lt;int&gt;&amp; res) -&gt; void &#123;                if (root &#x3D;&#x3D; nullptr) &#123;                    return;                &#125;                res.push_back(root-&gt;val);                self(self, root-&gt;left, res);                self(self, root-&gt;right, res);            &#125;        ] (TreeNode* root, vector&lt;int&gt;&amp; res) -&gt; void &#123;return f(f, root, res);&#125;;        vector&lt;int&gt; res;        dfs(root, res);        return res;    &#125;&#125;;</code></pre><p>更新，加个引用&amp;，可以这么递归调用lambda</p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    vector&lt;int&gt; preorderTraversal(TreeNode* root) &#123;        function&lt;void (TreeNode*, vector&lt;int&gt;&amp;)&gt; dfs &#x3D; [&amp;](TreeNode* root, vector&lt;int&gt;&amp; res) &#123;            if (root &#x3D;&#x3D; nullptr) &#123;                return;            &#125;            res.push_back(root-&gt;val);            dfs(root-&gt;left, res);            dfs(root-&gt;right, res);        &#125;;        vector&lt;int&gt; res;        dfs(root, res);        return res;    &#125;&#125;;</code></pre><p><strong>中序遍历</strong></p><p>中序遍历<strong>左根右</strong>，中序指的是根在中</p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    vector&lt;int&gt; inorderTraversal(TreeNode* root) &#123;        auto dfs &#x3D; [            f &#x3D; [](auto&amp;&amp; self, TreeNode* root, vector&lt;int&gt;&amp; res) -&gt; void &#123;                if (root &#x3D;&#x3D; nullptr) &#123;                    return;                &#125;                self(self, root-&gt;left, res);                res.push_back(root-&gt;val);                self(self, root-&gt;right, res);            &#125;        ](TreeNode* root, vector&lt;int&gt;&amp; res) &#123;return f(f, root, res);&#125;;        vector&lt;int&gt; res;        dfs(root, res);        return res;    &#125;&#125;;</code></pre><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    vector&lt;int&gt; inorderTraversal(TreeNode* root) &#123;        function&lt;void (TreeNode*, vector&lt;int&gt;&amp;)&gt; dfs &#x3D; [&amp;](TreeNode* root, vector&lt;int&gt;&amp; res) &#123;            if (root &#x3D;&#x3D; nullptr) &#123;                return;            &#125;            dfs(root-&gt;left, res);            res.push_back(root-&gt;val);            dfs(root-&gt;right, res);        &#125;;        vector&lt;int&gt; res;        dfs(root, res);        return res;    &#125;&#125;;</code></pre><p><strong>后续遍历</strong></p><p>后序遍历<strong>左右根</strong>，后序指的是根在后</p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    vector&lt;int&gt; postorderTraversal(TreeNode* root) &#123;        auto dfs &#x3D; [            f &#x3D; [](auto&amp;&amp; self, TreeNode* root, vector&lt;int&gt;&amp; res) -&gt; void &#123;                if (root &#x3D;&#x3D; nullptr) &#123;                    return;                &#125;                self(self, root-&gt;left, res);                self(self, root-&gt;right, res);                res.push_back(root-&gt;val);            &#125;        ](TreeNode* root, vector&lt;int&gt;&amp; res) &#123;return f(f, root, res);&#125;;        vector&lt;int&gt; res;        dfs(root, res);        return res;    &#125;&#125;;</code></pre><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    vector&lt;int&gt; postorderTraversal(TreeNode* root) &#123;        function&lt;void (TreeNode*, vector&lt;int&gt;&amp;)&gt; dfs &#x3D; [&amp;](TreeNode* root, vector&lt;int&gt;&amp; res) &#123;            if (root &#x3D;&#x3D; nullptr) &#123;                return;            &#125;            dfs(root-&gt;left, res);            dfs(root-&gt;right, res);            res.push_back(root-&gt;val);        &#125;;        vector&lt;int&gt; res;        dfs(root, res);        return res;    &#125;&#125;;</code></pre><h3 id="二叉树的层次遍历-bfs"><a class="markdownIt-Anchor" href="#二叉树的层次遍历-bfs"></a> 二叉树的层次遍历-BFS</h3><p>如何在路径中确定祖孙关系</p><h2 id="n叉树"><a class="markdownIt-Anchor" href="#n叉树"></a> N叉树</h2><h3 id="n叉树的前序中序后序遍历-dfs"><a class="markdownIt-Anchor" href="#n叉树的前序中序后序遍历-dfs"></a> N叉树的前序中序后序遍历-DFS</h3><p><strong>前序遍历</strong></p><p><strong>中序遍历</strong></p><p><strong>后续遍历</strong></p><h3 id="n叉树的层次遍历-bfs"><a class="markdownIt-Anchor" href="#n叉树的层次遍历-bfs"></a> N叉树的层次遍历-BFS</h3>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RetinaNet</title>
    <link href="/2022/01/16/AI-Learning/20220117-RetinaNet/"/>
    <url>/2022/01/16/AI-Learning/20220117-RetinaNet/</url>
    
    <content type="html"><![CDATA[<h1 id="retinanet"><a class="markdownIt-Anchor" href="#retinanet"></a> RetinaNet</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>论文题目</strong> : ReDet:A Rotation-equivariant Detector for Aerial Object Detection</p><p><strong>论文地址</strong> : <a href="https://arxiv.org/pdf/1708.02002.pdf">https://arxiv.org/pdf/1708.02002.pdf</a></p><p>Focal Loss用于解决类别不均衡问题，从而创造了RetinaNet（One Stage目标检测算法）这个精度超越经典Two Stage的Faster-RCNN的目标检测网络。</p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p><img src="/img/article/2022/01/17/1.png" alt="" /></p><p>基于深度学习的目标检测算法有两类经典的结构：Two Stage 和 One Stage。</p><p><strong>Two Stage(1-2k)</strong>：例如Faster-RCNN算法。第一阶段专注于proposal的提取，第二阶段对提取出的proposal进行分类和精确坐标回归。两级结构准确度较高，但因为第二级需要单独对每个proposal进行分类/回归，速度上就打了折扣。</p><p><strong>One Stage(~100k)</strong>:  例如SSD，YOLO算法。此类算法摒弃了提取proposal的过程，只用一级就完成了识别/回归，虽然速度较快但准确率远远比不上两级结构。</p><p><strong>产生精度差异的主要原因：类别失衡（Class Imbalance）</strong>。One Stage方法在得到特征图后，会产生密集的目标候选区域，而这些大量的候选区域中只有很少一部分是真正的目标，这样就造成了机器学习中经典的训练样本正负不平衡的问题。它往往会造成最终算出的training loss为占绝对多数但包含信息量却很少的负样本所支配，少样正样本提供的关键信息却不能在一般所用的training loss中发挥正常作用，从而无法得出一个能对模型训练提供正确指导的loss（而Two Stage方法得到proposal后，其候选区域要远远小于One Stage产生的候选区域，因此不会产生严重的类别失衡问题）。该论文中提出了Focal Loss来降低类别失衡，对最终的Loss进行校正。</p><h2 id="network"><a class="markdownIt-Anchor" href="#network"></a> Network</h2><p><img src="/img/article/2022/01/17/2.png" alt="" /></p><p>RetinaNet的网络结构: ResNet + FPN +  FCN*2</p><p>输入图像经过Backbone的特征提取后，可以得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">{P_3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>7</mn></msub></mrow><annotation encoding="application/x-tex">{P_7}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>特征金字塔，对每层特征金字塔分别使用两个子网络（分类网络+检测框位置回归）。</p><p>子网络的设计类似于RPN，使用anchors来产生proposal。</p><p><strong>上面说到的Focal Loss就应用于类别分类的子网络</strong>，即可有效移植类别不均衡问题。</p><p>特征金字塔每层都相应的产生目标类别与位置的预测，最后再将其融合起来，同时使用NMS来得到最后的检测结果。</p><h3 id="focal-loss"><a class="markdownIt-Anchor" href="#focal-loss"></a> Focal Loss</h3><p>Focal Loss这个trick主要是在交叉熵损失函数做改进。</p><p>对于一般的二分类问题，其交叉熵损失函数如下:</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>E</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>L</mi><mo stretchy="false">(</mo><mi>y</mi><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>y</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{CE(p,y) = L(y,p) = -ylog(p) - (1-y)log(1-p)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></span></p><p>可以写成:</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>E</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><mrow><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mi>y</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mi>y</mi><mo>=</mo><mo>−</mo><mn>1</mn><mo stretchy="false">(</mo><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">CE= \begin{cases}  -\log_{}{(p)} &amp; \text{ if } y=1   \\  -\log_{}{(1-p)} &amp; \text{ if } y=-1(otherwise)\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>为了方便，定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">{p_t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span>，如下:</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>t</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>p</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mi>y</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>−</mo><mi>p</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mi>y</mi><mo>=</mo><mo>−</mo><mn>1</mn><mo stretchy="false">(</mo><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">p_t= \begin{cases}  p &amp; \text{ if } y=1   \\  1-p &amp; \text{ if } y=-1(otherwise)\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">p</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>这样CE就可以表示成如下表达式:</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>E</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>C</mi><mi>E</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mi>t</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>log</mi><mo>⁡</mo><mrow></mrow><msub><mi>p</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">CE(p,y) = CE(p_t) = -\log{}{p_t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>pt可以看作样本被正确分类的一个概率值。</p><p>可以认为当模型预测得到的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>t</mi></msub><mo>&gt;</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">P_t &gt; 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>的样本为easy examples ; 而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">P_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>值预测较小的样本为hard examples。</p><h4 id="postivenegative-example"><a class="markdownIt-Anchor" href="#postivenegative-example"></a> Postive/Negative example</h4><p>解决class imbalance的一个方法是为类1添加一个权重因子α ∈ [0, 1]，对于y =1的使用权重 α ，对y =-1使用 1-α；这样就能一定程度上的解决了正负样本的不平衡。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>E</mi><mo>=</mo><mo>−</mo><mi>α</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><msub><mi>p</mi><mi>t</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>α</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><mrow><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mi>y</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mi>y</mi><mo>=</mo><mo>−</mo><mn>1</mn><mo stretchy="false">(</mo><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">CE= -\alpha \log_{}{p_t}= \begin{cases}  -\alpha \log_{}{(p)} &amp; \text{ if } y=1   \\  -(1-\alpha)\log_{}{(1-p)} &amp; \text{ if } y=-1(otherwise)\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h4 id="easyhard-example"><a class="markdownIt-Anchor" href="#easyhard-example"></a> Easy/Hard example</h4><p>因为hard examples通常为少数样本，所以虽然其对应的loss值较高，但是最后全部累加后，大部分的loss值来自于容易分类的样本，这样在模型优化的过程中就会将更多的优化放到容易分类的样本中，而忽略hard examples。因此论文中引入调节因子<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>p</mi><mi>t</mi></msub><msup><mo stretchy="false">)</mo><mi>γ</mi></msup></mrow><annotation encoding="application/x-tex">(1-p_t)^{\gamma}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05556em;">γ</span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>E</mi><mo>=</mo><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>p</mi><mi>t</mi></msub><msup><mo stretchy="false">)</mo><mi>γ</mi></msup><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><msub><mi>p</mi><mi>t</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>γ</mi></msup><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><mrow><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mi>y</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msup><mi>p</mi><mi>γ</mi></msup><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mi>y</mi><mo>=</mo><mo>−</mo><mn>1</mn><mo stretchy="false">(</mo><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">CE= -(1-p_t)^{\gamma} \log_{}{p_t}= \begin{cases}  -(1-p)^{\gamma} \log_{}{(p)} &amp; \text{ if } y=1   \\  -p^{\gamma}\log_{}{(1-p)} &amp; \text{ if } y=-1(otherwise)\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05556em;">γ</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05556em;">γ</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05556em;">γ</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">P_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>较大时为Easy example，此时调制因子接近0, 降低了Loss累加中Easy example的权重;</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">P_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>较小时为Hard example，此时调制因子接近1, 增加了Loss累加中Easy example的权重。</p><p>通过实验测试，超参数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>γ</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\gamma = 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>效果最好。</p><p><img src="/img/article/2022/01/17/3.png" alt="" /></p><hr /><p>将上述两种权重因子整合起来，就是最终的Focal Loss:</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>E</mi><mo>=</mo><mo>−</mo><mi>α</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>p</mi><mi>t</mi></msub><msup><mo stretchy="false">)</mo><mi>γ</mi></msup><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><msub><mi>p</mi><mi>t</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>α</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mi>γ</mi></msup><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><mrow><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mi>y</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo><msup><mi>p</mi><mi>γ</mi></msup><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow></mrow></msub><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mi>y</mi><mo>=</mo><mo>−</mo><mn>1</mn><mo stretchy="false">(</mo><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">CE= -\alpha(1-p_t)^{\gamma} \log_{}{p_t}= \begin{cases}  -\alpha(1-p)^{\gamma} \log_{}{(p)} &amp; \text{ if } y=1   \\  -(1-\alpha)p^{\gamma}\log_{}{(1-p)} &amp; \text{ if } y=-1(otherwise)\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05556em;">γ</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05556em;">γ</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05556em;">γ</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.24414em;"><span style="top:-1.75586em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>下图是论文中给出的试验结果，相比较于经典的Two Stage检测方法Faster-RCNN，RetinaNet具有更高的精度。</p><p><img src="/img/article/2022/01/17/4.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROI Transformer</title>
    <link href="/2021/12/12/AI-Learning/20211212-ROI%20Transformer/"/>
    <url>/2021/12/12/AI-Learning/20211212-ROI%20Transformer/</url>
    
    <content type="html"><![CDATA[<h1 id="roi-transformer"><a class="markdownIt-Anchor" href="#roi-transformer"></a> ROI Transformer</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><ul><li><strong>论文题目</strong> : Learning RoI Transformer for Oriented Object Detection in Aerial Images</li><li><strong>论文作者</strong> : Jian Ding, Nan Xue, Yang Long, Gui-Song Xia∗ , Qikai Lu – LIESMARS-CAPTAIN, Wuhan University</li><li><strong>论文地址</strong> : <a href="https://openaccess.thecvf.com/content_CVPR_2019/html/Ding_Learning_RoI_Transformer_for_Oriented_Object_Detection_in_Aerial_Images_CVPR_2019_paper">CVPR_2019-ROI Transformer</a></li><li><strong>代码实现</strong> : <a href="https://github.com/dingjiansw101/AerialDetection">https://github.com/dingjiansw101/AerialDetection</a></li></ul><p>鸟瞰视角、高度复杂的背景、目标外形的剧烈变化使得航拍图像目标检测成为难题。尤其当航拍图像中目标密集存在时，常规目标检测中的水平proposals（HRoIs）与目标之间的不匹配将进一步影响分类和定位。本文中作者提出了[<strong>RoI Transformer</strong>]方法来解决这一问题，基于两阶段框架，通过基于位置敏感对齐的监督RRoI学习和特征提取，实现定向和密集对象的检测。</p><p><img src="/img/article/2021/12/12/1.png" alt="" /></p><p>水平RoI通常包含多个实例，而旋转RoI通常更加精确。</p><p>RoI Transformer是轻量级的且可以很容易的嵌入各种旋转目标检测器中。</p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p>本文中作者提出的ROI Transformer 由两部分组成:</p><ul><li><p><strong>第一部分是RRoI Learner，它学习从HRoIs到RRoIs的转换；</strong></p></li><li><p><strong>第二部分是RRoI Warping，它从RRoI中提取旋转不变的特征，用于后续的分类和回归子任务</strong>。</p></li><li><p>HRoIs(horizontal RoIs):水平候选框</p></li><li><p>RRoIs(Rotated RoIs):   旋转候选框</p></li><li><p>RGTs(Rotated Ground Truths): 预先标注的旋转真实框</p></li></ul><h2 id="details"><a class="markdownIt-Anchor" href="#details"></a> Details</h2><h3 id="rroi-learner"><a class="markdownIt-Anchor" href="#rroi-learner"></a> RRoI Learner</h3><p><img src="/img/article/2021/12/12/2.png" alt="" /></p><p>PS RoI Align(Position Sensitive RoI Alignment) [位置敏感的候选区域]</p><blockquote><p>这个概念涉及到一篇以前的论文R-FCN，其主要思想是在特征聚集时 <strong>人工引入位置信息</strong> ，从而有效改善较深的神经网络对物体位置信息的敏感程度</p><p>PS-ROI Align 对模型的检测性能有提升，对小物体的感知能力有明显改善</p></blockquote><p>这个网络将HRoIs 作为输入传给RRoI Learner，</p><p>FC-5: 后面跟着一个5维的全连接层，该全连接层用于回归RGTs相对于HRoIs的偏移量。</p><p>DeCoder: 解码器，将HRoIs和偏移量作为输入，输出RRoI</p><p>后续将Featrue map和RRoIs传递给RRoI Warping，用于几何鲁棒特征提取。</p><h3 id="rroi-warping"><a class="markdownIt-Anchor" href="#rroi-warping"></a> RRoI Warping</h3><p>RRoI Warping通过RRoI的参数提取旋转不变的深度特征（其实就是用Rotated Position Sensitive RoI pooling实现旋转版的池化）。</p><p><img src="/img/article/2021/12/12/4.png" alt="" /></p><p>因为采用Light-Head R-CNN，这里RRoI Warping具体使用Rotated Position Sensitive (RPS) RoI Align。</p><p><img src="/img/article/2021/12/12/5.png" alt="" /></p><p>给定具有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo>×</mo><mi>W</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">H × W × C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span>通道的输入特征图  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">D</mi></mrow><annotation encoding="application/x-tex">\mathcal{D}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">D</span></span></span></span></span> 和 RRoI <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>r</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>r</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>r</mi></msub><mo separator="true">,</mo><msub><mi>h</mi><mi>r</mi></msub><mo separator="true">,</mo><msub><mi>θ</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_r,y_r,w_r,h_r,θ_r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>RPS RoI pooling 将旋转的 Rotated RoI 分成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>×</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">K × K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> bin，并输出形状为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>×</mo><mi>K</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">K × K × C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 的特征图 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">Y</mi></mrow><annotation encoding="application/x-tex">\mathcal{Y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.08222em;">Y</span></span></span></span></span>。</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">D</mi></mrow><annotation encoding="application/x-tex">\mathcal{D}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">D</span></span></span></span></span>是输入的feature map</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>θ</mi></msub></mrow><annotation encoding="application/x-tex">T_θ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是RRoIs</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">Y</mi></mrow><annotation encoding="application/x-tex">\mathcal{Y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.08222em;">Y</span></span></span></span></span>是输出的feature map</li><li>bin 是池化的一小块， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">n_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>是每一块bin的样本参数量</li></ul><p>对于每个bin的(x,y)，通过以下式子转换为(x’,y’):</p><p><img src="/img/article/2021/12/12/6.png" alt="" /></p><h3 id="iou的计算"><a class="markdownIt-Anchor" href="#iou的计算"></a> IOU的计算</h3><p><img src="/img/article/2021/12/12/7.jpg" alt="" /></p><p>计算RRoI 和匹配的 RGT 之间的 IoU，也是不规则多边形的IOU，作者在文章中没有提及计算方法。</p><p>对于长而窄的边界框，角度的轻微抖动可能导致两个盒子的 IoU 非常低，因此阈值取0.5.</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLOv2v3</title>
    <link href="/2021/11/27/AI-Learning/20211128-YOLOv2v3/"/>
    <url>/2021/11/27/AI-Learning/20211128-YOLOv2v3/</url>
    
    <content type="html"><![CDATA[<h1 id="yolo-v2v3"><a class="markdownIt-Anchor" href="#yolo-v2v3"></a> YOLO v2v3</h1><p>YOLOv1的缺陷:</p><ol><li><p>虽然速度快，但是准确度比较低</p></li><li><p>定位性能比较差，相对于FastRCNN来说，是就调整检测框的能力较差</p></li><li><p>ReCall比较低，(把全部目标检出的能力较差)YOLOv1把图像划分成7*7个Grid Cell，每个GridCell 预测两个BBox，最多有98个BBox，如果图像中目标很多，就很难把所有目标检测出来，所以ReCall比较低</p></li><li><p>7*7个Grid Cell 每个GridCell只能负责预测一个物体，所以最多检测出49个物体，因此检测小目标和密集目标也很差</p></li></ol><p>Better:</p><ul><li>Batch Normalization</li></ul><p>归一化 = (输出- 输出均值) / 标准差</p><ul><li>High Resolution Classifier (高分辨率的分类器)</li><li>Anchor</li><li>Dimension Cluster</li><li>Direct location prediction(直接定位)</li><li>Fine-Grained Features (细粒度特征)</li><li>Multi-Scale Training(多尺度训练)</li></ul>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLOv1</title>
    <link href="/2021/11/21/AI-Learning/20211121-YOLOv1/"/>
    <url>/2021/11/21/AI-Learning/20211121-YOLOv1/</url>
    
    <content type="html"><![CDATA[<h1 id="yolov1"><a class="markdownIt-Anchor" href="#yolov1"></a> YOLOv1</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><ul><li><strong>论文题目</strong> : You Only Look Once: Unified, Real-Time Object Detection</li><li><strong>论文地址</strong> : <a href="https://arxiv.org/pdf/1506.02640.pdf">https://arxiv.org/pdf/1506.02640.pdf</a><br />YOLO将物体检测作为回归问题求解。基于一个单独的end-to-end网络，完成从原始图像的输入到物体位置和类别输出。</li></ul><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><p>[1] YOLO训练和检测均是在一个单独网络中进行。YOLO没有显示地求取region proposal的过程。而rcnn/fast rcnn 采用分离的模块）求取候选框（可能会包含物体的矩形区域），训练过程因此也是分成多个模块进行。</p><p>[2]YOLO将物体检测作为一个回归问题进行求解，输入图像经过一次inference，便能得到图像中所有物体的位置和其所属类别及相应的置信概率。</p><h2 id="network"><a class="markdownIt-Anchor" href="#network"></a> NetWork</h2><p><img src="/img/article/2021/11/21/1.png" alt="" /></p><h3 id="predicting"><a class="markdownIt-Anchor" href="#predicting"></a> Predicting</h3><p><img src="/img/article/2021/11/21/13.png" alt="" /></p><p><img src="/img/article/2021/11/21/2.png" alt="" /></p><p><strong>PPT演示</strong> : <a href="https://docs.google.com/presentation/d/1aeRvtKG21KHdD5lg6Hgyhx5rPq_ZOsGjG5rJ1HP7BbA/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p">地址</a></p><p>把448x448x3的输入图像，进行编码、压缩、处理，经过卷积层，全连接层，最后得到一个7x7x30的张量。</p><p>7x7对应的是7x7个Grid Cell，30维由5(第一个BBox参数)、5(第一个BBox参数)、20(假设在该GridCell的条件下，对应的20个类别概率)构成。</p><p>全概率=条件本身发生的概率[置信度,Grid Cell在该BBox包含物体的概率]x条件概率[该条件下，20个类别概率]</p><p>使用NMS[非极大值抑制]把低置信度和重复的框过滤掉，只保留一个，最终获得目标检测的结果。</p><h3 id="training"><a class="markdownIt-Anchor" href="#training"></a> Training</h3><p>深度学习的训练是通过梯度下降和反向传播方法，去迭代更新神经元的权重，来使得Loss函数最小化的过程。</p><p><img src="/img/article/2021/11/21/10.png" alt="" /></p><p>人工标注数据Ground Truth，这个Ground Truth的中心点落在哪个Grid Cell里，就应该由哪个Grid Cell预测出的BBox负责拟合这个Ground Truth。</p><p><img src="/img/article/2021/11/21/11.png" alt="" /></p><p>之前也说到每个Grid Cell预测两个BBox，然后分别计算IOU，选择IOU较大的BBox来负责拟合该Ground Truth，让该BBox最终尽可能逼近Ground Truth。</p><p><img src="/img/article/2021/11/21/12.png" alt="" /></p><p>接下来看损失函数:</p><p><img src="/img/article/2021/11/21/14.png" alt="" /></p><p>遍历所有Grid Cell中的所有BBox，采用平方和误差。</p><ul><li>整体分为五个部分，负责检测的BBox的中心点误差、负责检测的BBox的宽高误差、负责检测的BBox的Confidence误差、不负责检测的BBox的Confidence误差、负责检测物体的Grid Cell的分类误差。</li><li>对于负责检测的BBox的宽高误差，采用求根号能使小框对误差更敏感</li><li>给予负责检测物体的BBox更高的权重：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mrow><mi>c</mi><mi>o</mi><mi>o</mi><mi>r</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{\lambda _{coord} }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>  ，给予不负责检测物体的BBox较低的权重：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mrow><mi>n</mi><mi>o</mi><mi>o</mi><mi>b</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{\lambda _{noobj}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></li></ul>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>R-CNN系列目标检测模型</title>
    <link href="/2021/11/14/AI-Learning/20211114-R-CNN%E7%B3%BB%E5%88%97%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E6%A8%A1%E5%9E%8B/"/>
    <url>/2021/11/14/AI-Learning/20211114-R-CNN%E7%B3%BB%E5%88%97%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="r-cnn-fast-r-cnn-faster-r-cnn"><a class="markdownIt-Anchor" href="#r-cnn-fast-r-cnn-faster-r-cnn"></a> R-CNN、Fast R-CNN、Faster R-CNN</h1><h2 id="1-r-cnn"><a class="markdownIt-Anchor" href="#1-r-cnn"></a> 1 R-CNN</h2><h3 id="11-introduction"><a class="markdownIt-Anchor" href="#11-introduction"></a> 1.1 Introduction</h3><ul><li><strong>论文题目</strong> : Rich feature hierarchies for accurate object detection and semantic segmentation</li><li><strong>论文地址</strong> : <a href="https://arxiv.org/abs/1311.2524v3">https://arxiv.org/abs/1311.2524v3</a></li></ul><p>R-CNN（Region CNN，区域卷积神经网络）可以说是利用深度学习进行目标检测的开山之作。</p><h3 id="12-idea"><a class="markdownIt-Anchor" href="#12-idea"></a> 1.2 Idea</h3><ul><li>经典的目标检测算法使用滑动窗法依次判断所有可能的区域。作者则(采用Selective Search方法)预先提取一系列较可能是物体的候选区域。</li><li>经典的目标检测算法在区域中提取人工设定的特征。作者则采用深度网络(CNN)进行特征提取。</li></ul><h3 id="13-network"><a class="markdownIt-Anchor" href="#13-network"></a> 1.3 Network</h3><p><img src="/img/article/2021/11/14/1.png" alt="R-CNN网络结构" /></p><p><strong>Step1</strong> :输入图像<br /><strong>Step2</strong> :每张图像生成1K~2K个候选区域<br /><strong>Step3</strong> :对每个候选区域，使用卷积网络(如VGG16)提取特征<br /><strong>Step4</strong> :将特征送入每一类的SVM分类器，判别是否属于该类; 使用回归器精细修正候选框位置</p><h3 id="14-detail"><a class="markdownIt-Anchor" href="#14-detail"></a> 1.4 Detail</h3><h4 id="region-proposal"><a class="markdownIt-Anchor" href="#region-proposal"></a> Region Proposal</h4><p>对应上述Step2</p><p>作者使用Selective Search（选择性搜索）生成候选区域，Selective Search的实现思路如下:</p><blockquote><p>（1）使用一种过分割手段，将图像分割成小区域</p><p>（2）查看现有小区域，合并可能性最高的两个区域，重复直到整张图像合并成一个区域位置。优先合并以下区域：</p><ul><li>颜色（颜色直方图）相近的</li><li>纹理（梯度直方图）相近的</li><li>合并后总面积小的</li><li>合并后，总面积在其BBOX中所占比例大的<br />在合并时须保证合并操作的尺度较为均匀，避免一个大区域陆续“吃掉”其它小区域，保证合并后形状规则。</li></ul><p>（3）输出所有曾经存在过的区域，即所谓候选区域</p></blockquote><p>具体算法可以看原论文<a href="https://ivi.fnwi.uva.nl/isis/publications/2013/UijlingsIJCV2013/UijlingsIJCV2013.pdf">《Selective Search for Object Recognition》</a></p><h4 id="feature-extraction"><a class="markdownIt-Anchor" href="#feature-extraction"></a> Feature Extraction</h4><p>对应上述Step3</p><p>使用深度网络提取特征之前，首先把候选区域归一化成同一尺寸227×227。</p><p>作者使用CNN网络进行训练，第一选择经典的Alexnet；第二选择VGG16。(经测试Alexnet精度为58.5%，VGG16精度为66%)</p><p>通过CNN网络训练完毕后，最后提取特征每个输入候选框图片都能得到一个4096维的特征向量。</p><h4 id="classification-and-regression"><a class="markdownIt-Anchor" href="#classification-and-regression"></a> Classification and Regression</h4><p>分类，作者使用的是SVM分类器</p><p>作者测试了IOU阈值各种方案数值0.1,0.2,0.3,0.4,0.5。最后通过训练发现，如果选择IOU阈值为0.3效果最好（选择为0精度下降了4个百分点，选择0.5精度下降了5个百分点）,即当重叠度小于0.3的时候，把它标注为负样本。</p><p>我们将为每个物体类训练一个SVM分类器。当我们用CNN提取2000个候选框，可以得到[2000x4096]这样的特征向量矩阵，然后我们只需要把这样的一个矩阵与svm权值矩阵4096xN点乘(N为分类类别数目，因为我们训练的N个SVM，每个SVM包含了4096个权值w)，就可以得到分类结果了。</p><p>边界回归，也就是Bounding-box regression。</p><p><img src="/img/article/2021/11/14/2.png" alt="" /></p><p><img src="/img/article/2021/11/14/3.png" alt="" /></p><p><img src="/img/article/2021/11/14/4.png" alt="" /></p><h2 id="2-fast-r-cnn"><a class="markdownIt-Anchor" href="#2-fast-r-cnn"></a> 2 Fast R-CNN</h2><h3 id="21-introduction"><a class="markdownIt-Anchor" href="#21-introduction"></a> 2.1 Introduction</h3><ul><li><strong>论文题目</strong> : Fast R-CNN</li><li><strong>论文地址</strong> : <a href="https://arxiv.org/abs/1504.08083">https://arxiv.org/abs/1504.08083</a></li></ul><p>继2014年的R-CNN推出之后，作者在2015年推出Fast R-CNN，其流程更为紧凑，大幅提升了目标检测的速度。Fast R-CNN和R-CNN相比，训练时间从84小时减少到9.5小时，测试时间从47秒减少到0.32秒，并且在PASCAL VOC 2007上测试的准确率相差无几，约在66%-67%之间。</p><h3 id="22-idea"><a class="markdownIt-Anchor" href="#22-idea"></a> 2.2 Idea</h3><p>与前作相比，Fast R-CNN解决了以下问题:</p><p>1、训练、测试时速度慢<br />R-CNN的一张图像内候选框之间存在大量重叠，提取特征操作冗余。而Fast R-CNN将整张图像归一化后直接送入深度网络，紧接着送入从这幅图像上提取出的候选区域。这些候选区域的前几层特征不需要再重复计算。<br />2、训练所需空间大<br />R-CNN中独立的SVM分类器和回归器需要大量特征作为训练样本。Fast R-CNN把类别判断和位置精调统一用深度网络实现，不再需要额外存储。</p><h3 id="23network"><a class="markdownIt-Anchor" href="#23network"></a> 2.3Network</h3><p><img src="/img/article/2021/11/14/5.png" alt="" /></p><p><strong>Step1</strong> :首先将整个图片输入到一个卷积网络，得到整张图的feature map，然后将region proposal（RoI）映射到feature map的对应位置。</p><p><strong>Step2</strong> :RoI pooling layer提取一个__固定长度__的特征向量，每个特征会输入到一系列全连接层，得到一个RoI特征向量</p><p><strong>Step3</strong> :建立softmax层进行分类，建立bounding box regressor回归边界，二者合并为多目标损失函数任务。</p><h3 id="24-detail"><a class="markdownIt-Anchor" href="#24-detail"></a> 2.4 Detail</h3><h4 id="feature-extraction-2"><a class="markdownIt-Anchor" href="#feature-extraction-2"></a> Feature Extraction</h4><p>对应上述Step2</p><p>在Fast R-CNN中，作者提出了一个叫做ROI Pooling的网络层，这个网络层可以把不同大小的输入[Region Proposal]映射到一个固定尺度的特征向量。</p><p><img src="/img/article/2021/11/14/6.png" alt="" /></p><p>在文章当中，作者使用H=W=7的超参数作为ROI Pooling输出的特征向量的固定尺度。即将一个<code>h*w</code>的region proposal分割成<code>H*W</code>大小的网格，作为最后一层卷积层，然后分别对每个网格的进行Max Pooling，将特征图上大小不一的region proposal转变为大小统一的<code>H*W</code>矩阵。</p><p><strong>意义</strong> :因为全连接层的输入要求尺寸大小一样，所以不能直接将不同大小的region proposal映射到feature map作为输出，需要做尺寸变换。这个时候在全连接层前加一层ROI Pooling可以解决该问题。</p><h4 id="classification-and-regression-2"><a class="markdownIt-Anchor" href="#classification-and-regression-2"></a> Classification and Regression</h4><p>对应上述Step3</p><p><img src="/img/article/2021/11/14/7.png" alt="" /></p><p>在R-CNN中，先生成候选框，然后再通过CNN提取特征，之后再用SVM分类，最后再做回归得到具体位置（bbox regression）。</p><p>而在Fast R-CNN中，作者把最后的bbox regression也放进了神经网络内部，与区域分类合并成为了一个multi-task模型。</p><p><strong>分类loss</strong>：使用一个N+1路的softmax代替原来的SVM分类器，其中的N是类别个数，1是背景，使用交叉熵损失<br /><strong>回归loss</strong>：一个4xN路输出的regressor，也就是说对于每个类别都会训练一个单独的regressor，使用平均绝对误差（MAE）损失</p><p><img src="/img/article/2021/11/14/8.png" alt="" /></p><h2 id="3-faster-r-cnn"><a class="markdownIt-Anchor" href="#3-faster-r-cnn"></a> 3 Faster R-CNN</h2><h3 id="31-introduction"><a class="markdownIt-Anchor" href="#31-introduction"></a> 3.1 Introduction</h3><ul><li><strong>论文题目</strong> : Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks</li><li><strong>论文地址</strong> : <a href="https://arxiv.org/abs/1506.01497">https://arxiv.org/abs/1506.01497</a></li></ul><h3 id="32-idea"><a class="markdownIt-Anchor" href="#32-idea"></a> 3.2 Idea</h3><p>与前作相比:</p><p>Faster R-CNN设计了提取候选区域的网络RPN，代替了费时的Selective Search（选择性搜索），已经将Feature Extraction、</p><p>region proposal、Classification、Bounding-Box regression(rect refine)都整合在了一个网络中，使得综合性能有较大提高</p><p><img src="/img/article/2021/11/14/11.png" alt="" /></p><h3 id="33-network"><a class="markdownIt-Anchor" href="#33-network"></a> 3.3 Network</h3><p><img src="/img/article/2021/11/14/9.png" alt="" /></p><p><strong>Step1</strong> :Conv layers。作为一种CNN网络目标检测方法，Faster RCNN首先使用一组基础的conv+relu+pooling层提取image的feature maps。该feature maps被共享用于后续RPN层和全连接层。</p><p><strong>Step2</strong> :Region Proposal Networks。RPN网络用于生成region proposals。该层通过softmax判断anchors属于positive或者negative，再利用bounding box regression修正anchors获得精确的proposals。</p><p><strong>Step3</strong> :RoI Pooling。该层收集输入的feature maps和proposals，综合这些信息后提取proposal feature maps，送入后续全连接层判定目标类别。</p><p><strong>Step4</strong> :Classification。利用proposal feature maps计算proposal的类别，同时再次bounding box regression获得检测框最终的精确位置。</p><h3 id="34-detail"><a class="markdownIt-Anchor" href="#34-detail"></a> 3.4 Detail</h3><h4 id="rpn"><a class="markdownIt-Anchor" href="#rpn"></a> RPN</h4><p><img src="/img/article/2021/11/14/12.jpg" alt="" /></p><p>上图展示了RPN网络的具体结构。可以看到RPN网络实际分为2条线:</p><p>上面一条通过softmax分类anchors获得positive和negative分类，</p><p>下面一条用于计算对于anchors的bounding box regression偏移量，以获得精确的proposal。</p><p>而最后的Proposal层则负责综合positive anchors和对应bounding box regression偏移量获取proposals，同时剔除太小和超出边界的proposals。其实整个网络到了Proposal Layer这里，就完成了相当于目标定位的功能。</p><blockquote><p>Todo :</p><ol><li>关于Selective Search、RPN、Bounding-Box regression的详细实现原理，还是要看看具体代码才能更清晰。</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>旋转目标检测(一)-RRPN</title>
    <link href="/2021/10/30/AI-Learning/20211030-%E6%97%8B%E8%BD%AC%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B(%E4%B8%80)-RRPN/"/>
    <url>/2021/10/30/AI-Learning/20211030-%E6%97%8B%E8%BD%AC%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B(%E4%B8%80)-RRPN/</url>
    
    <content type="html"><![CDATA[<h1 id="旋转目标检测一-rrpn"><a class="markdownIt-Anchor" href="#旋转目标检测一-rrpn"></a> 旋转目标检测(一)-RRPN</h1><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><ul><li><strong>论文题目</strong> : Arbitrary-Oriented Scene Text Detection via Rotation Proposals</li><li><strong>论文地址</strong> : <a href="https://arxiv.org/abs/1703.01086">https://arxiv.org/abs/1703.01086</a></li><li><strong>代码实现</strong> : <a href="https://github.com/mjq11302010044/RRPN">https://github.com/mjq11302010044/RRPN</a></li></ul><p><img src="/img/article/2021/10/30/introduce.png" alt="" /></p><p>自然场景文本检测存在的困难：光照不均，模糊，透视畸变，文本不定向等等</p><p>前人提出的使用分段网络（如完全卷积网络[FCN])生成文本预测图，需要几个后处理步骤来生成具有所需方向的最终文本区域建议，通常非常耗时。</p><p>作者提出了基于旋转候选框实现任意方向的场景文本检测，简称RRPN，其思想沿用的是目标检测中的RPN，在其基础上增加了旋转角度信息。最后在三个数据集(MSRA-TD500, ICDAR2013,ICDAR2015)进行了测试，发现它比以前的方法准确而且更有效。</p><h2 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> Idea</h2><ul><li>与先前基于分割的框架不同，作者提出了基于候选框的不定向文本检测，使得候选框可以更好地适应文本区域，可以更好地修正长文本区域</li><li>作者将新提出的RROI池化层和旋转候选框的学习加入到基于候选框区域的结构当中，与传统的基于分割的文本检测框架相比，确保了文本检测的计算效率</li><li>作者提出了任意方向选择候选框的新的修正方法(refinement)，以提高任意文本检测的性能。</li></ul><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><h3 id="网络结构-rrpn框架"><a class="markdownIt-Anchor" href="#网络结构-rrpn框架"></a> 网络结构-RRPN框架</h3><p><img src="/img/article/2021/10/30/Network.png" alt="RRPN网络结构" /></p><p>RRPN沿用了Faster-RCNN中的RPN的思想(即使用其来生成候选区域)，并在此基础上进行了改进，提出了基于旋转候选网络区域(RRPN)．整个网络结构和Faster-RCNN非常相似，RRPN也是分成并行两路：一路用于预测类别，另一路用于回归旋转矩形框。</p><p>具体步骤如下:</p><ol><li>前端使用非常经典的 <strong>VGG16</strong> 作为主干特征提取网络</li><li>中间采用RRPN主要是用于生成带倾斜角的候选区域，该层输出包括候选框的类别和旋转矩形框的回归</li><li>通过RRoI Pooling将RRPN生成的候选框映射到特征图上，得到最终的文本行检测结果</li></ol><h3 id="具体细节"><a class="markdownIt-Anchor" href="#具体细节"></a> 具体细节</h3><h4 id="1rotated-bounding-box-representation-旋转矩形框的表示"><a class="markdownIt-Anchor" href="#1rotated-bounding-box-representation-旋转矩形框的表示"></a> 1.Rotated Bounding Box Representation-旋转矩形框的表示</h4><p>用(x,y,w,h,θ)表示旋转矩形框：其中(x,y)表示几何矩形中心点坐标,h表示矩形框的短边长度,w 表示矩形框的长边,θ表示x正轴与矩形框长边的夹角。</p><p>围绕矩阵中心旋转α角后，中心锚点坐标公式:</p><p><img src="/img/article/2021/10/30/1.png" alt="" /></p><p>其中 <strong>T</strong> 是平移矩阵, <strong>R</strong> 是旋转矩阵。</p><p><img src="/img/article/2021/10/30/2.png" alt="" /></p><h4 id="2rotation-anchors-strategy-锚点旋转策略"><a class="markdownIt-Anchor" href="#2rotation-anchors-strategy-锚点旋转策略"></a> 2.Rotation Anchors Strategy-锚点旋转策略</h4><p>Anchors 就是按照固定比例（长宽、大小）预定义的框，在后续阶段找出Bounding-box位置和大小，是以这些框为基础。</p><p><img src="/img/article/2021/10/30/3.png" alt="" /></p><p>作者提出的锚点R-anchor有三类策略：</p><ul><li>scale 有8，16，32三种，表示文本行的大小</li><li>ratio 有1：2，1：5，1：8三种，表示文本行的宽高比</li><li>angle 有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo>−</mo><mi>π</mi></mrow><mn>6</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{-\pi}{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1473309999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.802331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>π</mi><mn>6</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{\pi}{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>π</mi><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{\pi}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{\pi}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>2</mn><mi>π</mi></mrow><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{2\pi}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>六种，表示提议框的旋转角</li></ul><p>综上所述，特征图上每个点将生成54个R-anchor（６个方向，３个尺度，３个宽高比）</p><h4 id="3learning-of-rotated-proposal-旋转矩形候选框的学习"><a class="markdownIt-Anchor" href="#3learning-of-rotated-proposal-旋转矩形候选框的学习"></a> 3.Learning of Rotated Proposal-旋转矩形候选框的学习</h4><p>RRPN层会生成很对很多的旋转矩形框，那么这些矩形框中有哪些是需要送入网络参与训练呢？</p><p>首先作者提出了如何确定它们当中用于作为训练的正、负样本的标准:</p><ul><li>训练正样本</li></ul><blockquote><p>需要同时满足以下两种条件:</p><p>1.其与ground truth的IOU大于0.7<br />2.其与ground truth的夹角小于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>π</mi><mn>12</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{\pi}{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></blockquote><ul><li>训练负样本</li></ul><blockquote><p>满足以下条件之一:</p><p>1.其与ground truth的IOU小于0.3<br />2.其与ground truth的IOU大于0.7，并且与ground truth的夹角大于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>π</mi><mn>12</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{\pi}{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></blockquote><ul><li>损失函数</li></ul><p>作者采用的是多任务损失函数，总公式如下:</p><p><img src="/img/article/2021/10/30/4.png" alt="" /></p><p>其中分类损失函数L<sub>cls</sub>:<img src="/img/article/2021/10/30/5.png" alt="" /></p><p>其中回归损失函数L<sub>reg</sub>:<img src="/img/article/2021/10/30/6.png" alt="" /></p><h4 id="4proposal-refinement候选框修正"><a class="markdownIt-Anchor" href="#4proposal-refinement候选框修正"></a> 4.Proposal Refinement–候选框修正</h4><p><strong>倾斜IOU的计算</strong></p><p>作者使用的是倾斜的候选框，所以基于水平候选框的IOU计算方法不合适，因此提出了倾斜IOU的计算方法</p><p><img src="/img/article/2021/10/30/7.png" alt="" /></p><p>总体思路：将两个矩形的交点进行顺时针排序并连成多边形，然后分割成一个个小三角形计算总面积。</p><p>以下图（b）举例子，多边形顺序AIJCKL，分割成三角形AIJ,AJC,ACK,AKL,计算这四个三角形的和。</p><p><img src="/img/article/2021/10/30/8.png" alt="" /></p><p><strong>RROI pooling</strong></p><p>针对任意方向的文本，作者提出了旋转ROI池化层．</p><p>将高度为h和宽度为w的旋转候选区域平均划分,每个子区域和候选框的方向相同．具体的实现细节如下</p><p><img src="/img/article/2021/10/30/9.png" alt="" /></p><h2 id="实验结果"><a class="markdownIt-Anchor" href="#实验结果"></a> 实验结果</h2><p>作者最后在三个数据集(MSRA-TD500, ICDAR2013,ICDAR2015)进行了测试，发现它比以前的方法准确而且更有效。</p><p><img src="/img/article/2021/10/30/12.png" alt="" /></p><h2 id="知识索引"><a class="markdownIt-Anchor" href="#知识索引"></a> 知识索引</h2><p><strong>正样本/负样本</strong></p><p>正样本是指属于某一类别的样本,反样本是指不属于某一类别的样本。</p><p><strong>Intersection over Union - IoU - 交并比</strong></p><p><img src="/img/article/2021/10/30/13.png" alt="" /></p><p>交并比 (Intersection-over-Union，IoU)，是候选框(candidate bound) 与 原标记框(ground-truth bounding box)的交叠率，即它们的交集与并集的比值。</p><p>一般情况下，0.5 是阈值，用来判断预测的边界框是否正确。如果你希望更严格一点，你可以将 IoU 定得更高，比如说大于 0.6 或者更大的数字。IoU 越高，边界框越精确。</p><h2 id="个人反思总结"><a class="markdownIt-Anchor" href="#个人反思总结"></a> 个人反思总结</h2><blockquote><ol><li><p>接触到了许多陌生的概念，读起来感觉有些吃力</p><p>(</p><p>有时非常搞不懂某一步的意义:</p><ul><li>为什么要做这一步，作者是怎么想到要这样做的</li><li>这一步是怎么推导实现的？【突然出现一个公式或是算法，让人感觉摸不着头脑】</li></ul><p>)，</p><ol start="2"><li>应该先找找比较经典的CV论文看看，打好基础</li></ol></li><li><p>很多论文之间的思路都具有关联性，只有多看才能真正理解作者的思路</p></li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旋转目标检测</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go杂谈</title>
    <link href="/2021/10/27/Programing/20211027-Go%E6%9D%82%E8%B0%88/"/>
    <url>/2021/10/27/Programing/20211027-Go%E6%9D%82%E8%B0%88/</url>
    
    <content type="html"><![CDATA[<p>这里记录一下个人用Go刷题来学习Go语法的一些心得。</p><ol><li><p>Go-String<br />Go 的字符串本身就是由单个字节连接起来的，因此遍历的时候就是字节byte<br />因此做题时一般把res声明为字节切片，用append添加等操作，最后再转成string</p><pre class="language-Go" data-language="Go"><code class="language-Go">res &#x3D; []byte &#123;&#125;</code></pre></li><li><p>Go-map，unordered_map<br />Go里面好像没有unordered_map，先用map</p><pre class="language-go" data-language="go"><code class="language-go">mp &#x3D; map[string]int &#123;&#125; &#x2F;&#x2F; key string, value int  </code></pre></li><li><p>max 和 min都要自己写 = =<br />下面是支持int 和 string的模板</p><pre class="language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; int写法func min(a int, b int) int &#123;if a &gt; b &#123;return b&#125;; return a&#125;func max(a int, b int) int &#123;if a &lt; b &#123;return b&#125;; return a&#125; &#x2F;&#x2F; 模板写法，支持int | stringfunc min[T int | string] (a, b T) T &#123;if a &gt; b &#123;return b&#125;; return a&#125;func max[T int | string] (a, b T) T &#123;if a &lt; b &#123;return b&#125;; return a&#125; </code></pre></li><li><p>string 转 int</p><pre class="language-go" data-language="go"><code class="language-go">cnt, _ :&#x3D; strconv.Atoi(str)</code></pre></li><li><p>sort和二分搜索</p><pre class="language-go" data-language="go"><code class="language-go">nums :&#x3D; []int &#123;1, 5, 4, 2, 3&#125;sort.Ints(nums)j :&#x3D; sort.SearchInts(arr, target)  &#x2F;&#x2F; 直接返回下标</code></pre></li><li><p>append头插和尾插</p><pre class="language-go" data-language="go"><code class="language-go">arr :&#x3D; make([]int, n)const INF &#x3D; 0x3f3f3f3f;arr &#x3D; append([]int&#123;0&#125;, arr...) &#x2F;&#x2F; 头插一个0arr &#x3D; append(arr, INF)         &#x2F;&#x2F; 尾插一个INF</code></pre></li><li><p>Go里面没有三目运算符，还是得写if</p></li><li><p>Go 堆</p><pre class="language-c++" data-language="c++"><code class="language-c++">type hp []intfunc (h hp) Len() int            &#123; return len(h) &#125;func (h hp) Less(i, j int) bool  &#123; return h[i] &lt; h[j] &#125;    &#x2F;&#x2F; &gt; 为最大堆func (h hp) Swap(i, j int)       &#123; h[i], h[j] &#x3D; h[j], h[i] &#125;func (h *hp) Push(v interface&#123;&#125;) &#123; *h &#x3D; append(*h, v.(int64)) &#125;func (h *hp) Pop() interface&#123;&#125;   &#123; a :&#x3D; *h; v :&#x3D; a[len(a)-1]; *h &#x3D; a[:len(a)-1]; return v &#125;func (h *hp) push(v int)       &#123; heap.Push(h, v) &#125;func (h *hp) pop() int         &#123; return heap.Pop(h).(int64) &#125; &#x2F;&#x2F; 稍微封装一下，方便使用&#x2F;&#x2F; 这是建立&#x2F;&#x2F; 如何使用呢？type hp64 []int64func (h hp64) Len() int            &#123; return len(h) &#125;func (h hp64) Less(i, j int) bool  &#123; return h[i] &lt; h[j] &#125; &#x2F;&#x2F; &gt; 为最大堆func (h hp64) Swap(i, j int)       &#123; h[i], h[j] &#x3D; h[j], h[i] &#125;func (h *hp64) Push(v interface&#123;&#125;) &#123; *h &#x3D; append(*h, v.(int64)) &#125;func (h *hp64) Pop() interface&#123;&#125;   &#123; a :&#x3D; *h; v :&#x3D; a[len(a)-1]; *h &#x3D; a[:len(a)-1]; return v &#125;func (h *hp64) push(v int64)       &#123; heap.Push(h, v) &#125;func (h *hp64) pop() int64         &#123; return heap.Pop(h).(int64) &#125; &#x2F;&#x2F; 稍微封装一下，方便使用</code></pre></li><li><p>Go的移位运算符优先级高于算术运算符，其它常见语言都是低于</p><pre class="language-go" data-language="go"><code class="language-go">l :&#x3D; 0, r :&#x3D; arr.size() - 1mid :&#x3D; l + r &gt;&gt; 1; &#x2F;&#x2F; 先算&gt;&gt;再算+</code></pre></li><li><p>Go 匿名函数，下面是二分</p><pre class="language-go" data-language="go"><code class="language-go">check :&#x3D; func(m int) bool &#123;    res :&#x3D; 0    for _, x :&#x3D; range piles &#123;        if x % m &#x3D;&#x3D; 0 &#123;            res +&#x3D; x &#x2F; m        &#125; else &#123;            res +&#x3D; x &#x2F; m + 1        &#125;    &#125;    return res &lt;&#x3D; h&#125;</code></pre></li><li><p>Go for循环，没有<code>++i</code> ，只有<code>i++</code>，因为C++编译器会对<code>i++</code>做优化。因此还是写<code>i++</code>好了</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++杂谈</title>
    <link href="/2021/10/27/Programing/20211027-C++%E6%9D%82%E8%B0%88/"/>
    <url>/2021/10/27/Programing/20211027-C++%E6%9D%82%E8%B0%88/</url>
    
    <content type="html"><![CDATA[<ol><li><p>函数传入数组时，能用引用<code>&amp;</code>就用引用<code>&amp;</code>，因为不用引用传参会复制数组，时间会变长</p><ul><li>要去想一想这个数组传入函数后其内部元素会被改变么？/ 改变后对后续有无影响？</li></ul></li><li><p>习惯定义一个<code>const int N = 1e6 + 7; // 题目的数据范围</code>，顺便<code>const ind MOD; // 取模</code></p><ul><li>一维vector初始化: <code>vector&lt;int&gt; arr(N);</code></li><li>二维vector初始化:<code>vector&lt;vector&lt;int&gt;&gt; arr(N, vector&lt;int&gt;(N));</code></li></ul></li><li><p>输入输出:  统一使用std::cin 和std::cout<br />output through <code>std::cout</code> is synchronized with <code>stdout</code>, and input with <code>std::cin</code> is synchronized with <code>stdin</code>.</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 可以用下面两句来解除cin cout对stream的绑定和 iostream的输入输出缓存std::ios::sync_with_stdio(false);std::cin.tie(nullptr);&#x2F;&#x2F; std::cin std::cin &gt;&gt; n &gt;&gt; m;&#x2F;&#x2F; std::coutstd:cout &lt;&lt; &quot;YES\n&quot;;for (int i &#x3D; 0; i &lt; m; ++i) &#123;    std::cout &lt;&lt; -1 &lt;&lt; res[i] &lt;&lt; &quot;\n&quot;[i &#x3D;&#x3D; m - 1];  &#x2F;&#x2F; 控制缓冲区大小&#125;&#x2F;&#x2F;启用后就不能用scanf()和printf()了</code></pre><p><s>循环内用<code>scanf()</code>和<code>printf()</code>； 循环外用<code>cin &gt;&gt;</code> 和<code>cout &lt;&lt;</code></s></p><p>如果要输入字符串怎么弄?</p><ul><li><p>循环外：推荐  string s，cin &gt;&gt;  s</p></li><li><p>循环内：推荐 char[MAX_N]，然后按%s读入， 注意char数组的以<code>\0</code>结尾的特性，因此预定义长度要比输入的最大长度大1。</p><pre class="language-c" data-language="c"><code class="language-c">while (m --) &#123;    char str[max_n];    scanf(&quot;%s&quot;, str);&#125;</code></pre></li><li><p>需要读入一行(即把空格也读进来）: <code>getline(cin, s);</code></p></li></ul></li><li><p>pair的sort排序会优先排序左端点first，如果左端点一样再按右端点right排序</p></li><li><p><strong>构造自定义排序的priority_queue、sort、map、set</strong></p><ul><li><p>在自定义结构体内重载<code>operator &lt;</code>（大根堆）， 重载<code>operator &gt;</code>（小根堆）</p></li><li><p>构造一个cmp函数对象Functor，重载<code>operator()</code>，<a href="https://zhuanlan.zhihu.com/p/75353199">重载operator()的意义</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 大根堆 greaterstruct cmp &#123;    bool operator ()(ListNode* a, ListNode* b) const &#123;        return a-&gt;val &lt; b-&gt;val;    &#125;&#125;;&#x2F;&#x2F; 小根堆 lessstruct cmp &#123;    bool operator ()(ListNode* a, ListNode* b) const &#123;        return a-&gt;val &gt; b-&gt;val;    &#125;&#125;;priority_queue&lt;Node, vector&lt;Node&gt;, cmp&gt; pq;</code></pre></li><li><p>构造一个lambda表达式</p><pre class="language-c++" data-language="c++"><code class="language-c++">auto cmp &#x3D; [](ListNode* a, ListNode* b)&#123;    return a-&gt;val &gt; b-&gt;val;&#125;;&#x2F;&#x2F; 小根堆priority_queue&lt;Node, vector&lt;Node&gt;, decltype(cmp)&gt; pq(cmp);</code></pre></li></ul></li><li><p>字典在C++中和python中的定义:</p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;unordered_map&gt;using namespace std;&#x2F;&#x2F; C++中用hash map可以实现unordered_map&lt;string, int&gt; dic &#x3D; &#123;&#123;&quot;type&quot;, 0&#125;, &#123;&quot;color&quot;, 1&#125;, &#123;&quot;name&quot;, 2&#125;&#125;;</code></pre><pre class="language-python" data-language="python"><code class="language-python">dic &#x3D; &#123;&quot;type&quot;: 0, &quot;color&quot;: 1, &quot;name&quot;: 2&#125;</code></pre></li><li><p><code>next</code>在C++中是关键字，所以一般取<code>nxt</code>表示下一个, 对应<code>pre</code>表示上一个,还有<code>cur</code>当前</p></li><li><p>求一个vector中最大值最小值的最快方式是用max_element()和min_element()，注意返回的是地址要解引用</p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;using namespace std;vector&lt;int&gt; arr;int mx &#x3D; *max_element(arr.begin(), arr.end());int mn &#x3D; *min_element(arr.begin(). arr.end());</code></pre></li><li><p>if中的判断简写</p><pre class="language-c" data-language="c"><code class="language-c">if (j) ⇔ if (j &gt; 0)if (!j) ⇔ if (j &#x3D;&#x3D; 0) ⇔ if (j &#x3D;&#x3D; false)if (~j) ⇔ if (j &#x3D;&#x3D; -1)if (j &amp; 1) ⇔ if (j % 2 &#x3D;&#x3D; 1) &#x2F;&#x2F;判断是否是奇数</code></pre></li><li><p>数学</p><pre class="language-C" data-language="C"><code class="language-C">#include &lt;cmath&gt;&#x2F;&#x2F; 绝对值abs(x)&#x2F;&#x2F; 开方 [向下取整]sqrt(1.0 * x)</code></pre></li><li><p>操作符可以用op来记录</p><pre class="language-c" data-language="c"><code class="language-c">while (m --) &#123;    char op[2];scanf(&quot;%s&quot;, op); &#x2F;&#x2F;注意用%s，字符串读入，可以忽略空格if(op[0] &#x3D;&#x3D; &#39;I&#39;) &#123;        &#x2F;&#x2F; 插入操作            &#125; else if (op[0] &#x3D;&#x3D; &#39;Q&#39;) &#123;        &#x2F;&#x2F; 查询操作    &#125;&#125;</code></pre></li><li><p>memset初始化数组 (memset是按每个字节来初始化的)</p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;cstring&gt;&#x2F;&#x2F; 0 8位全是0; -1 8位全是1memset(arr, 0, sizeof arr)memset(arr, -1, sizeof arr)&#x2F;&#x2F; 当以16进制初始化时，要确保其能转为8位2进制memset(arr, 0x3f, sizeof arr);</code></pre></li><li><p>时间复杂度对于一个算法来说，可以决定算法是否会超出时间限制，与题目数据范围结合可以快速确定解决该问题会用到什么样的算法，比如我们拿到一道题看到数据范围是1e5，那么我们可以判定这道题的时间复杂度需要控制在O(n)或者O(nlogn)的级别，因此可以判断出这道题可能是O(n)的DP，可能是双指针或者是二分答案等等</p><blockquote><p>各种例子</p><ul><li>复杂度在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>的，基本就是各种数学知识或者脑筋急转弯，n的量级基本不受限制</li><li>二分查找等复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(logn)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，n一般在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">{10^9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></span>这个量级内</li><li>单调栈、单调队列、差分数组、BFS、DFS、贪心、哈希、前缀和、一维动态规划等复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，n一般可以在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">{10^6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span>这个量级内</li><li>排序、（堆）优先队列、BFS、DFS、图、分治、二分查找、字典树、线段树、并查集等复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(nlogn)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，n一般在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">{10^5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span>这个量级内</li><li>二维动态规划等复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n^{2})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>，n一般在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">{10^3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span>这个量级内</li><li>三维动态规划等复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n^{3})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>，n一般在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">{10^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>这个量级内</li></ul></blockquote></li></ol><blockquote><ul><li>状态压缩等复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，n一般在16左右</li></ul></blockquote><ol start="14"><li><p>5分钟写不出来就直接看题解，但是不要边看边写，看完之后在不借助任何帮助的情况下自己写一遍</p></li><li><p><a href="https://www.acoier.com/tags/">https://www.acoier.com/tags/</a></p></li><li><p>kuangbin专题</p></li><li><p>剑指Offer 33.二叉搜索树的后续遍历序列，这道题，再次印证了二叉搜索树是一种变相的递增序列</p></li><li><p>BFS走二维图</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 定义方向:上右下左 0 1 0vector&lt;int&gt; dx &#x3D; &#123;0, 1, 0, -1&#125;;vector&lt;int&gt; dy &#x3D; &#123;-1, 0, 1, 0&#125;;</code></pre></li><li><p>频繁调用的函数可以设为inline函数， 更新：<code>inline</code><strong>在C++中已经没有内联的含义了</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; ----以下inline关键字均无效&#x2F;&#x2F; 图的存储inline void add (int u, int v, int w);    &#x2F;&#x2F; 手写堆的up和down函数inline void up(int u)inline void down(int u)</code></pre></li><li><p>出现段错误Segmentation Fault，可以用删代码法(主要删包含访问数组的循环)排除问题。</p></li><li><p>做图论问题，一定要看请是有向图还是无向图，无向图一定要把M的范围扩成2倍，不然容易TLE,在图论中，存储也是比较怪的一点，有向图只存一条边，无向图可以看成双向有向图，存两条边。无向图最多存n * (n - - 1)，考虑自环n * n；有向图最多n(n -1) / 2。</p><pre class="language-c" data-language="c"><code class="language-c">const int N &#x3D; 1e5 + 7;const int M &#x3D; 2 * 1e5&#39;</code></pre></li><li><p>清楚有些操作是可以分拆的，如加减乘除；有些操作是不可以分拆的=(如求max，求最大公约,最小公倍数),这时候可以考虑使用线段树优化</p><blockquote><p>已知了一个序列中的max，你去掉末尾的数，就求不出当前序列的max</p></blockquote></li><li><p>到底是leetcode上的动态写法更好还是普通形式的静态写法比较好。还是一般静态，为了leetcode上一些专门的题型而去刷一些动态写法，如链表和二叉搜索树。</p></li><li><p>右操作数命名为Node&amp; rhs   为right hand size  <a href="https://leetcode.cn/submissions/detail/385963390/">https://leetcode.cn/submissions/detail/385963390/</a></p></li><li><p>unordered_set和unordered_map不能直接以pair等复杂(自定义)类型作为键名 <a href="https://blog.csdn.net/weixin_44966641/article/details/121536027">参考</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 如需使用，你需要自定义一个hash函数，然后在声明时将其传入struct SimplePairHash &#123;    std::size_t operator()(const std::pair&lt;int, int&gt;&amp; p) const &#123;        return p.first ^ p.second;    &#125;&#125;;std::unordered_set&lt;std::pair&lt;int, int&gt;, SimplePairHash&gt; S;</code></pre><p>类似的还有n元组tuple</p></li><li><p>从执行效率上来说，数组要比哈希表快上不少</p><blockquote><p>虽然时间复杂度一样，但哈希表的更新和查询复杂度为均摊 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，而定长数组的的更新和查询复杂度则是严格<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 。</p></blockquote></li><li><p><code>while(cin &gt;&gt; n, n != 0)</code> 或者<code>while(scanf(&quot;%d&quot;, &amp;n) != EOF)</code>可以处理没有特判的输入结尾。<br />像这种<strong>逗号表达式，其返回值是看该行最后一个表达式的值</strong>。</p></li><li><p>Yxc时间复杂度分享</p><blockquote><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>30</mn></mrow><annotation encoding="application/x-tex">n \leq 30</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span></span></span></span>, 指数级别, dfs <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo></mrow><annotation encoding="application/x-tex">+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span></span></span></span> 剪枝, 状态压缩 dp</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>100</mn><mo>=</mo><mo>&gt;</mo><mi>O</mi><mrow><mo fence="true">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">n \leq 100=&gt;O\left(n^3\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span>, floyd, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">d</mi><mi mathvariant="normal">p</mi></mrow><annotation encoding="application/x-tex">\mathrm{dp}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathrm">d</span><span class="mord mathrm">p</span></span></span></span></span>, 高斯消元</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1000</mn><mo>=</mo><mo>&gt;</mo><mi>O</mi><mrow><mo fence="true">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mi>O</mi><mrow><mo fence="true">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>log</mi><mo>⁡</mo><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">n \leq 1000=&gt;O\left(n^2\right), O\left(n^2 \log n\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span>, dp, 二分, 朴素版Dijkstra、祈素版Prim、 Bellman-Ford</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>10000</mn><mo>=</mo><mo>&gt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n \leq 10000=&gt;O(n * \sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, 块状链表、分块、莫队</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>100000</mn><mo>⇒</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo><mo>⇒</mo><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">n \leq 100000 \Rightarrow O(n \log n) \Rightarrow&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span></span></span></span> 各种sort, 线段树、树状数组、set/map、heap、拓扑 排序、dijkstra+heap、prim+heap、Kruskal、spfa、求凸包、求半平面交、二分、 CDQ分治、整体二分、后缀数组、树链剖分、动态树</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1000000</mn><mo>=</mo><mo>&gt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n \leq 1000000=&gt;O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>, 以及常数较小的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 算法 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">=&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span></span></span></span> 单调队列、 hash、双指针扫描、并查集, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi mathvariant="normal">k</mi><mi mathvariant="normal">m</mi><mi mathvariant="normal">p</mi></mrow><mi mathvariant="normal">、</mi><mrow><mi mathvariant="normal">A</mi><mi mathvariant="normal">C</mi></mrow></mrow><annotation encoding="application/x-tex">\mathrm{kmp} 、 \mathrm{AC}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathrm">k</span><span class="mord mathrm">m</span><span class="mord mathrm">p</span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathrm">A</span><span class="mord mathrm">C</span></span></span></span></span> 自动机, 常数比较小的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 的做法: sort、树状数 组、heap、dijkstra、spfa</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>10000000</mn><mo>=</mo><mo>&gt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n \leq 10000000=&gt;O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>, 双指针扫描、 kmp、AC自动机、线性监素数</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>⇒</mo><mi>O</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n \leq 10^9 \Rightarrow O(\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, 判断质数</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>18</mn></msup><mo>⇒</mo><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n \leq 10^{18} \Rightarrow O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>, 最大公约数, 快速幂, 数位DP</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>1000</mn></msup><mo>⇒</mo><mi>O</mi><mrow><mo fence="true">(</mo><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">n \leq 10^{1000} \Rightarrow O\left((\log n)^2\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span>, 高精度加减乘除</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>100000</mn></msup><mo>=</mo><mo>&gt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>k</mi><mo>×</mo><mi>log</mi><mo>⁡</mo><mi>log</mi><mo>⁡</mo><mi>k</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">n \leq 10^{100000}=&gt;O(\log k \times \log \log k), k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 表示位数, 高精度加减、FFT/NTT</li></ol></blockquote></li><li><p>对于题目和一些边界问题，如果0-base的数组不会出现边界问题，就用0-base的，否则用1-base的</p></li><li><p>概念区分<br /><strong>子集合</strong>：数组中的所有元素可以任意组合后的子集，当然，空集是任意数组的子集。<br /><strong>子序列</strong>：原序列中可以不连续的一段。<br /><strong>子数组（子串）</strong>：原序列中必须连续的一段。<br />但是无论是子序列和子数组，他们都可以看作是原数组的一部分，而且不会改变原来数组中元素的<strong>相对位置</strong>。而子集合是可以改变原来数组中元素的相对位置的</p></li><li><p>打leetcode周赛时，如果提交后WA了，可以马上把WA的数据赋值到代码框中的注释里去</p></li><li><p><strong>取余</strong>;如果只需判断被除数是否能整除除数(不关心商，只关心mod 是否==0)，可以对被除数取模来缩小这个数的范围（取模后的得到的余数，保留了这个被除数的性质）</p><p>出自周赛经验：<a href="https://leetcode.cn/problems/find-the-divisibility-array-of-a-string/">https://leetcode.cn/problems/find-the-divisibility-array-of-a-string/</a></p></li><li><p>acm模式，顺序</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;   &#x2F;&#x2F; 头文件using namespace std;typedef long long LL; &#x2F;&#x2F; typedefconst int N &#x3D; 1e5 + 7;&#x2F;&#x2F; const常量struct Node&#123;          &#x2F;&#x2F; 结构体 &#125;  int res;              &#x2F;&#x2F; 全局变量vector&lt;int&gt; arr;void func () &#123;        &#x2F;&#x2F; 函数    ...    res +&#x3D; 1;&#125;int main() &#123;          &#x2F;&#x2F; main函数        return 0;&#125;</code></pre></li><li><p>关于空格的问题，<s>个人习惯4字符对齐</s>还是推荐两侧都加空格：</p></li><li><p>DP和记忆话搜索是可以互相推导的，DP尽管记录的是长度，但是可以逆推求最优方案。</p></li><li><p>除法<strong>向上取整</strong>m，可以在被除数先加上m - 1</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 被除数x, 除数mint v &#x3D; x &#x2F; m            &#x2F;&#x2F; 向下取整，默认int v &#x3D; (x + m - 1) &#x2F; m; &#x2F;&#x2F; 向上取整#include &lt;math&gt;v &#x3D; floor(v);            &#x2F;&#x2F; 向下取整v &#x3D; ceil(v)              &#x2F;&#x2F; 向上取整</code></pre></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>保研后记</title>
    <link href="/2021/10/06/Diary/20211006-%E4%BF%9D%E7%A0%94%E5%90%8E%E8%AE%B0/"/>
    <url>/2021/10/06/Diary/20211006-%E4%BF%9D%E7%A0%94%E5%90%8E%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="079a60d0107f4c0da05e58625d0a3df8484f9b8aaaa6d10f3b621f145e4e22bb"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>保研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作随笔</title>
    <link href="/2021/10/06/Diary/20211007-%E5%B7%A5%E4%BD%9C%E9%9A%8F%E7%AC%94/"/>
    <url>/2021/10/06/Diary/20211007-%E5%B7%A5%E4%BD%9C%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="522ad2b2caeeda0995fd57f503fb7ed74261830c102ba5842cbd51106cdc15bd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>保研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x70数学初步-(4)-排列组合</title>
    <link href="/2021/08/04/Algorithm/Template/20210804-0x70-%E6%95%B0%E5%AD%A6%E5%88%9D%E6%AD%A5-(4)-%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    <url>/2021/08/04/Algorithm/Template/20210804-0x70-%E6%95%B0%E5%AD%A6%E5%88%9D%E6%AD%A5-(4)-%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h2 id="排列组合"><a class="markdownIt-Anchor" href="#排列组合"></a> 排列组合</h2><p>按难易程度，先讲组合后讲排列</p><h3 id="组合"><a class="markdownIt-Anchor" href="#组合"></a> 组合</h3><p>从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∼</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">{1∼n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">n</span></span></span></span></span> 这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span> 个整数中随机选出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span></span></span> 个，  有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>m</mi></msubsup></mrow><annotation encoding="application/x-tex">{C_{n}^{m}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span>种</p><h4 id="递推"><a class="markdownIt-Anchor" href="#递推"></a> 递推</h4><p>递推实现计数，输出有多少种方案。</p><p>利用递推式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>m</mi></msubsup><mo>=</mo><msubsup><mi>C</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mi>m</mi></msubsup><mo>+</mo><msubsup><mi>C</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding="application/x-tex">C_{n}^{m} = C_{n - 1}^{m} + C_{n - 1}^{m - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9897689999999999em;vertical-align:-0.30643899999999996em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6643919999999999em;"><span style="top:-2.451892em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30643899999999996em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.178878em;vertical-align:-0.324639em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854239em;"><span style="top:-2.433692em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.324639em;"><span></span></span></span></span></span></span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mn>0</mn></msubsup><mo>=</mo><mo>…</mo><mo>=</mo><msubsup><mi>C</mi><mn>1</mn><mn>0</mn></msubsup><mo>=</mo><msubsup><mi>C</mi><mn>0</mn><mn>0</mn></msubsup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">C_{n}^{0} = \ldots =  C_{1}^{0} = C_{0}^{0}  = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.061108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><pre class="language-c++" data-language="c++"><code class="language-c++">const int MOD &#x3D; 1e9 + 7;&#123;    vector&lt;vector&lt;long long&gt;&gt; f(n + 1, vector&lt;long long&gt;(n + 1));    for(int i &#x3D; 0; i &lt;&#x3D; n; ++ i) &#123;        f[i][0] &#x3D; 1;        for(int j &#x3D; 1; j &lt;&#x3D; i; ++j) &#123;            f[i][j] &#x3D; (f[i - 1][j] + f[i - 1][j - 1]) % MOD;        &#125;    &#125;        return f[n][m];&#125;</code></pre><ul><li>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ul><p>利用递推式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>m</mi></msubsup><mo>=</mo><mfrac><mrow><mi>n</mi><mo>−</mo><mi>m</mi><mo>+</mo><mn>1</mn></mrow><mi>m</mi></mfrac><msubsup><mi>C</mi><mi>n</mi><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding="application/x-tex">C_{n}^{m} = \frac{n - m + 1}{m}C_{n}^{m - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">m</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>    需要利用乘法逆元优化</p><pre class="language-c++" data-language="c++"><code class="language-c++">const int MOD &#x3D; 1e9 + 7;&#123;    &#x2F;&#x2F; 线性求逆元    vector&lt;long long&gt; inv(n + 1);    inv[1] &#x3D; 1;    for (int i &#x3D; 2; i &lt;&#x3D; n; ++ i) &#123;inv[i] &#x3D; (MOD - MOD &#x2F; i) * inv[MOD % i] % MOD;    &#125;        long long res &#x3D; 1; &#x2F;&#x2F; 初值C(n, 0) &#x3D; 1    for (int i &#x3D; 1; i &lt;&#x3D; m; ++ i) &#123;        res &#x3D; * res * (n - i + 1) % MOD * inv[i] % MOD;    &#125;        return res;&#125;</code></pre><ul><li>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li></ul><h4 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h4><p>递推实现枚举，列出每一种方案，这种n、m大了会超时，不需要每种具体方案时别用</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;int n, m;vector&lt;int&gt; choosen;void dfs(int depth, int select) &#123;    &#x2F;&#x2F; prune    if (select &gt; m || n + 1 - depth &lt; m - select) &#123;        return;    &#125;        &#x2F;&#x2F; boundary    if (select &#x3D;&#x3D; m) &#123;          for (int i &#x3D; 0; i &lt; choosen.size(); i ++) &#123;           printf(&quot;%d &quot;, choosen[i]);        &#125;        cout &lt;&lt; endl;        return;    &#125;    if (depth &#x3D;&#x3D; n + 1) return;            choosen.emplace_back(depth);    dfs(depth + 1, select + 1);    &#x2F;&#x2F; recover    choosen.pop_back();    dfs(depth + 1, select);&#125;int main() &#123;    cin &gt;&gt; n &gt;&gt; m;    dfs(1, 0);    return 0;&#125;</code></pre><h3 id="排列计数"><a class="markdownIt-Anchor" href="#排列计数"></a> 排列计数</h3><hr /><p>下面是利用位运算来实现排列、组合、子集：</p><ul><li><a href="https://leetcode.cn/problems/subsets/">78. 子集</a></li><li><a href="https://leetcode.cn/problems/combinations/">77. 组合</a></li><li><a href="https://leetcode.cn/problems/permutations/">46. 全排列</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x70数学初步-(3)-乘法逆元</title>
    <link href="/2021/08/03/Algorithm/Template/20210803-0x70-%E6%95%B0%E5%AD%A6%E5%88%9D%E6%AD%A5-(3)-%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83/"/>
    <url>/2021/08/03/Algorithm/Template/20210803-0x70-%E6%95%B0%E5%AD%A6%E5%88%9D%E6%AD%A5-(3)-%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83/</url>
    
    <content type="html"><![CDATA[<h2 id="乘法逆元"><a class="markdownIt-Anchor" href="#乘法逆元"></a> 乘法逆元</h2><p>乘法逆元就是</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x70数学初步-(2)-快速幂</title>
    <link href="/2021/08/02/Algorithm/Template/20210802-0x70-%E6%95%B0%E5%AD%A6%E5%88%9D%E6%AD%A5-(2)-%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <url>/2021/08/02/Algorithm/Template/20210802-0x70-%E6%95%B0%E5%AD%A6%E5%88%9D%E6%AD%A5-(2)-%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
    
    <content type="html"><![CDATA[<h2 id="快速幂"><a class="markdownIt-Anchor" href="#快速幂"></a> 快速幂</h2><p>关键思想：<strong>对指数做拆分，对底数做倍增</strong></p><p>本文只介绍迭代版，不介绍递归版</p><h3 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h3><ul><li>时间复杂度:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(log_2N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>N</mi></mrow><annotation encoding="application/x-tex">log_2N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>为对N进行二进制拆分的时间复杂度。</li><li>空间复杂度:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></li></ul><h3 id="double版"><a class="markdownIt-Anchor" href="#double版"></a> double版</h3><pre class="language-c" data-language="c"><code class="language-c">#include &lt;iostream&gt;using namespace std;typedef long long LL;const LL MOD &#x3D; 1e9 + 7;double fast_pow(double x, LL N) &#123;    double res &#x3D; 1.0 % MOD;    &#x2F;&#x2F; x &#x3D; (x % MOD + MOD) % MOD;&#x2F;&#x2F; 防止x是负数    for (; N; N &#x3D; N &gt;&gt; 1) &#123;         if (N &amp; 1) &#123;            res &#x3D; res * x % MOD; &#x2F;&#x2F; 低位为1时贡献        &#125;        x &#x3D; x * x % MOD;         &#x2F;&#x2F; 倍增    &#125;        return res;&#125;</code></pre><blockquote><p><strong>PS:</strong>  函数内只能计算<strong>非负次幂</strong>(N &gt;= 0)，如果要正负次幂通用，可以如下调用:</p><pre class="language-c" data-language="c"><code class="language-c">double pow(double x, int n) &#123;    long long N &#x3D; n;    return N &gt;&#x3D; 0 ? fast_pow(x, N) : fast_pow(1.0 &#x2F; x, N); &#125;</code></pre></blockquote><h3 id="long-long版"><a class="markdownIt-Anchor" href="#long-long版"></a> long long版</h3><pre class="language-c" data-language="c"><code class="language-c">#include &lt;iostream&gt;using namespace std;typedef long long LL;const LL MOD &#x3D; 1e9 + 7;LL fast_pow(LL x, LL N) &#123;    LL res &#x3D; 1LL % MOD;        for (; N; N &#x3D; N &gt;&gt; 1)  &#123;        if (N &amp; 1) &#123;            res &#x3D; res * x % MOD; &#x2F;&#x2F; 低位为1时贡献        &#125;        x &#x3D; x * x % MOD;         &#x2F;&#x2F; 倍增    &#125;        return res;&#125;</code></pre><h3 id="矩阵快速幂"><a class="markdownIt-Anchor" href="#矩阵快速幂"></a> 矩阵快速幂</h3><p>n * n的矩阵支持<strong>乘法</strong>且<strong>满足结合律</strong>，因此也能用快速幂。</p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;iostream&gt;using namespace std;typedef long long LL;const LL MOD  &#x3D; 1e9 + 7;&#x2F;&#x2F; 以2*2的矩阵为例子struct Matrix &#123;    LL a1, a2;    LL b1, b2;        Matrix(LL _a1, LL _a2,           LL _b1, LL _b2) : a1(_a1), a2(_a2), b1(_b1), b2(_b2) &#123;&#125;        &#x2F;&#x2F; 重载乘号    Matrix operator* (const Matrix &amp;rhs) const&#123;        Matrix res((a1 * rhs.a1 + a2 * rhs.b1) % MOD,           (a1 * rhs.a2 + a2 * rhs.b2) % MOD,                   (b1 * rhs.a1 + b2 * rhs.b1) % MOD,                   (b1 * rhs.a2 + b2 * rhs.b2) % MOD);        return res;&#125;&#125;;Matrix fast_pow(Matrix x, LL N) &#123;    Matrix res(1, 0, 0, 1); &#x2F;&#x2F; 单位矩阵        for (; N; N &#x3D; N &gt;&gt; 1) &#123;        if (N &amp; 1) &#123;            res &#x3D; res * x; &#x2F;&#x2F; 不能用*&#x3D;，没有重载        &#125;        x &#x3D; x * x;         &#x2F;&#x2F; 在*的时候已经取MOD了    &#125;        return res;&#125;int main() &#123;    Matrix m(0, 1, 1, 1);        LL n;    scanf(&quot;%lld&quot;, &amp;n);    Matrix res &#x3D; fast_pow(m, n - 1);    printf(&quot;%lld\n&quot;, (res.a1 + res.a2) % MOD);        return 0;&#125;</code></pre><p><strong>练习eg</strong>:</p><p><a href="https://www.luogu.com.cn/problem/P1962">洛谷P1962-斐波那契数列</a></p><h3 id="高精度快速幂-x-n"><a class="markdownIt-Anchor" href="#高精度快速幂-x-n"></a> 高精度快速幂 X ^ N</h3><p><a href="https://www.bilibili.com/video/BV1R14y1e7r7/?vd_source=2100aa14287ae4387e91fc75d3371399">https://www.bilibili.com/video/BV1R14y1e7r7/?vd_source=2100aa14287ae4387e91fc75d3371399</a></p><p>将高精度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span>高精度  和普通快速幂的板子结合到一起：</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; O(nm)&#x2F;&#x2F; C &#x3D; A * B, A &gt;&#x3D; 0, B &gt;&#x3D; 0vector&lt;int&gt; mul(const vector&lt;int&gt; &amp;A, const vector&lt;int&gt; &amp;B) &#123;    vector&lt;int&gt; C(A.size() + B.size());    for (int i &#x3D; 0; i &lt; A.size(); i++) &#123;        for (int j &#x3D; 0; j &lt; B.size(); j++) &#123;            C[i + j] +&#x3D; A[i] * B[j];        &#125;    &#125;    int t &#x3D; 0;    for (int i &#x3D; 0; i &lt; C.size(); i++) &#123;        t +&#x3D; C[i];        C[i] &#x3D; t % 10;        t &#x2F;&#x3D; 10;    &#125;    while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0) C.pop_back();    return C;&#125;vector&lt;int&gt; fast_pow(vector&lt;int&gt; x, int N) &#123;vector&lt;int&gt; res; res.push_back(1); &#x2F;&#x2F; 初始1for (; N; N &#x3D; N &gt;&gt; 1) &#123;if (N &amp; 1) &#123;res &#x3D; mul(res, x);&#125;x &#x3D; mul(x, x);         &#x2F;&#x2F; 倍增&#125;return res;&#125;</code></pre><h4 id="a-b"><a class="markdownIt-Anchor" href="#a-b"></a> A * B</h4><p>高精度正整数A * 高精度正整数B，返回乘积C</p><p>基本思想先将 A[i]*B[j] 放在 C[i+j] 上，然后过一遍 C 处理进位即可</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; O(nm)&#x2F;&#x2F; C &#x3D; A * B, A &gt;&#x3D; 0, B &gt;&#x3D; 0vector&lt;int&gt; mul(const vector&lt;int&gt; &amp;A, const vector&lt;int&gt; &amp;B) &#123;    vector&lt;int&gt; C(A.size() + B.size());    for (int i &#x3D; 0; i &lt; A.size(); i++) &#123;        for (int j &#x3D; 0; j &lt; B.size(); j++) &#123;            C[i + j] +&#x3D; A[i] * B[j];        &#125;    &#125;    int t &#x3D; 0;    for (int i &#x3D; 0; i &lt; C.size(); i++) &#123;        t +&#x3D; C[i];        C[i] &#x3D; t % 10;        t &#x2F;&#x3D; 10;    &#125;    while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0) C.pop_back();    return C;&#125;</code></pre><p>时间复杂度： <strong>A * B</strong>   : <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></p><blockquote><p><strong>A * B</strong> 也可以考虑用快速傅里叶变换实现，但我不会:</p><p><a href="https://www.luogu.com.cn/problem/P3803">https://www.luogu.com.cn/problem/P3803</a></p><p><a href="https://www.bilibili.com/video/BV1gY411d7Z1/?vd_source=2100aa14287ae4387e91fc75d3371399">https://www.bilibili.com/video/BV1gY411d7Z1/?vd_source=2100aa14287ae4387e91fc75d3371399</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x70数学初步-(1)-质数、最大公约数</title>
    <link href="/2021/08/01/Algorithm/Template/20210801-0x70-%E6%95%B0%E5%AD%A6%E5%88%9D%E6%AD%A5-(1)-%E8%B4%A8%E6%95%B0%E4%B8%8E%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0/"/>
    <url>/2021/08/01/Algorithm/Template/20210801-0x70-%E6%95%B0%E5%AD%A6%E5%88%9D%E6%AD%A5-(1)-%E8%B4%A8%E6%95%B0%E4%B8%8E%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="质数"><a class="markdownIt-Anchor" href="#质数"></a> 质数</h2><p><strong>定义</strong> : 在大于1的整数(2, 3, 4, …)中，如果只包含1和本身这两个约数，就被称为质数，或者称为素数。</p><blockquote><p>合数的定义与质数相对:<br /><strong>定义</strong> : 在大于1的整数中， 除了能被1和本身整除外，还能被其他数（0除外）整除的数。</p><p>最小的质数是2，最小的合数是4。</p></blockquote><h3 id="试除法质数判定-分解质因数"><a class="markdownIt-Anchor" href="#试除法质数判定-分解质因数"></a> 试除法–质数判定、分解质因数</h3><p>用试除法， 可以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span>判断某一个数是否是质数，或者对某一个数分解质因数</p><p>不难发现，一个数是不是质数其实就是看有没有约数，而<strong>约数总是成对出现的</strong>，具体来说：</p><blockquote><p>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span>存在约数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">d</span></span></span></span></span>，那么也必存在约数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>n</mi><mi>d</mi></mfrac></mrow><annotation encoding="application/x-tex">{\frac{n}{d}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>，<br />因此只需要令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>&lt;</mo><mo>=</mo><mfrac><mi>n</mi><mi>d</mi></mfrac></mrow><annotation encoding="application/x-tex">d &lt;= \frac{n}{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，枚举这对约数中较小的那个，就能把时间复杂度从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>优化到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(\sqrt{n})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>。</p></blockquote><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 判断n是否是质数bool is_prime(int n) &#123;    if (n &lt; 2) return false;        for (int i &#x3D; 2; i &lt; n; i ++) &#123;        if (n % i &#x3D;&#x3D; 0) &#123;            return false;        &#125;    &#125;    return true;&#125;&#x2F;&#x2F; 对n分解质因数void divide(int n) &#123;    for (int i &#x3D; 2; i &lt;&#x3D; n &#x2F; i; i ++) &#123;        if (n % i &#x3D;&#x3D; 0) &#123;            int cnt &#x3D; 0;            while (n % i &#x3D;&#x3D; 0) &#123;                n &#x2F;&#x3D; i;                cnt ++;            &#125;            printf(&quot;%d %d\n&quot;, i, cnt);        &#125;    &#125;        &#x2F;&#x2F; 特判： 根号n的那个因子    if (n &gt; 1) printf(&quot;%d %d\n&quot;, n , 1);    puts(&quot;&quot;);&#125;</code></pre><h3 id="质数筛返回从1到n的质数数组"><a class="markdownIt-Anchor" href="#质数筛返回从1到n的质数数组"></a> 质数筛–返回从1到n的质数数组</h3><h4 id="朴素筛"><a class="markdownIt-Anchor" href="#朴素筛"></a> 朴素筛</h4><h4 id="埃氏筛"><a class="markdownIt-Anchor" href="#埃氏筛"></a> 埃氏筛</h4><h4 id="线性筛"><a class="markdownIt-Anchor" href="#线性筛"></a> 线性筛</h4><p>用埃氏筛，O(n)判断(1 ~ n)中所有的质数，合数在st[]中为true，质数在prime[]中存储</p><pre class="language-c++" data-language="c++"><code class="language-c++">int prime[N];bool st[N];int cnt &#x3D; 0;void get_primes(int n) &#123;    for (int i &#x3D; 2; i &lt;&#x3D; n; ++i) &#123;        if (!st[i]) &#123;            prime[cnt ++] &#x3D; i;        &#125;        for (int j &#x3D; 0; prime[j] &lt;&#x3D; n &#x2F; i; ++j) &#123;            st[i * prime[j]] &#x3D; true;            if (i % prime[j] &#x3D;&#x3D; 0) break;        &#125;    &#125;&#125;</code></pre><h2 id="最大公约数"><a class="markdownIt-Anchor" href="#最大公约数"></a> 最大公约数</h2><p>最大公约数即为 Greatest Common Divisor，常缩写为 gcd.</p><pre class="language-c" data-language="c"><code class="language-c">int d &#x3D; gcd(int a, int b);int m &#x3D; lcm(int a, int b);</code></pre><h2 id="最小公倍数"><a class="markdownIt-Anchor" href="#最小公倍数"></a> 最小公倍数</h2><p>C++14 : __gcd(a, b) (Defined in header <code>&lt;algorithm&gt;</code>)</p><p>C++17：<a href="https://en.cppreference.com/w/cpp/numeric/gcd">gcd(a, b)</a> 和 <a href="https://en.cppreference.com/w/cpp/numeric/lcm">lcm(a, b)</a> (Defined in header <code>&lt;numeric&gt;</code>)</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x60图论-(4)-二分图的分配</title>
    <link href="/2021/07/04/Algorithm/Template/20210704-0x60-%E5%9B%BE%E8%AE%BA-(4)-%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9A%84%E5%88%86%E9%85%8D/"/>
    <url>/2021/07/04/Algorithm/Template/20210704-0x60-%E5%9B%BE%E8%AE%BA-(4)-%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9A%84%E5%88%86%E9%85%8D/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x60图论-(3)-最小生成树</title>
    <link href="/2021/07/03/Algorithm/Template/20210703-0x60-%E5%9B%BE%E8%AE%BA-(3)-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <url>/2021/07/03/Algorithm/Template/20210703-0x60-%E5%9B%BE%E8%AE%BA-(3)-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x60图论-(2)-最短路</title>
    <link href="/2021/07/02/Algorithm/Template/20210702-0x60-%E5%9B%BE%E8%AE%BA-(2)-%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    <url>/2021/07/02/Algorithm/Template/20210702-0x60-%E5%9B%BE%E8%AE%BA-(2)-%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p><strong>源点</strong>：图中的起点； <strong>汇点</strong>：图中的终点</p><h2 id="单源最短路"><a class="markdownIt-Anchor" href="#单源最短路"></a> 单源最短路</h2><p>单源，顾名思义就是图中只有一个起点。</p><h3 id="所有边权都是正数"><a class="markdownIt-Anchor" href="#所有边权都是正数"></a> 所有边权都是正数</h3><h4 id="dijkstra"><a class="markdownIt-Anchor" href="#dijkstra"></a> Dijkstra</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mi>i</mi><mi>j</mi><mi>k</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">Dijkstra</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span></span></span></span>求最短路问题，需要记录额外两个变量:</p><pre class="language-c++" data-language="c++"><code class="language-c++">int dis[N];        &#x2F;&#x2F; 当前节点到源点的最短路径距离bool vis[N];       &#x2F;&#x2F; 当前节点到源点的最短路径是否已经确定</code></pre><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mi>i</mi><mi>j</mi><mi>k</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">Dijkstra</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span></span></span></span>算法是基于<strong>贪心</strong>的思想，适用于求所有边权都是正数的最短路径。</p><p><strong>step1</strong>：初始化距离：起点到起点的距离为0，其它点到起点的距离为正无穷。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;cstring&gt;&#x2F;&#x2F; 初始化距离memset(dis, 0x3f, sizeof dis);dis[1] &#x3D; 0;       &#x2F;&#x2F; 源点到源点的距离为0，一般题目的源点都是1号点</code></pre><p><strong>step2</strong>： <strong>循环松弛</strong>，每次确定一个点到起点的最短路，在没有确定的点中选取一个距离起点最短的点加入到当前路径。然后用该点去更新其它未确定的点到起点的距离。</p><p>总结一下，Dijkstra算法的流程就是，不断取出<strong>离顶点最近</strong>而<strong>没有被访问过</strong>的点，松弛它和它能到达的所有点。</p><h5 id="朴素版dijkstraon2"><a class="markdownIt-Anchor" href="#朴素版dijkstraon2"></a> 朴素版Dijkstra(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">{O(n^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>))</h5><p>适用于<strong>稠密图</strong>，用邻接矩阵存储。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 500 + 7;int graph[N][N];int dis[N]; bool vis[N];int n, m;int dijkstra() &#123;    &#x2F;&#x2F; 初始化距离    memset(dis, 0x3f, sizeof dis);    memset(vis, 0, sizeof vis);    dis[1] &#x3D; 0;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;        &#x2F;&#x2F; 初始化t为-1;        int u &#x3D; -1;                &#x2F;&#x2F; 选择t &#x3D; dist[j]最小的边        for (int v &#x3D; 1; j &lt;&#x3D; n; j ++) &#123;            if(!vis[j] &amp;&amp; (t &#x3D;&#x3D; -1 || dis[t] &gt; dis[j])) &#123;                u &#x3D; j;            &#125;        &#125;        &#x2F;&#x2F; t加入已访问集合        vis[u] &#x3D; true;                &#x2F;&#x2F; 用t更新其它点到源点的距离        for (int v &#x3D; 1; v &lt;&#x3D; n; v ++) &#123;            if(!vis[v]) &#123;                dis[v] &#x3D; min(dis[v], dis[u] + graph[u][v]);            &#125;        &#125;    &#125;        if (dis[n] &#x3D;&#x3D; 0x3f3f3f3f) return -1;    return dis[n];&#125;int main() &#123;    memset(graph, 0x3f, sizeof graph);        cin &gt;&gt; n &gt;&gt; m;    for (int i &#x3D; 1; i &lt;&#x3D; m; i++)        int u, v, w;        scanf(&quot;%d %d %d&quot;, &amp;u, &amp;v, &amp;w);        &#x2F;&#x2F; 两点之间如果存在多条重边，只保留距离最短的那条        graph[u][v] &#x3D; min(graph[u][v], w);        &#x2F;&#x2F; 如果存在自环，其距离为正显然不用管    &#125;        cout &lt;&lt; dijkstra() &lt;&lt; endl;        return 0;&#125;</code></pre><p><strong>练习eg:</strong></p><p><a href="https://www.acwing.com/problem/content/851/">AcWing849.Dijkstra求最短路 I</a></p><h5 id="堆优化版dijkstraomlogn"><a class="markdownIt-Anchor" href="#堆优化版dijkstraomlogn"></a> 堆优化版Dijkstra(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(mlog(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>))</h5><p>适用于<strong>稀疏图</strong>，用邻接表存储。稠密图也可以存，比较通用。</p><p><strong>每次选取一个距离起点最短的点</strong>⇔<strong>多次取最小，然后删除当前最小</strong>⇔<strong>小根堆</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;queue&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int N &#x3D; 1e5 + 7;const int M &#x3D; 1e6 + 7;struct Edge&#123;    int to;    int w;    int nxt;&#125;;Edge edge[M];int head[N], idx &#x3D; 1;int dis[N], vis[N];   &#x2F;&#x2F; dijkint n, m;inline void add(int from, int to, int w) &#123;    edge[idx].to &#x3D; to, edge[idx].w &#x3D; w, edge[idx].nxt &#x3D; head[from];    head[from] &#x3D; idx ++;&#125;int dijkstra() &#123;    &#x2F;&#x2F; step1: 初始化dis, vis    memset(dis, 0x3f, sizeof dis);     memset(vis, 0, sizeof vis);       dis[1] &#x3D; 0;        &#x2F;&#x2F; 小根堆    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; pq;    pq.push(&#123;0, 1&#125;);        while(!pq.empty()) &#123;        int u &#x3D; pq.top().second; pq.pop();                if (vis[u]) continue;        vis[u] &#x3D; true;                int du &#x3D; dis[u];        &#x2F;&#x2F; step2: 循环松弛，遍历head[u]，更新该节点指向的所有结点的dis[]        for(int i &#x3D; head[u]; ~i; i &#x3D; edge[i].nxt) &#123;            int v &#x3D; edge[i].to, w &#x3D; edge[i].w;            if (dis[v] &gt; du + w) &#123;                dis[v] &#x3D; du + w;                pq.push(&#123;dis[v], v&#125;);            &#125;        &#125;    &#125;        if (dis[n] &#x3D;&#x3D; 0x3f3f3f3f) return -1; &#x2F;&#x2F; 不可达     return dis[n];&#125;int main() &#123;    memset(head, -1, sizeof head);        cin &gt;&gt; n &gt;&gt; m;    for(int i &#x3D; 1; i &lt;&#x3D; m; i ++) &#123;        int u, v, w;        scanf(&quot;%d %d %d&quot;, &amp;u, &amp;v, &amp;w);        add(u, v, w);        add(v, u, w); &#x2F;&#x2F; 无向图    &#125;        cout &lt;&lt; dijkstra() &lt;&lt; endl;        return 0;&#125;</code></pre><p>以上是用优先队列实现，也可以用手写堆实现</p><ul><li><p>手写堆的时间复杂度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(mlog(n))}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p></li><li><p>优先队列的时间复杂度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(mlog(m))}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span>[但是m和n是基本上同一个数量级，所以没关系]</p><blockquote><p>为什么是优先队列是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(mlog(m))}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span>？</p><pre class="language-c" data-language="c"><code class="language-c"> &gt;if (dis[v] &gt; du + edge[i].w) &#123;&#x2F;&#x2F; 每当距离变小则入堆，因此最坏情况是递减的  dis[v] &#x3D; du + edge[i].w;  heap.push(&#123;dis[v], v&#125;); &gt;&#125;</code></pre></blockquote></li></ul><p><strong>练习eg:</strong></p><p><a href="https://www.acwing.com/problem/content/852/">AcWing-850.Dijkstra求最短路 II</a></p><p><a href="https://www.acwing.com/problem/content/4874/">AcWing-4871.最早时刻</a>  添加条件约束的dijstra</p><p><a href="https://www.acwing.com/problem/content/1490/">AcWing-1488.最短距离</a>  多源dijstra问题，建立超级源点，转换成单源，有点像多源BFS和差分约束</p><hr /><h3 id="存在边权是负数"><a class="markdownIt-Anchor" href="#存在边权是负数"></a> 存在边权是负数</h3><p>图中如果有负边权，一般都是用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>P</mi><mi>F</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">SPFA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">A</span></span></span></span>，什么年代了还在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>e</mi><mi>l</mi><mi>l</mi><mi>m</mi><mi>a</mi><mi>n</mi><mo>−</mo><mi>F</mi><mi>o</mi><mi>r</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Bellman-Ford</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span></span></span></span>。</p><h4 id="bellman-fordomn"><a class="markdownIt-Anchor" href="#bellman-fordomn"></a> Bellman-Ford(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(mn)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>))</h4><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;struct Edge&#123;    int to;    int w;    int nxt;&#125;;const int N &#x3D; 500 + 7;const int M &#x3D; 10000 + 7;&#x2F;&#x2F; 图int head[N];Edge edge[M]; int idx;&#x2F;&#x2F; 最短路int dist[N];int backup[N];  &#x2F;&#x2F; dist[]备份int n, m, k;inline void add(int from, int to, int w) &#123;    edge[idx].to &#x3D; to;    edge[idx].w &#x3D; w;    edge[idx].nxt &#x3D; head[from];    head[from] &#x3D; idx ++;&#125;int Bellman_Ford(int k) &#123;    &#x2F;&#x2F; 初始化距离    memset(dist, 0x3f, sizeof dist);    dist[1] &#x3D; 0;         for (int e &#x3D; 0; e &lt; k; e ++) &#123;        &#x2F;&#x2F; 备份        memcpy(backup, dist, sizeof dist);        &#x2F;&#x2F; 遍历图中所有边        for (int t &#x3D; 1; t &lt;&#x3D; n; t ++) &#123;            for (int i &#x3D; head[t]; i !&#x3D; -1; i &#x3D; edge[i].nxt) &#123;                int j &#x3D; edge[i].to;                &#x2F;&#x2F; 使用backup[]更新,而不是使用dist[]                dist[j] &#x3D; min(dist[j], backup[t] + edge[i].w);            &#125;        &#125;    &#125;           &#x2F;&#x2F; 存在负权边    if (dist[n] &gt; 0x3f3f3f3f &#x2F; 2) return -1;        return dist[n];&#125;int main() &#123;    memset (head, -1, sizeof head);        cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;        while (m --)&#123;        int u, v, w;        scanf(&quot;%d%d%d&quot;, &amp;u, &amp;v, &amp;w);        add(u, v, w);    &#125;        int res &#x3D; Bellman_Ford(k);        if (dist[n] &gt; 0x3f3f3f3f &#x2F; 2) puts(&quot;impossible&quot;);    else cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><p><strong>练习eg:</strong></p><p><a href="https://www.acwing.com/problem/content/855/">AcWing853. 有边数限制的最短路</a></p><h4 id="spfaom-sim-omn"><a class="markdownIt-Anchor" href="#spfaom-sim-omn"></a> SPFA(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mo>∼</mo><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(m) \sim O(mn)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>))</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>P</mi><mi>F</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">SPFA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">A</span></span></span></span>求最短路问题，需要记录额外两个变量:</p><pre class="language-c++" data-language="c++"><code class="language-c++">int dis[N];        &#x2F;&#x2F; 当前节点到源点的最短路径距离bool inque[N];     &#x2F;&#x2F; 当前节点是否在队列中，防止队列中同时存在重复的点</code></pre><p>代码逻辑很像<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mi>i</mi><mi>j</mi><mi>k</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">Dijkstra</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span></span></span></span>，但是是队列优化版的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>e</mi><mi>l</mi><mi>l</mi><mi>m</mi><mi>a</mi><mi>n</mi><mo>−</mo><mi>F</mi><mi>o</mi><mi>r</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Bellman-Ford</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span></span></span></span>，<br /><strong>时间复杂度</strong>：最好<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，最坏<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，取决于每个点的入队次数（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∼</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 \sim n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>次, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&gt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\gt n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>次说明图中有负环）。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>P</mi><mi>F</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">SPFA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">A</span></span></span></span>不但可以用来求最短路，还可以用来判断图中<strong>有无负环</strong>。</p><p><strong>SPFA求最短路</strong></p><p>特意把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mi>i</mi><mi>j</mi><mi>k</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">Dijkstra</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span></span></span></span>的部分做成了注释，方便对比：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;queue&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int N &#x3D; 1e5 + 7;const int M &#x3D; 1e6 + 7;const int INF &#x3D; 0x3f3f3f3f;struct Edge &#123;    int to;    int w;    int nxt;&#125;;Edge edge[M];int head[N], idx &#x3D; 1;int dis[N]; bool inque[N]; &#x2F;&#x2F;vis[N];  int n, m;inline void add(int from, int to, int w) &#123;    edge[idx].to &#x3D; to, edge[idx].w &#x3D; w, edge[idx].nxt &#x3D; head[from];    head[from] &#x3D; idx ++;&#125;int spfa() &#123;    memset(dis, 0x3f, sizeof dis);    &#x2F;&#x2F; memset(vis, 0, sizeof vis);    dis[1] &#x3D; 0;        &#x2F;&#x2F; priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; pq;    &#x2F;&#x2F; pq.push(&#123;0, 1&#125;);    queue&lt;int&gt; q;    q.push(1);            while(!q.empty()) &#123;        &#x2F;&#x2F; int u &#x3D; pq.top().second; pq.pop();        int u &#x3D; q.front(); q.pop();                &#x2F;&#x2F; if (vis[u]) continue;        &#x2F;&#x2F; vis[u] &#x3D; true;        inque[u] &#x3D; false;                int du &#x3D; dis[u];                for(int i &#x3D; head[u]; ~i; i &#x3D; edge[i].nxt) &#123;            int v &#x3D; edge[i].to, w &#x3D; edge[i].w;            if (dis[v] &gt; du + w) &#123;                dis[v] &#x3D; du + w;                &#x2F;&#x2F; pq.push(&#123;dis[v], v&#125;)                if (!inque[v]) inque[v] &#x3D; true, q.push(v);            &#125;        &#125;    &#125;        return dis[n];&#125;int main() &#123;    memset(head, -1, sizeof head);    cin &gt;&gt; n &gt;&gt; m;    for(int i &#x3D; 1; i &lt;&#x3D; m; i ++) &#123;        int u, v, w;        scanf(&quot;%d %d %d&quot;, &amp;u, &amp;v, &amp;w);        add(u, v, w);    &#125;        spfa();        if (dis[n] &#x3D;&#x3D; 0x3f3f3f3f) puts(&quot;impossible&quot;);    else cout &lt;&lt; dis[n] &lt;&lt; endl;        return 0;&#125;</code></pre><p><strong>SPFA判断负环</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;queue&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;const int N &#x3D; 2000 + 7;const int M &#x3D; 10000 + 7;struct Edge &#123;    int to;    int w;    int nxt;&#125;;Edge edge[M];int head[N], idx &#x3D; 1;&#x2F;&#x2F; 最短路int dis[N]; bool inque[N]; &#x2F;&#x2F; 存的是当前该点是否在队列当中，防止队列中同时存在重复的点&#x2F;&#x2F; 判负环int cnt[N];                &#x2F;&#x2F; cnt[]记录dis[]更新次数int n, m;inline void add(int from, int to, int w) &#123;    edge[idx].to &#x3D; to, edge[idx].w &#x3D; w, edge[idx].nxt &#x3D; head[from];    head[from] &#x3D; idx ++;&#125;bool spfa() &#123;    memset(dis, 0x3f, sizeof dis);    dis[1] &#x3D; 0;        queue&lt;int&gt; q;    &#x2F;&#x2F; q.push(1);    &#x2F;&#x2F; inque[1] &#x3D; true;    &#x2F;&#x2F; 可能这个负环从源点1是到不了的，因此初始时要把所有点都放进que    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        q.push(i);        inque[i] &#x3D; true;    &#125;        while (!q.empty()) &#123;        int u &#x3D; q.front(); q.pop();                inque[u] &#x3D; false;                for (int i &#x3D; head[u]; ~i; i &#x3D; edge[i].nxt) &#123;            int v &#x3D; edge[i].to, w &#x3D; edge[i].w;            if (dis[v] &gt; dis[u] + w) &#123;                dis[v] &#x3D; dis[u] + w;                cnt[v] &#x3D; cnt[u] + 1;                &#x2F;&#x2F; dis[]更新次数 &gt;&#x3D; n，说明存在负环                if (cnt[v] &gt;&#x3D; n) return true;                if (!inque[v]) inque[v] &#x3D; true, q.push(v);             &#125;        &#125;    &#125;        return false;&#125;int main() &#123;    memset(head, -1, sizeof head);        cin &gt;&gt; n &gt;&gt; m;    for(int i &#x3D; 1; i &lt;&#x3D; m; i ++) &#123;        int u, v, w;        scanf(&quot;%d %d %d&quot;, &amp;u, &amp;v, &amp;w);        add(u, v, w);    &#125;        if(spfa()) puts(&quot;Yes&quot;);    else puts(&quot;No&quot;);        return 0;&#125;</code></pre><p><strong>练习eg:</strong></p><p><a href="https://www.acwing.com/problem/content/853/">Acwing-851. spfa求最短路</a></p><p><a href="https://www.acwing.com/problem/content/854/">Acwing-852. spfa判断负环</a></p><hr /><h2 id="多源最短路"><a class="markdownIt-Anchor" href="#多源最短路"></a> 多源最短路</h2><h4 id="floydon3"><a class="markdownIt-Anchor" href="#floydon3"></a> Floyd(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n^3)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>))</h4><p>Floyd算法本质上是一个<strong>动态规划</strong>的思想，每一次循环更新<strong>经过前k个节点，i到j的最短路径</strong>。</p><p>dist[k, i , j ]表示从点i开始，只经过1~k这些中间点，到点j的最短距离</p><p>这甚至不需要特意存图，因为dist数组本身就可以从邻接矩阵拓展而来。初始化的时候，我们把每个点<strong>到自己的距离</strong>设为0，每新增一条边，就把从这条边的起点到终点的距离设为此边的<strong>边权</strong>（类似于邻接矩阵）。其他距离初始化为<strong>INF</strong>（一个超过边权数据范围的大整数，注意防止溢出）。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 200 + 7;const int M &#x3D; 20000 + 7;const int INF &#x3D; 0x3f3f3f3f;int dist[N][N];int n, m;int Q; &#x2F;&#x2F; Q表示询问次数void floyd() &#123;    for (int k &#x3D; 1; k &lt;&#x3D; n; k ++) &#123;        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;            for (int j &#x3D; 1; j &lt;&#x3D; n; j ++) &#123;                dist[i][j] &#x3D; min(dist[i][j], dist[i][k] + dist[k][j]);            &#125;        &#125;    &#125;&#125;int main() &#123;    cin &gt;&gt; n &gt;&gt; m &gt;&gt; Q;    &#x2F;&#x2F; 邻接矩阵初始化    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        for (int j &#x3D; 1; j &lt;&#x3D; n; j ++) &#123;            if(i &#x3D;&#x3D; j) dist[i][j] &#x3D; 0;            else dist[i][j] &#x3D; INF;        &#125;    &#125;        for(int i &#x3D; 1; i &lt;&#x3D; m; i ++) &#123;        int u, v, w;        scanf(&quot;%d%d%d&quot;, &amp;u, &amp;v, &amp;w);        &#x2F;&#x2F; 通常只保留最短边        dist[u][v] &#x3D; min (dist[u][v], w);    &#125;         floyd();        while (Q --) &#123;        int a, b;        scanf(&quot;%d%d&quot;, &amp;a, &amp;b);        if (dist[a][b] &gt; INF &#x2F; 2) puts(&quot;impossible&quot;);        else printf(&quot;%d\n&quot;, dist[a][b]);    &#125;        return 0;&#125;</code></pre><p><strong>练习eg:</strong></p><p><a href="https://www.acwing.com/problem/content/856/">AcWing854.Floyd求最短路</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x60图论-(1)-图的存储与遍历</title>
    <link href="/2021/07/01/Algorithm/Template/20210701-0x60-%E5%9B%BE%E8%AE%BA-(1)-%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E4%B8%8E%E9%81%8D%E5%8E%86/"/>
    <url>/2021/07/01/Algorithm/Template/20210701-0x60-%E5%9B%BE%E8%AE%BA-(1)-%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E4%B8%8E%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h2 id="图的存储"><a class="markdownIt-Anchor" href="#图的存储"></a> 图的存储</h2><blockquote><p>树可以看作是一张具有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>条边的无向图，也适用于图的存储。<br />为啥是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>条边？，因为每个叶子节点到其父节点只有一条边，特殊的，根结点没有父节点。</p></blockquote><p>假设一张图中，n是点的数量， m是边的数量：</p><p>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>≈</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">{m \approx n ^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>  ,可以认为该图是<strong>稠密图</strong>;<br />当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>≈</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">{m \approx n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.48312em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">n</span></span></span></span></span>    ,可以认为该图是<strong>稀疏图</strong>.</p><h3 id="邻接矩阵"><a class="markdownIt-Anchor" href="#邻接矩阵"></a> 邻接矩阵</h3><p>稠密图，适合用邻接矩阵存储。</p><pre class="language-c" data-language="c"><code class="language-c">const int N &#x3D; 1e5 + 7;&#x2F;&#x2F; const int M ;&#x2F;&#x2F; 图的定义(邻接矩阵)int graph[N][N];&#x2F;*add操作: u-&gt;v这条边的权重为w*&#x2F;inline void add (int u, v, w) &#123;    graph[u][v] &#x3D; w;&#125;</code></pre><h3 id="邻接表"><a class="markdownIt-Anchor" href="#邻接表"></a> 邻接表</h3><h4 id="stdvector"><a class="markdownIt-Anchor" href="#stdvector"></a> std::vector</h4><p>vector是动态数组</p><pre class="language-c++" data-language="c++"><code class="language-c++"></code></pre><h4 id="链式前向星"><a class="markdownIt-Anchor" href="#链式前向星"></a> 链式前向星</h4><p>稀疏图，适合用邻接表存储。</p><p>链式前向星：<strong>用数组模拟邻接表</strong></p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;iostream&gt;#include &lt;cstring&gt;   &#x2F;&#x2F; memset()#include &lt;stdlib.h&gt;  &#x2F;&#x2F; rand()#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 1e5 + 7;const int M &#x3D; 1e5 + 7;struct Edge&#123;    int to;    &#x2F;&#x2F; 只存储当前边的终点    int w;     &#x2F;&#x2F; 权值，对于无权图可以没有w或者w置为1    int nxt;   &#x2F;&#x2F; 当前结点在链表中的下一个结点的编号idx&#125;;&#x2F;&#x2F; head节点int head[N];&#x2F;&#x2F; head展开的邻接表Edge edge[M];int idx;&#x2F;*add操作: from-&gt;to这条边的权重为w*&#x2F;inline void add(int from, int to, int w) &#123;    edge[idx].to &#x3D; to;    edge[idx].w &#x3D; w;    edge[idx].nxt &#x3D; head[from];    head[from] &#x3D; idx ++; &#125;int n, m;int main() &#123;&#x2F;&#x2F; 使用时需要初始化head[]为-1，表示head[]的nxt指针为NULL    memset(head, -1, sizeof head);        cin &gt;&gt; n &gt;&gt; m;        &#x2F;&#x2F; add    while (m --) &#123;        int u, v, w;        scanf(&quot;%d%d%d&quot;, &amp;u, &amp;v, &amp;w);                add(u, v, w);               &#x2F;&#x2F; add(v, u, w) &#x2F;&#x2F; 无向图需要额外反着操作一次    &#125;        &#x2F;&#x2F; 图的遍历    for (int t &#x3D; 1; t &lt;&#x3D; n; t ++) &#123;        if (head[t] !&#x3D; -1) printf(&quot;%d: &quot;, t);        for (int i &#x3D; head[t]; i !&#x3D; -1; i &#x3D; edge[i].nxt) &#123;            printf(&quot;-&gt;%d(%d) &quot;, edge[i].to, edge[i].w);            &#x2F;&#x2F; 取j进行后续操作        int j &#x3D; edge[i].to;        &#125;        if (head[t] !&#x3D; -1) puts(&quot;&quot;);    &#125;        return 0;&#125;</code></pre><p>##图的遍历</p><h3 id="图的深度优先遍历"><a class="markdownIt-Anchor" href="#图的深度优先遍历"></a> 图的深度优先遍历</h3><h4 id="树的重心"><a class="markdownIt-Anchor" href="#树的重心"></a> 树的重心</h4><h3 id="图的广度优先遍历"><a class="markdownIt-Anchor" href="#图的广度优先遍历"></a> 图的广度优先遍历</h3><h4 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序</h4><p><strong>拓扑排序</strong>是对<strong>有向无环图(DAG)<strong>上的节点进行排序，使得对于每条</strong>有向边</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo>→</mo><mi>v</mi></mrow><annotation encoding="application/x-tex">u\to v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>都在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>之前出现。<br />换句话说，是在不破坏<strong>节点先后顺序</strong>的前提下，把有向无环图拉成一条<strong>链</strong>。</p><p>拓扑排序最经典的算法是<strong>Kahn算法</strong>，该算法的思想很简单：<br />每次从图中拿出<strong>当前入度为0的结点</strong>放到拓扑序列，并在原图中删除它们，直到图中没有结点。</p><blockquote><p>因为是有向无环图，而删除结点操作不会产生环，所有每时每刻一定存在入度为0的结点，<br />因此一个有向无环图一定至少存在一个拓扑序列，有向无环图(DAG)也称为拓扑图。</p></blockquote><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;queue&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;const int N &#x3D; 1e5 + 7;const int M &#x3D; N;struct Edge&#123;    int to;    int w;    int nxt;&#125;;Edge edge[N];int head[N], idx &#x3D; 1;int deg[N], seq[N]; &#x2F;&#x2F; 有向无环图的拓扑排序: 入度deg，拓扑序列seqint n, m;inline void add(int from, int to, int w) &#123;    edge[idx].to &#x3D; to, edge[idx].w &#x3D; w, edge[idx].nxt &#x3D; head[from];    head[from] &#x3D; idx ++;    deg[to] ++;&#125;bool top_sort() &#123;    queue&lt;int&gt; q;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        if (deg[i] &#x3D;&#x3D; 0) q.push(i);    &#125;        int cnt &#x3D; 0;    while (!q.empty()) &#123;        int t &#x3D; q.front(); q.pop();       seq[++ cnt] &#x3D; t;                for (int i &#x3D; head[t]; ~i; i &#x3D; edge[i].nxt) &#123;            int j &#x3D; edge[i].to;            deg[j] --;            if (deg[j] &#x3D;&#x3D; 0) &#123;                q.push(j);            &#125;        &#125;    &#125;        return cnt &#x3D;&#x3D; n;&#125;int main() &#123;    memset(head, -1, sizeof head);    memset(deg, 0, sizeof deg);        cin &gt;&gt; n &gt;&gt; m;    for (int i &#x3D; 0; i &lt; m; i ++) &#123;        int u, v;        scanf(&quot;%d %d&quot;, &amp;u, &amp;v);        add(u, v, 1);    &#125;        if (top_sort()) &#123;        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;            printf(&quot;%d &quot;, seq[i]);        &#125;    &#125;    else puts(&quot;-1&quot;);&#125;</code></pre><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>o</mi><mi>p</mi><mi mathvariant="normal">_</mi><mi>s</mi><mi>o</mi><mi>r</mi><mi>t</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">top\_sort()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>返回值为<code>cnt == n</code>，如果图中存在环，那么组成环的节点的入度不可能==0，最终加入A数组中的节点数cnt肯定会小于总节点数n，也就是说拓扑排序是可以用来简单地<strong>判环</strong>的。</p><p>有时会要求输出<strong>字典序最小</strong>的拓扑序列，这时把<code>queue</code>改成<code>priority_queue</code>即可，复杂度会多一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\log</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span></span></span></span> 。</p><p><strong>练习eg</strong>:</p><p><a href="https://www.acwing.com/problem/content/850/">Acwing-848.有向图的拓扑序列</a></p><p><a href="https://www.acwing.com/problem/content/3699/">Acwing-3696.构造有向无环图</a></p><p><a href="https://www.acwing.com/problem/content/166/">Acwing-164.可达性统计</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x50动态规划-(6)-状压DP</title>
    <link href="/2021/06/06/Algorithm/Template/20210606-0x50-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-(6)-%E7%8A%B6%E5%8E%8BDP/"/>
    <url>/2021/06/06/Algorithm/Template/20210606-0x50-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-(6)-%E7%8A%B6%E5%8E%8BDP/</url>
    
    <content type="html"><![CDATA[<h2 id="区间dp"><a class="markdownIt-Anchor" href="#区间dp"></a> 区间DP</h2><p>看博客：<a href="https://leopoldacc.github.io/Blogs/2020/12/07/%E7%8A%B6%E5%8E%8BDP/">https://leopoldacc.github.io/Blogs/2020/12/07/状压DP/</a></p><p>有两种写法：</p><p>第一种1&lt;&lt;n 在第二维度</p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    static constexpr int MOD &#x3D; 1e9 + 7;    int specialPerm(vector&lt;int&gt;&amp; nums) &#123;        int n &#x3D; nums.size();                vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(1 &lt;&lt; n, 0));        for(int i &#x3D; 0; i &lt; n; i++) &#123;            dp[i][1 &lt;&lt; i] &#x3D; 1;        &#125;        for (int mask &#x3D; 0; mask &lt; (1 &lt;&lt; n); mask++) &#123;            for (int i &#x3D; 0; i &lt; n; i++) &#123;                if (!mask &amp; (1 &lt;&lt; i)) continue;                for (int j &#x3D; 0; j &lt; n; j++) &#123;                    if (mask &amp; (1 &lt;&lt; j)) continue;                    if (i !&#x3D; j &amp;&amp; (nums[i] % nums[j] &#x3D;&#x3D; 0 || nums[j] % nums[i] &#x3D;&#x3D; 0)) &#123;                        dp[j][mask | (1 &lt;&lt; j)] +&#x3D; dp[i][mask];                        dp[j][mask | (1 &lt;&lt; j)] %&#x3D; MOD;                    &#125;                                        &#125;            &#125;        &#125;                       int res &#x3D; 0;        for(int i &#x3D; 0; i &lt; n; i++)&#123;            res +&#x3D; dp[i][(1 &lt;&lt; n) - 1];            res %&#x3D; MOD;        &#125;        return res;    &#125;&#125;;</code></pre><p>第二种：1&lt;&lt;n 在第一维度</p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    static constexpr int MOD &#x3D; 1e9 + 7;    int specialPerm(vector&lt;int&gt;&amp; nums) &#123;        int n &#x3D; nums.size();                vector&lt;vector&lt;int&gt;&gt; dp(1 &lt;&lt; n, vector&lt;int&gt; (n));        for(int i &#x3D; 0; i &lt; n; i++) &#123;            dp[1 &lt;&lt; i][i] &#x3D; 1;        &#125;        for (int mask &#x3D; 0; mask &lt; (1 &lt;&lt; n); mask++) &#123;            for (int i &#x3D; 0; i &lt; n; i++) &#123;                if (mask &amp; (1 &lt;&lt; i)) &#123;                    for (int j &#x3D; 0; j &lt; n; j++) &#123;                        if (mask &amp; (1 &lt;&lt; j)) &#123;                            if (i !&#x3D; j &amp;&amp; (nums[i] % nums[j] &#x3D;&#x3D; 0 || nums[j] % nums[i] &#x3D;&#x3D; 0)) &#123;                                dp[mask][i] +&#x3D; dp[mask ^ (1 &lt;&lt; i)][j];                                dp[mask][i] %&#x3D; MOD;                            &#125;                                               &#125;                    &#125;                &#125;            &#125;        &#125;                       int res &#x3D; 0;        for(int i &#x3D; 0; i &lt; n; i++)&#123;            res +&#x3D; dp[(1 &lt;&lt; n) - 1][i];            res %&#x3D; MOD;        &#125;        return res;    &#125;&#125;;</code></pre><p>记忆化搜索：</p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int specialPerm(vector&lt;int&gt;&amp; nums) &#123;        const int MOD &#x3D; 1e9 + 7;        const int n &#x3D; nums.size();        int u &#x3D; 1 &lt;&lt; n;        vector&lt;vector&lt;int&gt;&gt; f(n, vector&lt;int&gt;(u, -1));        function&lt;int(int, int)&gt; dfs &#x3D; [&amp;](int i, int mask) &#123;            if (mask &#x3D;&#x3D; u - 1) return 1;            int &amp;res &#x3D; f[i][mask];            if (res !&#x3D; -1) return res;            res &#x3D; 0;            for (int j &#x3D; 0; j &lt; n; ++j) &#123;                if (mask &gt;&gt; j &amp; 1) continue;                if (nums[i] % nums[j] &#x3D;&#x3D; 0 || nums[j] % nums[i] &#x3D;&#x3D; 0) res &#x3D; (res + dfs(j, mask | (1 &lt;&lt; j))) % MOD;            &#125;            return res;        &#125;;                int ans &#x3D; 0;        for (int i &#x3D; 0; i &lt; n; ++i) ans &#x3D; (ans + dfs(i, 1 &lt;&lt; i)) % MOD;        return ans;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x50动态规划-(5)-数位DP</title>
    <link href="/2021/06/05/Algorithm/Template/20210605-0x50-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-(5)-%E6%95%B0%E4%BD%8DDP/"/>
    <url>/2021/06/05/Algorithm/Template/20210605-0x50-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-(5)-%E6%95%B0%E4%BD%8DDP/</url>
    
    <content type="html"><![CDATA[<h2 id="数位dp"><a class="markdownIt-Anchor" href="#数位dp"></a> 数位DP</h2><p>看博客：<a href="https://leopoldacc.github.io/Blogs/2020/12/15/%E6%95%B0%E4%BD%8Ddp/">https://leopoldacc.github.io/Blogs/2020/12/15/数位dp/</a></p><p>数位DP,记忆化搜索模板：</p><p>0x3f的模板，觉得挺好用的</p><pre class="language-c++" data-language="c++"><code class="language-c++">string s &#x3D; to_string(n);int m &#x3D; s.size();int cache[m][1 &lt;&lt; 10];memset(cache, -1, sizeof(cache)); function&lt;int(int, int, bool, bool)&gt; f &#x3D; [&amp;](int i, int mask, bool is_limit, bool is_num) -&gt; int &#123;    &#x2F;&#x2F; boundary    if (i &#x3D;&#x3D; m) &#123;        return is_num; &#x2F;&#x2F; is_num 为 true 表示得到了一个合法数字    &#125;    &#x2F;&#x2F; cache    if (!is_limit &amp;&amp; is_num &amp;&amp; cache[i][mask] !&#x3D; -1) &#123;        return cache[i][mask];    &#125;    int res &#x3D; 0;    if (!is_num) &#123;        res &#x3D; f(i + 1, mask, false, false);    &#125;    int low &#x3D; is_num ? 0 : 1;    int up &#x3D; is_limit ? s[i] - &#39;0&#39; : 9;    for (int d &#x3D; low; d &lt;&#x3D; up; ++d) &#123;        if ((mask &gt;&gt; d &amp; 1) &#x3D;&#x3D; 0) &#123;            res +&#x3D; f(i + 1, mask | (1 &lt;&lt; d), is_limit &amp;&amp; d &#x3D;&#x3D; up, true);        &#125;    &#125;    if (!is_limit &amp;&amp; is_num) &#123;        cache[i][mask] &#x3D; res;    &#125;    return res;&#125;;return n - f(0, 0, true, false);</code></pre><p><a href="https://leetcode.cn/problems/numbers-with-repeated-digits">https://leetcode.cn/problems/numbers-with-repeated-digits</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x50动态规划-(4)-树形DP</title>
    <link href="/2021/06/04/Algorithm/Template/20210604-0x50-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-(4)-%E6%A0%91%E5%BD%A2DP/"/>
    <url>/2021/06/04/Algorithm/Template/20210604-0x50-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-(4)-%E6%A0%91%E5%BD%A2DP/</url>
    
    <content type="html"><![CDATA[<h2 id="树形dp"><a class="markdownIt-Anchor" href="#树形dp"></a> 树形DP</h2><p>参考博客：<a href="https://www.acwing.com/blog/content/1754/">https://www.acwing.com/blog/content/1754/</a></p><p><a href="https://www.acwing.com/user/myspace/blog/14584/">https://www.acwing.com/user/myspace/blog/14584/</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x50动态规划-(3)-区间DP</title>
    <link href="/2021/06/03/Algorithm/Template/20210603-0x50-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-(3)-%E5%8C%BA%E9%97%B4DP/"/>
    <url>/2021/06/03/Algorithm/Template/20210603-0x50-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-(3)-%E5%8C%BA%E9%97%B4DP/</url>
    
    <content type="html"><![CDATA[<h2 id="区间dp"><a class="markdownIt-Anchor" href="#区间dp"></a> 区间DP</h2><p>看博客：<a href="https://leopoldacc.github.io/Blogs/2020/12/25/%E5%8C%BA%E9%97%B4dp/">https://leopoldacc.github.io/Blogs/2020/12/25/区间dp/</a></p><p>是全局最优解一定能够拆成子问题的最优解，并且子问题和全局问题是同一类型的问题，从而递推解决</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x50动态规划-(2)-DP</title>
    <link href="/2021/06/02/Algorithm/Template/20210602-0x50-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-(2)-%E7%BA%BF%E6%80%A7DP/"/>
    <url>/2021/06/02/Algorithm/Template/20210602-0x50-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-(2)-%E7%BA%BF%E6%80%A7DP/</url>
    
    <content type="html"><![CDATA[<h2 id="dp"><a class="markdownIt-Anchor" href="#dp"></a> DP</h2><p>PPT：<a href="https://docs.google.com/presentation/d/1F_Qp3kzw7jZkPpb7ll7J6-02285bCA3Z9nmU1e7a2rk/edit#slide=id.g8285dd8f3f_1_512">https://docs.google.com/presentation/d/1F_Qp3kzw7jZkPpb7ll7J6-02285bCA3Z9nmU1e7a2rk/edit#slide=id.g8285dd8f3f_1_512</a></p><p>对应视频讲解： <a href="https://www.bilibili.com/video/BV1gf4y1i78H/?vd_source=2100aa14287ae4387e91fc75d3371399">https://www.bilibili.com/video/BV1gf4y1i78H/?vd_source=2100aa14287ae4387e91fc75d3371399</a></p><p>动态规划的本质是求<strong>拓扑序</strong></p><p>是全局最优解一定能够拆成子问题的最优解，并且子问题和全局问题是同一类型的问题，从而递推解决</p><p>掷骰子模拟：<a href="https://leetcode.cn/problems/dice-roll-simulation">https://leetcode.cn/problems/dice-roll-simulation</a>  2008分</p><p>这道题分别用dfs、记忆化搜索、dp来做</p><p>dfs、记忆化搜索属于递归方法，dp属于递推方法</p><h4 id="dfs"><a class="markdownIt-Anchor" href="#dfs"></a> dfs</h4><p>dfs的三个参数</p><ul><li>剩余投掷次数，用<code>i</code>表示;</li><li>上一个骰子的值，用<code>last</code>表示;</li><li>上一个骰子的剩余连续出现次数，用<code>left</code>表示</li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;    const int MOD &#x3D; 1e9 + 7;public:    int dieSimulator(int n, vector&lt;int&gt;&amp; rollMax) &#123;        function&lt;int(int, int, int)&gt; dfs &#x3D; [&amp;](int i, int last, int left) -&gt; int &#123;            if (i &#x3D;&#x3D; 0) return 1; &#x2F;&#x2F; 找到一个合法结果            long long res &#x3D; 0;            for (int j &#x3D; 0; j &lt; 6; j ++) &#123;                if (j !&#x3D; last) res +&#x3D; dfs(i - 1, j, rollMax[j] - 1);                else if (j &#x3D;&#x3D; last &amp;&amp; left &gt; 0) res +&#x3D; dfs(i - 1, j, left - 1);            &#125;            res %&#x3D; MOD;            return res;        &#125;;        long long res &#x3D; 0;        for (int j &#x3D; 0; j &lt; 6; j ++) &#123;            res +&#x3D; dfs(n - 1, j, rollMax[j] - 1);        &#125;        res %&#x3D; MOD;        return res;    &#125;&#125;;</code></pre><h4 id="记忆化搜索"><a class="markdownIt-Anchor" href="#记忆化搜索"></a> 记忆化搜索</h4><p>dfs可以用记忆化搜索来优化</p><ul><li>如果一个状态(<strong>递归入参</strong>)是第一次遇到，那么可以在返回前把状态及其结果记到一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>a</mi><mi>c</mi><mi>h</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">cache</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span></span></span></span>哈希表(数组)中；</li><li>如果一个状态不是第一次遇到，那么直接返回 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>a</mi><mi>c</mi><mi>h</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">cache</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span></span></span></span> 中保存的结果。</li></ul><p>这道题在leetcode上，cache用数组可以过，用哈希表会超时(因为hash函数的构造不满足结果的冲突)。</p><p>记忆化数组代码:</p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;    const int MOD &#x3D; 1e9 + 7;public:    int dieSimulator(int n, vector&lt;int&gt;&amp; rollMax) &#123;        int cache[n][6][15];        memset(cache, -1, sizeof(cache)); &#x2F;&#x2F; -1表示没有访问过                function&lt;int(int, int, int)&gt; dfs &#x3D; [&amp;](int i, int last, int left) -&gt; int &#123;            if (i &#x3D;&#x3D; 0) return 1; &#x2F;&#x2F; 是一个合法结果            if (cache[i][last][left] !&#x3D; -1) return cache[i][last][left];            long long res &#x3D; 0;            for (int j &#x3D; 0; j &lt; 6; j ++) &#123;                if (j !&#x3D; last) res +&#x3D; dfs(i - 1, j, rollMax[j] - 1);                else if (j &#x3D;&#x3D; last &amp;&amp; left &gt; 0) res +&#x3D; dfs(i - 1, j, left - 1);            &#125;            res %&#x3D; MOD;            cache[i][last][left] &#x3D; res;            return res;        &#125;;        long long res &#x3D; 0;        for (int j &#x3D; 0; j &lt; 6; j ++) &#123;            res +&#x3D; dfs(n - 1, j, rollMax[j] - 1);        &#125;        res %&#x3D; MOD;        return res;    &#125;&#125;;</code></pre><p>记忆化哈希表代码:</p><p>由于unordered_map不支持元组作为key值，有以下两种方式:</p><ul><li>自定义元组的hash函数传入</li><li>将递归入参封装成string的形式 <code>encoder = &quot;i last left&quot;</code></li></ul><p>hash函数发生的冲突的概率越小，程序执行效率越高，在一定程度上会影响程序运行效率</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 自定义元组的hash函数传入typedef tuple&lt;int, int, int&gt; TIII;typedef long long LL;struct SimpleTupleHash &#123;    std::size_t operator()(const std::tuple&lt;int, int, int&gt;&amp; p) const &#123;        return get&lt;0&gt;(p) ^ get&lt;1&gt;(p) ^ get&lt;2&gt;(p);  &#x2F;&#x2F; &#x3D;&gt; 过31个样例         &#x2F;&#x2F; get&lt;0&gt;(p) ^ get&lt;1&gt;(p) &amp; get&lt;2&gt;(p);      &#x2F;&#x2F; &#x3D;&gt; 过29个样例    &#125;&#125;;class Solution &#123;    const int MOD &#x3D; 1e9 + 7;public:    int dieSimulator(int n, vector&lt;int&gt;&amp; rollMax) &#123;        unordered_map&lt;TIII, LL, SimpleTupleHash&gt; cache;                function&lt;int(int, int, int)&gt; dfs &#x3D; [&amp;](int i, int last, int left) -&gt; int &#123;            if (i &#x3D;&#x3D; 0) return 1; &#x2F;&#x2F; 是一个合法结果            if (cache.count(&#123;i, last, left&#125;)) return cache[&#123;i, last, left&#125;];                        LL res &#x3D; 0;            for (int j &#x3D; 0; j &lt; 6; j ++) &#123;                if (j !&#x3D; last) res +&#x3D; dfs(i - 1, j, rollMax[j] - 1);                else if (j &#x3D;&#x3D; last &amp;&amp; left &gt; 0) res +&#x3D; dfs(i - 1, j, left - 1);            &#125;            res %&#x3D; MOD;            cache[&#123;i, last, left&#125;] &#x3D; res;            return res;        &#125;;        LL res &#x3D; 0;        for (int j &#x3D; 0; j &lt; 6; j ++) &#123;            res +&#x3D; dfs(n - 1, j, rollMax[j] - 1);        &#125;        res %&#x3D; MOD;        return res;    &#125;&#125;;</code></pre><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 将递归入参封装成string的形式typedef long long LL;class Solution &#123;    const int MOD &#x3D; 1e9 + 7;public:    int dieSimulator(int n, vector&lt;int&gt;&amp; rollMax) &#123;        unordered_map&lt;string, LL&gt; cache;  &#x2F;&#x2F; &#x3D;&gt; 过29个样例                function&lt;int(int, int, int)&gt; dfs &#x3D; [&amp;](int i, int last, int left) -&gt; int &#123;            if (i &#x3D;&#x3D; 0) return 1; &#x2F;&#x2F; 是一个合法结果            string encoder &#x3D; to_string(i) + &quot; &quot; + to_string(last) + &quot; &quot; + to_string(left);            if (cache.count(encoder)) return cache[encoder];                        LL res &#x3D; 0;            for (int j &#x3D; 0; j &lt; 6; j ++) &#123;                if (j !&#x3D; last) res +&#x3D; dfs(i - 1, j, rollMax[j] - 1);                else if (j &#x3D;&#x3D; last &amp;&amp; left &gt; 0) res +&#x3D; dfs(i - 1, j, left - 1);            &#125;            res %&#x3D; MOD;            cache[encoder] &#x3D; res;            return res;        &#125;;        LL res &#x3D; 0;        for (int j &#x3D; 0; j &lt; 6; j ++) &#123;            res +&#x3D; dfs(n - 1, j, rollMax[j] - 1);        &#125;        res %&#x3D; MOD;        return res;    &#125;&#125;;</code></pre><h4 id="dp-2"><a class="markdownIt-Anchor" href="#dp-2"></a> dp</h4><p>1比1翻译成递推做法：</p><ul><li>记忆化数组改为dp状态数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span></li><li>递归边界改为初始值</li><li>递归入参改为循环(每有一个入参，就有一层循环)</li></ul><p>就完事了。</p><p>状态: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i][j][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>已经完成了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>次掷骰子，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 次掷的数字是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>，并且已经连续掷了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>次 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>的合法序列数</p><pre class="language-c++" data-language="c++"><code class="language-c++">typedef long long LL;class Solution &#123;    const int MOD &#x3D; 1e9 + 7;public:    int dieSimulator(int n, vector&lt;int&gt;&amp; rollMax) &#123;        &#x2F;&#x2F; 记忆化改dp数组        int f[n][6][15];        memset(f, 0, sizeof f);                &#x2F;&#x2F; 递归边界改为初始值        for (int j &#x3D; 0; j &lt; 6; j ++) &#123;            for (int k &#x3D; 0; k &lt; rollMax[j]; k ++) &#123;                f[0][j][k] &#x3D; 1;            &#125;        &#125;        &#x2F;&#x2F; 递归入参改为循环        for (int i &#x3D; 1; i &lt; n; i ++) &#123;            for (int last &#x3D; 0; last &lt; 6; last ++) &#123;                for (int left &#x3D; 0; left &lt; rollMax[last]; left ++) &#123;                    LL res &#x3D; 0;                    for (int j &#x3D; 0; j &lt; 6; j ++) &#123;                        if (j !&#x3D; last) res +&#x3D; f[i - 1][j][rollMax[j] - 1];                        else if (j &#x3D;&#x3D; last &amp;&amp; left &gt; 0) res +&#x3D; f[i - 1][j][left - 1];                    &#125;                    res %&#x3D; MOD;                    f[i][last][left] &#x3D; res;                 &#125;            &#125;        &#125;        LL res &#x3D; 0;        for (int j &#x3D; 0; j &lt; 6; j ++) &#123;            res +&#x3D; f[n - 1][j][rollMax[j] - 1];            res %&#x3D; MOD;        &#125;        return res;    &#125;&#125;;</code></pre><h5 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h5><ul><li>时间复杂度: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n m S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span></span></span>, 其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">rollMax</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\operatorname{rollMax}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop"><span class="mord mathrm">r</span><span class="mord mathrm">o</span><span class="mord mathrm">l</span><span class="mord mathrm">l</span><span class="mord mathrm">M</span><span class="mord mathrm">a</span><span class="mord mathrm">x</span></span></span></span></span> 的长度, 即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mo separator="true">,</mo><mi>S</mi><mo>=</mo><mo>∑</mo><mi mathvariant="normal">rollMax</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">6, S=\sum \operatorname{rollMax}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mord mathrm">r</span><span class="mord mathrm">o</span><span class="mord mathrm">l</span><span class="mord mathrm">l</span><span class="mord mathrm">M</span><span class="mord mathrm">a</span><span class="mord mathrm">x</span></span></span></span></span>, 这不会超 过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mo>×</mo><mn>15</mn><mo>=</mo><mn>90</mn></mrow><annotation encoding="application/x-tex">6 \times 15=90</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">0</span></span></span></span> 。动态规划的时间复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo></mrow><annotation encoding="application/x-tex">=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span></span></span> 状态个数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 单个状态的转移个数。本题中状 态个数等于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span></span></span>, 而单个状态的转移个数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>, 因此时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n m S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span></span></span> 。</li><li>空间复杂度: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span></span></span> 。</li></ul><h3 id="优化"><a class="markdownIt-Anchor" href="#优化"></a> 优化</h3><p><img src="/img/algorithm/0x70/dp.png" alt="" /></p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;    const int MOD &#x3D; 1e9 + 7;public:    int dieSimulator(int n, vector&lt;int&gt; &amp;rollMax) &#123;        int m &#x3D; rollMax.size(), f[n][m], s[n];        for (int j &#x3D; 0; j &lt; m; ++j) f[0][j] &#x3D; 1;        s[0] &#x3D; m;        for (int i &#x3D; 1; i &lt; n; ++i) &#123;            s[i] &#x3D; 0;            for (int j &#x3D; 0; j &lt; m; ++j) &#123;                int res &#x3D; s[i - 1], mx &#x3D; rollMax[j];                if (i &gt; mx) res -&#x3D; s[i - mx - 1] - f[i - mx - 1][j];                else if (i &#x3D;&#x3D; mx) --res;                f[i][j] &#x3D; (res % MOD + MOD) % MOD; &#x2F;&#x2F; 防止出现负数                s[i] &#x3D; (s[i] + f[i][j]) % MOD;            &#125;        &#125;        return s[n - 1];    &#125;&#125;;</code></pre><ul><li>时间复杂度: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>, 其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">rollMax</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\operatorname{rollMax}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop"><span class="mord mathrm">r</span><span class="mord mathrm">o</span><span class="mord mathrm">l</span><span class="mord mathrm">l</span><span class="mord mathrm">M</span><span class="mord mathrm">a</span><span class="mord mathrm">x</span></span></span></span></span> 的长度, 即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span>。</li><li>空间复杂度: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span> 。</li></ul><pre class="language-none"><code class="language-none">&#x2F;*状态表示 f[i][j][k]:    集合: 所有从前 i 个人中选择 j 个人，且差值是 k (可能为负数, -400~400) 的所有方案的集合    属性: D+P 最大值状态计算:    不选第 i 个人, f[i-1][j][k]    选第 i 个人，  f[i-1][j-1][k-(p_i-d_i)] + (p_i+d_i)    两个情况取一下 max 即可*&#x2F;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x50动态规划-(1)-背包九讲</title>
    <link href="/2021/06/01/Algorithm/Template/20210601-0x50-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-(1)-%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/"/>
    <url>/2021/06/01/Algorithm/Template/20210601-0x50-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-(1)-%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/</url>
    
    <content type="html"><![CDATA[<p>是全局最优解一定能够拆成子问题的最优解，并且子问题和全局问题是同一类型的问题，从而递推解决</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更换GPU——重跑Mask-RCNN Demo</title>
    <link href="/2021/05/20/AI-Learning/20210520-%E4%BD%BF%E7%94%A8GPU%E8%B7%91MaskRCNN/"/>
    <url>/2021/05/20/AI-Learning/20210520-%E4%BD%BF%E7%94%A8GPU%E8%B7%91MaskRCNN/</url>
    
    <content type="html"><![CDATA[<h1 id="使用gpu跑mask-rcnn-demo"><a class="markdownIt-Anchor" href="#使用gpu跑mask-rcnn-demo"></a> 使用GPU跑Mask-RCNN Demo</h1><p>使用CPU跑深度学习当然没问题，但是随着深度学习往CV方向(计算机视觉)发展，需要计算机不断对图像进行处理，由此伴随着网络层数的加深，可能会让你的CPU会越来越力不从心！</p><p>而GPU(Graphics Processing Unit)就是为了处理图像而诞生的，因此这是GPU与生俱来的优势，</p><p>让我们通过以下这个短视频来体会一下CPU与GPU的区别吧</p><p>视频需要使用Dplayer视频插件，日后更新上来</p><p>OK，了解完GPU的强大之处后，就让我们把之前的Mask-RCNN项目换成GPU跑一遍吧！</p><p><strong>注</strong>: 本文以下内容：需要电脑至少有一块NVIDA(英伟达)GPU处理器才能顺利进行</p><p>本文Demo运行的外部环境: Win10(64bits) + Anaconda3(2020.11版) + GTX 1060 Max-Q</p><h2 id="cudacudnn"><a class="markdownIt-Anchor" href="#cudacudnn"></a> CUDA&amp;cuDNN</h2><p>CUDA(Compute Unified Device Architecture)，是显卡厂商NVIDIA推出的运算平台。</p><p>cuDNN(CUDA Deep Neural Network)是基于CUDA运算平台，用于深度神经网络的GPU加速库。</p><p>要想实现使用GPU运行Mask-RCNN Demo，必须先安装CUDA和cuDNN</p><h3 id="查看cuda版本支持"><a class="markdownIt-Anchor" href="#查看cuda版本支持"></a> 查看CUDA版本支持</h3><p>首先，来查看你电脑上能支持的CUDA的最高版本吧!</p><p><strong>Step1</strong>:打开cmd命令行窗口，输入<code>nvidia-smi</code>可以看到如下内容:</p><p><img src="/img/article/2021/05/20/1.png" alt="" /></p><p>圈起来的部分就是你的NVIDIA显卡所支持的CUDA版本，本文所使用的电脑最高支持CUDA11.1。</p><blockquote><p>如果输入<code>nvidia-smi</code>提示未找到命令，需要在环境变量Path中添加:</p><p>``C:\Program Files\NVIDIA Corporation\NVSMI`</p></blockquote><p>在后面的下载安装步骤中，首先需要保证 <strong>选择安装的cuda版本</strong> <strong>&lt;=</strong>  <strong>cmd内显示的支持版本</strong></p><p>并且你需要参考下图版本对应关系，保证CUDA、cuDNN、Python、tensorflow-gpu的版本一致性。</p><p><img src="/img/article/2021/05/20/2.png" alt="" /></p><blockquote><p>本文基于的环境配置版本为:</p><ul><li><p>tensorflow-gpu-1.5.0</p></li><li><p>python3.6</p></li><li><p>CUDA9.0</p></li><li><p>cuDNN7.0.5</p></li></ul></blockquote><h3 id="安装cuda"><a class="markdownIt-Anchor" href="#安装cuda"></a> 安装CUDA</h3><p><strong>CUDA已发布版本</strong> ：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p><p>本文选择下载安装CUDA9.0(因为之前跑Demo时已经安装tensorflow-gpu-1.5.0了)</p><p>国内下载速度较慢，需要使用外网，如果你也选择安装CUDA9.0版本，可以选择从我的百度网盘中下载。</p><p><strong>Step1</strong>: 访问NVIDIA官网，选择下载CUDA9.0</p><p><img src="/img/article/2021/05/20/3.png" alt="" /></p><p><img src="/img/article/2021/05/20/4.png" alt="" /></p><p><img src="/img/article/2021/05/20/5.png" alt="" /></p><p><strong>Step2</strong>: 安装CUDA9.0</p><p>运行安装程序：</p><p><img src="/img/article/2021/05/20/6.png" alt="" /></p><p>选择自定义，然后勾选全部安装：</p><p><img src="/img/article/2021/05/20/7.png" alt="" /></p><p>安装位置推荐不要改动，就在C盘就行：</p><p><img src="/img/article/2021/05/20/8.png" alt="" /></p><p>这里还要求电脑安装过Visual Studio (2015/2017)，不然装不上nsight：</p><p>本文电脑已安装VS2017</p><p><img src="/img/article/2021/05/20/10.png" alt="" /></p><p>安装完成：</p><p><img src="/img/article/2021/05/20/9.png" alt="" /></p><h3 id="安装cudnn"><a class="markdownIt-Anchor" href="#安装cudnn"></a> 安装cuDNN</h3><p><strong>CUDNN历史版本</strong> ：<a href="https://developer.nvidia.com/rdp/cudnn-archive">https://developer.nvidia.com/rdp/cudnn-archive</a></p><p>本文选择下载安装cuDNN7.0.5(与CUDA9.0版本对应)</p><p>国内下载速度较慢，需要使用外网，如果你也选择安装cuDNN7.0.5版本，可以选择从我的百度网盘中下载。</p><p><strong>Step1</strong>: 访问NVIDIA官网，选择下载cuDNN9.0</p><p><img src="/img/article/2021/05/20/11.png" alt="" /></p><p>下载好cuDNN，解压，把对应文件夹中的东西复制进去即可。</p><h2 id="tensorflow-gpu"><a class="markdownIt-Anchor" href="#tensorflow-gpu"></a> Tensorflow-gpu</h2><p>如果你有参考我上一篇文章，并成功跑起了Demo，那么已经安装过tensorflow-gpu了</p><p>运行如下程序来简单测试是否正在使用GPU进行运算:</p><pre class="language-python" data-language="python"><code class="language-python">import os# os.environ[&#39;TF_CPP_MIN_LOG_LEVEL&#39;] &#x3D; &#39;2&#39;# 使用编号为0的GPUos.environ[&quot;CUDA_VISIBLE_DEVICES&quot;] &#x3D; &#39;0&#39;import tensorflow as tffrom tensorflow.python.client import device_libprint(device_lib.list_local_devices())print(tf.test.gpu_device_name())sess&#x3D;tf.Session()a&#x3D;tf.constant(1)b&#x3D;tf.constant(3)print(sess.run(a+b))</code></pre><p>可能遇到的问题：</p><p>为什么Tensorflow还是使用的CPU而非GPU？</p><h2 id="demo运行"><a class="markdownIt-Anchor" href="#demo运行"></a> Demo运行</h2><h2 id="碰壁"><a class="markdownIt-Anchor" href="#碰壁"></a> 碰壁</h2><h3 id="为什么tensorflow还是使用的cpu而非gpu"><a class="markdownIt-Anchor" href="#为什么tensorflow还是使用的cpu而非gpu"></a> 为什么Tensorflow还是使用的CPU而非GPU</h3><p>如果你既安装了tensorflow，又安装了tensorflow-gpu，请保证tensorflow-gpu版本&gt;=tensorflow版本</p><p>最保险的方法，是把tensorflow和tensorflow-gpu都卸了，并只重新安装tensorflow-gpu</p><pre class="language-bash" data-language="bash"><code class="language-bash"># 卸载conda uninstall tensorflow&#x3D;&#x3D;1.5.0conda uninstall tensorflow-gpu&#x3D;&#x3D;1.5.0# 重新安装conda install tensorflow-gpu&#x3D;&#x3D;1.5.0</code></pre><p>然后再运行上面的测试.py试试。</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机视觉</tag>
      
      <tag>卷积神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从0开始——跑起Mask-RCNN Demo</title>
    <link href="/2021/05/16/AI-Learning/20210516-%E4%BB%8E0%E5%BC%80%E5%A7%8BMaskRCNN/"/>
    <url>/2021/05/16/AI-Learning/20210516-%E4%BB%8E0%E5%BC%80%E5%A7%8BMaskRCNN/</url>
    
    <content type="html"><![CDATA[<h1 id="从0开始跑起mask-rcnn-demo"><a class="markdownIt-Anchor" href="#从0开始跑起mask-rcnn-demo"></a> 从0开始——跑起Mask-RCNN Demo</h1><p>本教程适用于0基础入门机器学习的Coder，阅读完之后你将能在你的电脑上跑起来Mask-RCNN官方的Demo噢！</p><p>俗话说: 再🐮的理论也要首先通过实践，把项目跑起来才是硬道理，代码可以之后慢慢研究！</p><p>基于以上原则，本教程:</p><ul><li>只专注于Demo运行的环境配置</li><li>不带有任何机器学习原理的代码原理讲解</li></ul><p>本文Demo运行的外部环境: Win10(64bits) + Anaconda3(2020.11版)</p><h2 id="maskrcnn"><a class="markdownIt-Anchor" href="#maskrcnn"></a> MaskRCNN</h2><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p>​   大名鼎鼎的 Mask RCNN 一举夺得 ICCV2017 Best Paper，名声大造。Mask RCNN 是何恺明基于以往的 Faster RCNN 架构提出的新的卷积网络，实现高效地检测图中的物体，并同时生成一张高质量的每个个体的分割掩码，即有效地目标的同时完成了高质量的语义分割。</p><p><img src="/img/article/2021/05/16/1.png" alt="" /></p><p><strong>论文地址</strong>:  <em><a href="https://arxiv.org/abs/1703.06870">https://arxiv.org/abs/1703.06870</a></em></p><h3 id="项目下载"><a class="markdownIt-Anchor" href="#项目下载"></a> 项目下载</h3><p><strong>项目开源地址</strong>: <em><a href="https://github.com/matterport/Mask_RCNN">https://github.com/matterport/Mask_RCNN</a></em></p><p>在开源地址的<a href="https://github.com/matterport/Mask_RCNN/releases">项目release发布页</a>内:</p><ul><li>Mask R-CNN 2.1中下载balloon_dataset.zip、mask_rcnn_balloon.h5、 Source code(zip/tar.gz)</li></ul><p><img src="/img/article/2021/05/16/2.png" alt="" /></p><ul><li>Mask R-CNN 2.0中下载mask_rcnn_coco.h5</li></ul><p><img src="/img/article/2021/05/16/3.png" alt="" /></p><p>本次教程需要用到的只有Source code和mask_rcnn_coco.h5，其他下载的文件在进一步学习中会用到。</p><p>下载完成后，解压Source code，然后将mask_rcnn_coco放在主目录下:</p><p><img src="/img/article/2021/05/16/4.png" alt="" /></p><p>完成以上步骤后就做好了项目前期准备，本文的目的就是要__让Demo.ipynb成功运行__</p><p><img src="/img/article/2021/05/16/target.png" alt="" /></p><h2 id="anacondapython环境配置"><a class="markdownIt-Anchor" href="#anacondapython环境配置"></a> Anaconda[Python环境配置]</h2><p><strong>Anaconda官网下载地址</strong>:  <em><a href="https://www.anaconda.com/products/individual#Downloads">https://www.anaconda.com/products/individual#Downloads</a></em></p><p>安装较为简单，这里不花笔墨叙述如何安装Anaconda，不会可以自行百度Anaconda安装教程。</p><blockquote><p><em>Q</em> :我已经安装了python了，安装Anaconda会有冲突么，需要卸载python再安装Anaconda么？</p><p><em>A</em> :不会冲突，放心安装。Anaconda可以与现有的python版本共存,只要二者都配置了环境变量即可。</p></blockquote><p>给Anaconda换国内源，可以解决下载缓慢的问题=&gt;<a href="#jump1">Conda换源</a></p><p><span color=red>[注]:</span>以下安装命令中所有环境和库的版本，最好与本文版本相同，以免出现不必要的麻烦。</p><h3 id="python虚拟环境"><a class="markdownIt-Anchor" href="#python虚拟环境"></a> Python虚拟环境</h3><p>安装好Anaconda，并配置好环境变量后，打开cmd或Anaconda Prompt。</p><p>进行以下操作:</p><p><strong>Step1</strong>:  创建python3.6版本的虚拟环境</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda create -n &#96;[虚拟环境名]&#96; python&#x3D;3.6</code></pre><p>弹出(y/n)时，输入y即可。</p><p><strong>Step2</strong>:  虚拟环境基础操作命令</p><p><code>激活虚拟环境</code>:</p><pre class="language-bash" data-language="bash"><code class="language-bash">activate &#96;[虚拟环境名]&#96;</code></pre><p><code>退出虚拟环境</code>:</p><pre class="language-none"><code class="language-none">deactivate</code></pre><p><code>删除虚拟环境</code>:</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda remove -n &#96;[虚拟环境]&#96;</code></pre><p>激活了虚拟环境后，使用conda/pip的安装命令只会给虚拟环境envs安装；</p><p>如果出现错误，可以选择直接删掉虚拟环境重来。</p><h3 id="jupyter-notebook配置"><a class="markdownIt-Anchor" href="#jupyter-notebook配置"></a> Jupyter Notebook配置</h3><p>一般使用Anaconda创建的python虚拟环境自带Jupyter Notebook，使用以下命令打开:</p><pre class="language-bash" data-language="bash"><code class="language-bash">jupyter notebook</code></pre><p>但自带的会有不完善的地方，这里补全。</p><p><strong>Step1</strong>: 安装nb_conda使Jupyter Notebook能够切换虚拟环境</p><pre class="language-none"><code class="language-none">conda install nb_conda</code></pre><p>安装后打开jupyter notebook 可以看到Conda插件，并显示环境，如下图:</p><p>[笔者的电脑上有root(基础python)、Anaconda2020.11(Anaconda自带)、python3.6(虚拟环境envs))三种环境]</p><p><img src="/img/article/2021/05/16/5.png" alt="" /></p><p>此处可能出现的相关错误:</p><p><a href="#jump2">打开jupyter notebook后，出现Dead Kenel</a></p><p><em>The kernel has died,and the automatic restart has failed.</em></p><p><img src="/img/article/2021/05/16/6.png" alt="" /></p><p>Jupyter NoteBook如果出现问题，一定要看看控制台cmd报了什么错误，根据该错误网上搜索解决</p><h3 id="python库安装"><a class="markdownIt-Anchor" href="#python库安装"></a> Python库安装</h3><p><strong>Step1</strong>: 根据github上Mask-RCNN的ReadMe，要安装requirements.txt中的python库</p><p><img src="/img/article/2021/05/16/7.png" alt="" /></p><p>然而各种库版本不对很容易导致各种问题，四处碰壁。这里推荐按本文的requirements.txt配置</p><p><img src="/img/article/2021/05/16/8.png" alt="" /></p><p>可以点击这里直接下载:<a href="/load/requirements.txt">requirements.txt</a></p><p>编辑好requirements.txt后，然后使用以下命令安装</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip install -r requirements.txt</code></pre><p>如果不按本文中的requirements.txt配置，请注意<a href="https://www.cnblogs.com/carle-09/p/11661261.html">Tensorflow和Keras版本对应</a></p><p><strong>Step2</strong>: <span id="jump6">安装coco库</span></p><p>该步骤需要区分Window系统和Linux系统安装</p><p><strong>Windows</strong> :</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip install pycocotools-windows</code></pre><p><strong>Linux</strong> :</p><p>【需要Linux已安装C语言编译器如cmaker】</p><p>方法1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip install git+https:&#x2F;&#x2F;github.com&#x2F;waleedka&#x2F;cocoapi.git#egg&#x3D;pycocotools&amp;subdirectory&#x3D;PythonAPI</code></pre><p>方法2:</p><pre class="language-bash" data-language="bash"><code class="language-bash">git clone https:&#x2F;&#x2F;github.com&#x2F;waleedka&#x2F;coco.gitcd coco&#x2F;PythonAPImakesudo make installsudo python setup.py install</code></pre><h2 id="demo运行"><a class="markdownIt-Anchor" href="#demo运行"></a> Demo运行</h2><p><strong>Step1</strong>: cmd打开jupyter notebook</p><pre class="language-bash" data-language="bash"><code class="language-bash">jupyter notebook</code></pre><p><img src="/img/article/2021/05/16/9.png" alt="" /></p><p><strong>Step2</strong>: 打开项目目录下的demo.ipynb，并切换Kenel为你的python3.6虚拟环境</p><p><img src="/img/article/2021/05/16/10.png" alt="" /></p><p><strong>Step3</strong>: 一路<code>Shift</code>+<code>Enter</code>，即可</p><p>Import库时看到如下图，则说明没问题:</p><p><img src="/img/article/2021/05/16/11.png" alt="" /></p><p>最后Run Object  Detection时，首先会看到数据:</p><p><img src="/img/article/2021/05/16/12.png" alt="" /></p><p>等待一会儿会出现训练测试图片:</p><p><img src="/img/article/2021/05/16/13.png" alt="" /></p><p>如果以上步骤完美运行，那么恭喜你，成功跑起来了Mask-RCNN的Demo！</p><p>此处可能出现的相关错误:</p><ol><li><p><a href="#jump3">ImportError: No module named ‘pycocotools’</a></p></li><li><p><a href="#jump4">AttributeError: ‘str’ object has no attribute ‘decode’</a></p></li><li><p><a href="#jump5">AttributeError:module ‘cipy.misc’ has no attribute ‘imresize’</a></p></li></ol><h2 id="碰壁"><a class="markdownIt-Anchor" href="#碰壁"></a> 碰壁</h2><h3 id="span-idjump1conda-换源span"><a class="markdownIt-Anchor" href="#span-idjump1conda-换源span"></a> <span id="jump1">Conda 换源</span></h3><p><strong>清华源</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;msys2&#x2F;# 设置搜索时显示通道地址conda config --set show_channel_urls yes</code></pre><p><strong>中科大源</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">conda config --add channels https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;msys2&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;bioconda&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;menpo&#x2F;# 设置搜索时显示通道地址conda config --set show_channel_urls yes</code></pre><h3 id="span-idjump2jupyter-notebook配置相关span"><a class="markdownIt-Anchor" href="#span-idjump2jupyter-notebook配置相关span"></a> <span id="jump2">Jupyter Notebook配置相关</span></h3><p><span style="font-weight:bold;">Dead Kenel内核死亡[ImportError: cannot import name ‘generator_to_async_generator’]</span></p><p>该内核死亡原因，查看cmd，抛出以下错误:</p><pre class="language-bash" data-language="bash"><code class="language-bash">ImportError: cannot import name &#39;generator_to_async_generator&#39;</code></pre><p><strong>解决方法</strong>:  <a href="https://github.com/ipython/ipython/issues/11270">参考网页</a></p><p>先执行<code>2</code>次，完全卸载ipython 和 prompt_toolkit</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip uninstall -y ipython prompt_toolkit</code></pre><p>再重新安装ipython prompt_toolkit</p><pre class="language-none"><code class="language-none">pip install ipython prompt_toolkit</code></pre><p><strong>[AttributeError: module ‘<a href="http://dateutil.tz">dateutil.tz</a>’ has no attribute ‘UTC’]</strong></p><p>该错误不容易发现，在jupyer notebook中表现为运行无反应。查看cmd，抛出以下错误:</p><pre class="language-bash" data-language="bash"><code class="language-bash">AttributeError: module &#39;dateutil.tz&#39; has no attribute &#39;UTC&#39;</code></pre><p><strong>解决方法:</strong> <a href="https://stackoverflow.com/questions/60929286/attributeerror-module-dateutil-tz-has-no-attribute-utc-on-zappa-deploy">参考网页</a></p><p>重新强制安装python-dateutil</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip install python-dateutil --upgrade --force</code></pre><h3 id="demo运行相关"><a class="markdownIt-Anchor" href="#demo运行相关"></a> Demo运行相关</h3><p><span id="jump3" style="font-weight:bold;">[ImportError: No module named ‘pycocotools’]</span></p><p>问题原因: coco库没有成功安装</p><p>解决方法: <a href="#jump6">安装coco库</a></p><p><span id="jump4" style="font-weight:bold;">[AttributeError: ‘str’ object has no attribute ‘decode’]</span></p><p>问题原因: h5py的版本过高，大于了3.0</p><p>解决方法: <a href="https://github.com/keras-team/keras/issues/14265">参考网页</a></p><pre class="language-bash" data-language="bash"><code class="language-bash">pip install h5py&#x3D;&#x3D;2.10.0</code></pre><p><img src="/img/article/2021/05/16/14.png" alt="" /></p><p>安装时要关闭jupyter notebook以防止 h5py文件夹被占用，无法写入h5py2.10.0进行覆盖</p><p><span id="jump5" style="font-weight:bold;">[AttributeError:module ‘scipy.misc’ has no attribute ‘imresize’]</span></p><p>问题原因: scipy的版本过高</p><p>解决方法: <a href="https://stackoverflow.com/questions/56204985/how-to-fix-scipy-misc-has-no-attribute-imresize">参考网页</a></p><pre class="language-bash" data-language="bash"><code class="language-bash">pip install scipy&#x3D;&#x3D;1.2.2</code></pre><p><img src="/img/article/2021/05/16/15.png" alt="" /></p><p>安装时要关闭jupyter notebook以防止 scipy文件夹被占用，无法写入scipy1.2.2进行覆盖</p><p>至此，本文结束，感谢阅读！</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机视觉</tag>
      
      <tag>卷积神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x40进阶数据结构-(7)-Chtholly Tree</title>
    <link href="/2021/05/07/Algorithm/Template/20210507-0x40-%E8%BF%9B%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(7)-Chtholly%20Tree/"/>
    <url>/2021/05/07/Algorithm/Template/20210507-0x40-%E8%BF%9B%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(7)-Chtholly%20Tree/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x40进阶数据结构-(6)-可持久化数据结构</title>
    <link href="/2021/05/06/Algorithm/Template/20210506-0x40-%E8%BF%9B%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(6)-%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2021/05/06/Algorithm/Template/20210506-0x40-%E8%BF%9B%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(6)-%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x40进阶数据结构-(5)-平衡树</title>
    <link href="/2021/05/05/Algorithm/Template/20210505-0x40-%E8%BF%9B%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(5)-%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    <url>/2021/05/05/Algorithm/Template/20210505-0x40-%E8%BF%9B%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(5)-%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x40进阶数据结构-(4)-线段树</title>
    <link href="/2021/05/04/Algorithm/Template/20210504-0x40-%E8%BF%9B%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(4)-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <url>/2021/05/04/Algorithm/Template/20210504-0x40-%E8%BF%9B%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(4)-%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="线段树"><a class="markdownIt-Anchor" href="#线段树"></a> 线段树</h2><h3 id="线段树递归"><a class="markdownIt-Anchor" href="#线段树递归"></a> 线段树（递归）</h3><h3 id="zkw线段树非递归"><a class="markdownIt-Anchor" href="#zkw线段树非递归"></a> zkw线段树（非递归）</h3><p><strong>非递归线段树</strong>，是一种代码较短、常数较小的线段树写法。</p><blockquote><p>因为张昆玮在<a href="https://wenku.baidu.com/view/0c1bbba40029bd64783e2cca.html?_wkts_=1679138757334">《统计的力量》</a>中介绍了这种数据结构，因此常常被称为<strong>zkw线段树</strong>，</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x40进阶数据结构-(3)-树状数组</title>
    <link href="/2021/05/03/Algorithm/Template/20210503-0x40-%E8%BF%9B%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(3)-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    <url>/2021/05/03/Algorithm/Template/20210503-0x40-%E8%BF%9B%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(3)-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="树状数组"><a class="markdownIt-Anchor" href="#树状数组"></a> 树状数组</h2><p>树状数组（Binary Index Tree / Fenwick Tree）是一种简单的数据结构，主要用来<strong>维护序列的前缀和</strong>。<br />它根据<strong>任意正整数关于2的不重复次幂的唯一分解性质</strong>，把区间二进制分解，支持在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>对原序列单点更新，同时支持在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log_2 n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>内查询前缀和。</p><blockquote><p><strong>任意正整数关于2的不重复次幂的唯一分解</strong>：</p><p>就是说：如果我们想查询区间[1, x]，可以先把x进行二进制分解：<br />假设正整数x的二进制表示为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><msub><mi>a</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>…</mo><msub><mi>a</mi><mn>2</mn></msub><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">a_{k - 1}a_{k - 2}\ldots a_2a_1a_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其中等于1的位是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><msub><mi>a</mi><msub><mi>i</mi><mn>1</mn></msub></msub><mo separator="true">,</mo><msub><mi>a</mi><msub><mi>i</mi><mn>2</mn></msub></msub><mo separator="true">,</mo><mo>…</mo><msub><mi>a</mi><msub><mi>i</mi><mi>m</mi></msub></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">{\{a_{i_{1}}, a_{i_{2}}, \ldots a_{i_{m}}\}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span></span>，则正整数x可以被二进制分解成：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><msup><mn>2</mn><msub><mi>i</mi><mn>1</mn></msub></msup><mo>+</mo><msup><mn>2</mn><msub><mi>i</mi><mn>2</mn></msub></msup><mo>+</mo><mo>…</mo><mo>+</mo><msup><mn>2</mn><msub><mi>i</mi><mi>m</mi></msub></msup></mrow><annotation encoding="application/x-tex">x = 2^{i_1} + 2^{i_2} + \ldots + 2^{i_m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9579939999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9579939999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8746639999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>那么查询区间[1,x]，可以分解成查询以下log(x)个子区间：</p><ul><li><p>长度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><msub><mi>i</mi><mn>1</mn></msub></msup></mrow><annotation encoding="application/x-tex">2^{i_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>的子区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><msup><mn>2</mn><msub><mi>i</mi><mn>1</mn></msub></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1, 2^{i_1}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></p></li><li><p>长度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><msub><mi>i</mi><mn>2</mn></msub></msup></mrow><annotation encoding="application/x-tex">2^{i_2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>的子区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msup><mn>2</mn><msub><mi>i</mi><mn>1</mn></msub></msup><mo>+</mo><mn>1</mn><mo separator="true">,</mo><msup><mn>2</mn><msub><mi>i</mi><mn>1</mn></msub></msup><mo>+</mo><msup><mn>2</mn><msub><mi>i</mi><mn>2</mn></msub></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[2^{i_1} + 1, 2^{i_1} + 2^{i_2}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.019104em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></p></li><li><p>…</p></li><li><p>长度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><msub><mi>i</mi><mi>m</mi></msub></msup></mrow><annotation encoding="application/x-tex">2^{i_m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>的子区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msup><mn>2</mn><msub><mi>i</mi><mn>1</mn></msub></msup><mo>+</mo><msup><mn>2</mn><msub><mi>i</mi><mn>2</mn></msub></msup><mo>+</mo><mo>…</mo><mo>+</mo><msup><mn>2</mn><msub><mi>i</mi><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msub></msup><mo>+</mo><mn>1</mn><mo separator="true">,</mo><msup><mn>2</mn><msub><mi>i</mi><mn>1</mn></msub></msup><mo>+</mo><msup><mn>2</mn><msub><mi>i</mi><mn>2</mn></msub></msup><mo>+</mo><mo>…</mo><mo>+</mo><msup><mn>2</mn><msub><mi>i</mi><mi>m</mi></msub></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[2^{i_1} + 2^{i_2} + \ldots + 2^{i_{m-1}} + 1, 2^{i_1} + 2^{i_2} + \ldots + 2^{i_m}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.907994em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.907994em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173142857142857em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.20252142857142857em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.019104em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.907994em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></p></li></ul><p>这些子区间的共同特点是:<strong>若区间结尾为R，则区间长度就等于R的二进制分解下最小的2的次幂，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">lowbit(R)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></strong></p><p>例如:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mn>7</mn><mo>=</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">x = 7 = 2^2 + 2 ^ 1 + 2 ^ 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span>，那么查询区间[1, 7]就可以划分为查询<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1, 4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">]</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>5</mn><mo separator="true">,</mo><mn>6</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[5, 6]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mclose">]</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>7</mn><mo separator="true">,</mo><mn>7</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[7, 7]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">7</span><span class="mclose">]</span></span></span></span>三个不重复子区间，<br />区间长度分别是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mn>4</mn><mo stretchy="false">)</mo><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">lowbit(4) = 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mn>6</mn><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">lowbit(6) = 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mn>7</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">lowbit(7) = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord">7</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</p></blockquote><p>对于一个长度为N的序列<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>，我们建立一个同样长度为N的树状数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">tree</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">tree[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>保存序列<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>的区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><mo>−</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[x - lowbit(x) + 1, x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>中所有数的和，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>x</mi><mo>−</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><mi>x</mi></msubsup><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\sum_{i=x-lowbit(x)+1}^{x}a[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2790020000000002em;vertical-align:-0.47471em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8042920000000001em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">t</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.47471em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>。树状数组结构如下图所示：</p><p><img src="/img/algorithm/0x40/binary_index_tree.png" alt="" /></p><p>该结构满足以下性质：</p><ol><li>每个内部节点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">tree[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>保存以它为根的子树中所有节点的和</li><li>每个内部节点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">tree[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>的子节点个数等于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">lowbit(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>的位数</li><li>除树根外，每个内部节点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">tree[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>的父节点是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">[</mo><mi>x</mi><mo>+</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mi>s</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">tree[x + lowbits(x)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></li><li>树的深度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log_2N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></li></ol><h3 id="单点更新"><a class="markdownIt-Anchor" href="#单点更新"></a> 单点更新</h3><p>单点更新就是把原序列中的一个数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>加上一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>u</mi></mrow><annotation encoding="application/x-tex">\Delta u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span><span class="mord mathdefault">u</span></span></span></span>，同时正确维护树状数组所记录的区间和。</p><p>根据上面给出的树状数组树形结构和它的性质，不难发现只有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">tree[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>及其所有祖先节点保存的区间和包含<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>，<br />因此就像“爬树”一样，从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">tree[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>开始每次下标<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">+lowbit(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">+</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>寻找到祖先节点，逐一进行更新即可。</p><h3 id="查询前缀和"><a class="markdownIt-Anchor" href="#查询前缀和"></a> 查询前缀和</h3><p>查询前缀和，即序列<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>中第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∼</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">1 \sim x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>个数的和。</p><p>按照我们上述提出的方法，应该求出x的二进制表示的每个等于1的位，把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1, x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>分为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>个不重复子区间，而每个子区间的区间和都已经保存在树状数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">tree</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span></span></span></span>中，把这些子区间的区间和加起来就能在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span> 的时间内查询前缀和。</p><hr /><p>1-based树状数组板子如下：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 1e5 + 7;struct BinaryIndexTree &#123;    int tree[N];   int lowbit(int x) &#123;        return x &amp; -x;    &#125;    void update (int x, int u) &#123;        for (; x &lt;&#x3D; N; x +&#x3D; lowbit(x)) tree[x] +&#x3D; u;    &#125;    int qsum (int x) &#123;        int sum &#x3D; 0;        for (; x; x -&#x3D; lowbit(x)) sum +&#x3D; tree[x];        return sum;    &#125;&#125;;int main() &#123;    cin &gt;&gt; n;    int a[N];    BinaryIndexTree bit;    memset(bit.tree, 0, sizeof bit.tree);    for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;        cin &gt;&gt; a[i];        bit.update(i, a[i]); &#x2F;&#x2F; 构建树状数组    &#125;    int l, r;    cin &gt;&gt; l &gt;&gt; r;    cout &lt;&lt; bit.qsum(r) - bit.qsum(l - 1); &#x2F;&#x2F;查询区间和[l, r]&#125;</code></pre><h3 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h3><h3 id="拓展"><a class="markdownIt-Anchor" href="#拓展"></a> 拓展</h3><p><strong>练习eg:</strong></p><p><a href="https://www.acwing.com/solution/content/2266/">求逆序对 </a></p><p>可以参考的资料：</p><p><a href="https://leetcode.cn/problems/range-sum-query-mutable/solutions/632515/guan-yu-ge-lei-qu-jian-he-wen-ti-ru-he-x-41hv/">树状数组和线段树什么时候用</a></p><p><a href="https://blog.csdn.net/bestsort/article/details/80796531">https://blog.csdn.net/bestsort/article/details/80796531</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x40进阶数据结构-(2)-ST表</title>
    <link href="/2021/05/02/Algorithm/Template/20210502-0x40-%E8%BF%9B%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(2)-ST%E8%A1%A8/"/>
    <url>/2021/05/02/Algorithm/Template/20210502-0x40-%E8%BF%9B%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(2)-ST%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="st表"><a class="markdownIt-Anchor" href="#st表"></a> ST表</h2><h3 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h3><p><strong>ST表</strong>（Sparse Table，<strong>稀疏表</strong>）是一种简单的数据结构，主要用来解决<strong>静态RMQ</strong>（<strong>区间最值查询</strong>）问题。<br />它应用<strong>倍增</strong>的思想，只要花费<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log_2 n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的预处理，就能在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 内求出原序列某段子区间的最值。</p><blockquote><p>所谓静态，就是数组内部的值始终不发生修改</p></blockquote><p>对于一个长度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>的序列<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>，其子区间个数显然有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>个，那么根据倍增思想，我们首先在这<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的状态空间，选取2的整数次幂的位置作为代表值。具体来说，我们可以使用<strong>动态规划</strong>的思想，预处理出一个二维数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 表示从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 开始、长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>j</mi></msup></mrow><annotation encoding="application/x-tex">2^j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span></span></span></span> 的区间中的最值，即：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>x</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>max</mi><mo>⁡</mo><mrow><mo fence="true">{</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><msup><mn>2</mn><mi>j</mi></msup><mo>−</mo><mn>1</mn></mrow></msub><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">mx[i][j] = \max{ \left \{ a_{i},a_{i+1},\ldots,a_{i+2^{j}-1} \right \}  }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.51484em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7570857142857144em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24349099999999999em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>n</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>min</mi><mo>⁡</mo><mrow><mo fence="true">{</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><msup><mn>2</mn><mi>j</mi></msup><mo>−</mo><mn>1</mn></mrow></msub><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">mn[i][j] = \min{ \left \{ a_{i},a_{i+1},\ldots,a_{i+2^{j}-1} \right \}  }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.51484em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7570857142857144em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24349099999999999em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span></span></span></p><p>可以看出，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 的第一维是<strong>下标</strong>，第二维是<strong>区间长度</strong>所对应的二进制位数，因此该数组的空间大小 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log_2 n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p><h3 id="构建build"><a class="markdownIt-Anchor" href="#构建build"></a> 构建(build)</h3><p>ST表是基于<strong>倍增</strong>思想的。</p><p>我们设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>表示区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>i</mi><mo>+</mo><msup><mn>2</mn><mi>j</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[i, i + 2 ^ j - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.907994em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 内的最值，显然有初始状态 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i][0] = max[i, i] = a[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>。</p><p>由倍增思想可得，跳<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span>步相当于先跳<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{i - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>步再跳<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{i - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>步；同理，区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>i</mi><mo>+</mo><msup><mn>2</mn><mi>j</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[i, i + 2 ^ j - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.907994em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>的最值，可以通过取它的两个子区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>i</mi><mo>+</mo><msup><mn>2</mn><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[i, i + 2 ^ {j - 1} - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.907994em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><msup><mn>2</mn><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msup><mo separator="true">,</mo><mi>i</mi><mo>+</mo><msup><mn>2</mn><mi>j</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[i + 2 ^ {j - 1}, i + 2 ^ j -1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.019104em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.907994em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>的最值得到。</p><p>所以可得状态转移方程：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><msup><mn>2</mn><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f[i][j] = max(f[i][j - 1], f[i + 2 ^ {j - 1}][j - 1])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.124664em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><p>因此只需要先枚举区间长度(也就是枚举j)，再枚举起点(也就是枚举i)，就能使得ST表由区间长度从小到大递推构建。</p><h3 id="查询query"><a class="markdownIt-Anchor" href="#查询query"></a> 查询(query)</h3><p>建立好 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 数组之后，要查询区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span> 的最值，我们当然希望直接输出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[l][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>+</mo><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn><mo>=</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">l + 2 ^ k - 1 = r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span></p><p>由上式可得：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><mi>l</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k = log_2(r - l  + 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>但是经过对数运算后，求得的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>不一定是整数，因此很可能无法正好覆盖区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[l, r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>。</p><blockquote><p>举个例子：对于求区间[1, 9]的最值，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mn>9</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k = log_2(9)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">9</span><span class="mclose">)</span></span></span></span>不是整数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>要是强行取整无法正好覆盖[l, r]</p></blockquote><p>所以这里有一个方法，就是把区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[l, r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>分为两个子区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>l</mi><mo>+</mo><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[l, l + 2 ^ k - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>r</mi><mo>−</mo><msup><mn>2</mn><mi>k</mi></msup><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[r - 2 ^ k + 1, r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>，让这左右两个重叠的相同长度子区间完成区间覆盖，再求最值</p><p>Step1：计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mo stretchy="false">⌊</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><mi>l</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">k=\lfloor\log_2(r - l + 1)\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">⌋</span></span></span></span>，即对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>向下取整，找到最接近且不大于[查询区间长度]的区间长度<br />Step2：取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>max</mi><mo>⁡</mo><mrow><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">[</mo><mi>r</mi><mo>−</mo><msup><mn>2</mn><mi>k</mi></msup><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">\max{(f[l][k],f[r-2^{k}+1][k])}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span>，以为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>为区间长度所对应的二进制数，求这两个子区间的最值</p><blockquote><p>举个例子：对于求区间[1, 9]的最值，k向下取整得3，因此子区间是[1, 8]和[2, 9]</p></blockquote><p>不难发现，<strong>虽然两个区间会有部分重叠，但对于求最值不会影响最终结果</strong>。</p><p>每次计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\log2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span></span></span>太花时间了，我们可以在build中对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\log2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span></span></span>的计算也进行一次递推的预处理：</p><pre class="language-c++" data-language="c++"><code class="language-c++">lg[0] &#x3D; -1;for (int i &#x3D; 1; i &lt;&#x3D; n; i++)  lg[i] &#x3D; lg[i &gt;&gt; 1] + 1; &#x2F;&#x2F; 已向下取整</code></pre><hr /><p>1-basedST表板子如下：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 1e5 + 7;struct SparseTable &#123;int lg[N], mx[N][21], mn[N][21];void build(vector&lt;int&gt;&amp; a, int n) &#123;lg[0] &#x3D; -1;for(int i &#x3D; 1; i &lt;&#x3D; n; i++) lg[i] &#x3D; lg[i &gt;&gt; 1] + 1;for(int i &#x3D; 1; i &lt;&#x3D; n; i++) mx[i][0] &#x3D; mn[i][0] &#x3D; a[i];for(int j &#x3D; 1; 1 &lt;&lt; j &lt;&#x3D; n; j++) for(int i &#x3D; 1; i + (1 &lt;&lt; j) - 1 &lt;&#x3D; n; i++) &#123;            mx[i][j] &#x3D; max(mx[i][j - 1], mx[i + (1 &lt;&lt; (j - 1))][j - 1]);            mn[i][j] &#x3D; min(mn[i][j - 1], mn[i + (1 &lt;&lt; (j - 1))][j - 1]);        &#125;&#125;int qmax(int l, int r) &#123;int k &#x3D; lg[r - l + 1];return max(mx[l][k], mx[r - (1 &lt;&lt; k) + 1][k]);&#125;int qmin(int l, int r) &#123;int k &#x3D; lg[r - l + 1];return min(mn[l][k], mn[r - (1 &lt;&lt; k) + 1][k]);&#125;&#125;;int main() &#123;int n, m;    cin &gt;&gt; n &gt;&gt; m;    vector&lt;int&gt;a(n + 1); &#x2F;&#x2F; 1-based, n个数组成数组    for (int i &#x3D; 1 ; i &lt;&#x3D; n; i++) &#123;cin &gt;&gt; a[i];    &#125;        SparseTable st;    st.build(a, n); &#x2F;&#x2F; 构建st表    &#x2F;&#x2F; m次在线查询    while (m--) &#123;        int l, r;        scanf(&quot;%d %d&quot;, &amp;l, &amp;r);        printf(&quot;max:%d min:%d\n&quot;, st.qmax(l, r), st.qmin(l, r));    &#125;    return 0;&#125;</code></pre><p>使用时要注意：</p><ul><li><p>这个板子中的SparseTable和build时使用的<code>vector&lt;int&gt; a</code>都是1-based的</p></li><li><p>关于<code>mx[N][21]</code>和<code>mn[N][21]</code>的第二维，不一定要是21，只要求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&gt;</mo><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">&gt;=log_2(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>即可。因为复杂度的关系N一般取1e5，因此第二维最小其实可以是18</p></li><li><p>求k时的log计算，也可以使用<code>&lt;cmath&gt;</code>自带的</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;cmath&gt;int qmax(int l, int r) &#123;    double t &#x3D; log(r - l + 1) &#x2F; log(2);    int k &#x3D; t; &#x2F;&#x2F; 向下取整    return max(mx[l][k], mx[r - (1 &lt;&lt; k) + 1][k]);&#125;</code></pre></li></ul><h3 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h3><ul><li>时间复杂度：<ul><li>构建：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log_2 n )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，时间主要花费在在构建ST表预处理中的双重循环</li><li>查询：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></li></ul></li><li>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log_2 n )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，空间主要花费在<code>mx[N][21]</code>和<code>mn[N][21]</code>上</li></ul><h3 id="拓展"><a class="markdownIt-Anchor" href="#拓展"></a> 拓展</h3><h4 id="可重复贡献问题"><a class="markdownIt-Anchor" href="#可重复贡献问题"></a> 可重复贡献问题</h4><p><strong>常见的可重复贡献问题有</strong>：区间最值、区间按位与、区间按位或、区间GCD等。</p><ul><li><p>区间按位与，只需修改以下代码：</p>  <pre class="language-c++" data-language="c++"><code class="language-c++">f[i][j]&#x3D;f[i][j-1]&amp;f[i+(1&lt;&lt;(j-1))][j-1];       &#x2F;&#x2F; 倍增的预处理ans&#x3D;f[l][lg]&amp;f[r-(1&lt;&lt;lg)+1][lg];              &#x2F;&#x2F; 区间重叠运算</code></pre></li><li><p>区间GCD，只需修改成以下代码：</p>  <pre class="language-c++" data-language="c++"><code class="language-c++">f[i][j]&#x3D;gcd(f[i][j-1],f[i+(1&lt;&lt;(j-1))][j-1]);  &#x2F;&#x2F; 倍增的预处理ans&#x3D;gcd(f[l][lg],f[r-(1&lt;&lt;lg)+1][lg]);         &#x2F;&#x2F; 区间重叠运算</code></pre><p>值得一提的是，处理区间GCD时，ST表与线段树的时间复杂度基本相近，但前者却显然要好写得多。</p></li></ul><p><strong>练习eg:</strong></p><p><a href="https://www.luogu.com.cn/problem/P3865">P3865.【模板】ST 表</a></p><p><a href="https://leetcode.cn/problems/continuous-subarrays/">leetcode-6911.不间断子数组</a></p><p><a href="https://www.luogu.com.cn/problem/P2471">P2471 [SCOI2007]. 降雨量</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x40进阶数据结构-(1)-并查集</title>
    <link href="/2021/05/01/Algorithm/Template/20210501-0x40-%E8%BF%9B%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(1)-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2021/05/01/Algorithm/Template/20210501-0x40-%E8%BF%9B%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(1)-%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="并查集"><a class="markdownIt-Anchor" href="#并查集"></a> 并查集</h2><p>推荐参考的题目:</p><p><a href="https://leetcode.cn/problems/checking-existence-of-edge-length-limited-paths/">https://leetcode.cn/problems/checking-existence-of-edge-length-limited-paths/</a></p><p><a href="https://leetcode.cn/problems/maximum-number-of-points-from-grid-queries/">https://leetcode.cn/problems/maximum-number-of-points-from-grid-queries/</a></p><p>iota函数，用于赋予连续的值(Defined in header <code>&lt;numeric&gt;</code>)</p><h3 id="查找"><a class="markdownIt-Anchor" href="#查找"></a> 查找</h3><h3 id="合并"><a class="markdownIt-Anchor" href="#合并"></a> 合并</h3><h3 id="是否连通"><a class="markdownIt-Anchor" href="#是否连通"></a> 是否连通</h3><hr /><p>个人初步使用的并查集模板，没有加入权重，或者是统计集合的size，等之后做到这类更难的题目再附加</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;numeric&gt;using namespace std;const int n&#x3D; 1e5 + 7;struct UnionFind &#123;    int fa[N];    void build(int n)&#123;        for (int i &#x3D; 1; i &lt;&#x3D; n; i++) fa[i] &#x3D; i; &#x2F;&#x2F; 初始化1~n，可以用iota    &#125;;    int find (int x) &#123;        if (x !&#x3D; fa[x]) fa[x] &#x3D; find(fa[x]);        return fa[x];    &#125;    void unite(int x, int y) &#123;        x &#x3D; find(x), y &#x3D; find(y);        if (x !&#x3D; y) fa[x] &#x3D; y;    &#125;    bool is_connected(int x, int y) &#123;        x &#x3D; find(x), y &#x3D; find(y);        return x &#x3D;&#x3D; y;    &#125;&#125;;int main() &#123;    int n, m;    cin &gt;&gt; n &gt;&gt; m;        UnionFind uf;    uf.build(n);    while (m --) &#123;        char op;        int a, b;        cin &gt;&gt; op;        scanf(&quot;%d %d&quot;, &amp;a, &amp;b);        if (op &#x3D;&#x3D; &#39;M&#39;) uf.unite(a, b);        if (op &#x3D;&#x3D; &#39;Q&#39;) &#123;            if(uf.is_connected(a, b)) &#123;                puts(&quot;Yes&quot;);            &#125;            else puts(&quot;No&quot;);        &#125;    &#125;        return 0;&#125;</code></pre><p>带统计集合的size的板子</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;numeric&gt;using namespace std;const int 1e5 + 7;struct UnionFind &#123;int fa[N], sz[N];    void bulid(int n) &#123;        for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;            fa[i] &#x3D; i, sz[i] &#x3D; 1;        &#125;    &#125;    int find(int x) &#123;        if (x !&#x3D; fa[x]) fa[x] &#x3D; find(fa[x]);        return fa[x];    &#125;    void unite(int x, int y) &#123;        x &#x3D; find(x), y &#x3D; find(y);        if (x !&#x3D; y) &#123;            fa[x] &#x3D; y;            sz[y] +&#x3D; sz[x];        &#125;    &#125;    bool is_connected(int x, int y) &#123;        x &#x3D; find(x), y &#x3D; find(y);        return x &#x3D;&#x3D; y;    &#125;    int get_sz(int x) &#123;        x &#x3D; find(x);        return sz[x];    &#125;&#125;;int main() &#123;    int n, m;    cin &gt;&gt; n &gt;&gt; m;    UnionFind uf(n + 1);        while (m --) &#123;        char op[3];        scanf(&quot;%s&quot;, op);        if (op[0] &#x3D;&#x3D; &#39;C&#39;) &#123;            int a, b;            scanf(&quot;%d %d&quot;, &amp;a, &amp;b);            uf.unite(a, b);        &#125;        if (op[0] &#x3D;&#x3D; &#39;Q&#39;) &#123;            if (op[1] &#x3D;&#x3D; &#39;1&#39;) &#123;                int a, b;                scanf(&quot;%d %d&quot;, &amp;a, &amp;b);                if (uf.is_connected(a, b)) &#123;                    puts(&quot;Yes&quot;);                &#125;                else puts(&quot;No&quot;);            &#125;            else if (op[1] &#x3D;&#x3D; &#39;2&#39;) &#123;                int a;                scanf(&quot;%d&quot;, &amp;a);                printf(&quot;%d\n&quot;, uf.get_sz(a));            &#125;        &#125;    &#125;        return 0;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x30搜索-(3)-记忆化搜索</title>
    <link href="/2021/04/03/Algorithm/Template/20210403-0x30-%E6%90%9C%E7%B4%A2-(3)-%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    <url>/2021/04/03/Algorithm/Template/20210403-0x30-%E6%90%9C%E7%B4%A2-(3)-%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<p>记忆化搜索，也叫自顶向下动态规划</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x30搜索-(2)-广度优先搜索</title>
    <link href="/2021/04/02/Algorithm/Template/20210402-0x30-%E6%90%9C%E7%B4%A2-(2)-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    <url>/2021/04/02/Algorithm/Template/20210402-0x30-%E6%90%9C%E7%B4%A2-(2)-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="广度优先搜索"><a class="markdownIt-Anchor" href="#广度优先搜索"></a> 广度优先搜索</h2><p>广度优先搜索典中典的题目：</p><p>在某某图/迷宫中移动</p><p><a href="https://leetcode.cn/problems/shortest-path-in-binary-matrix/">https://leetcode.cn/problems/shortest-path-in-binary-matrix/</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int shortestPathBinaryMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123;        int n &#x3D; grid.size();        vector&lt;vector&lt;bool&gt;&gt; vis(n, vector&lt;bool&gt; (n, 0));        if (grid[0][0] &#x3D;&#x3D; 1) return -1;        if (n &#x3D;&#x3D; 1) &#123;            return 1;        &#125;        queue&lt;tuple&lt;int, int, int&gt;&gt; q;        q.push(&#123;0, 0, 1&#125;);        while (!q.empty()) &#123;            auto tp &#x3D; q.front(); q.pop();            for (auto d : dirs) &#123;                int dx &#x3D; d[0], dy &#x3D; d[1];                int x &#x3D; get&lt;0&gt;(tp) + dx;                int y &#x3D; get&lt;1&gt;(tp) + dy;                if (0 &lt;&#x3D; x &amp;&amp; x &lt; n &amp;&amp; 0 &lt;&#x3D; y &amp;&amp; y &lt; n &amp;&amp; vis[x][y] &#x3D;&#x3D; 0 &amp;&amp; grid[x][y] &#x3D;&#x3D; 0) &#123;                    vis[x][y] &#x3D; 1;                    if (x &#x3D;&#x3D; n - 1 &amp;&amp; y &#x3D;&#x3D; n - 1) return get&lt;2&gt;(tp) + 1;                    else &#123;                        q.push(&#123;x, y, get&lt;2&gt;(tp) + 1&#125;);                    &#125;                &#125;            &#125;        &#125;        return -1;    &#125;private:    vector&lt;vector&lt;int&gt;&gt; dirs &#x3D; &#123;&#123;0, 1&#125;, &#123;0, -1&#125;, &#123;1, 0&#125;, &#123;-1, 0&#125;, &#123;1, 1&#125;, &#123;-1, 1&#125;, &#123;1, -1&#125;, &#123;-1, -1&#125;&#125;;&#125;;</code></pre><p>private</p><p>广搜变形</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x30搜索-(1)-深度优先搜索</title>
    <link href="/2021/04/01/Algorithm/Template/20210401-0x30-%E6%90%9C%E7%B4%A2-(1)-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    <url>/2021/04/01/Algorithm/Template/20210401-0x30-%E6%90%9C%E7%B4%A2-(1)-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="深度优先搜索"><a class="markdownIt-Anchor" href="#深度优先搜索"></a> 深度优先搜索</h2><p>我们把问题的状态空间看作成一颗搜索树，深度优先搜索（DFS）就是在这颗搜索树上深度优先遍历。</p><p>深度优先搜索与<strong>递归</strong>和<strong>栈</strong>密切相关，因为这两种算法都是<strong>自底向上</strong>的计算过程。</p><p>搜索问题没有模板，只有几种常见的类型，我们针对每道题目都需要考虑它的剪枝优化</p><p><strong>分支</strong></p><p>分支的前后顺序是有区别的：</p><ul><li>影响函数递归边界的输出字典序</li><li>在树的前序、中序、后序遍历中会有体现。</li></ul><p><strong>恢复现场recover</strong></p><p>递归N叉树，每个分支都要recover，不然可能会出现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>g</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>F</mi><mi>a</mi><mi>u</mi><mi>l</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">Segmentation Fault</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">a</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span></span></span></span></p><h3 id="剪枝"><a class="markdownIt-Anchor" href="#剪枝"></a> 剪枝</h3><p>void dfs 和 bool dfs的剪枝对比</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>m</mi></msubsup></mrow><annotation encoding="application/x-tex">C_n^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>只输出一种情况，就要用<strong>bool</strong>来剪枝</p><p><a href="https://leetcode.cn/submissions/detail/405400164/">https://leetcode.cn/submissions/detail/405400164/</a></p><p><a href="https://leetcode.cn/problems/circular-permutation-in-binary-representation/submissions/405399005/">https://leetcode.cn/problems/circular-permutation-in-binary-representation/submissions/405399005/</a></p><h3 id="记录问题"><a class="markdownIt-Anchor" href="#记录问题"></a> 记录问题</h3><p>如果返回值记录不下来(需要记录多个值，比如一个数组)，就直接入参的引用来记录</p><p>最下策是采用全局变量来记录</p><h4 id="优化搜索顺序"><a class="markdownIt-Anchor" href="#优化搜索顺序"></a> 优化搜索顺序</h4><h4 id="排除等效冗余"><a class="markdownIt-Anchor" href="#排除等效冗余"></a> 排除等效冗余</h4><h4 id="可行性剪枝"><a class="markdownIt-Anchor" href="#可行性剪枝"></a> 可行性剪枝</h4><h4 id="最优性剪枝"><a class="markdownIt-Anchor" href="#最优性剪枝"></a> 最优性剪枝</h4>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x20字符串-(5)-AC自动机</title>
    <link href="/2021/03/05/Algorithm/Template/20210305-0x20-%E5%AD%97%E7%AC%A6%E4%B8%B2-(5)-AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <url>/2021/03/05/Algorithm/Template/20210305-0x20-%E5%AD%97%E7%AC%A6%E4%B8%B2-(5)-AC%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x20字符串-(4)-Trie</title>
    <link href="/2021/03/04/Algorithm/Template/20210304-0x20-%E5%AD%97%E7%AC%A6%E4%B8%B2-(4)-Trie%E6%A0%91/"/>
    <url>/2021/03/04/Algorithm/Template/20210304-0x20-%E5%AD%97%E7%AC%A6%E4%B8%B2-(4)-Trie%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="trie字典树"><a class="markdownIt-Anchor" href="#trie字典树"></a> Trie(字典树)</h2><p>Trie是一种用来高效<strong>存储和查找</strong>字符串集合的数据结构。</p><p>字母的类型不会很多：要么全是小写字母，要么全是大写字母，要么全是数字，要么全是01。</p><h3 id="静态实现"><a class="markdownIt-Anchor" href="#静态实现"></a> 静态实现</h3><p>需要根据实际问题中字符出现的种类数目，修改<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>L</mi><mi>P</mi><mi>H</mi><mi>A</mi><mi>B</mi><mi>E</mi><mi>T</mi><mi mathvariant="normal">_</mi><mi>S</mi><mi>I</mi><mi>Z</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">ALPHABET\_SIZE</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.99333em;vertical-align:-0.31em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span>，一般都取26。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;const int N &#x3D; 1e5 + 7;const int M &#x3D; N * L;   &#x2F;&#x2F; N是字符串个数, L是字符串平均长度const int ALPHABETS_SIZE &#x3D; 26;struct Trie &#123;private:    int cnt[N];    int son[M][ALPHABETS_SIZE], idx &#x3D; 0;public:        void insert(const string&amp; s) &#123;        int p &#x3D; 0;        for (char c : s) &#123;            int t &#x3D; c - &#39;a&#39;;            if (!son[p][t]) &#123;                son[p][t] &#x3D; ++ idx;            &#125;            p &#x3D; son[p][t];        &#125;        cnt[p] ++;    &#125;        int query(const string&amp; s) &#123;        int p &#x3D; 0;        for (char c : s) &#123;            int t &#x3D; c - &#39;a&#39;;            if(!son[p][t]) return 0;            p &#x3D; son[p][t];        &#125;        return cnt[p];    &#125;&#125;;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><p>假设当前需要插入或查询的str[]的有效长度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>。</p><ul><li>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi>t</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">insert()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>L</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">L</span><span class="mclose">)</span></span></span></span>；<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mi>u</mi><mi>e</mi><mi>r</mi><mi>y</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">query()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>L</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">L</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>M</mi><mo>∗</mo><mi>A</mi><mi>L</mi><mi>P</mi><mi>H</mi><mi>A</mi><mi>B</mi><mi>E</mi><mi>T</mi><mi mathvariant="normal">_</mi><mi>S</mi><mi>I</mi><mi>Z</mi><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(M * ALPHABET\_SIZE)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span>。</li></ul><hr /><h3 id="动态实现"><a class="markdownIt-Anchor" href="#动态实现"></a> 动态实现</h3><h4 id="基于vector实现"><a class="markdownIt-Anchor" href="#基于vector实现"></a> 基于vector实现</h4><p>需要根据实际问题中字符出现的种类数目，修改<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>L</mi><mi>P</mi><mi>H</mi><mi>A</mi><mi>B</mi><mi>E</mi><mi>T</mi><mi mathvariant="normal">_</mi><mi>S</mi><mi>I</mi><mi>Z</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">ALPHABET\_SIZE</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.99333em;vertical-align:-0.31em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span>，一般都取26。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;string&gt;#include &lt;vector&gt;using namespace std;const int ALPHABET_SIZE &#x3D; 26;struct Trie &#123;private:    int cnt;    vector&lt;Trie*&gt; son;public:    Trie() : cnt(0), son(ALPHABET_SIZE, nullptr) &#123;&#125;    ~Trie() &#123;        for (auto &amp;s : son) &#123;            delete(s);        &#125;    &#125;        void insert(const string&amp; s) &#123;        Trie* p &#x3D; this;        for (char c : s) &#123;            int t &#x3D; c - &#39;a&#39;;            if (!p-&gt;son[t]) &#123;                p-&gt;son[t] &#x3D; new Trie();            &#125;            p &#x3D; p-&gt;son[t];        &#125;        p-&gt;cnt ++;    &#125;        int query(const string &amp; s) &#123;        Trie*p &#x3D; this;        for (char c : s) &#123;            int t &#x3D; c - &#39;a&#39;;            if (!p-&gt;son[t]) &#123;                return 0;            &#125;            p &#x3D; p-&gt;son[t];        &#125;        return p-&gt;cnt;    &#125;        int start_with(const string&amp; s) &#123;        int res &#x3D; 0;                Trie* p &#x3D; this;        for (char c : s) &#123;            int t &#x3D; c - &#39;a&#39;;            if (!p-&gt;son[t])&#123;                break;            &#125;            p &#x3D; p-&gt;son[t];            res +&#x3D; p-&gt;cnt;        &#125;                return res;    &#125;&#125;;</code></pre><h4 id="基于unordered_map实现"><a class="markdownIt-Anchor" href="#基于unordered_map实现"></a> 基于unordered_map实现</h4><p>能够动态调整字符种类的数目，无需把字符映射成数字，代码更简洁。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;string&gt;#include &lt;unordered_map&gt;using namespace std;struct Trie &#123;private:    int cnt;    unordered_map&lt;char, Trie*&gt; son;public:    Trie() : cnt(0) &#123;&#125;    ~Trie() &#123;        for (auto &amp;s : son) &#123;            delete(s.second);        &#125;    &#125;        void insert(const string&amp; s) &#123;        Trie* p &#x3D; this;        for (char c : s) &#123;            if (!p-&gt;son[c]) &#123;                p-&gt;son[c] &#x3D; new Trie();            &#125;            p &#x3D; p-&gt;son[c];        &#125;        p-&gt;cnt ++;    &#125;        int query(const string&amp; s) &#123;        Trie*p &#x3D; this;        for (char c : s) &#123;            if (!p-&gt;son[c]) &#123;                return 0;            &#125;            p &#x3D; p-&gt;son[c];        &#125;        return p-&gt;cnt;    &#125;        int start_with(const string&amp; s) &#123;        int res &#x3D; 0;         Trie* p &#x3D; this;        for (char c : s) &#123;            if (!p-&gt;son[c])&#123;                break;            &#125;            p &#x3D; p-&gt;son[c];            res +&#x3D; p-&gt;cnt;        &#125;            return res;    &#125;&#125;;</code></pre><p>算法竞赛，时间复杂度是王道，因此个人习惯使用vector的版本：</p><style>table{    font-size: 15px;}table th:first-of-type {    font-size: 15px;    width: 15%;}table th:nth-of-type(2) {    font-size: 15px;    width: 58%;}table th:nth-of-type(3) {    font-size: 15px;    width: 30%;}</style><table><thead><tr><th></th><th>基于vector实现</th><th>基于unordered_map实现</th></tr></thead><tbody><tr><td><strong>时间</strong></td><td>较快，比unordered_map版本接近快1倍</td><td>较慢，要处理hash冲突</td></tr><tr><td><strong>空间</strong></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>L</mi><mi>P</mi><mi>H</mi><mi>A</mi><mi>B</mi><mi>E</mi><mi>T</mi><mi mathvariant="normal">_</mi><mi>S</mi><mi>I</mi><mi>Z</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">ALPHABET\_SIZE</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.99333em;vertical-align:-0.31em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span>固定，会产生更多的内存碎片</td><td>内存碎片较少</td></tr></tbody></table><h4 id="复杂度分析-2"><a class="markdownIt-Anchor" href="#复杂度分析-2"></a> 复杂度分析</h4><p>Trie的复杂度与字符串的个数和长度有关。假设Trie中包含<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>个字符串，且平均字符串长度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>。</p><ul><li>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi>t</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">insert()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>L</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">L</span><span class="mclose">)</span></span></span></span>；<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mi>u</mi><mi>e</mi><mi>r</mi><mi>y</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">query()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>L</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">L</span><span class="mclose">)</span></span></span></span>；<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mi mathvariant="normal">_</mi><mi>w</mi><mi>i</mi><mi>t</mi><mi>h</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">start\_with()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>L</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">L</span><span class="mclose">)</span></span></span></span>，构建Trie为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>L</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n*L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>L</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n*L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mclose">)</span></span></span></span>。</li></ul><p><strong>练习eg</strong>：</p><p><a href="https://www.acwing.com/problem/content/144/">Acwing-142.前缀统计</a></p><h3 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用：</h3><h4 id="01-trie01字典树"><a class="markdownIt-Anchor" href="#01-trie01字典树"></a> 01-Trie(01字典树)</h4><p>真神，不会被卡TLE;</p><pre class="language-c++" data-language="c++"><code class="language-c++">const int N &#x3D; 1e5 + 7, M &#x3D; N * 31;const int ALPHABETS_SIZE &#x3D; 2;struct Trie &#123;private:    int son[M][ALPHABETS_SIZE], idx;public:        void insert(int x) &#123;        int p &#x3D; 0;        for (int i &#x3D; 30; i &gt;&#x3D; 0; i --) &#123;            int t &#x3D; x &gt;&gt; i &amp; 1;            if (!son[p][t]) &#123;                son[p][t] &#x3D; ++idx;            &#125;            p &#x3D; son[p][t];        &#125;    &#125;        int query(int x) &#123;        int res &#x3D; 0;        int p &#x3D; 0;        for (int i &#x3D; 30; i &gt;&#x3D; 0; i --) &#123;            int t &#x3D; x &gt;&gt; i &amp; 1;            if (son[p][!t]) &#123;                p &#x3D; son[p][!t];                res &#x3D; (res &lt;&lt; 1) + !t;            &#125;            else &#123;                p &#x3D; son[p][t];                res &#x3D; (res &lt;&lt; 1) + t;            &#125;        &#125;        return res;    &#125;&#125;;</code></pre><p>这个应用应该整理一下：</p><p><a href="https://leetcode.cn/problems/number-of-matching-subsequences/description/">Leetcode-792.匹配子序列的单词数</a></p><pre class="language-c" data-language="c"><code class="language-c">&#x2F;&#x2F; query_dfs&#x2F;&#x2F; 枚举字典树每一层的可行路径 去匹配s, 而非去对s进行dfsvoid query_dfs(Trie* p,string&amp; s,int pos)&#123;    &#x2F;&#x2F; 当前位置存在结尾if (p-&gt;cnt) &#123;        ans +&#x3D; p-&gt;cnt;        p-&gt;cnt &#x3D; 0; &#x2F;&#x2F; 置0十分重要，避免重复计算    &#125;    for (int i &#x3D; 0; i &lt; 26; i ++) &#123;        &#x2F;&#x2F; 存在子节点        if (p-&gt;son[i]) &#123;            &#x2F;&#x2F; 可以看作pos ~ next_pos之间的全失效            int next_pos &#x3D; s.find_first_of(&#39;a&#39; + i, pos);            if (next_pos !&#x3D; string::npos) &#123;                query_dfs(p-&gt;son[i], s, next_pos + 1);            &#125;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x20字符串-(3)-Manacher</title>
    <link href="/2021/03/03/Algorithm/Template/20210303-0x20-%E5%AD%97%E7%AC%A6%E4%B8%B2-(3)-Manacher/"/>
    <url>/2021/03/03/Algorithm/Template/20210303-0x20-%E5%AD%97%E7%AC%A6%E4%B8%B2-(3)-Manacher/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x20字符串-(2)-KMP</title>
    <link href="/2021/03/02/Algorithm/Template/20210302-0x20-%E5%AD%97%E7%AC%A6%E4%B8%B2-(2)-KMP/"/>
    <url>/2021/03/02/Algorithm/Template/20210302-0x20-%E5%AD%97%E7%AC%A6%E4%B8%B2-(2)-KMP/</url>
    
    <content type="html"><![CDATA[<h2 id="kmp"><a class="markdownIt-Anchor" href="#kmp"></a> KMP</h2><p>KMP算法用于<strong>字符串匹配</strong>优化</p><p>假设主串S长度为n， 模式串P长度为m</p><p>暴力做法，时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n * m)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></span></p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 暴力匹配int i &#x3D; 0, j &#x3D; 0;while (i &lt; s.length())&#123;    if (s[i] &#x3D;&#x3D; p[j])        ++i, ++j;    else        i &#x3D; i - j + 1, j &#x3D; 0;    if (j &#x3D;&#x3D; p.length())  &#x2F;&#x2F; 匹配成功    &#123;        &#x2F;&#x2F; 对s[i - j .. i - 1]进行一些操作        cout &lt;&lt; i - j &lt;&lt; endl;        i &#x3D; i - j + 1;        j &#x3D; 0;    &#125;&#125;</code></pre><h3 id="kmp-2"><a class="markdownIt-Anchor" href="#kmp-2"></a> KMP</h3><p>kmp算法的思想是，sh去预处理模板串 nxt[i] = j</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">nxt[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>的含义：对于字符串的前缀子串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">S[0, i - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">nxt[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>是该前缀子串所有相等的前后缀里长度的最大值。</p><p>举个例子，假设模式串为&quot;ABABC&quot;，nxt[] = [-1, 0, 0, 1, 2]<br />nxt[0] = -1，因为在0位置之前没有字符串，所以不存在相等的前缀和后缀。<br />nxt[1] = 0， 因为在1位置之前的字符串为&quot;A&quot;，其相等的前缀和后缀长度为0(真前缀，要小于S[0,i - 1]长度)。<br />nxt[2] = 0， 因为在2位置之前的字符串为&quot;AB&quot;，其相等的前缀和后缀长度为0。<br />nxt[3] = 0， 因为在3位置之前的字符串为&quot;ABA&quot;，其相等的前缀和后缀长度为1。<br />nxt[4] = 0， 因为在4位置之前的字符串为&quot;ABAB&quot;，其相等的前缀和后缀长度为2。</p><p>有了nxt数组之后，KMP算法可以<strong>避免在匹配过程中对模式串进行无效的回溯，从而提高匹配的效率</strong>。具体而言，当匹配到文本串中的某个位置i和模式串中的某个位置j不匹配时，我们可以根据nxt[j]的值将模式串向右移动j - nxt[j]个字符，从而避免了匹配中出现无效的回溯.</p><p>nxt[i] = j记录的就是当前以i作为后缀末位时，j对应的前缀末位的位置，有使得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mo>=</mo><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">{p[1, j] == p[i - j + 1, i]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span></span>，这两段前后缀字符串相等，并且不难发现j就是模式串可移动的长度。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;string&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;string s; &#x2F;&#x2F; 主串sstring p; &#x2F;&#x2F; 模式串pvector&lt;int&gt; get_next(string&amp; p) &#123;    int m &#x3D; p.size();        vector&lt;int&gt; nxt(m);    nxt[0] &#x3D; -1;    for (int i &#x3D; 1, j &#x3D; -1; i &lt; m; i ++) &#123;        while (~j &amp;&amp; p[i] !&#x3D; p[j + 1]) j &#x3D; nxt[j];        if (p[i] &#x3D;&#x3D; p[j + 1]) j ++;        nxt[i] &#x3D; j;    &#125;        return nxt;&#125;vector&lt;int&gt; kmp(string&amp; s, string&amp; p) &#123;    int n &#x3D; s.size();    int m &#x3D; p.size();        vector&lt;int&gt; res;    vector&lt;int&gt; nxt &#x3D; get_next(p);    for (int i &#x3D; 0, j &#x3D; -1; i &lt; n; i ++) &#123;        while (~j &amp;&amp; s[i] !&#x3D; p[j + 1]) j &#x3D; nxt[j];        if (s[i] &#x3D;&#x3D; p[j + 1]) j ++;        if (j &#x3D;&#x3D; m - 1) &#123;            &#x2F;&#x2F; 匹配成功            res.emplace_back(i - m + 1);  &#x2F;&#x2F; 匹配成功时，p在s的起始下标            j &#x3D; nxt[j];        &#125;    &#125;        return res;&#125;int main() &#123;     cin &gt;&gt; s; cin &gt;&gt; p;        vector&lt;int&gt; res &#x3D; kmp(s, p);    for(auto&amp; r : res) printf(&quot;%d &quot;, r);    return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>2</mn><mi>m</mi><mo>+</mo><mn>2</mn><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2m + 2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 。</p><blockquote><p><strong>分析</strong>:</p><ol><li>对于求nxt数组的过程</li></ol><p>外层for循环每当i++，j最多跟着一起++，所以 j 最多 + m次;<br />内层while循环，j 肯定是 &gt;= 0的，j最大为m，所以也最多要-m次; 因此while循环整个过程最多执行m次</p><ol start="2"><li>对于kmp匹配的过程，同理</li></ol><p>外层for循环每当i <ins>，j最多跟着一起</ins>，所以 j 最多 +n次;<br />内层while循环，j 肯定是 &gt;= 0的，j最大为n，所以也最多要 - n次; 因此while循环整个过程最多执行n次</p><p>所以总共是2m + 2n</p></blockquote></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，主要是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">nxt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span></span></span></span>数组占用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>空间。</p></li></ul><p><strong>练习eg:</strong></p><p><a href="https://www.acwing.com/problem/content/description/833/">ACwing-831.KMP字符串</a></p><h4 id="应用循环节"><a class="markdownIt-Anchor" href="#应用循环节"></a> 应用：循环节</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">nxt[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>的含义：对于字符串的前缀子串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">S[0, i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">nxt[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>是该前缀子串所有相等的前后缀里长度的最大值。</p><p>令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>=</mo><mi>n</mi><mo>−</mo><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">T = n - nxt[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>是最小循环节，并且如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>∤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">T\nmid n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.99253em;vertical-align:-0.25142em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">∤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，则题目无解。</p><p>证明1：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>是一个最小循环节。</p><blockquote><p>反证法：假设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∃</mi><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup><mo>&lt;</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">\exists T&#x27; &lt; T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.790992em;vertical-align:-0.0391em;"></span><span class="mord">∃</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>，<br />那么有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup><mo>&gt;</mo><mi>n</mi><mo>−</mo><mi>T</mi><mo>=</mo><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">n - T&#x27; &gt; n - T = nxt[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.790992em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>，与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">nxt[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>是所有相等的前后缀里长度的最大值这一点矛盾。</p></blockquote><p>证明2：如果字符串中存在更大的循环节<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">T&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">T&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>必然是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>的整数倍，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>∣</mo><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">T \mid T&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>。</p><blockquote><p>反证法：假设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∃</mi><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup><mo>&gt;</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">\exists T&#x27; &gt; T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.790992em;vertical-align:-0.0391em;"></span><span class="mord">∃</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>，且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>∤</mo><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">T \nmid T&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.99253em;vertical-align:-0.25142em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">∤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>,<br />那么设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>T</mi><mo separator="true">,</mo><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d = gcd(T, T&#x27;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，易知<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>∣</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">d \mid T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>，因此<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>&lt;</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">d &lt; T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>。<br />由裴蜀定理，可知<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><mi>x</mi><mi>T</mi><mo>+</mo><mi>y</mi><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">d = xT + yT&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>成立，不妨假设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><mi>y</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x &gt; 0, y &lt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，那么对于原字符串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi><mi>i</mi><mo>∈</mo><mi>n</mi><mo separator="true">,</mo><msub><mi>S</mi><mi>i</mi></msub><mo>=</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mi>T</mi></mrow></msub><mo>=</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mn>2</mn><mi>T</mi></mrow></msub><mo>=</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>S</mi><mi>i</mi></msub><mo>+</mo><mi>x</mi><mi>T</mi><mo>=</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mi>x</mi><mi>T</mi><mo>−</mo><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow></msub><mo>=</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mi>x</mi><mi>T</mi><mo>−</mo><mn>2</mn><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow></msub><mo>=</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mi>x</mi><mi>T</mi><mo>−</mo><mi>y</mi><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow></msub><mo>=</mo><msub><mi>s</mi><mrow><mi>i</mi><mo>+</mo><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\forall i\in n,  S_i = S_{i + T} = S_{i + 2 T} = ... S_i+xT = S_{i + xT -T&#x27;} = S_{i + xT - 2T&#x27;} = S_{i + xT - yT&#x27;} = s_{i + d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mbin mtight">−</span><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828285714285715em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><br />得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub><mo>=</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_i = S_{i + d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>，由定义可知<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span>是一个循环节，又因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>&lt;</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">d &lt; T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>，与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>是最小循环节矛盾。</p></blockquote><p><strong>练习eg:</strong></p><p><a href="https://www.acwing.com/problem/content/143/">Acwing-141.周期</a></p><h3 id="最小表示法"><a class="markdownIt-Anchor" href="#最小表示法"></a> 最小表示法</h3>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x20字符串-(1)-字符串Hash</title>
    <link href="/2021/03/01/Algorithm/Template/20210301-0x20-%E5%AD%97%E7%AC%A6%E4%B8%B2-(1)-%E5%AD%97%E7%AC%A6%E4%B8%B2Hash/"/>
    <url>/2021/03/01/Algorithm/Template/20210301-0x20-%E5%AD%97%E7%AC%A6%E4%B8%B2-(1)-%E5%AD%97%E7%AC%A6%E4%B8%B2Hash/</url>
    
    <content type="html"><![CDATA[<h2 id="字符串hash"><a class="markdownIt-Anchor" href="#字符串hash"></a> 字符串Hash</h2><p>字符串Hash有很多种方式，最常用的一种就是字符串前缀哈希。</p><blockquote><p><strong>经验之谈</strong>：基本上，除了<strong>循环节</strong>只能用<strong>KMP</strong>来做，其它都可以用字符串hash来做</p></blockquote><h3 id="字符串前缀哈希"><a class="markdownIt-Anchor" href="#字符串前缀哈希"></a> 字符串前缀哈希</h3><h4 id="算法实现"><a class="markdownIt-Anchor" href="#算法实现"></a> 算法实现</h4><p>字符串前缀哈希是一种常用的字符串匹配算法，它可以<strong>在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 内计算出一个字符串的前缀子串的哈希值</strong>，从而实现快速匹配，其原理如下：</p><p>假设我们有一个字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>，其长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，哈希函数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>，<br />取一固定值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>，把<strong>字符串看作<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>进制数</strong>，取一固定值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>，求出<strong>该<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>进制数对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>的余数</strong>，作为字符串Hash值：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">[</mo><mn>0</mn><mo>…</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>k</mi></munderover><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>×</mo><msup><mi>P</mi><mi>i</mi></msup><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>M</mi></mrow><annotation encoding="application/x-tex">h(s[0 \ldots k])=(\sum_{i=0}^k s[i] \times P^i )\ mod \ M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1246639999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> 通常取一个大于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的质数，常用质数有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mn>131</mn></mrow><annotation encoding="application/x-tex">P=131</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">1</span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mn>13331</mn></mrow><annotation encoding="application/x-tex">P=13331</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">3</span><span class="mord">3</span><span class="mord">1</span></span></span></span>，此时字符串哈希冲突概率极低。<br />其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>通常取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mo>=</mo><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding="application/x-tex">M = 2^{64}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span>，即直接使用 <strong><code>unsigned long long</code></strong> 类型存储这个Hash值，溢出时自动对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding="application/x-tex">2^{64}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span>取模。</p><blockquote><p>个人认为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>取131是因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>S</mi><mi>C</mi><mi>I</mi><mi>I</mi></mrow><annotation encoding="application/x-tex">ASCII</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span>码表一共有128个字符，所以找了一个比128大的质数。</p></blockquote><p>对于该字符串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>的任意子串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[l, r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>，其Hash值可以在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>内求出：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo>−</mo><mi>s</mi><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>∗</mo><msup><mi>p</mi><mrow><mi>r</mi><mo>−</mo><mi>l</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">h(s[l, r]) = s[r] - s[l -1] * p^{r - l + 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.093548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>总的来说，比较像前缀和的思想，因此叫字符串前缀哈希。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;string&gt;#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;typedef unsigned long long ULL;const int N &#x3D; 1e6 + 7;const int P &#x3D; 131; &#x2F;&#x2F; const int P &#x3D; 13331;vector&lt;ULL&gt; p(N); &#x2F;&#x2F; P次幂vector&lt;ULL&gt; get_prefix_hash(const string&amp; s) &#123;int n &#x3D; s.size();vector&lt;ULL&gt; h(n + 1);h[0] &#x3D; 0;    p[0] &#x3D; 1;for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;h[i] &#x3D; h[i - 1] * P + s[i - 1];        p[i] &#x3D; p[i - 1] * P;&#125;return h;&#125;ULL get_substr_hash(const vector&lt;ULL&gt;&amp; h, int l, int r) &#123;return h[r] - h[l - 1] * p[r - l + 1];&#125;int main() &#123;string s &#x3D; &quot;violet violence&quot;; vector&lt;ULL&gt; h &#x3D; get_prefix_hash(s);cout &lt;&lt; &quot;Prefix Hash of &quot; &lt;&lt; s &lt;&lt; &quot;:&quot; &lt;&lt; endl;for (int i &#x3D; 0; i &lt; s.size(); i ++) &#123;cout &lt;&lt; s.substr(0, i + 1) &lt;&lt; &quot; : &quot; &lt;&lt; h[i + 1] &lt;&lt; endl;&#125;cout &lt;&lt; endl;&#x2F;&#x2F; 计算violet的&#39;viole&#39; 与 violence的&#39;viole&#39;的Hash值是否相同cout &lt;&lt; get_substr_hash(h, 1, 5) &lt;&lt; &quot; and &quot; &lt;&lt; get_substr_hash(h, 8, 12) &lt;&lt; endl;return 0;&#125;</code></pre><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 预处理前缀和需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，查询字串的时间复杂度是常数级<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</li><li>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span>，要花<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的空间存储Hash前缀和，花<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的空间存储P的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>次幂。</li></ul><hr /><p>求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>的次幂也可以用一个快速幂fast_pow()，用时间换空间，但这样每次查询就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><mi>l</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log(r - l + 1))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>的了。</p><blockquote><p>总之，不要使用<code>&lt;cmath&gt;</code>中自带的<code>pow()</code>，其返回类型是double，而浮点型转为整型会有精度损失。</p></blockquote><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;string&gt;#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;typedef unsigned long long ULL;const int P &#x3D; 131; &#x2F;&#x2F; const int P &#x3D; 13331;ULL fast_pow(ULL x, ULL n) &#123;    ULL res &#x3D; 1;    for (; n; n &gt;&gt;&#x3D; 1) &#123;        if (n &amp; 1) &#123;            res &#x3D; res * x;        &#125;        x &#x3D; x * x;    &#125;      return res;&#125;vector&lt;ULL&gt; get_prefix_hash(const string&amp; s) &#123;int n &#x3D; s.size();vector&lt;ULL&gt; h(n + 1);h[0] &#x3D; 0;for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;h[i] &#x3D; h[i - 1] * P + s[i - 1];&#125;return h;&#125;ULL get_substr_hash(const vector&lt;ULL&gt;&amp; h, int l, int r) &#123;return h[r] - h[l - 1] * fast_pow(P, r - l + 1); &#x2F;&#x2F; 不要使用(ULL)pow(P, r - l + 1); &#125;int main() &#123;string s &#x3D; &quot;violet violence&quot;; vector&lt;ULL&gt; h &#x3D; get_prefix_hash(s);cout &lt;&lt; &quot;Prefix Hash of &quot; &lt;&lt; s &lt;&lt; &quot;:&quot; &lt;&lt; endl;for (int i &#x3D; 0; i &lt; s.size(); i ++) &#123;cout &lt;&lt; s.substr(0, i + 1) &lt;&lt; &quot; : &quot; &lt;&lt; h[i + 1] &lt;&lt; endl;&#125;cout &lt;&lt; endl;&#x2F;&#x2F; 计算violet的&#39;viole&#39; 与 violence的&#39;viole&#39;的Hash值是否相同cout &lt;&lt; get_substr_hash(h, 1, 5) &lt;&lt; &quot; and &quot; &lt;&lt; get_substr_hash(h, 8, 12) &lt;&lt; endl;return 0;&#125;</code></pre><ul><li>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>， 预处理前缀和需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，查询字串的时间复杂度是常数级<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><mi>l</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(r - l + 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</li><li>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，要花<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的空间存储Hash前缀和。</li></ul><p><strong>练习eg</strong>：</p><p><a href="https://www.acwing.com/problem/content/140/">Acwing-138.兔子与兔子</a></p><h3 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用</h3><h4 id="求两个字符串的最长公共前缀长度"><a class="markdownIt-Anchor" href="#求两个字符串的最长公共前缀长度"></a> 求两个字符串的最长公共前缀长度</h4><p>结合二分查找，可以求得两个字符串的最长公共前缀长度</p><pre class="language-c++" data-language="c++"><code class="language-c++">int get_max_common_prefix(string a, string b) &#123;   vector&lt;ULL&gt; ha &#x3D; get_prefix_hash(a);    vector&lt;ULL&gt; hb &#x3D; get_prefix_hash(b);        int l &#x3D; 0, r &#x3D; min(a.size(), b.size());    while (l !&#x3D; r + 1) &#123;        int mid &#x3D; l + r &gt;&gt; 1;        if (get_substr_hash(ha, 0, mid - 1) !&#x3D; get_substr_hash(hb, 0, mid - 1)) &#123;            &#x2F;&#x2F; 前缀不等，缩小len            r &#x3D; mid - 1;        &#125;        else &#123;            &#x2F;&#x2F; 前缀相等，扩大len            l &#x3D; mid + 1;        &#125;    &#125;    return r; &#x2F;&#x2F; 返回最长公共前缀长度&#125;</code></pre><p>更进一步，比较下一个字符，就能比较这两个字符串的字典序，详见练习题</p><p><strong>练习eg</strong>：</p><p><a href="https://www.acwing.com/problem/content/142/">Acwing-140.后缀数组</a></p><h4 id="最长回文子串"><a class="markdownIt-Anchor" href="#最长回文子串"></a> 最长回文子串</h4><p>二分答案，判断是否可行时枚举回文中心（对称轴），哈希判断两侧是否相等。需要分别预处理正着和倒着的哈希值。时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p><p>这题可以使用manacher算法在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的时间内解决</p><h4 id="允许k次失配的字符串匹配"><a class="markdownIt-Anchor" href="#允许k次失配的字符串匹配"></a> 允许k次失配的字符串匹配</h4><h4 id="模式串匹配rabin-karp算法"><a class="markdownIt-Anchor" href="#模式串匹配rabin-karp算法"></a> 模式串匹配：rabin-karp算法</h4><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;string&gt;using namespace std;typedef unsigned long long ULL;const int P &#x3D; 131; &#x2F;&#x2F; 哈希函数的参数，可以是任意质数const int N &#x3D; 1e5 + 10; &#x2F;&#x2F; 字符串的最大长度int n, m; &#x2F;&#x2F; n 为文本串长度，m 为模式串长度char str[N], pattern[N];ULL h[N], p[N]; &#x2F;&#x2F; h 存储文本串的哈希值，p 存储 P 的幂次方ULL get_hash(int l, int r) &#x2F;&#x2F; 计算字符串 str[l...r] 的哈希值&#123;    return h[r] - h[l - 1] * p[r - l + 1];&#125;int main()&#123;    scanf(&quot;%s%s&quot;, str + 1, pattern + 1);    n &#x3D; strlen(str + 1);    m &#x3D; strlen(pattern + 1);        p[0] &#x3D; 1;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        h[i] &#x3D; h[i - 1] * P + str[i];        p[i] &#x3D; p[i - 1] * P;    &#125;        ULL pattern_hash &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; m; i++)    &#123;        pattern_hash &#x3D; pattern_hash * P + pattern[i];    &#125;        for (int i &#x3D; 1; i + m - 1 &lt;&#x3D; n; i++)    &#123;        ULL hash_i &#x3D; get_hash(i, i + m - 1);        if (hash_i &#x3D;&#x3D; pattern_hash)        &#123;            printf(&quot;Found pattern at position %d\n&quot;, i);        &#125;    &#125;        return 0;&#125;</code></pre><hr /><h3 id="stdhashstdstring"><a class="markdownIt-Anchor" href="#stdhashstdstring"></a> <code>std::hash&lt;std::string&gt;</code></h3><p><code>std::hash&lt;std::string&gt;</code> 是 C++ 标准库中提供的一种哈希函数，用于将 <code>std::string</code> 类型的字符串映射为一个无符号整数，可以用于标准库的哈希容器（例如 <code>unordered_map</code>）中作为 key 的类型。</p><p>在实现上，<code>std::hash&lt;std::string&gt;</code> 采用了基于 Horner 算法的哈希算法，其基本思路是将字符串视为一个进制数，每次遍历字符串时，将前面已经计算出的结果乘以一个固定的质数（通常选取 31），然后加上当前字符的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>S</mi><mi>C</mi><mi>I</mi><mi>I</mi></mrow><annotation encoding="application/x-tex">ASCII</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span> 码值，最后得到的值就是字符串的哈希值，可以说<strong>其思想与字符串前缀哈希的思想是差不多的</strong>。<code>std::hash&lt;std::string&gt;</code> 的实现方式类似于下面的代码：</p><pre class="language-c++" data-language="c++"><code class="language-c++">std::size_t operator()(const std::string&amp; s) const &#123;    std::size_t hash &#x3D; 0;    for (char c : s) &#123;        hash &#x3D; hash * 31 + c;    &#125;    return hash;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表操作</title>
    <link href="/2021/02/06/Algorithm/LeetCode/20220206-%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/02/06/Algorithm/LeetCode/20220206-%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>这种用指针表示的数据结构一般在leetcode上才会刷到，板子简单，浅浅总结一下。</p><p>但是链表操作还是有一点思维在里面</p><h2 id="链表操作"><a class="markdownIt-Anchor" href="#链表操作"></a> 链表操作</h2><h3 id="单链表"><a class="markdownIt-Anchor" href="#单链表"></a> 单链表</h3><p>单链表的结构体定义：如果在本地IDE上一定要会写</p><pre class="language-c++" data-language="c++"><code class="language-c++">struct ListNode &#123;     int val;     ListNode *next;     ListNode() : val(0), next(nullptr) &#123;&#125;     ListNode(int x) : val(x), next(nullptr) &#123;&#125;&#125;; </code></pre><h4 id="链表排序"><a class="markdownIt-Anchor" href="#链表排序"></a> 链表排序</h4><p><a href="https://leetcode.cn/problems/7WHec2/solutions/967368/yi-bu-bu-jiang-kong-jian-fu-za-du-cong-o-oxes/">单链表堆排序</a></p><p>非常好写，直接利用优先队列（小根堆），把所有的ListNode全部入队，然后一个一个弹出</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) &#123;&#125; *     ListNode(int x) : val(x), next(nullptr) &#123;&#125; * &#125;; *&#x2F;struct cmp &#123;    bool operator ()(ListNode* a, ListNode* b) const &#123;        return a-&gt;val &gt; b-&gt;val;    &#125;&#125;;class Solution &#123;public:    ListNode* sortList(ListNode* head) &#123;        priority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, cmp&gt; pq;        ListNode* p &#x3D; head;        while (p !&#x3D; nullptr) &#123;            pq.push(p);            p &#x3D; p-&gt;next;        &#125;        ListNode* dummyHead &#x3D; new ListNode();        p &#x3D; dummyHead;        while (!pq.empty()) &#123;            p-&gt;next &#x3D; pq.top(); pq.pop();            p &#x3D; p-&gt;next;        &#125;        p-&gt;next &#x3D; nullptr; &#x2F;&#x2F; 重定向        return dummyHead-&gt;next;    &#125;&#125;;</code></pre><p><a href="https://www.acwing.com/solution/content/132989/">单链表快速排序</a></p><p>也还行，与数组的快排很类似</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) &#123;&#125; *     ListNode(int x) : val(x), next(nullptr) &#123;&#125; * &#125;; *&#x2F;class Solution &#123;public:    ListNode* sortList(ListNode* head) &#123;        quickSort(head, NULL);        return head;    &#125;        void quickSort(ListNode* head, ListNode* tail) &#123;        if (head !&#x3D; tail) &#123;            &#x2F;&#x2F; 定义哨兵x，取头指针指向的元素            int x &#x3D; head-&gt;val;            ListNode* p &#x3D; head; ListNode* q &#x3D; p-&gt;next;            while (q !&#x3D; tail) &#123;                if (q-&gt;val &lt; x) &#123;                    p &#x3D; p-&gt;next;                    swap(p-&gt;val, q-&gt;val);                &#125;                q &#x3D; q-&gt;next;            &#125;            if (p !&#x3D; head) &#123;                swap(head-&gt;val, p-&gt;val);            &#125;                        quickSort(head, p);            quickSort(p-&gt;next, tail);        &#125;    &#125;&#125;;</code></pre><ul><li>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li><li>空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li></ul><p><a href="https://leetcode.cn/problems/7WHec2/description/">单链表归并排序</a></p><p>这个巨抽象</p><pre class="language-c++" data-language="c++"><code class="language-c++"></code></pre><h4 id="反转链表"><a class="markdownIt-Anchor" href="#反转链表"></a> 反转链表</h4><h3 id="双向链表"><a class="markdownIt-Anchor" href="#双向链表"></a> 双向链表</h3>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x10基础数据结构-(5)-Hash</title>
    <link href="/2021/02/05/Algorithm/Template/20210205-0x10-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(5)-Hash/"/>
    <url>/2021/02/05/Algorithm/Template/20210205-0x10-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(5)-Hash/</url>
    
    <content type="html"><![CDATA[<blockquote><p>如果题目已知了要统计的数据的范围，并且不离散不太大，可以直接用数组统计，不用解决Hash冲突，更快</p></blockquote><p>Hash 还有这样的初始化方法，很优雅，像python的Counters</p><p><a href="https://leetcode.cn/problems/make-array-zero-by-subtracting-equal-amounts/">https://leetcode.cn/problems/make-array-zero-by-subtracting-equal-amounts/</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">unordered_set s(nums.begin(), nums.end());</code></pre><h3 id="复合类型作为hash的key"><a class="markdownIt-Anchor" href="#复合类型作为hash的key"></a> 复合类型作为hash的Key</h3><p><code>std::pair</code> 是标准模板库（STL）中定义的模板类，用于组合两个元素。</p><p><code>std::tuple</code> 是标准模板库（STL）中定义的模板类，用于组合三个及以上元素。</p><p><code>struct</code>结构体或<code>class</code>类是用户自定义类型，可以由多个数据成员组成，每个成员可以是不同类型。</p><p>这些复合类型不能直接作为Hash Table的key来使用。</p><h3 id="pair"><a class="markdownIt-Anchor" href="#pair"></a> pair</h3><p><code>std::pair</code> 表示一个有序的、固定大小的、两个值的元组，每个值可以有不同的类型。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;unordered_map&gt;#include &lt;functional&gt;  &#x2F;&#x2F; std:hashstruct PairHash &#123;    template&lt;typename T1, typename T2&gt;    std::size_t operator()(const std::pair&lt;T1, T2&gt;&amp; pair) const &#123;        return std::hash&lt;T1&gt;&#123;&#125;(pair.first) ^                std::hash&lt;T2&gt;&#123;&#125;(pair.second);    &#125;&#125;;std::unordered_map&lt;std::pair&lt;int, int&gt;, double, PairHash&gt; myMap;</code></pre><h3 id="tuple"><a class="markdownIt-Anchor" href="#tuple"></a> tuple</h3><p><code>std::tuple</code> 表示一个有序的、固定大小的、多个值的元组，每个值可以有不同的类型。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;unordered_map&gt;#include &lt;functional&gt;  &#x2F;&#x2F; std:hashstruct TupleHash &#123;    template&lt;typename... T&gt;    std::size_t operator()(const std::tuple&lt;T...&gt;&amp; tup) const &#123;        return std::hash&lt;std::string&gt;&#123;&#125;(std::get&lt;0&gt;(tup)) ^               std::hash&lt;std::string&gt;&#123;&#125;(std::get&lt;1&gt;(tup)) ^               std::hash&lt;std::string&gt;&#123;&#125;(std::get&lt;2&gt;(tup));    &#125;&#125;;std::unordered_map&lt;std::tuple&lt;int, int, std::string&gt;, double, TupleHash&gt; myMap;</code></pre><h3 id="struct-class"><a class="markdownIt-Anchor" href="#struct-class"></a> struct / class</h3><p>结构体作为hash表的key，除了要像<code>std::pair</code>、<code>std:tuple</code>那样实现hash函数，还要实现相等性比较函数：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;unordered_map&gt;#include &lt;functional&gt;  &#x2F;&#x2F; std:hashstruct Person &#123;    std::string name;    int age;    std::string address;&#125;;&#x2F;&#x2F; 组合哈希函数struct PersonHash &#123;    std::size_t operator()(const Person&amp; p) const &#123;        std::size_t nameHash &#x3D; std::hash&lt;std::string&gt;&#123;&#125;(p.name);        std::size_t ageHash &#x3D; std::hash&lt;int&gt;&#123;&#125;(p.age);        std::size_t addressHash &#x3D; std::hash&lt;std::string&gt;&#123;&#125;(p.address);        return nameHash ^ (ageHash &lt;&lt; 1) ^ (addressHash &lt;&lt; 2);    &#125;&#125;;&#x2F;&#x2F; 相等性比较函数struct PersonEqual &#123;    bool operator()(const Person&amp; p1, const Person&amp; p2) const &#123;        return p1.name &#x3D;&#x3D; p2.name &amp;&amp; p1.age &#x3D;&#x3D; p2.age &amp;&amp; p1.address &#x3D;&#x3D; p2.address;    &#125;&#125;;std::unordered_map&lt;Person, std::string, PersonHash, PersonEqual&gt; peopleMap;</code></pre><p>也可以用另一种函数：</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 旋转哈希函数struct PersonHash &#123;    std::size_t operator()(const Person&amp; p) const &#123;        std::size_t nameHash &#x3D; std::hash&lt;std::string&gt;&#123;&#125;(p.name);        std::size_t ageHash &#x3D; std::hash&lt;int&gt;&#123;&#125;(p.age);        std::size_t addressHash &#x3D; std::hash&lt;std::string&gt;&#123;&#125;(p.address);        const std::size_t rotateBits &#x3D; sizeof(std::size_t) &#x2F; 2; &#x2F;&#x2F; 旋转的位数，这里假设是std::size_t的一半        nameHash &#x3D; (nameHash &lt;&lt; rotateBits) | (nameHash &gt;&gt; (sizeof(nameHash) * 8 - rotateBits));        ageHash &#x3D; (ageHash &lt;&lt; rotateBits) | (ageHash &gt;&gt; (sizeof(ageHash) * 8 - rotateBits));        addressHash &#x3D; (addressHash &lt;&lt; rotateBits) | (addressHash &gt;&gt; (sizeof(addressHash) * 8 - rotateBits));        return nameHash ^ ageHash ^ addressHash;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x10基础数据结构-(4)-二叉堆</title>
    <link href="/2021/02/04/Algorithm/Template/20210204-0x10-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(4)-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    <url>/2021/02/04/Algorithm/Template/20210204-0x10-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(4)-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="二叉堆"><a class="markdownIt-Anchor" href="#二叉堆"></a> 二叉堆</h2><p>二叉堆（优先队列），是一颗满足&quot;堆&quot;性质的完全二叉树</p><p>手动实现，主要靠up 和 down操作。</p><h3 id="大根堆"><a class="markdownIt-Anchor" href="#大根堆"></a> 大根堆</h3><p>类内重载<code>operator &lt;</code>，以实现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>&lt;</mo><mi>T</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">less&lt;T&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span>函数</p><h3 id="小根堆"><a class="markdownIt-Anchor" href="#小根堆"></a> 小根堆</h3><p>类内重载<code>operator &gt;</code>，以实现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo>&lt;</mo><mi>T</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">greater&lt;T&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span>函数</p><pre class="language-c++" data-language="c++"><code class="language-c++"></code></pre><h3 id="应用对顶堆求动态中位数"><a class="markdownIt-Anchor" href="#应用对顶堆求动态中位数"></a> 应用：对顶堆求动态中位数</h3><p><a href="https://www.acwing.com/problem/content/108/">https://www.acwing.com/problem/content/108/</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x10基础数据结构-(3)-队列</title>
    <link href="/2021/02/03/Algorithm/Template/20210203-0x10-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(3)-%E9%98%9F%E5%88%97/"/>
    <url>/2021/02/03/Algorithm/Template/20210203-0x10-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(3)-%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="队列"><a class="markdownIt-Anchor" href="#队列"></a> 队列</h2><p>###普通队列queue</p><h3 id="模拟队列"><a class="markdownIt-Anchor" href="#模拟队列"></a> 模拟队列</h3><p>可以用<strong>一个数组+一个头指针+一个尾指针</strong>模拟队列：</p><pre class="language-c++" data-language="c++"><code class="language-c++">const int N &#x3D; 1e5 + 7;int que[N], hh, tt &#x3D; -1; &#x2F;&#x2F; hh &#x3D;&gt; head指针，指向队头; tt &#x3D;&gt; tail指针，指向队尾 &#x2F;&#x2F; 注意tt初始化为-1，ss与tt重合时也表示有元素que[++ tt] &#x3D; x;          &#x2F;&#x2F; pushhh ++;                   &#x2F;&#x2F; popque[hh];                 &#x2F;&#x2F; topif (tt &gt;&#x3D; hh)            &#x2F;&#x2F; not emptyelse                     &#x2F;&#x2F;empty</code></pre><p>###双端队列deque</p><h3 id="单调队列"><a class="markdownIt-Anchor" href="#单调队列"></a> 单调队列</h3><h4 id="滑动窗口最值"><a class="markdownIt-Anchor" href="#滑动窗口最值"></a> 滑动窗口最值</h4><p><a href="https://www.luogu.com.cn/problem/P1886">洛谷-P1886.滑动窗口</a></p><h4 id="子区间长度不超过-k-的最大子区间和"><a class="markdownIt-Anchor" href="#子区间长度不超过-k-的最大子区间和"></a> 子区间长度不超过 k 的最大子区间和</h4><p>(<a href="https://www.acwing.com/problem/content/137/">https://www.acwing.com/problem/content/137/</a>)</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;deque&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;const int N &#x3D; 3e5 + 7;const int INF &#x3D; 0x3f3f3f3f;int n, m;vector&lt;int&gt; arr(N, 0);vector&lt;LL&gt; sum(N, 0);int main() &#123;    cin &gt;&gt; n &gt;&gt; m;        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;arr[i]);    &#125;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        sum[i] &#x3D; sum[i - 1] + arr[i];    &#125;        LL res &#x3D; -INF;    deque&lt;int&gt; Q;    Q.push_back(0); &#x2F;&#x2F; 插入sum[0]    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        while (!Q.empty() &amp;&amp; i - Q.front() + 1 &gt; m + 1) &#123;            Q.pop_front();        &#125;                res &#x3D; max(res, sum[i] - sum[Q.front()]);                while(!Q.empty() &amp;&amp; sum[Q.back()] &gt;&#x3D; sum[i]) &#123;            Q.pop_back();        &#125;        Q.push_back(i);    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><p><a href="https://www.luogu.com.cn/problem/P2627">luogu-[USACO11OPEN].Mowing the Lawn</a></p><p>这道题和上面那道最大K子序和非常像</p><p>子数组和至少为 k 的最短非空子数组长度</p><p><a href="https://leetcode-cn.com/problems/shortest-subarray-with-sum-at-least-k/">https://leetcode-cn.com/problems/shortest-subarray-with-sum-at-least-k/</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x10基础数据结构-(2)-栈</title>
    <link href="/2021/02/02/Algorithm/Template/20210202-0x10-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(2)-%E6%A0%88/"/>
    <url>/2021/02/02/Algorithm/Template/20210202-0x10-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(2)-%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h2 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h2><h3 id="模拟栈"><a class="markdownIt-Anchor" href="#模拟栈"></a> 模拟栈</h3><p>可以用<strong>一个定长数组+一个栈顶指针</strong>来模拟栈：</p><pre class="language-c++" data-language="c++"><code class="language-c++">const int N &#x3D; 1e5 + 7;int stk[N], tt &#x3D; -1; &#x2F;&#x2F; tt &#x3D;&gt; top指针，指向栈顶stk[++ tt] &#x3D; x;      &#x2F;&#x2F; pushtt --;               &#x2F;&#x2F; popstk[tt];             &#x2F;&#x2F; topif(tt &gt;&#x3D; 0)          &#x2F;&#x2F; not emptyelse                 &#x2F;&#x2F; empty</code></pre><p><a href="https://leetcode-cn.com/problems/mini-parser/">385. 迷你语法分析器</a></p><h3 id="单调栈"><a class="markdownIt-Anchor" href="#单调栈"></a> 单调栈</h3><p>单调栈即满足单调性的栈结构，单调栈主要用于在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>内解决<strong>NGE问题</strong>（Next Greater Element）。</p><blockquote><p><strong>NGE问题</strong>：对于序列中的每个元素，找到下一个(或上一个)比当前元素大(或小)的元素。</p></blockquote><p>逆向遍历时，单调栈中存的是有可能成为前一个元素右边界的元素</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;stack&gt;#include &lt;iostream&gt;using namespace std;vector&lt;int&gt; arr;int n;int main() &#123;    cin &gt;&gt; n;    arr.resize(n + 1);    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;arr[i]);    &#125;        vector&lt;int&gt; f(n + 1);    stack&lt;int&gt; S;    for (int i &#x3D; n; i &gt;&#x3D; 1; i --) &#123;        while (!S.empty() &amp;&amp; arr[S.top()] &lt;&#x3D; arr[i]) &#123;            S.pop(); &#x2F;&#x2F; 弹出栈顶比当前数小的        &#125;        &#x2F;&#x2F; 说明当前arr[S.top()] &gt; arr[i]        f[i] &#x3D; S.empty() ? 0 : S.top();        S.push(i);    &#125;        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        printf(&quot;%d &quot;, f[i]);    &#125;        return 0;&#125;</code></pre><p>正向遍历时，栈中存的是还未找到右边界的元素</p><p>解决的暴力问题</p><p>变种？</p><p>有关单调栈的题目很灵活：单调栈的构造是固定模板，但实际问题的处理逻辑确是千变万化的，需要清晰的思维。</p><p>你要想清楚以下三个问题，才能掌握好单调栈：</p><ul><li>为什么能用单调栈？(是否需要构造单峰<code>/\</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">or</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span> 单谷<code>\/</code>)</li><li>单调性是否需要严格？</li><li>实际问题的逻辑该怎么处理？</li></ul><h4 id="接雨水"><a class="markdownIt-Anchor" href="#接雨水"></a> 接雨水</h4><p><a href="https://www.acwing.com/problem/content/1576/">Acwing-1574.接雨水</a></p><p>根据题意可知，需要构造一个单谷<code>\/</code>（中间低两边高)才能接到雨水，因此可以构造一个<strong>严格单调递减</strong>的单调栈来完成这个操作，并且对于当前的每个谷底<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">cur</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>，其能接到的雨水面积<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>r</mi><mi>e</mi><mi>a</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{area}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>r</mi><mi>e</mi><mi>a</mi></mrow></msub><mo>=</mo><mi>w</mi><mo>∗</mo><mi>h</mi><mo>=</mo><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>−</mo><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">[</mo><mi>c</mi><mi>u</mi><mi>r</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S_{area} = w * h = (r - l - 1) * (min(height[l], height[r]) - height[cur])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><p>如果没有形成单谷<code>\/</code>，无法接到雨水，那么遍历完后留在单调栈中的数不弹出来也行，对计算结果无影响。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;stack&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int n;vector&lt;int&gt; height;stack&lt;int&gt; S;int main() &#123;    cin &gt;&gt; n;    height.resize(n);    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;height[i]);    &#125;    int res &#x3D; 0;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        while (!S.empty() &amp;&amp; height[S.top()] &lt;&#x3D; height[i]) &#123;            int cur &#x3D; S.top();            S.pop();            if (S.empty()) break;   &#x2F;&#x2F; 左侧不存在，无法构成单谷            int r &#x3D; i;            int l &#x3D; S.top();             res +&#x3D; (r - l - 1) * (min(height[r], height[l]) - height[cur]);        &#125;        S.push(i);    &#125;    cout &lt;&lt; res &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="直方图中的最大矩形"><a class="markdownIt-Anchor" href="#直方图中的最大矩形"></a> 直方图中的最大矩形</h4><p><a href="https://www.acwing.com/problem/content/133/">Acwing-131.直方图中的最大矩形</a></p><p>根据题意，需要构造一个单峰<code>/\</code>（中间高两边低）才能计算出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">cur</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>矩形的最大面积，因此可以构造一个<strong>严格单调递增</strong>的单调栈来完成这个操作，并且对于当前的每个谷峰<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">cur</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>，其能形成的最大矩形面积<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>r</mi><mi>e</mi><mi>a</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{area}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>a</mi><mi>r</mi><mi>e</mi><mi>a</mi></mrow></msub><mo>=</mo><mi>w</mi><mo>∗</mo><mi>h</mi><mo>=</mo><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">[</mo><mi>c</mi><mi>u</mi><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">S_{area} = w * h = (r - l - 1) * height[cur]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span></span></p><p>如果没有形成单峰&quot;<code>/\</code>，其实当前单个上升区间<code>/</code>也能计算矩形面积，那么就有必要把遍历完后留在单调栈中的数全部弹出来算一次，但这样会导致代码冗余（逻辑重复），因此可以添加一个尾部哨兵来统一操作。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;stack&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;vector&lt;int&gt; height;stack&lt;int&gt; S;int main() &#123;    int n;    while (scanf(&quot;%d&quot;, &amp;n), n) &#123;        height.resize(n);                for (int i &#x3D; 0; i &lt; n; i ++) &#123;            scanf(&quot;%d&quot;, &amp;height[i]);        &#125;                height.push_back(0);       &#x2F;&#x2F; 尾部哨兵        n &#x3D; height.size();        LL res &#x3D; 0;        S &#x3D; stack&lt;int&gt;();        for (int i &#x3D; 0; i &lt; n; i ++) &#123;            while (!S.empty() &amp;&amp; height[S.top()] &gt;&#x3D; height[i]) &#123;                int cur &#x3D; S.top();                S.pop();                int r &#x3D; i;                  int l &#x3D; S.empty() ? -1 : S.top();                res &#x3D; max(res, (r - l - 1) * (LL)height[cur]);            &#125;            S.push(i);        &#125;               &#x2F;&#x2F; 如果没有尾部哨兵，需要添加以下代码，计算留在单调栈中的上升区间        &#x2F;&#x2F; while (!S.empty()) &#123;        &#x2F;&#x2F;     int cur &#x3D; S.top();        &#x2F;&#x2F;     S.pop();        &#x2F;&#x2F;     int r &#x3D; n;          &#x2F;&#x2F;     int l &#x3D; S.empty() ? -1 : S.top();                   &#x2F;&#x2F;     res &#x3D; max(res, (r - l - 1) * (LL)height[cur]);        &#x2F;&#x2F; &#125;                cout &lt;&lt; res &lt;&lt; endl;    &#125;        return 0;&#125;</code></pre><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">⌈</mo><mi mathvariant="normal">接</mi><mi mathvariant="normal">雨</mi><mi mathvariant="normal">水</mi><mo fence="true">⌋</mo></mrow><annotation encoding="application/x-tex">\left \lceil 接雨水  \right \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">⌈</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">雨</span><span class="mord cjk_fallback">水</span><span class="mclose delimcenter" style="top:0em;">⌋</span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">⌈</mo><mi mathvariant="normal">直</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">图</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">最</mi><mi mathvariant="normal">大</mi><mi mathvariant="normal">矩</mi><mi mathvariant="normal">形</mi><mo fence="true">⌋</mo></mrow><annotation encoding="application/x-tex">\left \lceil直方图中的最大矩形\right \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">⌈</span><span class="mord cjk_fallback">直</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">图</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">矩</span><span class="mord cjk_fallback">形</span><span class="mclose delimcenter" style="top:0em;">⌋</span></span></span></span></span>这两道题很相似，宽度都是用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>−</mo><mi>l</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">r - l - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>来求。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x10基础数据结构-(1)-链表</title>
    <link href="/2021/02/01/Algorithm/Template/20210201-0x10-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(1)-%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/02/01/Algorithm/Template/20210201-0x10-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-(1)-%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="链表"><a class="markdownIt-Anchor" href="#链表"></a> 链表</h2><p>这个在leetcode上刷的链表形式，可以分离到leetcode那边</p><h3 id="leetcode上的链表"><a class="markdownIt-Anchor" href="#leetcode上的链表"></a> LeetCode上的链表</h3><p>这种专门考动态链表本身的操作基本上只出现在工作面试和leetcode比赛中，一般在其它比赛中不太常见。</p><h4 id="链表定义"><a class="markdownIt-Anchor" href="#链表定义"></a> 链表定义</h4><pre class="language-c" data-language="c"><code class="language-c">struct ListNode &#123;    int val;    ListNode *next;    ListNode() : val(0), next(nullptr) &#123;&#125;    ListNode(int x) : val(x), next(nullptr) &#123;&#125;    ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;&#125;;</code></pre><p>主要要熟练掌握链表的<strong>递归</strong>和<strong>迭代</strong>操作。</p><h4 id="反转链表"><a class="markdownIt-Anchor" href="#反转链表"></a> 反转链表</h4><p><a href="https://leetcode.cn/problems/reverse-linked-list/">反转链表I</a></p><pre class="language-c" data-language="c"><code class="language-c">class Solution &#123;public:    ListNode* reverseList(ListNode* head) &#123;        ListNode* pre &#x3D; NULL;        ListNode* cur &#x3D; head;                while (cur !&#x3D; NULL) &#123;            ListNode* nxt &#x3D; cur-&gt;next;            cur-&gt;next &#x3D; pre;            pre &#x3D; cur;            cur &#x3D; nxt;        &#125;        return pre;    &#125;&#125;;</code></pre><p><a href="https://leetcode.cn/problems/reverse-linked-list-ii/">反转链表II</a></p><pre class="language-c" data-language="c"><code class="language-c">class Solution &#123;public:    ListNode* reverseBetween(ListNode* head, int left, int right) &#123;        ListNode* dummy_head &#x3D; new ListNode(-1, head);        ListNode* p &#x3D; dummy_head;        int i &#x3D; 1;        while (i &lt; left) &#123;            p &#x3D; p-&gt;next;            i ++;        &#125;        ListNode* pre &#x3D; p;        ListNode* cur &#x3D; p-&gt;next;        while (left &lt;&#x3D; i &amp;&amp; i &lt;&#x3D; right) &#123;            ListNode* nxt &#x3D; cur-&gt;next;            cur-&gt;next &#x3D; pre;            pre &#x3D; cur;            cur &#x3D; nxt;            i ++;        &#125;                p-&gt;next-&gt;next &#x3D; cur;        p-&gt;next &#x3D; pre;        return dummy_head-&gt;next;    &#125;&#125;;</code></pre><p>邻接表主要应用于</p><ol><li>树与图的存储</li><li>hash表的拉链法存储</li></ol><h3 id="单链表"><a class="markdownIt-Anchor" href="#单链表"></a> 单链表</h3><h3 id="双向链表"><a class="markdownIt-Anchor" href="#双向链表"></a> 双向链表</h3><p>很牛逼</p><p>[<a href="https://www.acwing.com/activity/content/code/content/5818478/">https://www.acwing.com/activity/content/code/content/5818478/</a>]</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x00-基础算法-(6)-贪心</title>
    <link href="/2021/01/06/Algorithm/Template/20210106-0x00-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-(6)-%E8%B4%AA%E5%BF%83/"/>
    <url>/2021/01/06/Algorithm/Template/20210106-0x00-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-(6)-%E8%B4%AA%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h2 id="贪心"><a class="markdownIt-Anchor" href="#贪心"></a> 贪心</h2><p>贪心算法（greedy algorithm），是用计算机来模拟一个「贪心」的人做出决策的过程。这个人十分贪婪，每一步行动总是按某种指标选取最优的操作。而且他目光短浅，总是只看眼前，并不考虑以后可能造成的影响。</p><p>可想而知，并不是任何时候贪心法都能获得最优解，所以一般使用贪心法的时候，都要确保自己能证明其正确性（通常用反证法或数学归纳法证明）。</p><blockquote><p>贪心类问题无疑是基础算法中难度最大的，难点在于思维的跳跃性，没有固定的解题模式，往往是一类题一种解法或结论。</p></blockquote><p>总而言之：贪心是指每次找局部最优解，就可以找到全局最优解，所以贪心一般要求函数是单峰的。动态规划的限制会少一些，一般是枚举了空间中的所有值，找出了最优解。这两个算法一般是从经验出发来判断，所以要多做题。</p><p>下面介绍一些常见的贪心问题以及其对应的启发式策略。</p><h3 id="区间问题"><a class="markdownIt-Anchor" href="#区间问题"></a> 区间问题</h3><p>区间问题最重要的其实不是选择按左端点还是右端点排序【因为按左端点排序和按右端点排序的解法可以相互转换】，而是排序后，应该优先考虑包含区间还是被包含区间，这才是本质问题。</p><blockquote><ul><li><p>最少覆盖区间点数和最大不相交区间数，要优先考虑被包含区间</p></li><li><p>区间合并、区间分组、区间覆盖，要优先考虑包含区间</p></li></ul></blockquote><h4 id="最少覆盖区间点数"><a class="markdownIt-Anchor" href="#最少覆盖区间点数"></a> 最少覆盖区间点数</h4><p>数轴上有若干区间，在数轴上选点，使得每个区间内至少包含一个点，求选择的点的最小数量。</p><blockquote><p>贪心策略：</p><p>Step1: 区间按左端点从小到大排序</p><p>Step2: 按倒序依次枚举每个区间：<br />如果当前区间已经包含该点，则直接continue；<br />否则，选择当前区间左端点</p></blockquote><p><a href="https://www.acwing.com/problem/content/907/">AcWing-905.区间选点</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int INF &#x3D; 0x3f3f3f3f;int n;vector&lt;PII&gt; segs;int main() &#123;    cin &gt;&gt; n;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        int l, r;        scanf(&quot;%d %d&quot;, &amp;l, &amp;r);        segs.push_back(&#123;l, r&#125;);    &#125;        &#x2F;&#x2F; step1: 按左端点排序    sort(segs.begin(), segs.end());        int res &#x3D; 0;    int st &#x3D; INF;    &#x2F;&#x2F; step2: 倒序枚举    for (int i &#x3D; n - 1; i &gt;&#x3D; 0; i --) &#123;        &#x2F;&#x2F; 无交集        if (segs[i].second &lt; st) &#123;            res ++;            st &#x3D; segs[i].first;        &#125;    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="最大不相交区间数"><a class="markdownIt-Anchor" href="#最大不相交区间数"></a> 最大不相交区间数</h4><p>数轴上有若干区间，选择其中尽可能多的区间，使得选中的区间之间互不相交。</p><blockquote><p>贪心策略：</p><p>Step1: 区间按左端点从小到大排序</p><p>Step2: 按倒序依次枚举每个区间：<br />如果两个区间相交，则直接continue；<br />否则，选择当前区间(res ++)，并把比较区间更新为当前区间</p></blockquote><p><a href="https://www.acwing.com/problem/content/910/">AcWing-908.最大不相交区间数量</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int INF &#x3D; 0x3f3f3f3f;int n;vector&lt;PII&gt; segs;int main() &#123;    cin &gt;&gt; n;    for (int i &#x3D; 0; i &lt; n; i ++)  &#123;        int l, r;        scanf(&quot;%d %d&quot;, &amp;l, &amp;r);        segs.push_back(&#123;l, r&#125;);    &#125;    &#x2F;&#x2F; step1: 按左端点排序    sort(segs.begin(), segs.end());        int res &#x3D; 0;    int st &#x3D; INF;    &#x2F;&#x2F; step2: 倒序枚举    for (int i &#x3D; n - 1; i &gt;&#x3D; 0; i --) &#123;        &#x2F;&#x2F; 无交集        if (segs[i].second &lt; st) &#123;            res ++;            st &#x3D; segs[i].first;        &#125;    &#125;    cout &lt;&lt; res &lt;&lt; endl;    return 0;&#125;</code></pre><blockquote><p>综上，可得结论：<strong>最少覆盖区间点数 == 最大不相交区间数</strong></p><p>因为如果几个区间能被同一个点覆盖 ，说明它们相交了，所以有几个点就是有几个不相交区间</p></blockquote><hr /><h4 id="区间合并"><a class="markdownIt-Anchor" href="#区间合并"></a> 区间合并</h4><p>数轴上有若干区间，要求合并所有有交集的区间，求合并后的区间个数。</p><blockquote><p>贪心策略：</p><p>Step1: 区间按左端点从小到大排序</p><p>Step2: 按顺序依次枚举区间：<br />如果当前区间与上一个区间没有交集，则把上一个区间放入合并数组内，当前区间更新为上一个区间;<br />否则，把当前区间与上一个区间合并，更新上一个区间的右端点的最大值</p></blockquote><p><a href="https://www.acwing.com/problem/content/805/">AcWing-803.区间合并</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int INF &#x3D; 0x3f3f3f3f;int n;vector&lt;PII&gt; segs;void merge(vector&lt;PII&gt; &amp;segs) &#123;    vector&lt;PII&gt; res;        &#x2F;&#x2F; step1: 按左端点对区间排序    sort(segs.begin(), segs.end());        &#x2F;&#x2F; step2: 按顺序依次枚举区间    int st &#x3D; -INF, ed &#x3D; -INF;    for (int i &#x3D; 0; i &lt; segs.size(); i ++) &#123;        &#x2F;&#x2F; 无交集        if (ed &lt; segs[i].first) &#123;            if(st !&#x3D; -INF) res.push_back(&#123;st, ed&#125;);            st &#x3D; segs[i].first, ed &#x3D; segs[i].second;        &#125;        &#x2F;&#x2F; 有交集        else ed &#x3D; max(ed, segs[i].second);    &#125;    if(st !&#x3D; -INF) res.push_back(&#123;st, ed&#125;);    segs &#x3D; res;&#125;int main() &#123;    cin &gt;&gt; n;        for (int i &#x3D; 0; i &lt; n; i ++) &#123;        int l, r;        scanf(&quot;%d %d&quot;, &amp;l, &amp;r);        segs.push_back(&#123;l, r&#125;);    &#125;        merge(segs);        cout &lt;&lt; segs.size() &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="区间分组"><a class="markdownIt-Anchor" href="#区间分组"></a> 区间分组</h4><p>数轴上有若干区间，给这些区间分组，使得每组内的区间互不相交，求最小分组数量。</p><blockquote><p>贪心策略：</p><p>Step1: 区间按左端点从小到大排序</p><p>Step2: 用一个小根堆维护当前分组(<code>pair&lt;右端点, 分组id&gt;</code>)，按顺序依次枚举每个区间:<br />每次取出堆顶的组，如果组内区间与当前区间无交集，则让当前区间加入该组，并更新区间右端点;<br />否则，以当前区间右端点新建一个分组，加入到小根堆中</p></blockquote><p><a href="https://www.acwing.com/problem/content/908/">AcWing-906.区间分组</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef pair&lt;int, int&gt; PII;vector&lt;PII&gt; seg;int n;int main() &#123;    cin &gt;&gt; n;    seg.resize(n);    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        scanf(&quot;%d %d&quot;, &amp;seg[i].first, &amp;seg[i].second);    &#125;    sort(seg.begin(), seg.end());    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; pq;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        &#x2F;&#x2F; 组数不为空，并且组内区间与当前区间无交集        if (!pq.empty() &amp;&amp; pq.top().first &lt; seg[i].first) &#123;            auto t &#x3D; pq.top(); pq.pop();            t.first &#x3D; seg[i].second;            pq.push(t);        &#125;        &#x2F;&#x2F; 有交集        else &#123;            pq.push(&#123;seg[i].second, pq.size() + 1&#125;);        &#125;    &#125;    cout &lt;&lt; pq.size() &lt;&lt; endl;    return 0;&#125;</code></pre><p>区间分组也是最大区间厚度(最多区间重叠部分)，这里有一种<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的解法:</p><p>思路：我们可以把所有开始时间和结束时间排序，遇到开始时间就把需要的教室加1，遇到结束时间就把需要的教室减1,在一系列需要的教室个数变化的过程中，峰值就是多同时进行的活动数，也是我们至少需要的教室数。</p><p>参考题解：<a href="https://www.acwing.com/solution/content/8902/">https://www.acwing.com/solution/content/8902/</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 100100;int n;int b[2 * N], idx;int main() &#123;    scanf (&quot;%d&quot;, &amp;n);    for(int i &#x3D; 0; i &lt; n; i ++) &#123;        int l, r;        scanf(&quot;%d %d&quot;, &amp;l, &amp;r);        b[idx ++] &#x3D; l * 2;&#x2F;&#x2F;标记左端点为偶数。        b[idx ++] &#x3D; r * 2 + 1;&#x2F;&#x2F; 标记右端点为奇数。    &#125;    sort(b, b + idx);    int res &#x3D; 1, t &#x3D; 0;    for(int i &#x3D; 0; i &lt; idx; i ++) &#123;        if(b[i] % 2 &#x3D;&#x3D; 0) t ++;        else t --;        res &#x3D; max(res, t);    &#125;    printf (&quot;%d\n&quot;, res);    return 0;&#125;</code></pre><h4 id="区间覆盖"><a class="markdownIt-Anchor" href="#区间覆盖"></a> 区间覆盖</h4><p>数轴上有若干区间，选择其中尽可能少的区间，覆盖一个题给指定线段。</p><blockquote><p>贪心策略：</p><p>Step1: 区间按左端点从小到大排序, 初始赋值 <code>st = tar.first, ed = tar.second</code></p><p>Step2: 按顺序依次枚举区间:<br />首先在这些segs中挑出满足左端点 &lt;=  st的线段，<br />然后在这些线段中 ，选择second最大的那个作为覆盖区间，并把st更新为该区间的second<br />重复Step2，直到<code>r &gt;= ed</code></p><p>首先在这些segs中挑出满足左端点 &lt;=  st的线段，</p><p>注意，会有无解情况，因此需要设置flag来判断:<br />① 找不到满足first &lt;=  st的线段，或者这些区间全与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>s</mi><mi>t</mi><mo separator="true">,</mo><mi>e</mi><mi>d</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[st,ed]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mclose">]</span></span></span></span>不相交(<code>r &lt; st</code>)<br />② 遍历完整个区间后r仍然 &lt; ed</p></blockquote><p><a href="https://www.acwing.com/problem/content/909/">AcWing-907.区间覆盖</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int INF &#x3D; 0x3f3f3f3f;int n;PII tar;vector&lt;PII&gt; segs;int main() &#123;    cin &gt;&gt; tar.first &gt;&gt; tar.second;    cin &gt;&gt; n;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        int l, r;        scanf(&quot;%d %d&quot;, &amp;l, &amp;r);        segs.push_back(&#123;l, r&#125;);    &#125;    sort(segs.begin(), segs.end());    int res &#x3D; 0;    bool flag &#x3D; false;    int st &#x3D; tar.first, ed &#x3D; tar.second;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        int j &#x3D; i, r &#x3D; -INF;        while  (j &lt; n &amp;&amp; segs[j].first &lt;&#x3D; st) &#123;            r &#x3D; max(r, segs[j].second);            j ++;        &#125;        if (r &lt; st) &#123;            res &#x3D; -1;            break;        &#125;        res ++;        if (r &gt;&#x3D; ed)  &#123;            flag &#x3D; true;            break;        &#125;        st  &#x3D; r;        i &#x3D; j - 1;    &#125;    if (!flag) res &#x3D; -1;    cout &lt;&lt; res &lt;&lt; endl;    return 0;&#125;</code></pre><h3 id="其它经典贪心"><a class="markdownIt-Anchor" href="#其它经典贪心"></a> 其它经典贪心</h3><h4 id="合并果子"><a class="markdownIt-Anchor" href="#合并果子"></a> 合并果子</h4><p>有n堆果子，需要两两合并，经过n-1次合并成 1堆果子 ，求合并最少需要花费的体力。[把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和]</p><blockquote><p><strong>贪心策略</strong></p><p>每次选择最小重量的两堆进行合并，即为最小花费体力。</p><p><strong>ps</strong>:整个合并过程就是一个二叉树，每个结点的<strong>贡献次数</strong>就是结点到根结点的距离。</p></blockquote><p><a href="https://www.acwing.com/problem/content/150/">AcWing-148.合并果子</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;iostream&gt;using namespace std;int n;int main() &#123;    cin &gt;&gt; n;    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        int x;        scanf(&quot;%d&quot;, &amp;x);        pq.push(x);    &#125;        long long res &#x3D; 0;    while(pq.size() !&#x3D; 1) &#123;        int t1 &#x3D; pq.top(); pq.pop();        int t2 &#x3D; pq.top(); pq.pop();                int t &#x3D; t1 + t2;        res +&#x3D; t;        pq.push(t);    &#125;        cout &lt;&lt; res &lt;&lt; endl;    return 0;&#125;</code></pre><h4 id="排队打水"><a class="markdownIt-Anchor" href="#排队打水"></a> 排队打水</h4><p>有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个人排队到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个水龙头处打水，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个人装满水桶所需的时间是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">t_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，请问如何安排他们的打水顺序才能使所有人的等待时间之和最小？</p><blockquote><p><strong>贪心策略</strong></p><p>由<code>i</code>的任意性，打水的时间总和为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><msub><mi>i</mi><mn>1</mn></msub></msub><mo>∗</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><msub><mi>t</mi><msub><mi>i</mi><mn>2</mn></msub></msub><mo>∗</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>t</mi><msub><mi>i</mi><mi>n</mi></msub></msub><mo>∗</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{t_{i_1}*(n-1) + t_{i_2}*(n-2) + ...t_{i_n}*(n-n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，也就是<strong>前缀和之和</strong></p><p>要想让前缀和之和最小，显然从小到大排序即可</p></blockquote><p><a href="https://www.acwing.com/problem/content/915/">AcWing-913.排队打水</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;const int N &#x3D; 1e5 + 7;int n;int arr[N];LL sum[N];int main() &#123;    cin &gt;&gt; n;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;arr[i]);    &#125;        sort(arr + 1, arr + n + 1);        sum[0] &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;        sum[i] &#x3D; sum[i - 1] + arr[i];    &#125;        LL res &#x3D; 0;    &#x2F;&#x2F; 最后一个人的时间不用等    for (int i &#x3D; 1; i &lt; n; i ++) &#123;        res +&#x3D; sum[i];    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="货仓选址"><a class="markdownIt-Anchor" href="#货仓选址"></a> 货仓选址</h4><blockquote><p><strong>贪心策略</strong></p><p>显然，如果要使得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mrow><mo fence="true">∣</mo><msub><mi>A</mi><mi>i</mi></msub><mo>−</mo><msub><mi>A</mi><mi>k</mi></msub><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">\sum_{i=1}^n\left|A_i-A_k\right|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span></span></span></span>最小，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">∣</mo><msub><mi>A</mi><mi>i</mi></msub><mo>−</mo><msub><mi>A</mi><mi>k</mi></msub><mo fence="true">∣</mo></mrow><annotation encoding="application/x-tex">{\left|A_i-A_k\right|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span></span></span></span></span>的几何意义是数轴上两点之间的距离。<br />那么可以分情况讨论：</p><ul><li>当n是奇数，显然<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">A_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>取排序后的<strong>中位数</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></msub></mrow><annotation encoding="application/x-tex">A_{\frac{n + 1}{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.17035em;vertical-align:-0.48701999999999995em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.7537800000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142857em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48701999999999995em;"><span></span></span></span></span></span></span></span></span></span>是最优解</li><li>当n是偶数，显然<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">A_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>取排序后的区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>A</mi><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></msub><mo separator="true">,</mo><msub><mi>A</mi><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[A_{\frac{n + 1}{2}},A_{\frac{n + 1}{2}}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.23702em;vertical-align:-0.48701999999999995em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.7537800000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142857em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48701999999999995em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.7537800000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142857em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48701999999999995em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>内任意一点都是最优解，不妨取<strong>中位数</strong></li></ul></blockquote><p><a href="https://www.acwing.com/problem/content/106/">AcWing-104.货仓选址</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;int n;vector&lt;int&gt; a;int main() &#123;    cin &gt;&gt; n;    a.resize(n);    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        scanf(&quot;%d&quot;, &amp;a[i]);    &#125;        sort(a.begin(), a.end());        LL res &#x3D; 0;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        res +&#x3D; abs(a[i] - a[n &#x2F; 2]);    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><p><strong>练习eg</strong>:</p><p><a href="/2023/02/04/Algorithm/Comp/20230204-算法竞赛进阶指南-035-糖果传递/" target="_blank">Acwing-122.糖果传递</a></p><h4 id="耍杂技的牛国王游戏"><a class="markdownIt-Anchor" href="#耍杂技的牛国王游戏"></a> 耍杂技的牛/国王游戏</h4><blockquote><p><strong>贪心策略</strong></p><p>按照<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub><mo>+</mo><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">{w_{i} +  s_{i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>从小到大的顺序，来从高往低叠罗汉</p></blockquote><p><a href="https://www.acwing.com/problem/content/127/">Acwing-125.耍杂技的牛</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int INF &#x3D; 0x3f3f3f3f;int n;vector&lt;PII&gt; cows;int main() &#123;    cin &gt;&gt; n;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        int w, s;        scanf(&quot;%d %d&quot;, &amp;w, &amp;s);        cows.push_back(&#123;w, s&#125;);    &#125;        sort(cows.begin(),cows.end(), [&amp;](const PII&amp;a,  const PII&amp; b) -&gt; bool&#123;       return a.first + a.second &lt; b.first + b.second;    &#125;);        int res &#x3D; -INF, sum &#x3D; 0;    for (int i &#x3D; 0; i &lt; n; i ++) &#123;        res &#x3D; max(res, sum - cows[i].second);        sum +&#x3D; cows[i].first;    &#125;        cout &lt;&lt; res &lt;&lt; endl;        return 0;&#125;</code></pre><p><strong>练习eg</strong>:</p><p><a href="https://www.acwing.com/problem/content/116/">Acwing-114.国王游戏</a></p><h4 id="else"><a class="markdownIt-Anchor" href="#else"></a> Else</h4><ul><li>一个序列中任意两个值绝对值之差的最小值，就是把该序列排序后，相邻元素之差的最小值</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x00-基础算法-(5)-前缀和&amp;差分</title>
    <link href="/2021/01/05/Algorithm/Template/20210105-0x00-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-(5)-%E5%89%8D%E7%BC%80%E5%92%8C&amp;%E5%B7%AE%E5%88%86/"/>
    <url>/2021/01/05/Algorithm/Template/20210105-0x00-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-(5)-%E5%89%8D%E7%BC%80%E5%92%8C&amp;%E5%B7%AE%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h2 id="前缀和"><a class="markdownIt-Anchor" href="#前缀和"></a> 前缀和</h2><p>前缀和主要起优化作用，只要花费<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的预处理，它可以在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>内求出原数组某段的子数组和。</p><blockquote><p><strong>当你要多次求原数组中某一段子数组和，就可以考虑用前缀和优化</strong></p></blockquote><h3 id="一维前缀和"><a class="markdownIt-Anchor" href="#一维前缀和"></a> 一维前缀和</h3><p><strong>定义</strong></p><p>原数组: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{a_1 , a_2, a_3, ... ,a_n \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span></p><p>前缀和数组: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><msub><mi>S</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>S</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>S</mi><mn>3</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>S</mi><mi>n</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{S_1 , S_2, S_3, ... ,S_n \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i = a_1 + a_2 + ... + a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，规定边界<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">S_0 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></p><h4 id="代码实现1-based"><a class="markdownIt-Anchor" href="#代码实现1-based"></a> 代码实现(1-based)</h4><p><strong>存储时for循环最好要让下标从1开始，让<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">S_0 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，这样就不用处理边界问题</strong></p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;const int N &#x3D; 1e6 + 10;vector&lt;int&gt; arr(N);vector&lt;int&gt; sum(N);int main() &#123;    int n, m;cin &gt;&gt; n &gt;&gt; m;       for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) scanf(&quot;%d&quot;, &amp;arr[i]);        &#x2F;&#x2F; 预处理前缀和    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) sum[i] &#x3D; sum[i - 1] + arr[i];        &#x2F;&#x2F; m次询问区间[l, r]    while (m --) &#123;        int l, r;        scanf(&quot;%d%d&quot;, &amp;l, &amp;r);        printf(&quot;%d\n&quot;, sum[r] - sum[l - 1]);    &#125;&#125;</code></pre><h4 id="时间复杂度分析"><a class="markdownIt-Anchor" href="#时间复杂度分析"></a> 时间复杂度分析</h4><p>以一维前缀和为例，<strong>当你要多次(假设m次)求原数组(长度为n)中某一段子数组和</strong>的时候:</p><ul><li>如果没有前缀和，每求一段需要循环遍历一次数组, 1次时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>,  m次时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>;</li><li>当你存储了前缀和(预处理花费时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>, 求其中某一段<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>的子数组和, 只要用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>r</mi></msub><mo>−</mo><msub><mi>S</mi><mrow><mi>l</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">S_r-S_{l-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>即可, 1次时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，m次时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，共<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m+n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>.</li></ul><h3 id="二维前缀和"><a class="markdownIt-Anchor" href="#二维前缀和"></a> 二维前缀和</h3><p><strong>定义</strong></p><p>原二维数组(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n \times m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>):</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>1</mn><mi>m</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>2</mn><mi>m</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mi>m</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}a_{11}  &amp;a_{12}  &amp;...     &amp;a_{1m}\\a_{21}  &amp;a_{22}  &amp;...     &amp;a_{2m} \\...     &amp;...     &amp;...     &amp;... \\a_{n1}  &amp;a_{n2}  &amp;...     &amp;a_{nm}\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80204em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>二维前缀和数组(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n \times m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>):</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mrow><mn>1</mn><mi>m</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mrow><mn>2</mn><mi>m</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mrow><mi>n</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mrow><mi>n</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mrow><mi>n</mi><mi>m</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}S_{11}  &amp;S_{12}  &amp;...     &amp;S_{1m}\\S_{21}  &amp;S_{22}  &amp;...     &amp;S_{2m} \\...     &amp;...     &amp;...     &amp;... \\S_{n1}  &amp;S_{n2}  &amp;...     &amp;S_{nm}\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80204em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>1</mn><mi>j</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">S_{ij} = \begin{bmatrix}a_{11}  &amp;...     &amp;a_{1j}\\...     &amp;...     &amp;...   \\a_{i1}  &amp;...     &amp;a_{ij}\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span>, 规定边界<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">S_0 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></p><h4 id="代码实现1-based-2"><a class="markdownIt-Anchor" href="#代码实现1-based-2"></a> 代码实现(1-based)</h4><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;const int N &#x3D; 1e3 + 10;vector&lt;vector&lt;int&gt;&gt; arr(N, vector&lt;int&gt;(N));vector&lt;vector&lt;int&gt;&gt; sum(N, vector&lt;int&gt;(N));int main() &#123;int n, m, q;cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;for (int j &#x3D; 1; j &lt;&#x3D; m; j ++) &#123;scanf(&quot;%d&quot;, &amp;arr[i][j]);&#125;&#125;    &#x2F;&#x2F; 预处理二维前缀和for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;for (int j &#x3D; 1; j &lt;&#x3D; m; j ++) &#123;sum[i][j] &#x3D; sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1] + arr[i][j];&#125;&#125;    &#x2F;&#x2F; m次询问[(x1, y1),(x2, y2)]while (q --) &#123;int x1, y1, x2, y2;scanf(&quot;%d%d%d%d&quot;, &amp;x1, &amp;y1, &amp;x2, &amp;y2);int ans &#x3D; sum[x2][y2] - sum[x1 - 1][y2] - sum[x2][y1 - 1] + sum[x1 - 1][y1 - 1];printf(&quot;%d\n&quot;, ans);&#125;return 0;&#125;</code></pre><p>二维前缀和有两种询问方式：</p><ol><li>目标子矩阵之和：已知左上角<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x1, y1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，右下角坐标<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mn>2</mn><mo separator="true">,</mo><mi>y</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x2, y2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></li></ol><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 区间[(x1, y1), (x2, y2)]int tar &#x3D; sum[x2][y2] - sum[x1 - 1][y2] - sum[x2][y1 - 1] + sum[x1 - 1][y1 - 1];</code></pre><ol start="2"><li>目标子矩阵之和：已知宽<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>，高<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span>，右下角坐标<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></li></ol><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 区间[(x - h + 1, y - w + 1), (x, y)]int tar &#x3D; sum[x][y] - sum[x - h][y] - sum[x][y - w] + sum[x - h][y - w];</code></pre><h4 id="时间复杂度分析-2"><a class="markdownIt-Anchor" href="#时间复杂度分析-2"></a> 时间复杂度分析</h4><p>待续</p><p><strong>练习eg</strong>:</p><p><a href="https://www.acwing.com/problem/content/123/">Acwing-121.赶牛入圈</a></p><p><a href="https://www.acwing.com/problem/content/128/">Acwing-126.最大的和</a></p><blockquote><p><strong>PS</strong>:</p><p>为了节省空间，可以原地处理（只要题目不需要同时使用前缀和）：</p><p>一维：</p><pre class="language-c++" data-language="c++"><code class="language-c++">for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;scanf(&quot;%d&quot;, &amp;arr[i]);arr[i] +&#x3D; arr[i - 1];&#125;</code></pre><p>二维：</p><pre class="language-c++" data-language="c++"><code class="language-c++">for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;    for (int j &#x3D; 1; j &lt;&#x3D; m; j ++) &#123;        scanf(&quot;%d&quot;, &amp;arr[i][j]);        arr[i][j] +&#x3D; arr[i - 1][j] + arr[i][j - 1] - arr[i - 1][j - 1];    &#125;&#125;</code></pre><p>用完前缀和之后可以再对前缀和数组差分，还原回原数组</p></blockquote><hr /><h2 id="差分"><a class="markdownIt-Anchor" href="#差分"></a> 差分</h2><p>差分主要起优化作用，只要花费<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的预处理，它可以在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>内给原数组中的某一段<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">{[l,r]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span></span>子数组区间加上一个固定的常数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></span>。</p><h3 id="一维差分"><a class="markdownIt-Anchor" href="#一维差分"></a> 一维差分</h3><p><strong>定义</strong></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><mo>−</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">{b_{i} = a_{i} - a_{i-1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></span>  ,   规定<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">{b_1 = a_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><h4 id="一维差分数组与原数组的转换1-based"><a class="markdownIt-Anchor" href="#一维差分数组与原数组的转换1-based"></a> 一维差分数组与原数组的转换(1-based)</h4><p>构造差分数组时，可以看作是在所有初始值为0的一段区间中，在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">{[i, i]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span></span>区间插入了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">{arr[i]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span></span>。</p><h4 id="时间复杂度分析-3"><a class="markdownIt-Anchor" href="#时间复杂度分析-3"></a> 时间复杂度分析</h4><p>同理于一维前缀和，预处理需要花费<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，此后单次<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">{insert}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span></span></span></span></span>操作时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span></span></span>次时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，总共<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m + n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><p><strong>练习eg</strong>:</p><p><a href="https://www.acwing.com/problem/content/102/">Acwing-100.增减序列</a></p><h3 id="二维差分"><a class="markdownIt-Anchor" href="#二维差分"></a> 二维差分</h3><p><strong>定义</strong></p><h4 id="二维差分数组与原数组的转换1-based"><a class="markdownIt-Anchor" href="#二维差分数组与原数组的转换1-based"></a> 二维差分数组与原数组的转换(1-based)</h4><p><strong>原数组=&gt;二维差分数组</strong></p><p>同理于一维，构造差分数组时，可以看作是在所有初始值为0的一片区间中，在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">{[(i, j), (i,j)]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></span>点插入了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">{arr[i][j]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span></span>。</p><pre class="language-c++" data-language="c++"><code class="language-c++">int a[N][N];   &#x2F;&#x2F; 原数组int d[N][N];   &#x2F;&#x2F; 二维差分数组&#x2F;&#x2F; 在以左上角(x1, y1), 右下角(x2, y2)包围的子矩阵[包含边界]中插入数值cinline void insert(int x1, int y1, int x2, int y2, int c) &#123;    d[x1][y1] +&#x3D; c;    d[x2 + 1][y1] -&#x3D; c;    d[x1][y2 + 1] -&#x3D; c;    d[x2 + 1][y2 + 1] +&#x3D; c;&#125;int main() &#123;    cin &gt;&gt; n;    &#x2F;&#x2F; 1-based    for (int i &#x3D; 1; i &lt;&#x3D; n; ++ i) &#123;        for (int j &#x3D; 1; j &lt;&#x3D; n; ++ j) &#123;            cin &gt;&gt; a[i][j];            insert(i, j, i, j, a[i][j]);        &#125;    &#125;&#125;</code></pre><p><strong>二维差分数组=&gt;原数组</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">int a[N][N];   &#x2F;&#x2F; 原数组int d[N][N];   &#x2F;&#x2F; 二维差分数组int main() &#123;    for (int i &#x3D; 1; i &lt;&#x3D; n; ++ i) &#123;        for (int j &#x3D; 1; j &lt;&#x3D; n; ++ j) &#123;            &#x2F;&#x2F; a[i][j] &#x3D; d[i][j] + d[i - 1][j] + d[i][j - 1] - d[i - 1][j - 1];            &#x2F;&#x2F; 通常直接在原地还原，节省空间            d[i][j] +&#x3D; d[i - 1][j] + d[i][j - 1] - d[i - 1][j - 1];        &#125;    &#125;&#125;</code></pre><h4 id="时间复杂度分析-4"><a class="markdownIt-Anchor" href="#时间复杂度分析-4"></a> 时间复杂度分析</h4><h2 id="0-based"><a class="markdownIt-Anchor" href="#0-based"></a> 0-based</h2><h3 id="leetcode上的前缀和后缀和"><a class="markdownIt-Anchor" href="#leetcode上的前缀和后缀和"></a> LeetCode上的前缀和&amp;后缀和</h3><p>做法：统一把前缀和和后缀和，往后偏移1位， 用下标[1-n]的位置 存储</p><p>这样做的好处，就是不用特殊判断数组越界。</p><pre class="language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F; 一般传入参数会给一个 vector&lt;int&gt; arr; 那么应该怎么求前&#x2F;后缀和呢？class Solution &#123;public:    vector&lt;int&gt; preAndsuf(int arr) &#123;        int n &#x3D; arr.size();                &#x2F;&#x2F; 前缀和pre        vector&lt;int&gt; pre(n + 2); &#x2F;&#x2F;pre(n + 1);也可以，统一n + 2        &#x2F;&#x2F; 后缀和suf        vector&lt;int&gt; suf(n + 2);        &#x2F;&#x2F; pre        for (int i &#x3D; 1, c &#x3D; 0; i &lt;&#x3D; n; i ++) &#123;pre[i] &#x3D; pre[i - 1] + arr[i - 1];        &#125;        &#x2F;&#x2F; suf        for (int i &#x3D; n, c &#x3D; 0; i &gt;&#x3D; 1; i --) &#123;            suf[i] &#x3D; suf[i + 1] + arr[i - 1];        &#125;        &#x2F;&#x2F; 使用1: 利用前缀和&#x2F;后缀和，求arr中区间[l, r]的区间和        int l &#x3D; 0, r &#x3D; n - 1;        int sum_lr &#x3D; pre[r + 1] - pre[(l + 1) - 1]; &#x2F;&#x2F; 利用前缀和求        int sum_lr &#x3D; suf[l + 1] - suf[(r + 1) + 1]; &#x2F;&#x2F; 利用后缀和求        &#x2F;&#x2F; 使用2: 求对应位置的前后缀和之和        vector&lt;int&gt; res;        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;            res.emplace_back(pre[i] + suf[i]);        &#125;        return res;    &#125;&#125;;</code></pre><h3 id="leetcode上的差分数组"><a class="markdownIt-Anchor" href="#leetcode上的差分数组"></a> LeetCode上的差分数组</h3><p><a href="https://leetcode.cn/problems/increment-submatrices-by-one/">LeetCode-2536.子矩阵元素+1</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    vector&lt;vector&lt;int&gt;&gt; rangeAddQueries(int n, vector&lt;vector&lt;int&gt;&gt;&amp; queries) &#123;        &#x2F;&#x2F; 差分矩阵        vector&lt;vector&lt;int&gt;&gt; b(n + 2, vector&lt;int&gt; (n + 2, 0));                for (auto q : queries) &#123;            &#x2F;&#x2F; 要整体偏移1个单位下标            int x1 &#x3D; q[0] + 1, y1 &#x3D; q[1] + 1;            int x2 &#x3D; q[2] + 1, y2 &#x3D; q[3] + 1;                        b[x1][y1] +&#x3D; 1;            b[x2 + 1][y1] -&#x3D; 1;            b[x1][y2 + 1] -&#x3D; 1;            b[x2 + 1][y2 + 1] +&#x3D; 1;        &#125;                for (int i &#x3D; 1; i &lt;&#x3D; n; i ++) &#123;            for (int j &#x3D; 1; j &lt;&#x3D; n; j ++) &#123;                b[i][j] &#x3D; b[i][j] + b[i - 1][j] + b[i][j - 1] - b[i - 1][j - 1];            &#125;        &#125;                     vector&lt;vector&lt;int&gt;&gt; res(n, vector&lt;int&gt; (n, 0));        for (int i &#x3D; 0; i &lt; n; i ++) &#123;            for (int j &#x3D; 0; j &lt; n; j ++) &#123;                res[i][j] &#x3D; b[i + 1][j + 1];            &#125;        &#125;                return res;    &#125;&#125;;</code></pre><h4 id="总结一下"><a class="markdownIt-Anchor" href="#总结一下"></a> 总结一下</h4><p>leetcode上的题目通常会给vector，因此是0-base的(下标从0开始)</p><p>一般比较好写的是1-base的，你就需要在使用前，偏移一个单位处理.</p><p>开(n + 2)大小的数组，转换成1-based的写</p><h2 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用</h2><p><a href="https://leetcode.cn/problems/largest-magic-square">LeetCode-1895.最大的幻方</a></p><p>行列前缀和暴力，典中典的题目</p><p>求行的和，列的和，对角线的和，非常基础非常好:</p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int largestMagicSquare(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123;        int n &#x3D; grid.size();        int m &#x3D; grid[0].size();        vector&lt;vector&lt;int&gt;&gt; rowsum(n + 1, vector&lt;int&gt; (m + 1));        vector&lt;vector&lt;int&gt;&gt; colsum(n + 1, vector&lt;int&gt; (m + 1));        for (int i &#x3D; 1; i &lt;&#x3D; n; ++i) &#123;            for (int j &#x3D; 1; j &lt;&#x3D; m; ++j) &#123;                rowsum[i][j] &#x3D; rowsum[i][j - 1] + grid[i - 1][j - 1];                colsum[i][j] &#x3D; colsum[i - 1][j] + grid[i - 1][j - 1];            &#125;        &#125;                auto check &#x3D; [&amp;](int x1, int y1, int x2, int y2) -&gt; bool &#123;            &#x2F;&#x2F; 求[l ,r] &#x3D;&gt; s[r] - s[l - 1]，但这里用的下标是原数组grid的，因此是s[r + 1] - s[l]            unordered_set&lt;int&gt; st;            &#x2F;&#x2F; 行            for (int i &#x3D; x1; i &lt;&#x3D; x2; ++i) &#123;                st.insert(rowsum[i + 1][y2 + 1] - rowsum[i + 1][y1]);                if (st.size() &gt; 1) return false;            &#125;            &#x2F;&#x2F; 列            for (int j &#x3D; y1; j &lt;&#x3D; y2; ++j) &#123;                st.insert(colsum[x2 + 1][j + 1] - colsum[x1][j + 1]);                if (st.size() &gt; 1) return false;            &#125;            &#x2F;&#x2F; 对角线            int s &#x3D; 0;            for (int i &#x3D; x1, j &#x3D; y1; i &lt;&#x3D; x2 &amp;&amp; j &lt;&#x3D; y2; ++i, ++j) &#123;                s +&#x3D; grid[i][j];            &#125;            st.insert(s);            if (st.size() &gt; 1) return false;            s &#x3D; 0;            for (int i &#x3D; x1, j &#x3D; y2; i &lt;&#x3D; x2 &amp;&amp; j &gt;&#x3D; y1; ++i, --j) &#123;                s +&#x3D; grid[i][j];            &#125;            st.insert(s);            if (st.size() &gt; 1) return false;            return true;        &#125;;        for (int k &#x3D; min(n, m); k &gt;&#x3D; 1; --k) &#123;            for (int i &#x3D; 0; i + k - 1 &lt; n; ++i) &#123;                for (int j &#x3D; 0; j + k - 1 &lt; m; ++j) &#123;                    int i2 &#x3D; i + k - 1;                    int j2 &#x3D; j + k - 1;                    if (check(i, j, i2, j2)) &#123;                        return k;                    &#125;                &#125;            &#125;        &#125;        return 1;    &#125;&#125;;</code></pre><h4 id="前缀和-哈希表"><a class="markdownIt-Anchor" href="#前缀和-哈希表"></a> 前缀和 + 哈希表</h4><p>找到一个最长子数组，其元素和等于 0</p><p><a href="https://leetcode.cn/problems/find-longest-subarray-lcci/">面试题17.05. 字母与数字</a></p><hr /><p>找使得数组内其它元素==当前元素的最小操作次数</p><p>关键理解下面这张图，就能写出关键的那三行，求idx，l， r</p><p><img src="/img/algorithm/0x00/sum_ap1.png" alt="" /></p><p><a href="https://leetcode.cn/problems/minimum-operations-to-make-all-array-elements-equal/">LeetCode-2602.使数组元素全部相等的最少操作次数</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    vector&lt;long long&gt; minOperations(vector&lt;int&gt;&amp; nums, vector&lt;int&gt;&amp; queries) &#123;        int n &#x3D; nums.size();        sort(nums.begin(), nums.end());        &#x2F;&#x2F; 前缀和        vector&lt;long long&gt; sum(n + 1);        for (int i &#x3D; 1; i &lt;&#x3D; n; ++ i ) &#123;            sum[i] &#x3D; sum[i - 1] + nums[i - 1];        &#125;                int m &#x3D; queries.size();        vector&lt;long long&gt; res(m);                for (int i &#x3D; 0; i &lt; m; ++ i) &#123;            int q &#x3D; queries[i];            &#x2F;&#x2F; 二分            long long j &#x3D; lower_bound(nums.begin(), nums.end(), q) - nums.begin();            long long l &#x3D; j * q - sum[j];            long long r &#x3D; (sum[n] - sum[j]) - ((n - j) * q);            res[i] &#x3D; l + r;        &#125;        return res;       &#125;&#125;;</code></pre><p><a href="https://leetcode.cn/problems/intervals-between-identical-elements/">LeetCode-2121.相同元素的间隔之和</a></p><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;typedef long long int64;public:    &#x2F;&#x2F; for (int i &#x3D; 0; i &lt; n;  ++i) &#123;    &#x2F;&#x2F;     int64 cur &#x3D; 0;    &#x2F;&#x2F;     for (int j &#x3D; 0; j &lt; n; ++j) &#123;    &#x2F;&#x2F;         if (arr[i] &#x3D;&#x3D; arr[j]) &#123;    &#x2F;&#x2F;             cur +&#x3D; abs(j - i);    &#x2F;&#x2F;         &#125;    &#x2F;&#x2F;     &#125;    &#x2F;&#x2F;     res.emplace_back(cur);    &#x2F;&#x2F; &#125;    vector&lt;long long&gt; getDistances(vector&lt;int&gt;&amp; arr) &#123;        int n &#x3D; arr.size();                unordered_map&lt;int, vector&lt;int&gt;&gt; mp;        for (int i &#x3D; 0; i &lt; n; ++i) &#123;            mp[arr[i]].emplace_back(i);        &#125;        vector&lt;int64&gt; res(n, 0);        for (auto&amp; [_, vec] : mp) &#123;            int sz &#x3D; vec.size();            vector&lt;int64&gt; sum(sz + 1);            for (int i &#x3D; 1; i &lt;&#x3D; sz; ++i) &#123;                sum[i] &#x3D; sum[i - 1] + vec[i - 1];            &#125;            for (int i &#x3D; 0; i &lt; sz; ++i) &#123;                int64 idx &#x3D; vec[i];                int64 l &#x3D; i * idx - sum[i];                int64 r &#x3D; (sum[sz] - sum[i]) -  ((sz - i) * idx);                res[idx] &#x3D; l + r;            &#125;        &#125;        return res;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x00-基础算法-(4)-高精度</title>
    <link href="/2021/01/04/Algorithm/Template/20210104-0x00-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-(4)-%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    <url>/2021/01/04/Algorithm/Template/20210104-0x00-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-(4)-%E9%AB%98%E7%B2%BE%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="高精度运算"><a class="markdownIt-Anchor" href="#高精度运算"></a> 高精度运算</h2><p>高精度运算是<strong>位运算</strong>中一种比较广泛应用，其中的<strong>进位/借位机制</strong>很容易拓展到<strong>N进制计算</strong>。</p><p>只有C++需要注意高精度的问题，Java有大整数类<code>BigInteger</code>，Python的范围默认无限大。</p><p><strong>Step1</strong>:大整数存储 (用vector)</p><p><strong>Step2</strong>:代码模拟人工计算</p><h3 id="大整数存储"><a class="markdownIt-Anchor" href="#大整数存储"></a> 大整数存储</h3><blockquote><p>倒着表示：[0]下标存储个位=&gt;方便需要进位时，push_back()直接移位覆盖</p></blockquote><pre class="language-c" data-language="c"><code class="language-c">int main() &#123;    string a, b;    vector&lt;int&gt; A, B;        cin &gt;&gt; a &gt;&gt; b;         &#x2F;&#x2F; a &#x3D; &quot;123456&quot;    &#x2F;&#x2F; A[6, 5, 4, 3, 2, 1]     for (int i &#x3D; a.size() - 1; i &gt;&#x3D; 0; i --) A.push_back(a[i] - &#39;0&#39;);     for (int i &#x3D; b.size() - 1; i &gt;&#x3D; 0; i --) B.push_back(b[i] - &#39;0&#39;);        return 0;&#125;</code></pre><h3 id="模拟人工运算"><a class="markdownIt-Anchor" href="#模拟人工运算"></a> 模拟人工运算</h3><p>注意以下默认传入参数A和B都是正整数(不带±号)，也可以理解为绝对值的运算。</p><p><code>|A| + |B|</code>、 <code>|A| - |B|</code>、<code>|A| * |b|</code>、<code>|A| / |b|</code></p><p>模拟运算过程中最主要的是理解<strong>进位/借位机制</strong>的模拟写法。</p><h4 id="a-b"><a class="markdownIt-Anchor" href="#a-b"></a> A + B</h4><p>高精度正整数A + 高精度正整数B，返回和C</p><p>加法的位运算结果范围<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>20</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t\in[0,20)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65418em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mclose">)</span></span></span></span></p><p>再用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>来表示位运算的<strong>进位</strong>:</p><ul><li>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>10</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t \in [0,10)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65418em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>，<code>t / 10</code>为0，不进位，当位运算结果<code>t</code>(也可以写成(<code>t % 10</code>))；</li><li>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>10</mn><mo separator="true">,</mo><mn>20</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t \in [10,20)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65418em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>，<code>t / 10</code>为1，进位，当位运算结果<code>t % 10</code>.</li></ul><pre class="language-c" data-language="c"><code class="language-c">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;&#x2F;&#x2F; A + Bvector&lt;int&gt; add(const vector&lt;int&gt;&amp; A, const vector&lt;int&gt;&amp; B) &#123;vector&lt;int&gt; C;        int t &#x3D; 0; &#x2F;&#x2F; 进位    for (int i &#x3D; 0; i &lt; A.size() || i &lt; B.size(); i ++) &#123;        if (i &lt; A.size()) t +&#x3D; A[i];        if (i &lt; B.size()) t +&#x3D; B[i];                C.push_back(t % 10);        &#x2F;&#x2F; 标记本次运算是否进位，用于下一位运算        t &#x2F;&#x3D; 10;    &#125;        &#x2F;&#x2F; 最高位进位, 如:11 + 99 &#x3D; 110    if(t) C.push_back(t);         return C;&#125;int main() &#123;    string a, b;    vector&lt;int&gt; A, B;        cin &gt;&gt; a &gt;&gt; b;        for (int i &#x3D; a.size() - 1; i &gt;&#x3D; 0; i --) A.push_back(a[i] - &#39;0&#39;);     for (int i &#x3D; b.size() - 1; i &gt;&#x3D; 0; i --) B.push_back(b[i] - &#39;0&#39;);        auto C &#x3D; add(A, B);        for (int i &#x3D; C.size() - 1; i &gt;&#x3D; 0; i --) printf(&quot;%d&quot;, C[i]);        return 0;&#125;</code></pre><h4 id="a-b-2"><a class="markdownIt-Anchor" href="#a-b-2"></a> A - B</h4><p>高精度正整数A - 高精度正整数B，返回差C</p><p>减法的位运算结果范围<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>∈</mo><mo stretchy="false">(</mo><mo>−</mo><mn>10</mn><mo separator="true">,</mo><mn>10</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t\in(-10,10)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65418em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mclose">)</span></span></span></span></p><p>再用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>来表示位运算的<strong>借位</strong>:</p><ul><li>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>10</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t \in [0,10)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65418em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>，<code>t &gt; 0</code>，无需借位，当位运算结果<code>t</code>(也可以写成<code>(t + 10) % 10</code>);</li><li>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>∈</mo><mo stretchy="false">(</mo><mo>−</mo><mn>10</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t \in (-10, 0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65418em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>，<code>t &lt; 0</code>，需要借位，当位运算结果<code>(t + 10) % 10</code>.</li></ul><pre class="language-c" data-language="c"><code class="language-c">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;&#x2F;&#x2F; 判断是否有 A &gt;&#x3D; Bbool cmp(const vector&lt;int&gt;&amp; A, const vector&lt;int&gt;&amp; B) &#123;    if (A.size() !&#x3D; B.size()) return A.size() &gt; B.size();    for (int i &#x3D; A.size() - 1; i &gt;&#x3D; 0; i --) &#123;        if(A[i] !&#x3D; B[i]) &#123;            return A[i] &gt; B[i];        &#125;    &#125;        return true; &#125;&#x2F;&#x2F; A - B : 默认传入的A &gt;&#x3D; B, 如果A &lt; B，算 -(sub(B, A))vector&lt;int&gt; sub(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B) &#123;    vector&lt;int&gt; C;        int t &#x3D; 0; &#x2F;&#x2F; 借位    for (int i &#x3D; 0; i &lt; A.size() || i &lt; B.size(); i ++) &#123;        if (i &lt; A.size()) t &#x3D; A[i] - t;        if (i &lt; B.size()) t -&#x3D; B[i];                &#x2F;&#x2F; C.push_back((t + 10) % 10); &#x2F;&#x2F; 可以从if-else中提出来        &#x2F;&#x2F; 标记本次运算是否借位，用于下一位运算        if (t &gt; 0) &#123;            C.push_back((t + 10) % 10);            t &#x3D; 1;        &#125;        else &#123;            C.push_back(t); &#x2F;&#x2F; 也可以写成C.push_back((t + 10) % 10);            t &#x3D; 0;        &#125;    &#125;        &#x2F;&#x2F; 去掉高位的多个0[只保留个位的0], 如:123 - 120 &#x3D; 003    while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0) C.pop_back();        return C;&#125;int main() &#123;    string a, b;    vector&lt;int&gt; A, B;        cin &gt;&gt; a &gt;&gt; b;        for (int i &#x3D; a.size() - 1; i &gt;&#x3D; 0; i --) A.push_back(a[i] - &#39;0&#39;);     for (int i &#x3D; b.size() - 1; i &gt;&#x3D; 0; i --) B.push_back(b[i] - &#39;0&#39;);        if (cmp(A, B)) &#123;        &#x2F;&#x2F; A &gt; B        auto C &#x3D; sub(A, B);        for (int i &#x3D; C.size() - 1; i &gt;&#x3D; 0; i --) printf(&quot;%d&quot;, C[i]);&#125;     else &#123;        &#x2F;&#x2F; B &gt; A        auto C &#x3D; sub(B, A);        printf(&quot;-&quot;);        for (int i &#x3D; C.size() - 1; i &gt;&#x3D; 0; i --) printf(&quot;%d&quot;, C[i]);&#125;        return 0;&#125;</code></pre><h4 id="a-b-3"><a class="markdownIt-Anchor" href="#a-b-3"></a> A * b</h4><p>高精度正整数A * 低精度正整数b，返回乘积C</p><p>考虑思路和A + B差不多</p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;&#x2F;&#x2F; A * bvector&lt;int&gt; mul(vector&lt;int&gt; &amp;A, int b) &#123;    vector&lt;int&gt; C;        int t &#x3D; 0;    &#x2F;&#x2F; 当进位t为0时停止循环，可以省去后面的[最高位进位]和[去掉高位的多个0]的操作    &#x2F;&#x2F; for(int i &#x3D; 0; i &lt; A.size() || t; i ++) ，    for(int i &#x3D; 0; i &lt; A.size(); i ++) &#123;        t +&#x3D; A[i] * b;        C.push_back(t % 10);        t &#x2F;&#x3D; 10;&#125;        &#x2F;&#x2F; 最高位进位    if(t) C.push_back(t);    &#x2F;&#x2F; 去掉高位的多个0[只保留个位的0], 如:12345 * 0 &#x3D; 00000;    while(C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0) C.pop_back();        return C;&#125;int main() &#123;    string a;    int b;        cin &gt;&gt; a &gt;&gt; b;        vector&lt;int&gt; A;    for (int i &#x3D; a.size() - 1; i &gt;&#x3D; 0; i --) A.push_back(a[i] - &#39;0&#39;);        auto C &#x3D; mul(A, b);            for (int i &#x3D; C.size() - 1; i &gt;&#x3D; 0; i --) printf(&quot;%d&quot;, C[i]);        return 0;&#125;</code></pre><h4 id="a-b-4"><a class="markdownIt-Anchor" href="#a-b-4"></a> A / b</h4><p>高精度正整数A / 低精度正整数b， 返回商C和余数r</p><p>注意人工算除法是从<strong>最高位开始除</strong>的，<br />因此模拟时for循环要从后往前，并且结束后为了保持大整数存储的一致性，要reverse()反转C</p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;&#x2F;&#x2F; A &#x2F; b, 商是C, 余数是rvector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r) &#123;    vector&lt;int&gt; C;        r &#x3D; 0;&#x2F;&#x2F; 因为C++函数只能返回一个值，所以使用传引用&amp;r来影响r的值    for (int i &#x3D; A.size() - 1; i &gt;&#x3D; 0; i --) &#123;        r &#x3D; r * 10 + A[i];        C.push_back(r &#x2F; b);        r %&#x3D; b;    &#125;        reverse(C.begin(), C.end());    &#x2F;&#x2F; 去掉高位的多个0[只保留个位的0], 如:100 &#x2F; 19 &#x3D; 005...5    while(C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0) C.pop_back();        return C;&#125;int main() &#123;    string a;    int b;        cin &gt;&gt; a &gt;&gt; b;        vector&lt;int&gt; A;    for (int i &#x3D; a.size() - 1; i &gt;&#x3D; 0; i --) A.push_back(a[i] - &#39;0&#39;);        int r;&#x2F;&#x2F;余数     auto C &#x3D; div(A, b, r);        &#x2F;&#x2F; 商    for (int i &#x3D; C.size() - 1; i &gt;&#x3D; 0; i --) printf(&quot;%d&quot;, C[i]);        cout &lt;&lt; endl;    cout &lt;&lt; r &lt;&lt; endl;        return 0;&#125;</code></pre><h4 id="a-b-5"><a class="markdownIt-Anchor" href="#a-b-5"></a> A ^ b</h4><p>即高精度快速幂，要先实现一个高精度A*高精度B，然后套普通快速幂的板子</p><pre class="language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F; O(nm)&#x2F;&#x2F; C &#x3D; A * B, A &gt;&#x3D; 0, B &gt;&#x3D; 0vector&lt;int&gt; mul(const vector&lt;int&gt; &amp;A, const vector&lt;int&gt; &amp;B) &#123;    vector&lt;int&gt; C(A.size() + B.size());    for (int i &#x3D; 0; i &lt; A.size(); i++) &#123;        for (int j &#x3D; 0; j &lt; B.size(); j++) &#123;            C[i + j] +&#x3D; A[i] * B[j];        &#125;    &#125;    int t &#x3D; 0;    for (int i &#x3D; 0; i &lt; C.size(); i++) &#123;        t +&#x3D; C[i];        C[i] &#x3D; t % 10;        t &#x2F;&#x3D; 10;    &#125;    while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0) C.pop_back();    return C;&#125;&#x2F;&#x2F; 高精度x^Nvector&lt;int&gt; fast_pow(vector&lt;int&gt; x, int N) &#123;vector&lt;int&gt; res; res.push_back(1); &#x2F;&#x2F; 初始1for (; N; N &#x3D; N &gt;&gt; 1) &#123;if (N &amp; 1) &#123;res &#x3D; mul(res, x);&#125;x &#x3D; mul(x, x);         &#x2F;&#x2F; 倍增&#125;return res;&#125;</code></pre><p><a href="https://www.luogu.com.cn/problem/P1009">P1009.阶乘之和</a></p><h4 id="时间复杂度分析"><a class="markdownIt-Anchor" href="#时间复杂度分析"></a> 时间复杂度分析</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span>取<code>max(A.size(), B.size())</code></p><p><strong>A + B</strong>  : <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><p><strong>A - B</strong>   : <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><p><strong>A * b</strong>   : <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><p><strong>A / b</strong>   : <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>， 尽管有reverse()函数，但是reverse也是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的。</p><p><strong>练习eg</strong>:</p><p><a href="https://www.acwing.com/problem/content/126/">Acwing-124.数的进制转换</a></p><h3 id="补充一个string去除前导零的操作"><a class="markdownIt-Anchor" href="#补充一个string去除前导零的操作"></a> 补充一个:string去除前导零的操作</h3><p>如果给你一个用string从高位到低位存储的大数，怎么去把字符串中多余的前导零去掉。</p><p>主要是<code>0000000000102</code> 和<code>00102</code>去除掉前导零后，是相同的数102。</p><pre class="language-c++" data-language="c++"><code class="language-c++">string trim(string s) &#123;    &#x2F;&#x2F; 由于是前导0， 因此最后一位不判断int i &#x3D; 0;    while (i &lt; s.size() - 1 &amp;&amp; s[i] &#x3D;&#x3D; &#39;0&#39;) &#123;        i ++;    &#125;    return s.substr(i);&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x00-基础算法-(3)-离散化</title>
    <link href="/2021/01/03/Algorithm/Template/20210103-0x00-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-(3)-%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    <url>/2021/01/03/Algorithm/Template/20210103-0x00-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-(3)-%E7%A6%BB%E6%95%A3%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="离散化"><a class="markdownIt-Anchor" href="#离散化"></a> 离散化</h2><p><strong>离散化(discrete)</strong>，就是当我们只关心数据的<strong>相对大小关系</strong>时，用<strong>排名</strong>代替<strong>原数据</strong>进行处理的一种预处理方法。</p><blockquote><p>离散化本质上是一种哈希，它在保持原序列大小关系的前提下把其映射成正整数。</p></blockquote><p>当原数据很大或含有负数、小数时，难以表示为数组下标，一些算法和数据结构（如BIT）无法运作，这时我们就可以考虑将其离散化。</p><h3 id="离散化二分查询"><a class="markdownIt-Anchor" href="#离散化二分查询"></a> 离散化+二分查询</h3><p>离散化的排序可以用二分来实现。</p><pre class="language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; arr;  &#x2F;&#x2F; 待离散数组vector&lt;int&gt; dsc;  &#x2F;&#x2F; 离散后数组&#x2F;&#x2F; 离散化void discrete() &#123;    dsc &#x3D; arr;    sort(dsc.begin(), dsc.end());    dsc.erase(unique(dsc.begin(), dsc.end()), dsc.end());    &#x2F;*    &#x2F;&#x2F; 代替unique的做法    dsc &#x3D; arr;    sort(dsc.begin(), dsc.end());    int j &#x3D; 0;    for (int i &#x3D; 0; i &lt; dsc.size(); i ++) &#123;        if (!i || dsc[i] !&#x3D; dsc[i - 1]) &#123;            dsc[++ j] &#x3D; dsc[i];        &#125;    &#125;    dsc.erase(dsc.begin() + j, dic.end());    *&#x2F;&#125;&#x2F;&#x2F; 二分查询int query (int x)&#123;    int idx &#x3D; lower_bound(dsc.begin(), dsc.end(), x) - dsc.begin(); &#x2F;&#x2F; 下标从1开始    &#x2F;&#x2F; int idx &#x3D; upper_bound(dsc.begin(), dsc.end(), x) - dsc.begin(); &#x2F;&#x2F; 下标从0开始&#125;</code></pre><p>查询是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的</p><h3 id="离散化哈希查询"><a class="markdownIt-Anchor" href="#离散化哈希查询"></a> 离散化+哈希查询</h3><p>查询是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的</p><pre class="language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; arr;    &#x2F;&#x2F; 待离散数组unordered_map&lt;int, int&gt; dsc;    &#x2F;&#x2F; hash表&#x2F;&#x2F; 离散void discrete() &#123;    int idx &#x3D; 0;    for (int i &#x3D; 0 ; i &lt; arr,size(); i ++) &#123;        if (!dsc.count[arr[i]]) &#123;            dsc[arr[i]] &#x3D; ++idx;        &#125;    &#125;&#125;&#x2F;&#x2F; hash查询int query(int x) &#123;    return dsc[x];&#125;</code></pre><p><strong>练习eg:</strong></p><p><a href="https://leetcode.cn/problems/rank-transform-of-an-array/">LeetCode-1331. 数组序号转换</a></p><p><a href="/2023/02/03/Algorithm/Comp/0x00/20230203-算法竞赛进阶指南-034-赶牛入圈/" target="_blank">Acwing-121.赶牛入圈</a></p><hr /><h3 id="离散化树状数组"><a class="markdownIt-Anchor" href="#离散化树状数组"></a> 离散化+树状数组</h3>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x00-基础算法-(2)-二分搜索</title>
    <link href="/2021/01/02/Algorithm/Template/20210102-0x00-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-(2)-%E4%BA%8C%E5%88%86/"/>
    <url>/2021/01/02/Algorithm/Template/20210102-0x00-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-(2)-%E4%BA%8C%E5%88%86/</url>
    
    <content type="html"><![CDATA[<p>二分的本质是划分两个区间，使得满足某种条件处于左left区间，满足另外一种条件的处于right区间。</p><p><strong>有单调性的题目一定可以二分， 可以二分的题目不一定非要有单调性(可以先sort构造出单调性)</strong></p><p>更新l, r的思路: 每次更新区间l,r时，都要保证target在区间内</p><ul><li>因为arr[mid] <code>&lt;</code> / <code>&lt;=</code>target ，所以 target必定在<code>mid ~ r</code>之间，因此更新l；</li><li>因为arr[mid] <code>&gt;</code> / <code>&gt;=</code> target，所以 target必定在<code>l ~ mid</code>之间，因此更新r.</li></ul><h2 id="整数二分"><a class="markdownIt-Anchor" href="#整数二分"></a> 整数二分</h2><h3 id="相错终止模板"><a class="markdownIt-Anchor" href="#相错终止模板"></a> 相错终止模板</h3><blockquote><p>要领：</p><ul><li>l 与 r是数组的左右闭区间 ，即 <code>l = 0</code>且<code>r = arr.size() - 1</code></li><li>while()括号内的条件:  <code>while (l &lt;= r)</code>或<code>while (l != r + 1)</code></li><li>arr[mid]与tar，或者说是check(mid)函数:<ul><li>check(mid)函数该怎么写，并对应更新区间的哪个端点</li></ul></li></ul></blockquote><p><code>..., idx_upper] target [idx_lower, ...</code></p><p>其中 :  idx_upper = l - 1（r）; idx_lower = r + 1（l） 。</p><p>以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mi mathvariant="normal">_</mi><mi>b</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">lower \_ bound</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00444em;vertical-align:-0.31em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span></span></span></span>举例:</p><ul><li>循环结束后一定满足: l == r + 1</li></ul><p><img src="/img/algorithm/0x00/binary_search_lower_bound.png" alt="" /></p><hr /><h4 id="lower_bound模板"><a class="markdownIt-Anchor" href="#lower_bound模板"></a> lower_bound模板</h4><p>lower_bound(以target为下界: <code>target [lower, ...</code>返回<strong>第一个</strong>[插入target后，arr仍然保持有序]的下标</p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;int binary_search1(vector&lt;int&gt; &amp;arr, int target) &#123;    int l &#x3D; 0, r &#x3D; arr.size() - 1;        while (l !&#x3D; r + 1) &#123;        int mid &#x3D; l + (r - l) &#x2F; 2;        if (arr[mid] &gt;&#x3D; target) &#123;            &#x2F;&#x2F; r的右边(不包括r)全大于等于target            r &#x3D; mid - 1;        &#125; else &#123;            &#x2F;&#x2F; l的左边(不包括l)全小于target            l &#x3D; mid + 1;        &#125;    &#125;         return l; &#x2F;&#x2F; return r + 1; &#x2F;&#x2F; lower_bound&#125;</code></pre><h5 id="应用-在数组arr中找到大于等于target的最小值"><a class="markdownIt-Anchor" href="#应用-在数组arr中找到大于等于target的最小值"></a> <strong>应用</strong>: 在数组arr中找到大于等于target的最小值</h5><ul><li>使用binary_search1():</li></ul><pre class="language-c" data-language="c"><code class="language-c">#include &lt;vector&gt;#include &lt;algorithm&gt;   &#x2F;&#x2F; sort()using namespace std;vector&lt;int&gt; arr;sort(arr.begin(), arr.end());int idx_lower &#x3D; binary_search1(arr, target);int lower &#x3D; idx_lower &#x3D;&#x3D; arr.size() ? -1 : arr[idx_lower];</code></pre><ul><li>使用lower_bound()函数达到相同目的:</li></ul><p><a href="https://en.cppreference.com/w/cpp/algorithm/lower_bound">C++: lower_bound函数</a>(Defined in header <code>&lt;algorithm&gt;</code>)</p><p>返回第一个大于等于target的下标迭代器</p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;vector&gt;#include &lt;algorithm&gt;   &#x2F;&#x2F; sort() &amp; lower_bound() &amp; upper_boundusing namespace std;vector&lt;int&gt; arr;sort(arr.begin(), arr.end());auto it_lower &#x3D; lower_bound(arr.begin(), arr.end(), target);&#x2F;&#x2F; int idx_lower &#x3D; it_lower - arr.begin(); &#x2F;&#x2F; 下标可以求但没必要int lower &#x3D; it_lower &#x3D;&#x3D; arr.end() ? -1 : *it_lower;</code></pre><hr /><h4 id="upper_bound模板"><a class="markdownIt-Anchor" href="#upper_bound模板"></a> upper_bound模板</h4><p>upper_bound(以target为上界: <code>... upper] target</code>) 返回<strong>最后一个</strong>[插入target后，arr仍然保持有序]的下标</p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;int binary_search2(vector&lt;int&gt; &amp;arr, int target) &#123;    int l &#x3D; 0, r &#x3D; arr.size() - 1;        while (l !&#x3D; r + 1) &#123;        int mid &#x3D; l + (r - l) &#x2F; 2;        if (arr[mid] &lt;&#x3D; target) &#123;            &#x2F;&#x2F; l的左边(不包括l)全小于等于target            l &#x3D; mid + 1;        &#125; else &#123;            &#x2F;&#x2F; r的右边(不包括r)全大于target            r &#x3D; mid - 1;        &#125;    &#125;         return r; &#x2F;&#x2F; return l - 1;    &#x2F;&#x2F; return l;    &#x2F;&#x2F; upper_bound&#125;</code></pre><h5 id="应用-在数组arr中找到小于等于target的最大值"><a class="markdownIt-Anchor" href="#应用-在数组arr中找到小于等于target的最大值"></a> <strong>应用</strong>: 在数组arr中找到小于等于target的最大值</h5><ul><li>使用binary_search2():</li></ul><pre class="language-c" data-language="c"><code class="language-c">#include &lt;vector&gt;#include &lt;algorithm&gt;   &#x2F;&#x2F; sort()using namespace std;vector&lt;int&gt; arr;sort(arr.begin(),arr.end());int idx_upper &#x3D; binary_search2(arr, target);int upper &#x3D; idx_upper() &#x3D;&#x3D; -1 ? -1 : arr[idx_upper];</code></pre><ul><li>使用upper_bound()函数达到相同目的:</li></ul><p><a href="https://en.cppreference.com/w/cpp/algorithm/upper_bound">C++: upper_bound函数</a>(Defined in header <code>&lt;algorithm&gt;</code>)</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi mathvariant="normal">_</mi><mi>b</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">upper\_bound()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>返回第一个大于target的下标迭代器，那么小于等于就是prev(it)</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;algorithm&gt;   &#x2F;&#x2F; sort() &amp; lower_bound() &amp; upper_boundusing namespace std;vector&lt;int&gt; arr;sort(arr.begin(), arr.end());auto it_upper &#x3D; upper_bound(arr.begin(), arr.end(), target);&#x2F;&#x2F; int idx_upper &#x3D; it_upper - arr.begin(); &#x2F;&#x2F; 下标可以求但没必要int upper &#x3D; it_upper &#x3D;&#x3D; arr.begin() ? -1 : *prev(it_upper);  &#x2F;&#x2F; 注意这里是it_upper的前一个迭代器**练习eg:**</code></pre><p><strong>练习eg:</strong></p><p><a href="https://www.acwing.com/problem/content/791/">Acwing-789.数的范围</a></p><hr /><h3 id="二分答案"><a class="markdownIt-Anchor" href="#二分答案"></a> 二分答案</h3><p>二分答案用于解决诸如&quot;最大值最小、 最小值最大&quot;等<strong>最优化</strong>问题。</p><blockquote><p>思想：由于问题具有单调性，就能把一个<strong>最优化</strong>问题转化为<strong>判断是否可行</strong>问题<br />做法：分析题目答案的值域范围，二分答案值域， 然后check(mid)是否在定义域内(是否可行)，一步步收缩值域两端l、r，最终得到答案(分界点)。</p></blockquote><p>check(mid)实际上就是0-1可行性函数，要在这个函数上二分查找分界点：</p><ul><li><p>至少&lt;=&gt;要使得最大值最小&lt;=&gt;check(mid)可行时收缩右区间&lt;=&gt;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mi mathvariant="normal">_</mi><mi>b</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">lower\_bound</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00444em;vertical-align:-0.31em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span></span></span></span></p></li><li><p>至多&lt;=&gt;要使得最小值最大&lt;=&gt;check(mid)可行时收缩左区间&lt;=&gt;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi mathvariant="normal">_</mi><mi>b</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">upper\_bound</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00444em;vertical-align:-0.31em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span></span></span></span></p></li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;&#x2F;&#x2F; check函数可以用lambda匿名函数写auto check &#x3D; [&amp;](int x) -&gt; bool &#123;    if (&#x2F;* 满足题目条件 *&#x2F;) return true;    else return false;&#125;&#x2F;&#x2F; 假设值域范围为闭区间[left, right]int l &#x3D; left, r &#x3D; right;while (l !&#x3D; r + 1) &#123;    int mid &#x3D; l + (r - l) &#x2F; 2;    if (check(mid)) &#123;        l &#x3D; mid + 1;    &#125;    else &#123;        r &#x3D; mid - 1;    &#125;&#125;return r;</code></pre><p><strong>练习eg:</strong></p><p><a href="https://www.acwing.com/problem/content/104/">Acwing-102.最佳牛围栏</a></p><h2 id="浮点数二分"><a class="markdownIt-Anchor" href="#浮点数二分"></a> 浮点数二分</h2><p>浮点数二分， 由于/号不会有向下取整的问题， 因此不需要考虑边界问题</p><blockquote><p>要领：</p><ul><li>l 与 r同样是数组的左右闭区间</li><li>while()  括号内是 r - l &gt; 题给精度1e5</li><li>只有一种模板，return l 还是 return r都一样</li></ul></blockquote><pre class="language-c" data-language="c"><code class="language-c">#include &lt;iostream&gt;using namespace std;int main() &#123;    double x;    cin &gt;&gt; x;    double l &#x3D; 0, r &#x3D; x;    while (r - l &gt; 1e-6) &#123;        double mid &#x3D; l + (r - l) &#x2F; 2; &#x2F;&#x2F; 浮点数二分 &#x2F;号不会有向下取整的问题        &#x2F;&#x2F; eg:找几何平均数        if (mid * mid &gt;&#x3D; x) &#123;            r &#x3D; mid;        &#125;        else &#123;            l &#x3D; mid;        &#125;    &#125;    return l; &#x2F;&#x2F;return r也可以    &#125;</code></pre><p><strong>练习eg:</strong></p><p><a href="https://www.acwing.com/problem/content/792/">Acwing-790.数的三次方根</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0x00-基础算法-(1)-排序</title>
    <link href="/2021/01/01/Algorithm/Template/20210101-0x00-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-(1)-%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/01/01/Algorithm/Template/20210101-0x00-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-(1)-%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h2><p>排序算法有很多，算法题中最常用就以下几种：</p><h3 id="stdsort"><a class="markdownIt-Anchor" href="#stdsort"></a> std::sort</h3><p>sort()函数(Defined in header <code>&lt;algorithm&gt;</code>)</p><p>这个算法是个缝合怪，它汲取了插入排序、堆排序以及快排的优点，通常可以看作快排。</p><p>一般都结合Lambda表达式，写一个匿名的比较函数使用:</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;algorithm&gt;struct Node &#123;    int value; &#x2F;&#x2F; 价值    int cost;  &#x2F;&#x2F; 花费&#125;vector&lt;Node&gt; arr;&#x2F;&#x2F; 按(value &#x2F; cost)排序std::sort(arr.begin(), arr.end(), [](const Node&amp; a, const Node&amp; b) -&gt; bool &#123;    &#x2F;&#x2F; a.value &#x2F; a.cost &lt; b.value &#x2F; b.cost，把除法改成乘法，避免精度问题    return a.value * b.cost &lt; b.value * a.cost;&#125;);</code></pre><blockquote><p>如果要体现命名规范，<code>a</code> 可以写成 <code>lhs</code>, <code>b</code> 可以写成<code>rhs</code></p></blockquote><h4 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h4><ul><li>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n\log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，通常跟快排的时间复杂度相同。</li></ul><h3 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h3><p>快排基于分治思想</p><p><strong>Step1</strong>: 确定分界点: 一般取中点<code>x = arr[l + (r - l) / 2]</code>(这个分界点会很大程度上决定时间复杂度的好坏)</p><p><strong>Step2</strong>: 调整区间，使得：左区间的数≤分界点 ， 右区间的数≥分界点; ⭐️</p><p><strong>Step3</strong>: 递归处理左右两个区间。</p><h4 id="算法实现"><a class="markdownIt-Anchor" href="#算法实现"></a> 算法实现</h4><p>实现难点主要在于<strong>Step2</strong>双指针实现：</p><ul><li><p>第一个指针最初指向最左端， 第二个指针最初指向最右端。</p></li><li><p>将左右两个指针不断往中间移动移动，<br />当左边的指针第一次遇到&gt;边界值的数，右边的指针第一次遇到&lt;边界值的数，交换指针指向两个元素。<br />直到两指针相遇，完成当轮次快排。</p></li></ul><p>快速排序模板:</p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;void quick_sort(vector&lt;int&gt; &amp;arr, int l, int r) &#123;&#x2F;&#x2F; 递归边界：区间里没有数了或者只有一个数if (l &gt;&#x3D; r) return;    &#x2F;&#x2F; step1int x &#x3D; arr[l + (r - l) &#x2F; 2];        &#x2F;&#x2F; step2int i &#x3D; l - 1, j &#x3D; r + 1;while (i &lt; j) &#123;do i ++; while (arr[i] &lt; x);do j --; while (arr[j] &gt; x);if (i &lt; j) swap(arr[i], arr[j]);&#125;        &#x2F;&#x2F; step3quick_sort(arr, l , j);quick_sort(arr, j + 1, r); &#125;int main() &#123;int n;cin &gt;&gt; n;vector&lt;int&gt;arr(n);for (int i &#x3D; 0; i &lt; n; i ++) scanf(&quot;%d&quot;, &amp;arr[i]);quick_sort(arr, 0, n - 1);for (int i &#x3D; 0; i &lt; n; i ++) printf(&quot;%d &quot;, arr[i]);return 0;&#125;</code></pre><h4 id="复杂度分析-2"><a class="markdownIt-Anchor" href="#复杂度分析-2"></a> 复杂度分析</h4><ul><li><p>时间复杂度：平均<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，最坏时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p></li><li><p>空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(\log n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span> ，递归深度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">{\log n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span></span>，即函数栈开销<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">{\log n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span></span></p></li></ul><p>快速排序是一种不稳定排序：<a href="https://zhuanlan.zhihu.com/p/341201904">https://zhuanlan.zhihu.com/p/341201904</a></p><blockquote><p>下面列一些这个算法模板在写的过程中需要注意的细节问题:</p><p>细节1： step3中必须要同时使用 <code>i - 1, i</code> 或 <code>j , j + 1</code></p><p>当使用<code>i - 1, i</code>， x不能取左边界[l]， 当使用<code>j, j + 1</code>时, x不能取右边界arr[r]<br />否则就会出现边界问题，陷入无限递归死循环</p><p>细节2:    <code>l + (r - l) / 2</code>和 <code>l + (r - l + 1) / 2</code></p><p>C++的/是向下取整的，因此<code>l + (r - l) / 2</code>偏向左边界[l]  =&gt;用<code>j , j + 1</code>;<br />人为+1/2进行四舍五入，因此<code>l + (r - l + 1) / 2</code>偏向右边界[r] =&gt; <code>用 i - 1, i</code></p><p>细节3:   <code>while (arr[i] &lt; x);</code> <code>while (arr[j] &gt; x);</code>就连等于边界值x时都要交换</p><p>细节4:  <code>int i = l - 1, j = r + 1;</code>初始化时i, j在两边界外</p><p>不难发现这个算法有许多边界问题需要注意，因此还是建议背模板的!</p></blockquote><p><strong>练习eg:</strong></p><p><a href="https://www.acwing.com/problem/content/787/">ACwing-785.快速排序</a></p><p>注意灵活应用，如：</p><p><a href="https://leetcode.cn/problems/custom-sort-string/description/">LeetCode-791.自定义字符串排序</a>     把arr[i]/arr[j]与x的比较方式重写一个cmp，可以写出自定义快排</p><p><a href="https://www.luogu.com.cn/problem/P1923">P1923 【深基9.例4】求第 k 小的数</a>  利用快排，可以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>求第k大/第k小的数，而非<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><h3 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h3><p>归并排序基于分治思想</p><p><strong>Step1</strong>: 以中间点为分界点: <code>mid = l + (r - l) / 2</code></p><p><strong>Step2</strong>: 递归排序left, right区间;</p><p><strong>Step3</strong>: 归并，把两个有序子数组合二为一 。⭐️</p><h4 id="算法实现-2"><a class="markdownIt-Anchor" href="#算法实现-2"></a> 算法实现</h4><p>实现难点主要在于<strong>Step3</strong>双指针实现：</p><ul><li><p>第一个指针最初指向第一个有序子数组(从小到大)的开头，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">min_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br />第二个指针最初指向第一个有序子数组(从小到大)的开头，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">min_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>对两个指针指向的数循环比较，将较小的数归并回原数组，然后将其指针右移，继续比较；<br />直到两个指针都指向其数组的末端，完成当轮次归并。</p></li></ul><p>归并排序模板：</p><pre class="language-c" data-language="c"><code class="language-c">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;vector&lt;int&gt; tmp;&#x2F;&#x2F;要开辟一个数组做归并时的临时存储void merge_sort(vector&lt;int&gt; &amp;arr, int l, int r) &#123;    &#x2F;&#x2F; 递归边界if (l &gt;&#x3D; r) return;        &#x2F;&#x2F; step1    int mid &#x3D; l + (r - l) &#x2F; 2;        &#x2F;&#x2F; step2    merge_sort(arr, l, mid);    merge_sort(, mid + 1, r);        &#x2F;&#x2F; step3    int k &#x3D; 0;&#x2F;&#x2F; tmp数组中已经归并的元素数量    int i &#x3D; l, j &#x3D; mid + 1;    while (i &lt;&#x3D; mid &amp;&amp; j &lt;&#x3D; r) &#123;        if (arr[i] &lt;&#x3D; arr[j]) tmp[k ++ ] &#x3D; arr[i ++];        else tmp[k ++] &#x3D; arr[j ++];    &#125;    &#x2F;&#x2F;复制末尾    while (i &lt;&#x3D; mid) tmp[k ++] &#x3D; arr[i ++];    while (j &lt;&#x3D; r) tmp[k ++] &#x3D; arr[j ++];    &#x2F;&#x2F;复制回原数组进行覆盖    for (int i &#x3D; l, j &#x3D; 0; j &lt; k; i ++, j ++) arr[i] &#x3D; tmp[j];&#125;int main() &#123;int n;cin &gt;&gt; n;vector&lt;int&gt;arr(n);    tmp.resize(n);    for (int i &#x3D; 0; i &lt; n; i ++) scanf(&quot;%d&quot;, &amp;arr[i]);merge_sort(arr, 0, n - 1);for (int i &#x3D; 0; i &lt; n; i ++) printf(&quot;%d &quot;, arr[i]);return 0;&#125;</code></pre><h4 id="复杂度分析-3"><a class="markdownIt-Anchor" href="#复杂度分析-3"></a> 复杂度分析</h4><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(nlog_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span> (妥妥的)   空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>（有额外数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>m</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">tmp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span></span></span></span>）稳定</p><p><strong>时间复杂度</strong>: 比较和赋值的时间复杂度都是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，每次递归数组规模减半，即递归深度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">{log_2n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span></span> ，也即总共需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">{log_2n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span></span>次<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>的比较和赋值，因此总时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(nlog_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span> 。</p><p><strong>空间复杂度</strong>: 递归深度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">{log_2n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span></span>，即函数栈开销<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">{log_2n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span></span>，额外数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>m</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">tmp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span></span></span></span>为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，因此总空间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>。</p><blockquote><p>不要忘记了归并排序的tmp数组的define或resize，不然会出现段错误</p></blockquote><p><strong>练习eg:</strong></p><p><a href="https://www.acwing.com/problem/content/789/">ACwing-787.归并排序</a></p><h4 id="应用求逆序对"><a class="markdownIt-Anchor" href="#应用求逆序对"></a> 应用:求逆序对</h4><p>使用归并排序可以在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{O(nlog_2n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span>，求一个长度为n的序列的逆序对的个数。</p><ol><li><p>递归对左右两半排序时，可以把左右两半各自内部的逆序对数作为子问题，在合并时只需要考虑“左边一半里一个较大的数”与“右边一半里一个较小的数”构成逆序对的情形:</p><blockquote><p><code>res = merge_sort(arr, l, mid) + merge_sort(arr, mid + 1, r)</code></p></blockquote></li><li><p>合并两个有序子序列<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>l</mi><mo>∼</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">{arr[l \sim mid]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mclose">]</span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1</mn><mo>∼</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">{arr[mid + 1 \sim r]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span></span>，采用两个指针<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi mathvariant="normal">，</mi><mi>j</mi></mrow><annotation encoding="application/x-tex">i，j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>分别扫描，当出现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">arr[i] &gt; arr[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>时，说明<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>i</mi><mo>∼</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">{arr[i \sim mid]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mclose">]</span></span></span></span></span>中所有元素都与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">arr[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>满足逆序对，数量为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">mid - i + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</p><blockquote><p><code>if(arr[i] &gt; arr[j]) res += mid - i + 1;</code></p></blockquote></li></ol><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;typedef long long LL;const int N &#x3D; 5e5 + 7;int n;vector&lt;int&gt; tmp;LL merge_sort(vector&lt;int&gt; &amp;arr, int l, int r) &#123;    if (l &gt;&#x3D; r) return 0;    int mid &#x3D; l + (r - l) &#x2F; 2;    LL res &#x3D; merge_sort(arr, l, mid) + merge_sort(arr, mid + 1, r);    int k &#x3D; 0;    int i &#x3D; l, j &#x3D; mid + 1;    while (i &lt;&#x3D; mid &amp;&amp; j &lt;&#x3D; r) &#123;        if (arr[i] &lt;&#x3D; arr[j]) tmp[k ++] &#x3D; arr[i ++];        else &#123;            tmp[k ++] &#x3D; arr[j ++];            res +&#x3D; mid - i + 1; &#x2F;&#x2F; 从i到mid全是满足的逆序对        &#125;    &#125;    while (i &lt;&#x3D; mid) tmp[k ++] &#x3D; arr[i ++];    while (j &lt;&#x3D; r) tmp[k ++] &#x3D; arr[j ++];    for (int i &#x3D; l, j &#x3D; 0; j &lt; k; i ++, j ++) arr[i] &#x3D; tmp[j];    return res;&#125;</code></pre><p><strong>练习eg:</strong></p><p><a href="https://www.acwing.com/problem/content/109/">Acwing-107.超快速排序</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Template</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机VMware搭建Hadoop3.2.2</title>
    <link href="/2020/12/01/Programing/20210331-VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHadoop3/"/>
    <url>/2020/12/01/Programing/20210331-VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHadoop3/</url>
    
    <content type="html"><![CDATA[<h2 id="1准备linux主机环境"><a class="markdownIt-Anchor" href="#1准备linux主机环境"></a> 1.准备Linux主机环境</h2><p>VMware:  VMware Workstation 15Pro    <a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">VMware下载地址</a></p><p>CenOS:  CentOS-8.3.2011-x86_64-dvd1.iso    <a href="http://isoredirect.centos.org/centos/8/isos/x86_64/">CenOS下载地址</a></p><p>免密登录 可以帮助解决Permission denied（publickey,gssapi-keyex,gssapi-with-mic)）</p><p><strong>Step1</strong>: 安装Vmware Workstation 15Pro</p><p>​       该步骤不是实验内容核心，具体省略跳过。</p><p><strong>Step2</strong>: 安装3台CenOS8虚拟机</p><p>由于不是实验内容核心，这里只放我所参照的教程:</p><p>Vmware安装CenOS8: <a href="https://www.cnblogs.com/Dear-XiaoLe/articles/12201099.html">https://www.cnblogs.com/Dear-XiaoLe/articles/12201099.html</a></p><p>​       按照教程配置，成功创建3台CenOS虚拟机</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>置顶文章测试</title>
    <link href="/2020/11/27/20191010-Test/"/>
    <url>/2020/11/27/20191010-Test/</url>
    
    <content type="html"><![CDATA[<p>你好，有任何问题欢迎在该置顶文章下留言。</p><p>页内跳转 :<a href="/2023/02/03/Algorithm/Comp/0x00/20230203-%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97-034-%E8%B5%B6%E7%89%9B%E5%85%A5%E5%9C%88/">Acwing121-赶牛入圈</a></p><p>markdown语法不支持新页面打开，要用html标签</p><p>新页面打开：<a href="/2023/02/03/Algorithm/Comp/0x00/20230203-算法竞赛进阶指南-034-赶牛入圈/" target="_blank">Acwing121-赶牛入圈</a></p><p><img src="/img/article/2019/10/10/FeelingGril.jpg" alt="heiehihei" /></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>密码文章测试</title>
    <link href="/2020/11/04/Diary/20210504-%E9%9A%8F%E6%84%8F%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/11/04/Diary/20210504-%E9%9A%8F%E6%84%8F%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4396f566be317e10a2ddeb6e5e3e3b2e6f62aa575437c3c19957bfc521e100f6">10d79030e8222445804370796b90fca137368a758ff1e0290f9ccb56396bdfee34be4d9e4d03c00b6264c747a4adf98d329fedd9bf054613f907fd75d03ee87d7fae7080e8d49bc5ba7bb12120897cbff51eccd0c1f00178af7206883381cff22567c35a6c156f19e5ecd7ea83e73718255980ed0cd7e01e11c62b8f8581a110b72d7d3d270503158fcc56ec6fa47d9e5ca2856f757866abe33ac8cefc0bb3d024e86c13620f6aa22ad10791953f505c6b87f84adccf483cd128127f6c018dde589ba4ef48267aa16d0f793e034d6443f8e8042fe39504e45fc8a86105a6d0087ea516573b8b40406f8aee38d763b945add8341c5a40a9861068e9666d05a699051cc7bebfd7ed9ce59bb07d5c13c1a6ac76b451f866090f3be89351351cc13d8932fd56ca345713e0f418d7830ac0252ce6b17662076513d12037980d3149339d785ccdc3a2b29b95ebaa3d2f58860c47edb480ca09d6901d1539bb0a4f4e9b4a53a44a3fcf98061bf515a4c764c7e568ce6e3ca5e3eca7ec56b451409b6360510933c0b7ce694061629dadb3c5301d0a39bb180f024926979fa682d7da170023e4f7ae6c34faa89e256c8ba20fec21</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git命令推送简记</title>
    <link href="/2020/07/29/Programing/20200729-Git%E5%91%BD%E4%BB%A4%E7%AE%80%E8%AE%B0/"/>
    <url>/2020/07/29/Programing/20200729-Git%E5%91%BD%E4%BB%A4%E7%AE%80%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="git-help"><a class="markdownIt-Anchor" href="#git-help"></a> Git-Help</h1><p>Git命令基础操作=&gt;自用</p><p>这个闯关式Web网页用来学习git挺好的，</p><p><a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></p><p>可以用来解决branch分支恐惧症，rebase恐惧症，conflict冲突恐惧症</p><h2 id="本地推送流程"><a class="markdownIt-Anchor" href="#本地推送流程"></a> 本地推送流程</h2><ul><li><p><strong>Step1</strong>: 右键=&gt; git bash here,弹出git命令行窗口</p></li><li><p><strong>Step2</strong>: 初始化本地仓库</p><pre class="language-bash" data-language="bash"><code class="language-bash">git init</code></pre><blockquote><p>本地默认创建主分支master</p></blockquote></li><li><p><strong>Step3</strong>: 本地仓库链接远程仓库</p><pre class="language-bash" data-language="bash"><code class="language-bash">git remote add [&#96;远程仓库名&#96;] [&#96;远程仓库地址&#96;]</code></pre><blockquote><p>这里的远程仓库名，习惯上一般使用 origin</p></blockquote></li><li><p><strong>Step4</strong>: 查看本地仓库状态</p><pre class="language-bash" data-language="bash"><code class="language-bash">git status  </code></pre><blockquote><p>该命令显示已修改但未同步的文件</p></blockquote></li><li><p><strong>Step5</strong>: 将文件同步添加到暂存区</p><pre class="language-bash" data-language="bash"><code class="language-bash">git add [&#96;状态里的新文件&#96;]  </code></pre><blockquote><p>可用<code>git add -A</code>一键添加</p></blockquote></li><li><p><strong>Step6</strong>: 将文件添加到仓库</p><pre class="language-bash" data-language="bash"><code class="language-bash">git commit -m &#39;[&#96;相关注释文字&#96;]&#39; </code></pre><blockquote><p>注意-m后的 注释文字要用引号</p></blockquote></li><li><p><strong>Step7</strong>: 将本地某分支推送到远程仓库，如果远程没有此分支会自动创建该分支，默认为master</p><pre class="language-bash" data-language="bash"><code class="language-bash">git push origin [&#96;本地分支名&#96;]</code></pre><blockquote><p>origin 为上面提到的默认远程仓库名</p></blockquote></li></ul><hr /><h2 id="tips额外需求"><a class="markdownIt-Anchor" href="#tips额外需求"></a> Tips[额外需求]</h2><h3 id="git-add"><a class="markdownIt-Anchor" href="#git-add"></a> git add</h3><ol><li>一键添加</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">git add -A</code></pre><p><em># Changes to be committed:</em></p><p><em>#   new file:   add-me</em></p><p><em>#   modified:   change-me</em></p><p><em>#   deleted:    delete-me</em></p><blockquote><p>​可以一键添加所有未跟踪(new)、修改(modified)、被删除(deleted)文件，修改本地仓库再次提交很方便</p></blockquote><h3 id="git-push-origin"><a class="markdownIt-Anchor" href="#git-push-origin"></a> git push origin</h3><ol><li>删除远程仓库的指定远程分支</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">git push origin --delete [&#96;远程分支名&#96;]</code></pre><ol start="2"><li>强制推送</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">git push -f </code></pre><blockquote><p>用于解决一些本地和远程始终不能同步[当前git pull无效]的问题，比如</p><p>Updates were rejected because the tip of your current branch is behind  its remote counterpart. Integrate the remote changes(e.g.‘git pull …’) before pushing again.</p></blockquote><h3 id="git-remote"><a class="markdownIt-Anchor" href="#git-remote"></a> git remote</h3><ol><li>查看远程仓库</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">git remote</code></pre><blockquote><p>显示当前已链接的<code>[远程仓库名]</code>  (但不显示远程仓库地址)</p></blockquote><ol start="2"><li>取消指定链接的远程仓库</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">git remote remove [&#96;远程仓库名&#96;]   </code></pre><ol start="3"><li>链接的远程仓库端口不是默认的port:22</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">git remote origin ssh:&#x2F;&#x2F;[&#96;用户名&#96;]@xx.xx.xx.xx:[&#96;端口号&#96;]&#x2F;..&#x2F;..&#x2F;xxx.git</code></pre><blockquote><p>当远程开放的ssh不是port:22时，使用2、3命令重写绑定链接远程仓库</p><p><strong>PS</strong>:一般github的.git开放ssh端口都是port:22，不用管这个;</p><p>git远程推送你自己的云服务器时，需要查看你自己设定的ssh端口,当然一般也是port:22，但可自主修改</p></blockquote><h2 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h2><ul><li><p>Step7推送时: error: src refspec <code>[branchName]</code> does not match any</p><p>修改本地分支名称</p><pre class="language-bash" data-language="bash"><code class="language-bash">git branch -m [oldBranchName] [newBranchName]</code></pre></li></ul><hr />]]></content>
    
    
    <categories>
      
      <category>常用命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
